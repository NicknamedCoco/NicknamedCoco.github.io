<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>资源读取的几种类别</title>
      <link href="2022/06/19/%E8%B5%84%E6%BA%90%E8%AF%BB%E5%8F%96%E7%9A%84%E5%87%A0%E7%A7%8D%E7%B1%BB%E5%88%AB/"/>
      <url>2022/06/19/%E8%B5%84%E6%BA%90%E8%AF%BB%E5%8F%96%E7%9A%84%E5%87%A0%E7%A7%8D%E7%B1%BB%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>资源读取</p></blockquote><p>资源读取是个很广的说法，开发中涉及到的资源读取有哪些？我总结了以下内容。</p><ul><li><a href="#a">前端访问后端的静态资源</a></li><li><a href="#b">开发中操作文件</a></li><li><a href="#c">开发中读取properties，yaml中的数据</a></li></ul><blockquote><p><span id="a">前端访问后端的静态资源</span></p></blockquote><p>前端访问后端的静态资源说的就是springboot的静态资源映射，之前有写过相关的博客，这里复习总结一遍<br>静态资源映射指的是当用户发出请求的时候，服务器端应该按照哪些规则查找静态资源返回给用户。</p><p><strong>下面是springboot中涉及到资源映射的知识点</strong></p><ul><li><p><strong>springboot中默认存放静态资源的位置</strong><br>当前端请求是一个请求静态资源文件时，springboot会在<strong>resources目录下</strong>的这四种目录中查找静态资源文件</p><pre class="language-none"><code class="language-none">&quot;classpath:&#x2F;META‐INF&#x2F;resources&#x2F;&quot;, &quot;classpath:&#x2F;resources&#x2F;&quot;,&quot;classpath:&#x2F;static&#x2F;&quot;,&quot;classpath:&#x2F;public&#x2F;&quot;classpath指的是target下classes目录，因为程序在编译后会将src下的java目录，resources目录中的文件放到target下classes目录中，所以一般在路径中会加上classpath上面4个路径说的是，springboot会在resources目录下的META-INF&#x2F;resources目录resources目录，static目录，public目录中查找静态资源文件</code></pre><p>例如，前端请求：<code>http://localhost:8080/wanyi.png</code>，则springboot会依次查找上面四个目录下有无资源文件</p></li><li><p><strong>自定义请求资源路径，自定义静态资源目录</strong></p><ul><li><p>自定义请求资源路径<br>上面我们可以看到请求静态资源路径是根目录，即<code>/wanyi.png</code>，这样做其实并不太好，<br>开发中常把所有资源文件都映射到某个路径之下，例如如果我是访问静态资源，<br>我需要请求<code>/static/wanyi.png</code>，使得所有静态资源请求都携带一个static路径<br>这就需要我们自定义请求资源路径了</p><p>我们有两种方式实现自定义请求资源路径</p><ol><li><p>直接在springboot配置文件中配置：</p><pre class="language-yam" data-language="yam"><code class="language-yam">spring:  mvc:    static-path-pattern: &#x2F;static&#x2F;**#默认是&#x2F;**</code></pre></li><li><p>实现WebMvcConfigurer接口，重写addResourceHandlers</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">)</span> <span class="token comment">//过滤策略</span>                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/static/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 静态资源路径</span>        <span class="token comment">/*        classpath:/static/,表示去resources目录下static目录下找静态资源文件              你也可以配置.addResourceLocations("file:"+"d:/voice/");              即收到请求后去本地相应目录下去寻找资源文件              这个路径还可以配置到springboot配置文件中，不必写死          */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*这里配置的是：请求如果带有/static/**路径，则去resources目录下static目录下查找仔细想想，我这里还可以去改成resources目录下其他文件夹中查找静态资源文件*/</span></code></pre></li></ol></li><li><p>自定义静态资源目录<br>其实上面已经写了，如果我们想把静态资源放其他文件夹，不想把静态资源文件放在上面四个目录<br>你可以配置springboot配置文件如下：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 自定义静态资源访问路径，可以指定多个，之间用逗号隔开</span><span class="token attr-name">spring.resources.static-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/myabc/,classpath:/myhhh</span></code></pre><p>也可以通过java代码方式实现，同上。</p></li></ul></li><li><p><strong>默认访问首页和图标文件</strong><br>默认情况下，我们只需将index.html首页，favicon.ico网站图标，放在四个静态资源目录下就行<br>注意，文件名不能改成其他的，不然springboot找不到</p></li></ul><blockquote><p><span id="b">开发中操作文件</span></p></blockquote><p>开发中操作文件指的就是使用各种文件工具类读取或写出文件数据，IO这部分内容其实并不难<br>主要是太多了，一段时间不用就基本忘的差不多了，所以我觉得还是用用hutools中FileUtil工具类比较简单点<br>这个hutools中封装了很多其他的工具类，我感觉如果能把这么多工具类的使用学会，开发能力都能提升很大<br>废话不多说，来看看使用hutools中FileUtil工具类的使用吧</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    案例中参数使用的是本地文件路径，你也可以使用URL，或者file对象作为方法参数    */</span>    <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\Coco\\Desktop\\项目内容.txt"</span><span class="token punctuation">;</span>    <span class="token comment">//读取本地文件，返回字符串</span>    <span class="token class-name">String</span> fileStr <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> fileStr2 <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">readUtf8String</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取本地文件，返回字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取本地文件，按行的方式读取，返回字符串数组</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings2 <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">readUtf8Lines</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取本地文件，返回字符缓冲输入输出流</span>    <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">getUtf8Reader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"万一爱自由"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取本地文件，返回字节缓冲输入输出流</span>    <span class="token class-name">BufferedInputStream</span> bufferedInputStream <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedOutputStream</span> bufferedOutputStream <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><span id="c">开发中读取properties，yaml中的数据</span></p></blockquote><p>这部分我暂且也认为是资源读取的操作吧，我们在读取配置文件中数据时可能有很多种方式<br>下面是我总结的内容：</p><ul><li><p><strong>使用ResourceBundle工具类</strong><br>这是java中自带的读取资源文件中数据的工具类，不过它只能读取properties结尾的资源文件<br>而不能读取yaml结尾的资源文件数据，基本使用如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//jdbc.properties资源文件，放在resource资源目录下</span>mysql_driver<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span><span class="token class-name">Driver</span>my_url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>wechat<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>GMT<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>my_user<span class="token operator">=</span>rootmy_password<span class="token operator">=</span><span class="token number">123765</span><span class="token comment">//资源读取</span><span class="token class-name">ResourceBundle</span> application <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"mysql_driver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"my_url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*注意：这里不仅可以读取独立的资源文件，即resources目录下的jdbc.properties还可以读取springboot配置文件中的数据，即application.properties*/</span></code></pre></li><li><p><strong>使用类加载方式读取资源文件</strong><br>这种方式可以将配置文件(不论是yaml，还是properties)文件转成流的形式读取出来<br>不过这种方式读取properties方式还可以，读取yaml方式就有点麻烦了，下面是案例：</p><ul><li><p>读取properties文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> stream <span class="token operator">=</span> <span class="token class-name">ResourceReadTestApplicationTests</span><span class="token punctuation">.</span><span class="token keyword">class</span>            <span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"application.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"server.address"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>读取yaml文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> yamlMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> stream <span class="token operator">=</span> <span class="token class-name">ResourceReadTestApplicationTests</span><span class="token punctuation">.</span><span class="token keyword">class</span>            <span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"application.yaml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>yamlMap <span class="token operator">=</span> <span class="token class-name">YamlUtil</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span>yamlMap<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>yamlMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"spring"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> serverKey <span class="token operator">=</span> yamlMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>serverKey<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Yaml是hutools的工具类，你也可以使用Yaml对象代替，即Yaml yaml = new Yaml();输出结果&#123;application=&#123;name=resource-read&#125;, mvc=&#123;static-path-pattern=/static/**, format=&#123;date=dd/MM/yyyy&#125;&#125;&#125;8080*/</span></code></pre><p>可以看到，这种方式读取yaml文件还是非常不好的，springboot中一般使用注解方式，这个等下再说</p></li></ul></li><li><p><strong>原始的spring读取properties配置文件</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">)</span>druid资源文件，放在resource资源目录下    jdbc<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>restofmvc<span class="token operator">?</span>        serverTimezone<span class="token operator">=</span>GMT<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>    jdbc<span class="token punctuation">.</span>driver<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span><span class="token class-name">Driver</span>    jdbc<span class="token punctuation">.</span>username<span class="token operator">=</span>root    jdbc<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">123765</span><span class="token number">2</span><span class="token punctuation">)</span>数据源的配置使用    <span class="token number">2.1</span><span class="token punctuation">)</span>开启context名称空间，并开启引用资源文件的标签        <span class="token operator">&lt;</span>context<span class="token operator">:</span>property<span class="token operator">-</span>placeholder location<span class="token operator">=</span><span class="token string">"classpath:druid.properties"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>property<span class="token operator">-</span>placeholder<span class="token operator">></span>    <span class="token number">2.2</span><span class="token punctuation">)</span>配置数据源        <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"$&#123;jdbc.url&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"$&#123;jdbc.driver&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"$&#123;jdbc.username&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"$&#123;jdbc.password&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre></li><li><p><strong>SpringBoot注解读取资源配置文件</strong><br>这是开发中最常用的方式，下面来看下案例：</p><ul><li><p>首先在application.yaml中配置数据</p><pre class="language-java" data-language="java"><code class="language-java">keyi<span class="token operator">:</span>  name<span class="token operator">:</span> 万一  age<span class="token operator">:</span> <span class="token number">23</span></code></pre></li><li><p>创建相应的实体类，使用注解将数据注入</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"keyi"</span><span class="token punctuation">)</span> <span class="token comment">//可以读取springboot配置文件的yaml和properties</span><span class="token annotation punctuation">@Component</span>                <span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>使用@Autowired或Resource注解自动导入容器中对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">ResourceReadTestApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">User</span> user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出：User(name=万一, age=23)</span></code></pre></li></ul><p>如果你读取的是独立的配置文件数据，而不是SpringBoot的配置文件中数据，<br>可以使用@PropertySource注解指定外部配置文件，<strong>当然该注解只能读取properties文件读取不了yaml文件</strong></p><ul><li><p>resources目录下创建jdbc.properties文件</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">db.mysql_driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">db.my_url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/wechat?</span><span class="token attr-name">db.serverTimezone</span><span class="token punctuation">=</span><span class="token attr-value">GMT&amp;useSSL=false&amp;characterEncoding=utf-8</span><span class="token attr-name">db.my_user</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">db.my_password</span><span class="token punctuation">=</span><span class="token attr-value">123765</span></code></pre></li><li><p>创建对象绑定数据，额外使用@PropertySource注解指定外部配置文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"db"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbc.properties"</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DBData</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mysql_driver<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> my_url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverTimezone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> my_user<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> my_password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>使用@Autowired或Resource注解自动导入容器中对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">ResourceReadTestApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DBData</span> dbData<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dbData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>总结：通过@ConfigurationProperties(“xxx”)注解可以绑定项目配置文件中的数据，<br>即application.yaml，application.properties文件中数据都可以，而如果需要绑定独立文件中的数据<br>如jdbc.properties，那么就需要使用@PropertySource注解指定外部文件的名称，这种读取外部文件方式<br>只能读取properties不能读取yaml文件中数据。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ResourceBundle </tag>
            
            <tag> Hutools </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven问题及EasyCode插件的使用</title>
      <link href="2022/06/13/Maven%E9%97%AE%E9%A2%98%E5%8F%8AEasyCode%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2022/06/13/Maven%E9%97%AE%E9%A2%98%E5%8F%8AEasyCode%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>来杭州一星期了，工作还是没有落实下来，不得不说，不太好找，原因是多方面的<br>我个人缺少项目经验是一方面，另一方面是疫情期间行业也在缩招，加上现在不是招聘季，所以找工作比较难<br>我个人心态比较平缓，找不到再去别的城市看看，反正大学我没有浪费时间，而且未来我想做一个自己的博客网站<br>存放个人照片，音乐，电影，书籍等等，所以一切的付出都不会浪费掉，找不到工作并非是我没有价值，<br>借用寒窑赋的一句话，时也，运也，命也。</p><p>当然，在找工作的时候我也不能只盯着招聘app看，之前一直听说过mybatis的逆向生成代码但一直没有试验过<br>通过在网上查阅了一些相关的文章，我发现一个叫EasyCode的idea插件非常不错，随后使用了一下，<br>感觉非常方便，与原始的mybatis自动生成代码需要配置xml文件相比，该插件只需图形化操作短短一分钟即可<br>完成代码的自动生成，非常的强。</p><p>本篇文章内容如下：</p><ul><li><p><a href="#a">创建新项目时，IDEA中所必须的设置</a></p></li><li><p><a href="#b">Maven问题</a></p></li><li><p><a href="#c">EasyCode插件的使用</a></p></li></ul><blockquote><p><span id="a">创建新项目时，IDEA中所必须的设置</span></p></blockquote><p>当你使用Spring Initializer创建一个项目时，即创建一个SpringBoot项目，<br><strong>需要设置项目字符编码和标记文件目录</strong></p><ul><li>设置项目字符编码<br>IDEA中有多处设置字符编码的地方<ul><li>打开项目设置—-&gt;编辑器—-&gt;文件编码，将这里面编码全部改成UTF-8<img src="https://github.com/NicknamedCoco/cdn/raw/master/blog/easycode/1.png" style="zoom: 80%;" / loading="lazy"></li><li>打开项目设置—-&gt;构建，执行，部署—-&gt;编译器—-&gt;Java编译器，将模块中目标字节码改成1.8<img src="https://github.com/NicknamedCoco/cdn/raw/master/blog/easycode/2.png" style="zoom: 80%;" / loading="lazy"></li><li>打开项目结构(File Constructor)—-&gt;模块，设置模块的语言级别为8<img src="https://github.com/NicknamedCoco/cdn/raw/master/blog/easycode/3.png" style="zoom: 80%;" / loading="lazy"></li></ul></li><li>标记文件目录<br>找到main目录中的java目录，右键找到标记目录为，选择源根，resources目录设置为资源根</li></ul><blockquote><p><span id="b">Maven问题</span></p></blockquote><p>当你发现，IDEA中maven上只有生命周期，而没有具体依赖显示时，<br><img src="https://github.com/NicknamedCoco/cdn/raw/master/blog/easycode/4.png" style="zoom:50%;" / loading="lazy"><br>当你发现，执行maven生命周期中的install命令时报如下错误时，<br><img src="https://github.com/NicknamedCoco/cdn/raw/master/blog/easycode/5.png" loading="lazy"><br>你百度后发现是maven版本太高，于是你设置idea中maven版本，但发现IDEA还是设置为自己的maven时<br>当你发现，项目中很多注解，类都显示无法识别该符号，说明依赖没有引入，可你偏偏引入了依赖啊<br><strong>解决办法如下：</strong></p><ul><li><p>首先删除掉你项目中的.mvn结尾的目录，然后刷新一下maven导入，即maven窗口左上角刷新按钮<br>然后关闭项目，再打开该项目</p></li><li><p>对于项目代码中找不到注解，找不到类，或者无法识别某个符号的问题，需要引入以下依赖：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ul><p>相关文章</p><ul><li><a href="https://blog.csdn.net/qq_29283307/article/details/104511347">springboot报无法访无法访问Page类</a></li><li><a href="https://blog.csdn.net/Gedulding/article/details/125246165">maven爆ComponentLookupException异常</a></li></ul><blockquote><p><span id="c">EasyCode插件的使用</span></p></blockquote><p>对比过mybatis-generator插件或者mybatisPlus的代码生成插件，我觉得EasyCode插件非常简单，非常不错<br>下面是具体的使用步骤</p><ul><li>安装EasyCode插件，即EasyCode-MybatisCodeHelper</li><li>IDEA中配置好数据库</li><li>选择一个或者多个数据表，右键选择Generate Code选项，填好Package路径<br>这个路径就是java目录下的包路径，下面是我的配置选项：<img src="https://github.com/NicknamedCoco/cdn/raw/master/blog/easycode/6.png" style="zoom: 80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/master/blog/easycode/7.png" style="zoom: 80%;" / loading="lazy"></li><li>最后直接确定即可生成代码，需要注意的是，在mapper的xml文件中可能会存在一些问题<br>有可能xml中某个select标签没有闭合标签，这估计是bug没修改<img src="https://github.com/NicknamedCoco/cdn/raw/master/blog/easycode/8.png" style="zoom:80%;" / loading="lazy"></li><li>如果有其他问题，请保证在代码生成之前，你项目的文件编码，标记目录，maven都没问题。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> EasyCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射和代理模式</title>
      <link href="2022/06/05/%E5%8F%8D%E5%B0%84%E5%92%8C%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>2022/06/05/%E5%8F%8D%E5%B0%84%E5%92%8C%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>昨天来的杭州，暂时住的青旅，毕竟工作还没稳定下来，也不方便租房。。。<br>今年得赶紧行动起来了，还有很多东西都不会，我还是太差了，继续学习吧~</p><p>回归正题，之前写过反射和代理，今天重新复习了一下这方面的东西，并把他们整理到一起<br>之前的几篇就删除吧，温故而知新，可以为师矣~</p><p>下面内容借鉴<a href="https://javaguide.cn/java/basis/reflection.html">JavaGuide中讲解</a>，也可以直接去那里查看，比我写的好一万倍~</p><blockquote><p>反射</p></blockquote><p>反射使得我们拥有可以在类的运行时期执行类的方法和属性的能力</p><p>动态代理模式的实现也依赖反射机制，一般和注解配合使用，例如@Component，@Value都是使用动态代理模式</p><p>学习反射操作就是学会使用Class对象的API？不知道正不正确，我简单的这么理解</p><p><strong>那么什么是Class对象呢？</strong><br>Java中万物都是对象，对象是类的具体，类是对象的概述，例如水果与苹果，蔬菜与白菜 and so on<br>那么我们编写的类当然也可以是对象，既然我们编写的一个个类也可以看做是一个对象，<br>那么这些对象的类是谁呢？Class类！我们可以通过这个类创建Class对象，这个对象包含了我们编写的类的信息</p><p>换句话说，我们编写的一个个类，也可以作为一个对象呈现出来，即Class对象，这个对象包含类的很多方法和属性</p><p><strong>获取Class对象的方式有以下几种：</strong></p><ul><li><p>知道具体类的情况下可以使用：<br><code>Class alunbarClass = TargetObject.class;</code><br>但是我们一般是不知道具体类的，基本都是通过遍历包下面的类来获取 Class 对象，通过此方式获取 Class 对象不会进行初始化</p></li><li><p>通过 <code>Class.forName()</code>传入类的全路径获取：<br><code>Class alunbarClass1 = Class.forName(&quot;cn.javaguide.TargetObject&quot;);</code></p></li><li><p>通过对象实例<code>instance.getClass()</code>获取：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">TargetObject</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> alunbarClass2 <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>通过类加载器<code>xxxClassLoader.loadClass()</code>传入类路径获取:<br><code>Class clazz = ClassLoader.loadClass(&quot;cn.javaguide.TargetObject&quot;);</code><br>通过类加载器获取 Class 对象不会进行初始化，意味着不进行包括初始化等一系列步骤，静态代码块和静态对象不会得到执行</p></li></ul><p><strong>获取构造器对象及使用</strong></p><pre class="language-java" data-language="java"><code class="language-java">获取构造器对象的几种方法：aClass1<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   获取单个的公共的构造器对象aClass1<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  获取所有私有公有的构造器集合构造器对象使用<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> instance <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"胡歌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>获取字段和方法对象及其使用</strong></p><pre class="language-java" data-language="java"><code class="language-java">获取字段和方法对象的几种方法aClass1<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     获取一个公有的字段aClass1<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   获取多个公有私有字段aClass1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aClass1<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>字段的使用<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"胡歌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> age <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>age<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>age<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>方法的使用<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> student1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"胡歌"</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> show <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>反射的练习</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//往ArrayList&lt;Integer>集合中添加字符串数据</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayList</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> add <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>add<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>add<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span><span class="token string">"胡歌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>add<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span><span class="token string">"张译"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>代理模式</p></blockquote><p>代理这个词用的很广泛，例如我们都知道nginx是反向代理服务器，它代理的是后端Tomcat服务器，<br>nginx代替Tomcat接收转发请求，帮助服务器一方做一些事就是反向代理，而我们熟知的VPN则是正向代理<br>VPN就是接收墙外数据再转发给我们，帮助客户端做一些事就是正向代理。</p><p>总之，代理的意思就是帮助被代理方做一些增强，使之拥有一些能力<br>而代理模式也是同样的意思，对被代理类做一些增强，例如在被代理类方法执行的前后做一些操作等等。</p><p>代理模式有两种实现，一是静态代理，二是动态代理，下面具体看看吧</p><ul><li><p><strong>静态代理</strong><br>静态代理是，接口的实现类(被代理类)并不直接创建对象调用实现方法，而是将实现类对象注入到另一个实现类(代理类)中<br>由代理类去执行实现类中的实现方法，代理类还可以在执行实现方法前后加入自己的方法，使得程序更加健壮。<br>Thread就是典型的代理类，Thread类也是实现了Runnable接口，当我们自定义类实现Runnable接口后，<br>将自定义类对象通过Thread构造方法交给Thread后，由Thread类代替我们去执行我们的实现方法，即调用start方法。</p><p><strong>静态代理实现步骤:</strong></p><ul><li>定义一个接口及其实现类；</li><li>创建一个代理类同样实现这个接口</li><li>将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</li></ul><p><strong>静态代理案例</strong></p><ul><li><p>定义发送短信的接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SmsService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>实现发送短信的接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SmsService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"send message:"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>创建代理类并同样实现发送短信的接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsProxy</span> <span class="token keyword">implements</span> <span class="token class-name">SmsService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SmsService</span> smsService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SmsProxy</span><span class="token punctuation">(</span><span class="token class-name">SmsService</span> smsService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>smsService <span class="token operator">=</span> smsService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//调用方法之前，我们可以添加自己的操作</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before method send()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        smsService<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用方法之后，我们同样可以添加自己的操作</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after method send()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>实际使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SmsService</span> smsService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmsServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SmsProxy</span> smsProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmsProxy</span><span class="token punctuation">(</span>smsService<span class="token punctuation">)</span><span class="token punctuation">;</span>        smsProxy<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>运行上述代码之后，控制台打印出：</p><pre class="language-java" data-language="java"><code class="language-java">before method <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>send message<span class="token operator">:</span>javaafter method <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>可以输出结果看出，我们已经增加了 <code>SmsServiceImpl</code> 的<code>send()</code>方法</p></li></ul><p><strong>静态代理的缺陷</strong></p><ul><li><strong>从实现和应用角度来说</strong>，静态代理非常不灵活，比如接口新增方法，目标对象和代理对象都要进行更改，<br>而且非常麻烦(需要对每个目标类都单独写一个代理类)，实际应用场景非常少。</li><li><strong>从JVM 角度来说</strong>，静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。<br>而动态代理就不会产生新的class文件</li></ul></li><li><p><strong>动态代理</strong><br>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，<br>并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。</p><p>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p><p>动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。</p><ul><li><p><strong>JDK动态代理</strong><br><strong>在JDK动态代理机制中InvocationHandler接口和Proxy类是核心。</strong><br>Proxy类中使用频率最高的方法是：newProxyInstance()，这个方法主要用来生成一个代理对象。</p><p>JDK动态使用步骤</p><ol><li>定义一个接口及其实现类，该实现类作为被增强类。</li><li>自定义类实现InvocationHandler接口并重写invoke方法，该自定义类作为代理类，<br>在invoke方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑。</li><li>通过Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)方法<br>创建代理对象。</li></ol><p>案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">)</span><span class="token class-name">UserService</span>接口    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> <span class="token function">saying</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name">UserServiceImpl</span>，被代理类，需要增强的类    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saying</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被增强类："</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token class-name">JDKProxy</span>，代理类，自定义类实现<span class="token class-name">InvocationHandler</span>接口，重写invoke方法    当代理对象执行方法时，会执行invoke方法。    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">JDKProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*            invoke()方法有下面三个参数：            proxy: 动态生成的代理类            method: 与代理类对象调用的方法相对应            args: 当前method方法的参数            增强真实对象方法可以增强三处：                增强方法体：真实对象方法执行前后执行代理对象的方法，即对真实对象方法体的增强                增强参数：对真实对象方法参数进行修改，可以达到增强真实对象方法的参数                增强返回值：对真实对象方法返回值进行修改，将返回值类型该为其他类型，                          可以达到增强真实对象方法的返回值        */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法运行前******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> resultValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法运行后******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> resultValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token class-name">MyProxyFactory</span>，静态代理工厂，用于创建代理对象    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxyFactory</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*            静态工厂方式创建代理对象            newProxyInstance方法一共有3个参数：                第一个参数：target.getClass().getClassLoader()，被代理类的类加载器，                          用于加载代理对象。                第二个参数：target.getClass().getInterfaces()，被代理类实现的一些接口。                第三个参数：new JDKProxy(target)，实现了InvocationHandler接口的对象。                第三个参数也可以使用匿名内部类的方式实现。        */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">JDKProxy</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token class-name">Test</span>测试类    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">UserService</span> proxyClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span><span class="token class-name">MyProxyFactory</span><span class="token punctuation">.</span>              <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            proxyClass<span class="token punctuation">.</span><span class="token function">saying</span><span class="token punctuation">(</span><span class="token string">"fuck"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token number">6</span><span class="token punctuation">)</span>测试结果    目标方法运行前<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>    被增强类：fuck    目标方法运行后<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span></code></pre><p><strong>通过代理工厂获得代理对象后，当我们代理对象调用方法时，实际会调用到实现InvocationHandler接口的类的invoke()方法。</strong><br><strong>在本案例中就是会调用JDKProxy类的invoke方法。</strong></p></li><li><p><strong>CGLIB动态代理</strong><br>JDK动态代理有一个最致命的问题是其只能代理实现了接口的类。<br>为了解决这个问题，我们可以用CGLIB动态代理机制来避免。</p><blockquote><p>CGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码<br>进行修改和动态生成。CGLIB 通过继承被代理类的方式实现代理。很多知名的开源框架都使用到了CGLIB，<br>例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，<br>否则采用 CGLIB 动态代理。</p></blockquote><p><strong>在CGLIB动态代理机制中MethodInterceptor接口和Enhancer类是核心。</strong><br>案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">)</span>因为CGLIB是一个开源项目，所以需要导入cglib依赖    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>cglib<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>cglib<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">3.3</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token number">2</span><span class="token punctuation">)</span>还是使用JDK代理中的<span class="token class-name">UserServiceImpl</span>类作为被增强类    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saying</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被增强类："</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token number">3</span><span class="token punctuation">)</span>自定义类实现<span class="token class-name">MethodInterceptor</span>，该自定义类作为代理类，实现intercept方法，类似<span class="token class-name">InvocationHandler</span>接口的invoke方法    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * @param o           被代理的对象（需要增强的对象）         * @param method      被拦截的方法（需要增强的方法）         * @param objects     方法入参         * @param methodProxy 用于调用原始方法         */</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span>             <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib代理******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> resultValue <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib代理******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> resultValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token class-name">MyProxyFactory</span>，静态代理工厂，用于创建代理对象    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxyFactory</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//创建动态代理增强类</span>            <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置类加载器</span>            enhancer<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置被代理类</span>            enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置方法拦截器</span>            enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建代理类</span>            <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token number">5</span><span class="token punctuation">)</span>测试类    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">UserService</span> proxyClass <span class="token operator">=</span>             <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span><span class="token class-name">MyProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">UserServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            proxyClass<span class="token punctuation">.</span><span class="token function">saying</span><span class="token punctuation">(</span><span class="token string">"fuck"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token number">6</span><span class="token punctuation">)</span>测试结果    cglib代理<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>    被增强类：fuck    cglib代理<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span></code></pre></li></ul><p><strong>JDK动态代理和CGLIB动态代理对比</strong></p><ol><li>JDK动态代理只能只能代理实现了接口的类或者直接代理接口，而CGLIB可以代理未实现任何接口的类。<br>另外，CGLIB动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为<br>final类型的类和方法。    </li><li>就二者的效率来说，大部分情况都是JDK动态代理更优秀，随着JDK版本的升级，这个优势更加明显。</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 反射 </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依微服务之后端知识点</title>
      <link href="2022/05/15/%E8%8B%A5%E4%BE%9D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2022/05/15/%E8%8B%A5%E4%BE%9D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>这是最后一篇若依微服务博客吧，坦白说若依微服务中的东西有很多看不太懂，比如webflux，SpringSecurity<br>只能说整个项目看懂大概一半吧，项目细节很多，搞定完这篇就要准备找工作了，也不知道好不好找<br>如果让我客观评价自己，我觉得自己刚入门吧，虽然学习了很多东西，但很多技术不使用就容易忘记，<br>前后端，微服务，docker部署都了解一点，但我最在意的还是自己基础不行，计网，操作系统虽然也学过，<br>但学的不完整，效果不好，还有数据结构和算法吧，这才是程序员最重要的内容，当然也是最难提升的，<br>今年的目标是重拾基础，看完计网，操作系统，jvm，spring网课，Spring原理值得关注，之前感觉只学习点皮毛吧</p><p>回归正题，下面是本篇博客目录</p><ul><li><a href="#a">Springboot使用七牛云</a></li><li><a href="#b">Springboot使用pagehelper物理分页插件</a></li><li><a href="#c">JJWT的使用</a></li><li><a href="#d">若依微服务中登录认证流程</a></li><li><a href="#e">Gateway中自定义局部过滤器</a></li><li><a href="#f">feign自定义拦截器</a></li></ul><blockquote><p><span id="a">Springboot使用七牛云</span></p></blockquote><p>看了一下七牛云的JavaSDK，对七牛云的使用有了大致的了解，花了点时间写了一个七牛云工具类<br>直接放在github上吧，这里篇幅不想太大了，看到七牛云的安全机制还是挺有意思的，等下记录一下</p><ul><li><p>七牛云的基本使用</p><ul><li><p>导入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.qiniu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>qiniu-java-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>[7.2.0, 7.2.99]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>项目配置文件中：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">oss</span><span class="token punctuation">:</span>  <span class="token key atrule">qiniu</span><span class="token punctuation">:</span>    <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    <span class="token comment"># 空间名称</span>    <span class="token key atrule">bucket</span><span class="token punctuation">:</span> 空间名称    <span class="token comment"># 访问域名</span>    <span class="token key atrule">domain</span><span class="token punctuation">:</span> 自定义源站域名或者自定义 CDN 加速域名或者七牛云的测试域名</code></pre></li><li><p>编写七牛云配置类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"oss.qiniu"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QiniuProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secretKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> bucket<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> domain<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> expireInSeconds<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>编写七牛云工具类<br>工具类篇幅过大，已放<a href="https://github.com/NicknamedCoco/cdn/raw/912ce63507976c5ad6db94fff750063eb3cee6c1/blog/ruoyi/backendKnowledge/QiNiuUtilPlus.java">github</a></p></li></ul></li><li><p>七牛云的安全机制学习</p><p>通过对七牛云的了解，我们知道，上传，下载，管理文件时都需要凭证，<br>凭证是根据accessKey，secretKey生成的一串字符串，凭证是七牛云存储用于验证请求合法性的机制。<br>那么这个验证请求合法性的机制就值得我们学习了，先来看看上传凭证的生成过程，<a href="https://developer.qiniu.com/kodo/1208/upload-token">上传凭证</a><br>了解完它的生成过程，我们知道，七牛云的服务端会怎么验证这个凭证字符串？</p><p>七牛云服务器端接收到这个字符串，解析出accessKey，然后找到对应的secretKey，secretKey是七牛云<br>签发的，所以当然能找到，然后将凭证字符串中的encodedSign，进行base64解码再使用secretKey解密<br>得到上传策略的base64编码数据，这个数据与凭证字符串中携带的数据相对比，如果一致，则说明用户拥有<br>请求的合法性，反之则用户没有请求合法性，这就是验证请求合法性的机制</p><p>这个验证机制值得我们学习，以后在设计验证用户请求时也可以使用这种方式。</p></li></ul><blockquote><p><span id="b">Springboot使用pagehelper物理分页插件</span></p></blockquote><p>本来还想写一写，一看别人写的东西简直吊打我，没动力写下去了，有些东西不必重复造轮子吧<br>很多东西学了就忘，重要的是信息收集和整合能力吧<del>(好吧，我承认我懒)</del>。</p><ul><li><p>基本使用</p><ul><li><p>引入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 分页配置</span><span class="token key atrule">pagehelper</span><span class="token punctuation">:</span>  <span class="token key atrule">helper-dialect</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">reasonable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">support-methods-arguments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">params</span><span class="token punctuation">:</span> count=countSql</code></pre></li><li><p>实际使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> <span class="token function">ajaxBlog</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> pageNum<span class="token punctuation">,</span><span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogList <span class="token operator">=</span> blogMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BlogExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>blogList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pageInfo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>文章推荐</p><ul><li><a href="https://blog.csdn.net/csdn_huzeliang/article/details/79350425">【PageHelper】SpringBoot之分页插件PageHelper的使用</a></li><li><a href="https://www.jianshu.com/p/50fcd7f127f0">Mybatis分页插件PageHelper</a></li><li><a href="https://juejin.cn/post/7086854293080260639">Spring Boot 集成PageHelper你用对了吗</a></li><li><a href="https://juejin.cn/post/7092443025078484999">PageHelper 实现原理</a></li></ul></li></ul><blockquote><p><span id="c">JJWT的使用</span></p></blockquote><ul><li><p>引入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写资源配置类，或者和若依项目中写死</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenConstants</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 令牌自定义标识     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AUTHENTICATION <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 令牌前缀     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PREFIX <span class="token operator">=</span> <span class="token string">"Bearer "</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 令牌秘钥     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> SECRET <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>JwtUtils工具类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Jwt工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> secret <span class="token operator">=</span> <span class="token class-name">TokenConstants</span><span class="token punctuation">.</span>SECRET<span class="token punctuation">;</span>    <span class="token comment">/**     * 从数据声明生成令牌     *     * @param claims 数据声明     * @return 令牌     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> claims<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 从令牌中获取数据声明     *     * @param token 令牌     * @return 数据声明     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Claims</span> <span class="token function">parseToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据令牌获取用户标识     *      * @param token 令牌     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUserKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> <span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据令牌获取用户标识     *      * @param claims 身份信息     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUserKey</span><span class="token punctuation">(</span><span class="token class-name">Claims</span> claims<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> <span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据令牌获取用户ID     *      * @param token 令牌     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> <span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>DETAILS_USER_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据身份信息获取用户ID     *      * @param claims 身份信息     * @return 用户ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token class-name">Claims</span> claims<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> <span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>DETAILS_USER_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据令牌获取用户名     *      * @param token 令牌     * @return 用户名     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> <span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>DETAILS_USERNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据身份信息获取用户名     *      * @param claims 身份信息     * @return 用户名     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token class-name">Claims</span> claims<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> <span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>DETAILS_USERNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据身份信息获取键值     *      * @param claims 身份信息     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Claims</span> claims<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>工具类中需要的类已放入github</p><ul><li><a href="https://github.com/NicknamedCoco/cdn/raw/master/blog/ruoyi/backendKnowledge/Convert.java">Convert.java</a></li><li><a href="https://github.com/NicknamedCoco/cdn/raw/master/blog/ruoyi/backendKnowledge/SecurityConstants.java">SecurityConstants.java</a></li><li><a href="https://github.com/NicknamedCoco/cdn/raw/master/blog/ruoyi/backendKnowledge/TokenConstants.java">TokenConstants.java</a></li></ul></li><li><p>文章推荐</p><ul><li><a href="https://blog.csdn.net/sinat_32501475/article/details/124553285">SpringBoot整合SpringSecurity实现JWT认证</a></li><li><a href="https://www.panziye.com/java/1349.html">SpringBoot整合JJWT实现Token登录认证</a></li><li><a href="https://www.jianshu.com/p/b5e63a859a30">JJWT原理及使用</a></li></ul></li></ul><blockquote><p><span id="d">若依微服务中登录认证流程</span></p></blockquote><ul><li><p><strong>若依微服务中登录验证码实现</strong></p><p>若依使用的是谷歌的验证码库kaptcha，用户请求验证码/code，<br>使用kaptcha生成数据，例如<code>3+5=8</code>，然后生成一个uuid，将该uuid作为key，8作为value保存到redis中<br>然后根据<code>3+5</code>生成base64的图片数据，最后将uuid和图片数据返回给浏览器，浏览器渲染出验证码图片<br>当用户填写完账号，密码，验证码值后，发出登录请求/login，该请求中包含了之前生成的uuid数据，<br>在gateway网关处，根据用户传递过来的uuid，取出redis中的值与用户填入的验证码值进行对比。<br>以上就是验证码的流程。</p></li><li><p><strong>若依微服务中登录流程</strong></p><p>登录验证流程在ruoyi-auth模块中进行</p><ul><li><p>首先检查用户输入账号密码格式是否正确，例如用户名是否为空<br>密码是否在指定范围内等等，</p></li><li><p>然后根据用户名查询出该用户的信息，再次检查该用户是否存在，是否已删除，是否已停用<br>账号密码是否正确，如果一切通过，则做登录日志，将日志持久化到数据库</p></li><li><p>接着就是封装好用户数据，设置好用户账号，id，密码，一个uuid，封装成loginUser对象<br>然后根据对象中uuid作为key，loginUser对象作为value，将用户数据保存在redis中<br>这个操作是属于ruoyi-common-security的TokenService中刷新令牌有效期的方法<br>意思是每次登陆都会保存用户数据到redis中，并重新设置好过期时间，在执行这个方法之前<br>会先进入HeaderInterceptor拦截器，在该拦截器中将用户数据保存到当前线程一份，以方便后续使用<br>使用的是阿里巴巴的TransmittableThreadLocal，简称TTL，原理不太懂，<br>好像是用来解决InheritableThreadLocal在线程池复用问题的，具体怎么解决看不太懂。 </p></li><li><p>最后就是使用jwt封装用户数据，生成token，将该token返回给浏览器，之后每次请求<br>都将携带该token进行验证。服务器收到token解析出其中的uuid，根据uuid就能找到用户数据了</p></li></ul></li></ul><blockquote><p><span id="e">Gateway中自定义局部过滤器</span></p></blockquote><p>Spring Gateway中局部过滤器分为<strong>内置局部过滤器</strong>和<strong>自定义局部过滤器</strong>，如果要自定义局部过滤器<br>需要自定义过滤器实现AbstractGatewayFilterFactory抽象类，例如，下面是若依项目中黑名单过滤器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span><span class="token comment">/** * 黑名单过滤器 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlackListUrlFilter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BlackListUrlFilter</span><span class="token punctuation">.</span><span class="token class-name">Config</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//主要处理逻辑处</span>            <span class="token class-name">String</span> url <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">matchBlacklist</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">webFluxResponseWriter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"请求地址不允许访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">BlackListUrlFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> blacklistUrl<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pattern</span><span class="token punctuation">></span></span> blacklistUrlPattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matchBlacklist</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> blacklistUrlPattern<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>                 <span class="token boolean">false</span> <span class="token operator">:</span> blacklistUrlPattern<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getBlacklistUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> blacklistUrl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlacklistUrl</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> blacklistUrl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>blacklistUrl <span class="token operator">=</span> blacklistUrl<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>blacklistUrlPattern<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>blacklistUrl<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>               url <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>blacklistUrlPattern                 <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\*\\*"</span><span class="token punctuation">,</span>                      <span class="token string">"(.*?)"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span>CASE_INSENSITIVE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>实现过程：</strong></p><ul><li><p>首先我们的自定义过滤器要继承该抽象类,AbstractGatewayFilterFactory</p></li><li><p>其次我们的自定义过滤器要有一个config内部类，用来支持在yml文件中给自定义过滤器配置特定参数<br>就是在使用自定义过滤器的时候，可以向自定义过滤器中追加一些数据。例如</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>   <span class="token key atrule">gateway</span><span class="token punctuation">:</span>     <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token comment"># 认证中心</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> ruoyi<span class="token punctuation">-</span>auth          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//ruoyi<span class="token punctuation">-</span>auth          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/auth/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> StripPrefix=1  <span class="token comment">#去掉前一个路径，如果请求是/auth/code,去除之后：/code</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> BlackListUrlFilter  <span class="token comment">#使用自定义局部过滤器</span>            <span class="token punctuation">-</span> <span class="token key atrule">arg</span><span class="token punctuation">:</span>   <span class="token comment">#给自定义局部过滤器传参</span>                <span class="token key atrule">blacklistUrl</span><span class="token punctuation">:</span>                   <span class="token punctuation">-</span> /xxx</code></pre></li><li><p>最后，我们需要显示声明自定义过滤器的无参数构造器，并传递Config内部类，例如上面的：<br>这样我们才能在apply方法中拿到config对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">BlackListUrlFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>上面便是创建一个Gateway的自定义局部过滤器必须的步骤</p><p>另外，当自定义过滤器判断请求可以通过时，使用：<code>return chain.filter(exchange);</code><br>如果判断失败，不能通过，则通常使用下面的方式：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1，不合法</span><span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置headers</span><span class="token class-name">HttpHeaders</span> httpHeaders <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>httpHeaders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>httpHeaders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-store, no-cache, must-revalidate, max-age=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置body</span><span class="token class-name">String</span> warningStr <span class="token operator">=</span> <span class="token string">"未授权的请求，请登录"</span><span class="token punctuation">;</span><span class="token class-name">DataBuffer</span> bodyDataBuffer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>warningStr<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>bodyDataBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2，或者下面方式：</span><span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> warningStr <span class="token operator">=</span> <span class="token string">"登录超时"</span><span class="token punctuation">;</span><span class="token class-name">DataBuffer</span> bodyDataBuffer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>warningStr<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>bodyDataBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3，而若依微服务中则是通过ServletUtils工具类的方法处理，如下：</span><span class="token comment">/**  * 设置webflux模型响应  *  * @param response ServerHttpResponse  * @param contentType content-type  * @param status http状态码  * @param code 响应状态码  * @param value 响应内容  * @return Mono&lt;Void>  */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">webFluxResponseWriter</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">,</span>         <span class="token class-name">String</span> contentType<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span> status<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DataBuffer</span> dataBuffer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>dataBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>以上便是Gateway中创建自定义局部过滤器的使用方式。</p><p><strong>文章推荐</strong></p><ul><li><a href="https://www.jianshu.com/p/7a0c08388c7c">SpringCloud-路由网关Gateway自定义GatewayFilterFactory</a></li><li><a href="https://www.cnblogs.com/javazhiyin/p/10826250.html">记一次token安全认证的实践 </a></li></ul><blockquote><p><span id="f">feign自定义拦截器</span></p></blockquote><p>在使用Feign调用其他模块接口时，可能会需要创建一个Feign的拦截器，用来传递当前请求携带的数据<br>若依项目中，Feign的拦截器如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>common<span class="token punctuation">.</span>security<span class="token punctuation">.</span>feign</span><span class="token punctuation">;</span><span class="token comment">/** * feign 请求拦截器 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignRequestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">RequestInterceptor</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> requestTemplate<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpServletRequest</span> httpServletRequest <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 传递用户信息请求头，防止丢失</span>            <span class="token class-name">String</span> userId <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>DETAILS_USER_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>DETAILS_USER_ID<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">String</span> userName <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>DETAILS_USERNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>DETAILS_USERNAME<span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">String</span> authentication <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>AUTHORIZATION_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>AUTHORIZATION_HEADER<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 配置客户端IP</span>            requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"X-Forwarded-For"</span><span class="token punctuation">,</span> <span class="token class-name">IpUtils</span><span class="token punctuation">.</span><span class="token function">getIpAddr</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ruoyi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依微服务之前端知识点</title>
      <link href="2022/05/14/%E8%8B%A5%E4%BE%9D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2022/05/14/%E8%8B%A5%E4%BE%9D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>好久没写博客了，现在已经是5月14号了，在家过完年后，学完多线程到3月份，然后准备毕设项目到现在<br>毕设项目就把若依的后台管理项目改造了一下，加了一个前台展示模块，不知道为什么，在家好没有动力啊<br>太堕落了，前段时间刚答完辩，很烦，搞了这么长时间的项目，竟然草草就过了，略感有点不值得自己的准备吧<br>不过也没关系了，我也在学习项目的过程中，学到了一点点知识，这两天记录一下吧。</p><p><strong>文章目录</strong></p><ul><li><a href="#a">vue使用svg组件</a></li><li><a href="#b">vue使用elementUI分页组件</a></li><li><a href="#c">created中异步获取数据问题</a></li><li><a href="#d">vue中引用图片</a></li><li><a href="#e">若依中使用的插件</a></li><li><a href="#f">路由传参后，页面刷新数据消失问题</a></li><li><a href="#g">其他</a></li></ul><blockquote><p><span id="a">vue使用svg组件</span></p></blockquote><p>vue中如何使用图标呢？让我们来看看若依中怎么做的</p><ul><li><p>首先来到main.js，所有组件都必须直接或间接在main.js才能让webpack管理起来</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./assets/icons'</span><span class="token comment">//引入icons文件夹下的index.js文件 </span></code></pre></li><li><p>assets/icons目录中的index.js文件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> SvgIcon <span class="token keyword">from</span> <span class="token string">'@/components/SvgIcon'</span>   <span class="token comment">//图标组件 </span><span class="token comment">// 全局注册</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'svg-icon'</span><span class="token punctuation">,</span> SvgIcon<span class="token punctuation">)</span><span class="token comment">//这部分代码作用是：将./svg目录下的所有svg文件全部引入webpack中，被作为模块管理起来</span><span class="token comment">//更多解释请看本节最后的文章与资源</span><span class="token keyword">const</span> req <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'./svg'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">requireAll</span> <span class="token operator">=</span> <span class="token parameter">requireContext</span> <span class="token operator">=></span> requireContext<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>requireContext<span class="token punctuation">)</span><span class="token function">requireAll</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span></code></pre></li><li><p>若依的SvgIcon组件，包装elementUI的图标组件</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div v-if&#x3D;&quot;isExternal&quot; :style&#x3D;&quot;styleExternalIcon&quot; class&#x3D;&quot;svg-external-icon svg-icon&quot; v-on&#x3D;&quot;$listeners&quot; &#x2F;&gt;  &lt;svg v-else :class&#x3D;&quot;svgClass&quot; aria-hidden&#x3D;&quot;true&quot; v-on&#x3D;&quot;$listeners&quot;&gt;    &lt;use :xlink:href&#x3D;&quot;iconName&quot; &#x2F;&gt;  &lt;&#x2F;svg&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; isExternal &#125; from &#39;@&#x2F;utils&#x2F;validate&#39;export default &#123;  name: &#39;SvgIcon&#39;,  props: &#123;    iconClass: &#123;      type: String,      required: true    &#125;,    className: &#123;      type: String,      default: &#39;&#39;     &#125;  &#125;,  computed: &#123;    isExternal() &#123;      return isExternal(this.iconClass)    &#125;,    iconName() &#123;      return &#96;#icon-$&#123;this.iconClass&#125;&#96;    &#125;,    svgClass() &#123;      if (this.className) &#123;        return &#39;svg-icon &#39; + this.className      &#125; else &#123;        return &#39;svg-icon&#39;      &#125;    &#125;,    styleExternalIcon() &#123;      return &#123;        mask: &#96;url($&#123;this.iconClass&#125;) no-repeat 50% 50%&#96;,        &#39;-webkit-mask&#39;: &#96;url($&#123;this.iconClass&#125;) no-repeat 50% 50%&#96;      &#125;    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;.svg-icon &#123;  width: 1em;  height: 1em;  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;&#125;.svg-external-icon &#123;  background-color: currentColor;  mask-size: cover!important;  display: inline-block;&#125;&lt;&#x2F;style&gt;</code></pre></li><li><p>实际使用svg组件</p><pre class="language-vue" data-language="vue"><code class="language-vue">首先是将svg图标放在assets&#x2F;icons&#x2F;svg目录中，因为main上面的路径是如此，你也可以更改然后在其他组件中使用：&lt;svg-icon :icon-class&#x3D;&quot;svgName&quot;&#x2F;&gt;svgName图标的名字，将参数传递到封装好的svg组件中即可，:class-name属性可有可无，可不传。</code></pre></li><li><p>文章与资源</p><ul><li><a href="https://blog.csdn.net/dangpugui/article/details/113863727">require.context(‘./svg‘, false, /.svg$/)</a></li><li><a href="https://blog.csdn.net/qq_36764510/article/details/100161680">vue-cli项目中svg组件的使用，及svg使用原理分析</a></li></ul></li></ul><blockquote><p><span id="b">vue使用elementUI分页组件</span></p></blockquote><ul><li><p>先来看看main.js中引入分页组件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 分页组件</span><span class="token keyword">import</span> Pagination <span class="token keyword">from</span> <span class="token string">"@/components/Pagination"</span><span class="token punctuation">;</span><span class="token comment">// 全局组件挂载</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'Pagination'</span><span class="token punctuation">,</span> Pagination<span class="token punctuation">)</span></code></pre></li><li><p>若依封装的Pagination组件</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :class&#x3D;&quot;&#123;&#39;hidden&#39;:hidden&#125;&quot; class&#x3D;&quot;pagination-container&quot;&gt;    &lt;el-pagination      :background&#x3D;&quot;background&quot;      :current-page.sync&#x3D;&quot;currentPage&quot;      :page-size.sync&#x3D;&quot;pageSize&quot;      :layout&#x3D;&quot;layout&quot;      :page-sizes&#x3D;&quot;pageSizes&quot;      :pager-count&#x3D;&quot;pagerCount&quot;      :total&#x3D;&quot;total&quot;      v-bind&#x3D;&quot;$attrs&quot;      @size-change&#x3D;&quot;handleSizeChange&quot;      @current-change&#x3D;&quot;handleCurrentChange&quot;    &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F;滚动工具类，详情见本节最下方文章与资源import &#123; scrollTo &#125; from &#39;@&#x2F;utils&#x2F;scroll-to&#39;export default &#123;  name: &#39;Pagination&#39;,  props: &#123;    total: &#123;      required: true,      type: Number    &#125;,    page: &#123;      type: Number,      default: 1    &#125;,    limit: &#123;      type: Number,      default: 20    &#125;,    pageSizes: &#123;      type: Array,      default() &#123;        return [10, 20, 30, 50]      &#125;    &#125;,    &#x2F;&#x2F; 移动端页码按钮的数量端默认值5    pagerCount: &#123;      type: Number,      default: document.body.clientWidth &lt; 992 ? 5 : 7    &#125;,    layout: &#123;      type: String,      default: &#39;total, sizes, prev, pager, next, jumper&#39;    &#125;,    background: &#123;      type: Boolean,      default: true    &#125;,    autoScroll: &#123;      type: Boolean,      default: true    &#125;,    hidden: &#123;      type: Boolean,      default: false    &#125;  &#125;,  computed: &#123;    currentPage: &#123;      get() &#123;        return this.page      &#125;,      set(val) &#123;        this.$emit(&#39;update:page&#39;, val)      &#125;    &#125;,    pageSize: &#123;      get() &#123;        return this.limit      &#125;,      set(val) &#123;        this.$emit(&#39;update:limit&#39;, val)      &#125;    &#125;  &#125;,  methods: &#123;    handleSizeChange(val) &#123;      this.$emit(&#39;pagination&#39;, &#123; page: this.currentPage, limit: val &#125;)      if (this.autoScroll) &#123;        scrollTo(0, 800)      &#125;    &#125;,    handleCurrentChange(val) &#123;      this.$emit(&#39;pagination&#39;, &#123; page: val, limit: this.pageSize &#125;)      if (this.autoScroll) &#123;        scrollTo(0, 800)      &#125;    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;.pagination-container &#123;  background: #ffffff;  padding: 32px 16px;&#125;.pagination-container.hidden &#123;  display: none;&#125;&lt;&#x2F;style&gt;</code></pre></li><li><p>实际使用分页组件</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;pagination  v-show&#x3D;&quot;total&gt;0&quot;  :total&#x3D;&quot;total&quot;  :page.sync&#x3D;&quot;queryParams.pageNum&quot;  :limit.sync&#x3D;&quot;queryParams.pageSize&quot;  @pagination&#x3D;&quot;getList&quot;&#x2F;&gt;&#x2F;&#x2F;在其他组件中直接使用分页组件，.sync是双向绑定修饰符，使子组件数据与父组件数据双向绑定</code></pre></li><li><p>文章与资源</p><ul><li><a href="https://blog.csdn.net/weixin_42312074/article/details/109470136">.sync修饰符</a></li><li><a href="https://blog.csdn.net/weixin_42776111/article/details/108979101">Vue .sync修饰符与$emit(update:xxx)</a></li><li><a href="https://cloud.tencent.com/developer/article/1794268">Vue常用的修饰符有哪些?有什么应用场景?</a></li><li><a href="https://github.com/NicknamedCoco/cdn/raw/c7f94a4ac65fbe17884e1a483c2efbd1d7c4c89d/blog/ruoyi/frontKnowledge/scroll-to.js">若依中滚动条工具类</a></li><li><a href="https://github.com/rigor789/vue-scrollto">一个vue滚动条插件</a></li></ul></li></ul><blockquote><p><span id="c">created中异步获取数据问题</span></p></blockquote><p>在写项目的时候，我常常遇到这种情况，在created钩子函数中请求第三方数据，并将数据存入data中<br>然后在mounted函数中，拿到数据进行一些操作，但是实验后发现mounted函数中并不能拿到数据，<br>当即就猜到应该mounted函数在执行的时候，created函数的异步请求还没有完成，那有什么好的办法呢？</p><ul><li>第一种方式就是在mounted中设置一个定时器，等到一定时间执行定时器函数拿数据<br>这种方式不好的地方在，你没办法准确知道等待多长时间，异步请求的时间是不确定的，这种方式不推荐</li><li>第二种方式是使用watch监听数据变化，一旦异步请求完毕，则数据发生变化，则watch监听到数据变化后<br>就可以在watch函数中对Dom进行一些操作了</li></ul><p>文章推荐</p><ul><li><a href="https://blog.csdn.net/qq_36157085/article/details/107962134">vue在created异步请求数据，通过v-for渲染；在mounted中获取不到数据和Dom的解决方案</a></li></ul><blockquote><p><span id="d">vue中引用图片</span></p></blockquote><p>记录一下vue中引用图片和css中引用图片，有时候经常忘记</p><ul><li>vue中引用图片<br><code>&lt;img src=&quot;@/assets/images/qrcode.png&quot; style=&quot;text-align:center;&quot;/&gt;</code></li><li>css引用图片<br><code>background-image: url(&quot;~@/assets/images/loginbg3.jpg&quot;);</code></li></ul><blockquote><p><span id="e">若依中使用的插件</span></p></blockquote><p>若依前端中配置了几个自定义的插件，这里主要讲两个插件，一个是缓存的插件，一个是模态框的插件</p><ul><li><p>缓存插件<br>缓存插件是若依为了方便操作sessionStorage和localStorage所做的封装</p><ul><li><p>首先来看看main.js中</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> plugins <span class="token keyword">from</span> <span class="token string">'./plugins'</span> <span class="token comment">//自定义插件</span><span class="token comment">//进入./plugins/index.js插件函数，这里将封装好的缓存对象绑定到了vue的原型对象中，这样在任何组件中都可以使用了</span><span class="token keyword">import</span> tab <span class="token keyword">from</span> <span class="token string">'./tab'</span><span class="token keyword">import</span> auth <span class="token keyword">from</span> <span class="token string">'./auth'</span><span class="token keyword">import</span> cache <span class="token keyword">from</span> <span class="token string">'./cache'</span><span class="token keyword">import</span> modal <span class="token keyword">from</span> <span class="token string">'./modal'</span><span class="token keyword">import</span> download <span class="token keyword">from</span> <span class="token string">'./download'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 页签操作</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$tab <span class="token operator">=</span> tab    <span class="token comment">// 认证对象</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$auth <span class="token operator">=</span> auth    <span class="token comment">// 缓存对象</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$cache <span class="token operator">=</span> cache    <span class="token comment">// 模态框对象</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$modal <span class="token operator">=</span> modal    <span class="token comment">// 下载文件</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$download <span class="token operator">=</span> download  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>再进入./cache.js看看具体实现吧</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sessionCache <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">set</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sessionStorage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">get</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sessionStorage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setJSON</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> jsonValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jsonValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonValue<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">getJSON</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">remove</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> localCache <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">set</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>localStorage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">get</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>localStorage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setJSON</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> jsonValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jsonValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonValue<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">getJSON</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">remove</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 会话级缓存   */</span>  session<span class="token operator">:</span> sessionCache<span class="token punctuation">,</span>  <span class="token comment">/**   * 本地缓存   */</span>  local<span class="token operator">:</span> localCache<span class="token punctuation">&#125;</span></code></pre></li><li><p>最后看看实际使用吧</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">saveSetting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$modal<span class="token punctuation">.</span><span class="token function">loading</span><span class="token punctuation">(</span><span class="token string">"正在保存到本地，请稍候..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$cache<span class="token punctuation">.</span>local<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>    <span class="token comment">//保存到了localStorage中</span>        <span class="token string">"layout-setting"</span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#123;        "topNav":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>topNav<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,        "tagsView":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagsView<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,        "fixedHeader":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fixedHeader<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,        "sidebarLogo":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sidebarLogo<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,        "dynamicTitle":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>dynamicTitle<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,        "sideTheme":"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sideTheme<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">",        "theme":"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>theme<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"        &#125;</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$modal<span class="token punctuation">.</span><span class="token function">closeLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>模态框插件<br>模态框指的是当用户在页面进行某些操作时，系统弹出提示，消息，确认框，来看看若依中是如何设计的吧</p><ul><li><p>还是进入main.js中</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> plugins <span class="token keyword">from</span> <span class="token string">'./plugins'</span> <span class="token comment">//自定义插件</span><span class="token comment">//进入./plugins/index.js插件函数，这里将模态框对象绑定到了vue的原型对象中，这样在任何组件中都可以使用了</span><span class="token keyword">import</span> tab <span class="token keyword">from</span> <span class="token string">'./tab'</span><span class="token keyword">import</span> auth <span class="token keyword">from</span> <span class="token string">'./auth'</span><span class="token keyword">import</span> cache <span class="token keyword">from</span> <span class="token string">'./cache'</span><span class="token keyword">import</span> modal <span class="token keyword">from</span> <span class="token string">'./modal'</span><span class="token keyword">import</span> download <span class="token keyword">from</span> <span class="token string">'./download'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 页签操作</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$tab <span class="token operator">=</span> tab    <span class="token comment">// 认证对象</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$auth <span class="token operator">=</span> auth    <span class="token comment">// 缓存对象</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$cache <span class="token operator">=</span> cache    <span class="token comment">// 模态框对象</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$modal <span class="token operator">=</span> modal    <span class="token comment">// 下载文件</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$download <span class="token operator">=</span> download  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>再进入modal.js文件中看看吧，这里其实封装了elementUI的模态框</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Message<span class="token punctuation">,</span> MessageBox<span class="token punctuation">,</span> Notification<span class="token punctuation">,</span> Loading <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">let</span> loadingInstance<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 消息提示</span>  <span class="token function">msg</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Message<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 错误消息</span>  <span class="token function">msgError</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 成功消息</span>  <span class="token function">msgSuccess</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 警告消息</span>  <span class="token function">msgWarning</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Message<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 弹出提示</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"系统提示"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 错误提示</span>  <span class="token function">alertError</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"系统提示"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'error'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 成功提示</span>  <span class="token function">alertSuccess</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"系统提示"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'success'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 警告提示</span>  <span class="token function">alertWarning</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"系统提示"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'warning'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 通知提示</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Notification<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 错误通知</span>  <span class="token function">notifyError</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Notification<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 成功通知</span>  <span class="token function">notifySuccess</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Notification<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 警告通知</span>  <span class="token function">notifyWarning</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Notification<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 确认窗体</span>  <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"系统提示"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      confirmButtonText<span class="token operator">:</span> <span class="token string">'确定'</span><span class="token punctuation">,</span>      cancelButtonText<span class="token operator">:</span> <span class="token string">'取消'</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 提交内容</span>  <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> MessageBox<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"系统提示"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      confirmButtonText<span class="token operator">:</span> <span class="token string">'确定'</span><span class="token punctuation">,</span>      cancelButtonText<span class="token operator">:</span> <span class="token string">'取消'</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 打开遮罩层</span>  <span class="token function">loading</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    loadingInstance <span class="token operator">=</span> Loading<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      lock<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      text<span class="token operator">:</span> content<span class="token punctuation">,</span>      spinner<span class="token operator">:</span> <span class="token string">"el-icon-loading"</span><span class="token punctuation">,</span>      background<span class="token operator">:</span> <span class="token string">"rgba(0, 0, 0, 0.7)"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 关闭遮罩层</span>  <span class="token function">closeLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    loadingInstance<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>最后看看实际使用吧</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** 强退按钮操作 */</span><span class="token function">handleForceLogout</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$modal<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'是否确认强退名称为"'</span> <span class="token operator">+</span> row<span class="token punctuation">.</span>userName <span class="token operator">+</span> <span class="token string">'"的用户？'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">forceLogout</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>tokenId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$modal<span class="token punctuation">.</span><span class="token function">msgSuccess</span><span class="token punctuation">(</span><span class="token string">"强退成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">saveSetting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$modal<span class="token punctuation">.</span><span class="token function">loading</span><span class="token punctuation">(</span><span class="token string">"正在保存到本地，请稍候..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$cache<span class="token punctuation">.</span>local<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>        <span class="token string">"layout-setting"</span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#123;        "topNav":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>topNav<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,        "tagsView":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagsView<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,        "fixedHeader":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fixedHeader<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,        "sidebarLogo":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sidebarLogo<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,        "dynamicTitle":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>dynamicTitle<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,        "sideTheme":"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sideTheme<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">",        "theme":"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>theme<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"        &#125;</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$modal<span class="token punctuation">.</span><span class="token function">closeLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li></ul><blockquote><p><span id="f">路由传参后，页面刷新数据消失问题</span></p></blockquote><p>在写项目的过程中，碰到这种情况，当我进行路由跳转传参时，在新的页面中再一次刷新后，新页面中的数据没了<br>因为数据是跳转页面时传递过来的，所以当你刷新时，没有参数传递自然在新页面中没有数据了<br>以下是解决办法：</p><ul><li><p>使用query代替params</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//这种方式是不行的，对了参数尽量都是字符串而不是数字，例如arr中，否则有警告</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"Essay"</span><span class="token punctuation">,</span>params<span class="token operator">:</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token string">"1024"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"万一"</span><span class="token punctuation">,</span>arr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//这种方式可以，因为在页面跳转时，参数会拼接在url中，再次刷新页面后，url依然有参数，所以数据依然存在</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">"/front/kepu/essay"</span><span class="token punctuation">,</span>query<span class="token operator">:</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token string">"1024"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"万一"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li><li><p>依然使用query，不同的是：传递参数时，将参数序列化</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//传递参数</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">"/front/kepu/essay"</span><span class="token punctuation">,</span>                   query<span class="token operator">:</span><span class="token punctuation">&#123;</span>data<span class="token operator">:</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token string">"1024"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"万一"</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token string">"b"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//接收参数，也可以将数据存到data的变量中</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>a<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>第二种方式解决的是，当传递参数时，参数包含对象或数组时(例如data)，url会强制将data参数序列化<br>这使得采用第一种方式的话，再次刷新页面，依然丢失数据，所以第二种是对第一种方式的改进。<br>不过这上面两种方式都不太好，因为url有长度限制，如果参数是非常大的对象，url参数拼接将超过长度<br>这时再次刷新页面还是会失败。</p></li><li><p>使用动态路由来传递参数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 路由配置</span><span class="token punctuation">&#123;</span>   path<span class="token operator">:</span><span class="token string">'/detail/:id'</span><span class="token punctuation">,</span>   name<span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>   component<span class="token operator">:</span>Detail<span class="token punctuation">,</span>   props<span class="token operator">:</span><span class="token boolean">true</span>             <span class="token comment">// 如果props设置为true，$route.params将被设置为组件属性  </span><span class="token punctuation">&#125;</span> <span class="token comment">// 路由跳转</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   path<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/detail/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 详情页获取参数</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment">// 将路由中传递的参数id解耦到组件的props属性上</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这种方式进行路由传参，页面刷新后，依然有数据，不过也只适合传递短数据</p></li><li><p>使用cookie或者sessionStorage传递参数<br>这种方式适合大数据存放参数，没有实验，但应该没问题。</p></li></ul><p>文章推荐：</p><ul><li><a href="https://blog.csdn.net/zzy0609/article/details/83996923">VUE页面跳转刷新参数丢失问题解决</a></li><li><a href="https://juejin.cn/post/7086123199779307551">Vuex刷新页面导致数据丢失解决办法</a></li></ul><blockquote><p><span id="g">其他</span></p></blockquote><ul><li><p>当路由跳转时，在front目录下同时有index目录(该目录下同时存在index.vue)和index.vue时，<br>你的路由路径写成：<code>(resolve) =&gt; require([&#39;@/views/front/index&#39;], resolve)</code><br>route-view会显示front目录的index.vue文件，而不会显示front目录中index目录下的index.vue文件</p><p>这个小问题刚开始把我整懵逼了，我要跳转到front目录下的index目录中的index.vue文件<br>但是像上面写只会跳转到front目录下的index.vue文件。</p></li><li><p>a标签包裹其他标签时，需要去掉a标签下划线，并且指定固定颜色，不然有些链接点击后，会变颜色</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span></code></pre></li><li><p>js代码debug<br>在想要暂停的地方写：debugger</p></li><li><p>vue引入echarts5和echarts4版本的不同</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//echarts4的引入</span><span class="token keyword">import</span> echarts <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$echarts <span class="token operator">=</span> echarts<span class="token comment">//echarts5的引入</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> echarts <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$echarts <span class="token operator">=</span> echarts</code></pre></li><li><p>文章推荐</p><ul><li><a href="https://www.cnblogs.com/NanKe-Studying/p/13952558.html">js-cookie用法详解</a></li><li><a href="https://blog.csdn.net/qq_35393869/article/details/105415273">文字color颜色渐变（可一直变换）</a></li><li><a href="https://juejin.cn/post/7032295846658097159">图片裁剪 vue-cropper 的使用</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ruoyi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取疫情数据并可视化展示</title>
      <link href="2022/03/19/%E8%8E%B7%E5%8F%96%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B1%95%E7%A4%BA/"/>
      <url>2022/03/19/%E8%8E%B7%E5%8F%96%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>最近在写毕设的时候看到Echarts的动态排序折现图特别帅，想着如果用在自己的毕设上简直帅呆了<br>又因为毕设是做一个医疗健康相关的网站，所以就打算找找疫情的数据，没想到还真找到了！</p><p><code>https://covid19.mathdro.id/api</code>，这里可以获取很多疫情确诊，死亡人数数据，只需要将数据过滤，转换<br>就能给Echarts用了，所以用多线程实现了代码，原来单线程获取一次数据用了十几分钟，现在只需要7秒~<br>很爽hhhhhhh</p><p>下面是展示效果，具体代码已放在<a href="https://github.com/NicknamedCoco">GitHub</a>上<br><img src="https://github.com/NicknamedCoco/GetVirusData/raw/67662c44d7da848c97632e0886062e30b577a959/%E7%96%AB%E6%83%85%E6%9C%9F%E9%97%B4%E5%90%84%E5%9B%BD%E6%AD%BB%E4%BA%A1%E4%BA%BA%E6%95%B0.png" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/GetVirusData/raw/67662c44d7da848c97632e0886062e30b577a959/%E7%96%AB%E6%83%85%E6%9C%9F%E9%97%B4%E5%90%84%E5%9B%BD%E7%A1%AE%E8%AF%8A%E4%BA%BA%E6%95%B0.png" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java案例 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊多线程(三)</title>
      <link href="2022/02/27/%E8%81%8A%E8%81%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%89/"/>
      <url>2022/02/27/%E8%81%8A%E8%81%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>现在是22年2月底，有很多重要的事情需要处理，论文开题报告，中期检查，毕设，实习工作等<br>3月份的任务：</p><ul><li>复习面试题，去杭州找份工作<br>自己基础还是很差，很多之前学习过的内容，没有使用导致忘记了不少，所以赶紧在找工作之前复习一下<br>重新学习之前的内容，找工作是必要的，目前在家效率不是特别高，不过找工作意味着租房，头痛。</li><li>搭建好完整的毕设项目<br>既然选择了分布式项目，那就要努力学好，虽然之前学习过vue，分布式，但是实战还是差点意思<br>还有很多问题等着去解决，3月份，我希望能搭建好项目整体框架，学习完尚医通的项目。</li></ul><p>上面两件事是整个3月份要去解决的，4,5月份的重点放在工作内容和毕设上，5月份之前务必搞定毕设！！！</p><p>本篇博客是学习多线程的最后一篇，基础多线程的学习就先暂告一段落，我知道还有很多多线程的内容没有学习，<br>多线程的书”并发编程之美”我也没有看，但是不急，终究有一天我会再次学习，只不过现在这个时候，<br>学习不宜过多深究，很浪费时间，还有操作系统，计网等内容，我都会全部捡起来！<br>下面是关于本篇博客的内容：</p><ul><li><a href="#a"><strong>不可变对象以及final的认识</strong></a></li><li><a href="#l"><strong>享元模式</strong></a></li><li><a href="#b"><strong>线程池</strong></a></li><li><a href="#c"><strong>AQS基本认识</strong></a></li><li><a href="#d"><strong>AQS原理</strong></a></li><li><a href="#f"><strong>其他一些锁的使用</strong></a></li><li><a href="#g"><strong>CompletableFuture异步编排</strong></a></li><li><a href="#h"><strong>ThreadLocal</strong></a></li><li><a href="#i"><strong>文章及资料</strong></a></li></ul><blockquote><p><span id="a">不可变对象以及final的认识</span></p></blockquote><ul><li><p><strong>不可变对象定义</strong><br>不可变对象就是那些一旦被创建，它们的状态就不能被改变的对象，每次对它们的改变都是产生了新的对象<br>可变对象就是那些创建后，状态依然可以被改变的对象，这里的状态其实指的就是实例变量，静态变量。<br>一个不可变对象案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"I love java"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> str<span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after replace str:"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after replace str1:"</span> <span class="token operator">+</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出</span>after replace str<span class="token operator">:</span><span class="token class-name">I</span> love <span class="token class-name">Java</span>after replace str1<span class="token operator">:</span><span class="token class-name">I</span> love java<span class="token comment">//从输出结果可以看出，在对str进行了字符串替换替换之后，str1指向的字符串对象仍然没有发生变化。</span><span class="token comment">//replace虽然看上去修改了字符串，但其实是返回了一个新的字符串，内部使用到了保护性拷贝方式</span><span class="token comment">//保护性拷贝指的是：当你修改一个类的成员变量时，并不是真正修改这个成员变量而是创建一个新的成员变量返回</span></code></pre></li><li><p><strong>不可变类存在的意义</strong></p><ul><li><p>让并发编程变得更简单<br>控制共享资源，使各个线程达到互斥在并发编程中并不容易，大多数情况下，对于资源互斥访问的场景，<br>都是采用加锁的方式来实现对资源的串行访问，来保证并发安全，但是这种串行方式访问共享变量并不容易<br>有没有其他方法可以实现并发编程呢？事实上，引起线程安全问题的根本原因在于：多个线程需要同时访问同一个共享资源。<br>假如没有共享资源，那么多线程安全问题就自然解决了，Java中提供的ThreadLocal机制就是采取的这种思想。<br>然而大多数时候，线程间是需要使用共享资源互通信息的，如果共享资源在创建之后就完全不再变更，<br>如同一个常量，而多个线程间并发读取该共享资源是不会存在线上安全问题的，因为所有线程无论何时读取该共享资源，<br>总是能获取到一致的、完整的资源状态。不可变对象就是这样一种在创建之后就不再变更的对象，<br>这种特性使得它们天生支持线程安全，让并发编程变得更简单。下面是一个在多线程中使用不可变类的例子</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//SimpleDateFormat并不是一个线程安全的时间工具类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatMutable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span>sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-10-01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//结果</span>由于 <span class="token class-name">SimpleDateFormat</span> 不是线程安全的，有很大几率出现 `java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">NumberFormatException</span>` 或者出现不正确的日期解析结果。</code></pre><p>解决办法一般是加锁，但是加锁又比较影响性能，所以可以考虑使用不可变类：DateTimeFormatter</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatImmutable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DateTimeFormatter</span> sdf <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span>sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-10-01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>减少容器使用过程出错的概率<br>我们在使用HashSet时，如果HashSet中元素对象的状态可变，就会出现元素丢失的情况，比如下面这个例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token comment">// 年龄</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> identityCardID<span class="token punctuation">;</span>  <span class="token comment">// 身份证号码</span>     <span class="token comment">//省略age,identityCardID的getter,setter方法</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span>  <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Person</span> personObj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> personObj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>identityCardID<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>personObj<span class="token punctuation">.</span><span class="token function">getIdentityCardID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age <span class="token operator">*</span> <span class="token number">37</span> <span class="token operator">+</span> identityCardID<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> jack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jack<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jack<span class="token punctuation">.</span><span class="token function">setIdentityCardID</span><span class="token punctuation">(</span><span class="token string">"42118220090315234X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        personSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jack<span class="token punctuation">)</span><span class="token punctuation">;</span>         jack<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>jack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span><span class="token boolean">false</span></code></pre><p>所以在Java中，对于String、包装器这些不可变类，我们经常会用他们来作为HashMap的key，<br>试想一下如果这些类是可变的，将会发生什么？后果不可预知，这将会大大增加Java代码编写的难度。</p></li></ul></li><li><p><strong>如何创建不可变对象</strong><br>通常来说，创建不可变类原则有以下几条：</p><pre class="language-none"><code class="language-none">1)所有成员变量必须是private2)最好同时用final修饰(非必须)3)不提供能够修改原有对象状态的方法   3.1)最常见的方式是不提供setter方法   3.2)如果提供修改方法，需要新创建一个对象，并在新创建的对象上进行修改(保护性拷贝，每次返回新的对象)4)通过构造器初始化所有成员变量，引用类型的成员变量必须进行深拷贝(deep copy)5)getter方法不能对外泄露this引用以及成员变量的引用6)最好不允许类被继承(非必须)</code></pre><p>JDK中提供了一系列方法方便我们创建不可变集合，如：<code>Collections.unmodifiableList(List&lt;extendsT&gt; list)</code><br>另外，在Google的Guava包中也提供了一系列方法来创建不可变集合，如：<code>ImmutableList.copyOf(list)</code><br>这2种方式虽然都能创建不可变list，但是两者是有区别的，JDK自带提供的方式实际上创建出来的不是真正意义上的不可变集合<br>实际上UnmodifiableList是将入参list的引用复制了一份，同时将所有的修改方法抛出UnsupportedOperationException。<br>因此如果在外部修改了入参list，实际上会影响到UnmodifiableList，而Guava包提供的ImmutableList<br>是真正意义上的不可变集合，它实际上是对入参list进行了深拷贝。我们可以看下面一段代码:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">List</span> unmodifiableList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ImmutableList</span> immutableList <span class="token operator">=</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>unmodifiableList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>immutableList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre></li><li><p><strong>不可变对象真的”完全不可改变”吗？</strong><br>不可变对象虽然具备不可变性，但是不是”完全不可变”的，这里打上引号是因为通过反射的手段是可以改变不可变对象的状态的。<br>大家看到这里可能有疑惑了，为什么既然能改变，为何还叫不可变对象？这里面大家不要误会不可变的本意，<br>从不可变对象的意义分析能看出来对象的不可变性只是用来辅助帮助大家更简单地去编写代码，<br>减少程序编写过程中出错的概率，这是不可变对象的初衷。如果真要靠通过反射来改变一个对象的状态，<br>此时编写代码的人也应该会意识到此类在设计的时候就不希望其状态被更改，从而引起编写代码的人的注意。<br>下面是通过反射方式改变不可变对象的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s = "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Field</span> valueFieldOfString <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valueFieldOfString<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> valueFieldOfString<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s = "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出</span>s <span class="token operator">=</span> <span class="token class-name">Hello</span> <span class="token class-name">World</span>s <span class="token operator">=</span> <span class="token class-name">Hello_World</span></code></pre></li><li><p><strong>Final关键字的认识</strong></p><ul><li><p>final修饰的类不能被继承，final类中的成员变量可以根据需要设为final，<br>但是要注意final类中的所有成员方法都会被隐式地指定为final方法。</p></li><li><p>final修饰的方法不能被重写，此处需要注意的一点是：因为重写的前提是子类可以从父类中继承此方法，<br>如果父类中final修饰的方法同时访问控制权限为private，将会导致子类中不能直接继承到此方法，<br>因此，此时可以在子类中定义相同的方法名和参数，此时不再产生重写与final的矛盾，<br>而是在子类中重新定义了新的方法。(注：类的private方法会隐式地被指定为final方法)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 因为private修饰，子类中不能继承到此方法，因此，子类中的getName方法是重新定义的、     * 属于子类本身的方法，编译正常     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token punctuation">&#125;</span>    <span class="token comment">/* 因为pblic修饰，子类可以继承到此方法，导致重写了父类的final方法，编译出错    public final void getName() &#123;    &#125;    */</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>final修饰的变量为常量，当final修饰一个基本数据类型时，表示该基本数据类型的值一旦在初始化后便不能发生变化；<br>如果final修饰一个引用类型时，则在对其初始化之后便不能再让其指向其他对象了，但该引用所指向的对象的内容是可以发生变化<br>本质上是一回事，因为引用的值是一个地址，final要求值，即地址的值不发生变化。<br>final修饰一个成员变量(属性)，必须要显示初始化。这里有两种初始化方式：</p><pre class="language-none"><code class="language-none">  1)一种是在变量声明的时候初始化；2)第二种方法是在声明变量的时候不赋初值，但是要在这个变量所在的类的所有的构造函数中对这个变量赋初值。</code></pre><p>当函数的参数类型声明为final时，说明该参数是只读型的。即你可以读取使用该参数，但是无法改变该参数的值。</p></li></ul></li><li><p><strong>深入理解final关键字</strong></p><ul><li><p>类的final变量和普通变量有什么区别？<br>先来看下面一个案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>         <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"hello2"</span><span class="token punctuation">;</span>           <span class="token keyword">final</span> <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> d <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> c <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> e <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//输出结果：true、false</span></code></pre><p>为什么第一个比较结果为true，而第二个比较结果为fasle。这里面就是final变量和普通变量的区别了，<br>当final变量是基本数据类型以及String类型时，<code>如果在编译期间能知道它的确切值，则编译器会把它当做编译期常量使用。</code><br>也就是说在用到该final变量的地方，相当于直接访问的这个常量，不需要在运行时确定。因此在上面的一段代码中，<br>由于变量b被final修饰，因此会被当做编译器常量，所以在使用到b的地方会直接将变量b替换为它的值。<br>而对于变量d的访问却需要在运行时通过链接来进行。要注意，只有在编译期间能确切知道final变量值的情况下，<br>编译器才会进行这样的优化，比如下面的这段代码就不会进行优化：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>         <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"hello2"</span><span class="token punctuation">;</span>           <span class="token keyword">final</span> <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> c <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">//输出结果为false</span></code></pre></li></ul></li></ul><p>这里要注意一点就是：不要以为某些数据是final就可以在编译期知道其值，通过变量b我们就知道了，<br>    在这里是使用getHello()方法对其进行初始化，他要在运行期才能知道其值。</p><ul><li><p>被final修饰的引用变量指向的对象内容可变吗？<br>在上面提到被final修饰的引用变量一旦初始化赋值之后就不能再指向其他的对象，那么该引用变量指向的对象的内容可变吗？<br>看下面这个例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>           <span class="token keyword">final</span> <span class="token class-name">MyClass</span> myClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>myClass<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>       <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> </code></pre><p>这段代码可以顺利编译通过并且有输出结果，输出结果为1。这说明引用变量被final修饰之后，<br>虽然不能再指向其他对象，但是它指向的对象的内容是可变的。</p></li></ul><blockquote><p><span id="l">享元模式</span></p></blockquote><p>不可变类在尝试修改对象时，当前对象会创建一个新对象，保证线程安全，但是这样带来一个问题就是对象创建过多<br>会消耗资源，性能变低。如何解决呢？不可变类一般会通过关联设计模式，享元模式来解决<br>享元模式，是对象池的一种实现。 类似于线程池，线程池可以避免不停的创建和销毁多个对象，消耗性能。<br>享元模式也是为了减少内存的使用，避免出现大量重复的创建销毁对象的场景。该模式属于结构性模式中的一种<br>享元模式在很多地方都使用到，例如String，基本类型包装类，BigDecimal BigInteger，线程池等</p><p>以往进行数据库操作时，都是来一个请求就创建一个connection对象，连接完数据库再删掉，这种每次请求都要<br>重新创建和关闭数据库连接，性能都会受到极大影响。这时，预先创建好一批连接，放入连接池。<br>一次请求到达后，从连接池获取连接；使用完毕后，归还连接池中。这样既节约了时间和资源，实现了重用，<br>能及时响应客户端请求，不至于给数据库造成过大的负担。下面我们使用享元模式尝试自定义连接池：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Pool</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 连接池大小 */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> poolSize<span class="token punctuation">;</span>    <span class="token comment">/** 连接数组 */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Connection</span><span class="token punctuation">[</span><span class="token punctuation">]</span> conns<span class="token punctuation">;</span>    <span class="token comment">/** 连接是否被占用标记,0-未占用，1-已占用 */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicIntegerArray</span> busies<span class="token punctuation">;</span>    <span class="token comment">/**     * 构造方法：初始化连接池     * @param poolSize      初始连接池大小     */</span>    <span class="token keyword">public</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token keyword">int</span> poolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>poolSize <span class="token operator">=</span> poolSize<span class="token punctuation">;</span>        conns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">[</span>poolSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        busies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>poolSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> poolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            conns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockConnection</span><span class="token punctuation">(</span><span class="token string">"conn"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 从连接池获取连接     * @return      连接     */</span>    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 检查是否有空闲连接</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> poolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 有空闲连接返回连接</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>busies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 空闲，修改标记，返回连接</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>busies<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"get &#123;&#125;"</span><span class="token punctuation">,</span> conns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> conns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 没有空闲连接等待</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"wait..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 归还连接     * @param conn      要归还的连接     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> poolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> conn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 归还连接不会发生竞争</span>                busies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"close &#123;&#125;"</span><span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 连接*/</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockConnection</span> <span class="token keyword">implements</span> <span class="token class-name">Connection</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 测试连接池 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoolTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Pool</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Connection</span> connection <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 模拟连接使用耗时</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    p<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试结果</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">32.443</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> wait<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">32.443</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> get <span class="token class-name">MockConnection</span><span class="token punctuation">(</span>name<span class="token operator">=</span>conn0<span class="token punctuation">)</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">32.443</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> get <span class="token class-name">MockConnection</span><span class="token punctuation">(</span>name<span class="token operator">=</span>conn1<span class="token punctuation">)</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">32.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> wait<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">32.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> wait<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">33.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> close <span class="token class-name">MockConnection</span><span class="token punctuation">(</span>name<span class="token operator">=</span>conn1<span class="token punctuation">)</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">33.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> get <span class="token class-name">MockConnection</span><span class="token punctuation">(</span>name<span class="token operator">=</span>conn0<span class="token punctuation">)</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">33.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> get <span class="token class-name">MockConnection</span><span class="token punctuation">(</span>name<span class="token operator">=</span>conn1<span class="token punctuation">)</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">33.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> wait<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">33.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> close <span class="token class-name">MockConnection</span><span class="token punctuation">(</span>name<span class="token operator">=</span>conn0<span class="token punctuation">)</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">33.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> wait<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">34.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> close <span class="token class-name">MockConnection</span><span class="token punctuation">(</span>name<span class="token operator">=</span>conn0<span class="token punctuation">)</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">34.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> get <span class="token class-name">MockConnection</span><span class="token punctuation">(</span>name<span class="token operator">=</span>conn0<span class="token punctuation">)</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">34.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> close <span class="token class-name">MockConnection</span><span class="token punctuation">(</span>name<span class="token operator">=</span>conn1<span class="token punctuation">)</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">35.445</span> DEBUG <span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span><span class="token class-name">Pool</span> <span class="token operator">-</span> close <span class="token class-name">MockConnection</span><span class="token punctuation">(</span>name<span class="token operator">=</span>conn0<span class="token punctuation">)</span></code></pre><blockquote><p><span id="b">线程池</span></p></blockquote><p>池化技术相比大家已经屡见不鲜了，线程池、数据库连接池、Http 连接池等等都是对这个思想的应用。<br>池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。</p><p>线程池提供了一种限制和管理资源（包括执行一个任务）。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。</p><ul><li><p><strong>自定义线程池</strong><br>我们将尝试看看如何创建自己的线程池，并且看看线程池需要哪些组件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 步骤4：自定义线程池测试 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"Test18"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test18</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ThreadPool</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>queue<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token comment">//拒绝策略交给使用者完成</span>                <span class="token comment">// 1. 死等</span>                <span class="token comment">// queue.put(task);</span>                <span class="token comment">// 2) 带超时等待</span>                <span class="token comment">// queue.offer(task, 1500, TimeUnit.MILLISECONDS);</span>                <span class="token comment">// 3) 让调用者放弃任务执行</span>                 log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"放弃&#123;&#125;"</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 4) 让调用者抛出异常</span>                <span class="token comment">// throw new RuntimeException("任务执行失败 " + task);</span>                <span class="token comment">// 5) 让调用者自己执行任务</span>                task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 步骤1：自定义任务队列 * @param &lt;T> */</span><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"BlockingQueue"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 任务队列</span>    <span class="token keyword">private</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span>  queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 锁</span>    <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 生产者条件变量</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> fullWaitSet <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. 消费者条件变量</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> emptyWaitSet <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 5. 容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capcity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capcity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capcity <span class="token operator">=</span> capcity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 带超时时间的获取</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 将 timeout 统一转换为 纳秒</span>            <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 返回的是剩余的等待时间，更改navos的值，使虚假唤醒的时候可以继续等待</span>                    nanos <span class="token operator">=</span> emptyWaitSet<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            fullWaitSet<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 阻塞获取</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token class-name">Take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    emptyWaitSet<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            fullWaitSet<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 阻塞增加</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> put <span class="token punctuation">(</span><span class="token class-name">T</span> task<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capcity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"等待加入任务队列 &#123;&#125; ..."</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                    fullWaitSet<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"加入任务队列 &#123;&#125;"</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>            emptyWaitSet<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 带超时时间的增加</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">T</span> task <span class="token punctuation">,</span> <span class="token keyword">long</span> timeout <span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 将 timeout 统一转换为 纳秒</span>            <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capcity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    nanos <span class="token operator">=</span> fullWaitSet<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"加入任务队列 &#123;&#125;"</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>            emptyWaitSet<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tryPut</span><span class="token punctuation">(</span><span class="token class-name">RejectPolicy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> rejectPolicy<span class="token punctuation">,</span> <span class="token class-name">T</span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 不空闲时怎么办？由rejectPolicy决定</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> capcity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                rejectPolicy<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"加入任务队列 &#123;&#125;"</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                emptyWaitSet<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 步骤2：自定义线程池 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"ThreadPool"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 任务队列</span>    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span>  taskQueue<span class="token punctuation">;</span>    <span class="token comment">// 线程集合</span>    <span class="token keyword">private</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">></span></span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 核心线程数</span>    <span class="token keyword">int</span> coreSize<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> timeOut<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">RejectPolicy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> rejectPolicy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> coreSize<span class="token punctuation">,</span> <span class="token keyword">long</span> timeOut<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span><span class="token keyword">int</span> capcity            <span class="token punctuation">,</span><span class="token class-name">RejectPolicy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> rejectPolicy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coreSize <span class="token operator">=</span> coreSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeOut <span class="token operator">=</span> timeOut<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeUnit <span class="token operator">=</span> timeUnit<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>taskQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>capcity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectPolicy <span class="token operator">=</span> rejectPolicy<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 执行任务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 当任务数没有超过 coreSize 时，直接交给 worker 对象执行</span>        <span class="token comment">// 如果任务数超过 coreSize 时，加入任务队列暂存</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>workers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>coreSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>                worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 1) 死等</span>                <span class="token comment">//taskQueue.put(task);</span>                <span class="token comment">// 2) 带超时等待</span>                <span class="token comment">//taskQueue.tryPut(rejectPolicy, task);</span>                <span class="token comment">// 3) 让调用者放弃任务执行</span>                <span class="token comment">// 4) 让调用者抛出异常</span>                <span class="token comment">// 5) 让调用者自己执行任务</span>                <span class="token comment">//或者将以上的这些选项封装起来，由调用者调用时自己设计操作逻辑</span>                taskQueue<span class="token punctuation">.</span><span class="token function">tryPut</span><span class="token punctuation">(</span>rejectPolicy<span class="token punctuation">,</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Runnable</span> task<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 执行任务</span>            <span class="token comment">// 1) 当 task 不为空，执行任务</span>            <span class="token comment">// 2) 当 task 执行完毕，再接着从任务队列获取任务并执行</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>task<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">||</span>  <span class="token punctuation">(</span>task <span class="token operator">=</span> taskQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>timeOut<span class="token punctuation">,</span>timeUnit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"正在执行...&#123;&#125;"</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    task <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>workers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"worker 被移除&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                workers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/** * 步骤3：自定义拒绝策略接口 * @param &lt;T> */</span><span class="token annotation punctuation">@FunctionalInterface</span> <span class="token comment">// 拒绝策略   @FunctionalInterface的意思是这是一个函数式编程接口</span><span class="token keyword">interface</span> <span class="token class-name">RejectPolicy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue<span class="token punctuation">,</span> <span class="token class-name">T</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>从自定义一个简单的线程池我们可以看到线程池的基本要素：</p><ul><li>等待队列<br>等待队列中有几个必要状态(属性)：具体队列，锁，生产者条件变量，消费者条件变量，队列容量<br>再加上阻塞获取，阻塞添加，拒绝策略方法，超时获取，超时添加等方法</li><li>线程池<br>线程池中几个必要必要状态(属性)：等待队列，线程集合，线程核心数，拒绝策略，超时时间和时间单位倒是其次<br>线程池主要方法是execute方法用来执行任务，线程池中当然还有一个内部类，继承线程，包装任务，重写run方法</li><li>拒绝策略<br>单纯的函数式接口，该接口方法用于将线程池中拒绝策略方式交给使用者去实现</li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/1.png" loading="lazy"><br>大致的流程就是使用者提交任务，线程池创建线程处理任务，如果任务太多则放入等待队列。<br>以上是一个简单的线程池实现，下面让我们看看JDK中如何实现线程池。</p></li><li><p><strong>ThreadPoolExecutor</strong><br>下面是JDK中线程池的基本结构和继承体系：</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/4.png" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/6.png" style="zoom: 67%;" / loading="lazy"><ul><li><p><strong>线程池状态</strong><br>线程池的状态说的是在不同条件下线程池的行为。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/5.png" loading="lazy"></p><p>ThreadPoolExecutor 使用 int 的高 3 位来表示线程池状态，低 29 位表示线程数量<br>从数字上比较(第一位是符号位)，<code>TERMINATED &gt; TIDYING &gt; STOP &gt; SHUTDOWN &gt; RUNNING</code><br>这些信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 cas 原子操作进行赋值<br>当我们调用线程池shutdown方法时，此时线程池处于shutdown状态，即不会接受新线程，但会处理阻塞队列剩余任务</p></li><li><p><strong>线程池的构造方法</strong><br>再来看下JDK中线程池如何被创建，创建时需要哪些参数，下面是一个线程池构造方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>    <span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>     <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>    <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>    <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>    <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>    <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>    <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>1，corePoolSize 核心线程数目 (最多保留的线程数)</p><p>2，maximumPoolSize 最大线程数目(核心线程数加上救急线程数)</p><pre class="language-none"><code class="language-none">JDK中的线程池与我们自定义的线程池有一个比较大的区别在于，JDK线程池中的线程分为核心线程和救急线程核心线程一旦创建是一直运行的，而救急线程只有在核心线程满了，等待队列也满了后才会创建救急线程并且救急线程在一段时间内不使用后会自动销毁，我们自定义线程池中线程则没有细分全都是核心线程。不过要注意，一定要最大线程数目大于核心线程数目，才会创建救急线程，不然直接返回拒绝策略了</code></pre><p>3，keepAliveTime 救急线程的生存时间(核心线程没有生存时间这个东西，核心线程会一直运行) </p><p>4，unit 时间单位 - 针对救急线程，是keepAliveTime 的时间单位</p><p>5，workQueue 阻塞队列</p><pre class="language-none"><code class="language-none">不同的线程池实现使用不同的阻塞队列，JDK线程池中阻塞队列主要分为以下几个：1，ArrayBlockingQueue，基于数组的有界阻塞队列，按FIFO排序。新任务进来后，会放到该队列的队尾，有界的数组可以防止资源耗尽问题。当线程池中线程数量达到corePoolSize后，再有新任务进来，则会将任务放入该队列的队尾，等待被调度。如果队列已经是满的，则创建一个新线程，如果线程数量已经达到maxPoolSize，则会执行拒绝策略。2，LinkedBlockingQuene，基于链表的无界阻塞队列（其实最大容量为Interger.MAX），按照FIFO排序。由于该队列的近似无界性，当线程池中线程数量达到corePoolSize后，再有新任务进来，会一直存入该队列，而不会去创建新线程直到maxPoolSize，因此使用该工作队列时，参数maxPoolSize其实是不起作用的。newFixedThreadPool，newSingleThreadExecutor线程池使用该阻塞队列3，SynchronousQuene，一个不缓存任务的阻塞队列，生产者放入一个任务必须等到消费者取出这个任务。也就是说新任务进来时，不会缓存，而是直接被调度执行该任务，如果没有可用线程，则创建新线程，如果线程数量达到maxPoolSize，则执行拒绝策略。newCachedThreadPool使用该阻塞队列4，PriorityBlockingQueue，具有优先级的无界阻塞队列，优先级通过参数Comparator实现。</code></pre><p>6，threadFactory  创建一个新线程时使用的工厂，可以用来设定线程名、是否为daemon线程等</p><p>7，handler 拒绝策略</p><pre class="language-none"><code class="language-none">不同的框架实现的线程池有不同的拒绝策略，JDK中的拒绝策略是前4个1. ThreadPoolExecutor.AbortPolicy让调用者抛出 RejectedExecutionException 异常，这是默认策略2. ThreadPoolExecutor.CallerRunsPolicy 让调用者运行任务3. ThreadPoolExecutor.DiscardPolicy 放弃本次任务4. ThreadPoolExecutor.DiscardOldestPolicy 放弃队列中最早的任务，本任务取而代之5. Dubbo 的实现，在抛出 RejectedExecutionException 异常之前会记录日志，并dump线程栈信息，方便定位问题6. Netty 的实现，是创建一个新线程来执行任务7. ActiveMQ 的实现，带超时等待（60s）尝试放入队列，类似我们之前自定义的拒绝策略8. PinPoint 的实现，它使用了一个拒绝策略链，会逐一尝试策略链中每种拒绝策略</code></pre></li><li><p><strong>线程池如何提交任务</strong><br>ThreadPoolExecutor中主要有下面几种提交方式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1,提交任务，没有返回值</span><span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2，提交任务 task，用返回值 Future 获得任务执行结果，Future的原理就是利用我们之前讲到的</span><span class="token comment">//保护性暂停模式来接受返回结果的，主线程可以执行 FutureTask.get()阻塞方法来等待任务执行完成</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>案例如下：<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 提交任务，除了execute方法，还有submit方法     */</span>    <span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*            new Callable&lt;String>，泛型表示返回值类型         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"fuck"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*        Future,该类使用保护性暂停模式，用来传递两个线程之间结果的。     */</span>    pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3，提交 tasks 中所有任务，批量执行任务</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>案例如下：<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*        测试invokeAll方法，执行所有任务     */</span>    <span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futures <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"a"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"b"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"c"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    futures<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>f<span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//4，提交 tasks 中所有任务，带超时时间</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span class="token comment">//5，提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token comment">//6，提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消，带超时时间</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span></code></pre><p>除了提交方法外，还有一些其他方法如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//2种关闭线程方法</span><span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    线程池状态变为 SHUTDOWN,不会接收新任务,但已提交任务会执行完，包括等待队列里面的    此方法不会阻塞调用线程的执行，线程池处于shutdown状态*/</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    线程池状态变为 STOP,不会接收新任务,会将队列中的任务返回,并用interrupt的方式中断正在执行的任务*/</span><span class="token comment">// 不在 RUNNING 状态的线程池，此方法就返回 true</span><span class="token keyword">boolean</span> <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 线程池状态是否是 TERMINATED</span><span class="token keyword">boolean</span> <span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用shutdown方法后，由于调用使线程结束线程的方法是异步的并不会等待所有任务运行结束就返回，</span><span class="token comment">//因此如果想在线程池 TERMINATED 后做些其它事情，可以利用此方法等待</span><span class="token keyword">boolean</span> <span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>线程池中如何处理异常</strong><br>如果线程池中的线程执行任务时，如果任务抛出了异常，默认是中断执行该任务而不是抛出异常或者打印异常信息。<br>那么我们如何处理异常，如何获取线程池中异常呢？一般有下面两种方式：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1,直接任务中try,catch异常</span><span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"task1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2,使用 Future，错误信息都被封装进submit方法的返回方法中！</span><span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"task1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"result:&#123;&#125;"</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果任务正常执行，future接收返回值，出现异常则接收异常信息</span></code></pre></li><li><p><strong>线程池具体执行流程</strong></p><pre class="language-none"><code class="language-none">1）当池子大小(线程池中线程数)小于corePoolSize就新建线程，并处理请求2）当池子大小等于corePoolSize，把请求放入workQueue中，池子里的空闲线程就去从workQueue中取任务并处理3）当workQueue放不下新入的任务时，新建救急线程入池，并处理请求，如果池子大小撑到了maximumPoolSize就用RejectedExecutionHandler来做拒绝处理4）另外，当池子的线程数大于corePoolSize的时候，多余的线程(救急线程)会等待keepAliveTime长的时间，如果无请求可处理就自行销毁，其会优先创建  CorePoolSiz 线程， 当继续增加线程时，先放入Queue中，当 CorePoolSiz 和 Queue 都满的时候，就增加创建新线程(救急线程)，当线程达到MaxPoolSize的时候，就会抛出错误 org.springframework.core.task.TaskRejectedException(默认拒绝策略)另外MaxPoolSize的设定如果比系统支持的线程数还要大时，会抛出java.lang.OutOfMemoryError: unable to create new native thread异常。</code></pre><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/2.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/7.png" loading="lazy"></p></li></ul></li><li><p><strong>使用Executors创建的线程池</strong><br>Executors是Executor的工具类，用于创建不同的线程池</p><ul><li><p><strong>newFixedThreadPool</strong><br>newFixedThreadPool是固定大小的线程池，最大线程数等于核心线程数，即没有救急线程</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*该线程池特点：    1. 核心线程数 == 最大线程数（没有救急线程被创建），因此也无需超时时间    2. 阻塞队列是无界的，可以放任意数量的任务    3. 适用于任务量已知，相对耗时的任务*/</span></code></pre><p>下面是该线程池创建及使用：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 设置线程工厂如何新建线程     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token string">"Mythread_T"</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>newCachedThreadPool</strong><br>newCachedThreadPool是可变尺寸的线程池，因为没有线程池中没有核心线程数，全部都是救急线程<br>即有生存时间的线程，该线程池的等待队列使用SynchronousQueue实现，它是一个不存储元素的阻塞队列。<br>每个插入操作必须等到另一个线程调用移除操作。</p><p>该线程池构造参数及特点如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>      <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*特点：    1. 核心线程数是 0， 最大线程数是 Integer.MAX_VALUE，救急线程的空闲生存时间是 60s，        意味着全部都是救急线程（60s 后可以回收）且救急线程可以无限创建。    2. 队列采用了 SynchronousQueue 实现特点是，它没有容量，没有线程来取是放不进去的    3. 整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕，空闲 1分钟后        释放线程。 适合任务数比较密集，但每个任务执行时间较短的情况*/</span></code></pre><p>使用案例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//测试newCachedThreadPool内部队列的put，offer方法的区别</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"putting...1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                integers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 对比一下两种方法的区别</span>                <span class="token comment">//区别在于put方法会等take方法执行，而offer方法不会</span><span class="token comment">//                boolean offer = integers.offer(1);</span><span class="token comment">//                System.out.println(offer);</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 putted..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"putting...2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                integers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2 putted..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"taking  1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                integers<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"taking  2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                integers<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>newSingleThreadExecutor</strong><br>newSingleThreadExecutor，单任务线程池，池中只有一个线程工作，阻塞队列无界，<br>它能保证按照任务提交的顺序来执行任务。<br>该线程池构造参数及特点如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>     <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*特点：希望多个任务排队执行。线程数固定为 1，任务数多于 1 时，会放入无界队列排队。    任务执行完毕，这唯一的线程也不会被释放。*/</span></code></pre><p>那么该线程池与我们自己创建的单线程有什么区别呢？区别如下：</p><pre class="language-none"><code class="language-none">1. 和自己创建单线程执行任务的区别：自己创建一个单线程串行执行任务，如果任务执行失败而终止    那么没有任何补救措施，而线程池还会新建一个线程，保证池的正常工作2. Executors.newSingleThreadExecutor() 线程个数始终为1，不能修改   FinalizableDelegatedExecutorService 应用的是装饰器模式，只对外暴露了    ExecutorService 接口，因此不能调用threadPoolExecutor中特有的方法3. 和Executors.newFixedThreadPool(1) 初始时为1时的区别：   Executors.newFixedThreadPool(1) 初始时为1，以后还可以修改，对外暴露的是    ThreadPoolExecutor 对象，可以强转后调用 setCorePoolSize 等方法进行修改</code></pre><p>线程池使用如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySingleThreadExecutor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                        <span class="token string">"执行 >>> "</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出就是按顺序输出，一个任务一个任务串行执行</span></code></pre></li><li><p><strong>newScheduledThreadPool</strong><br>任务调度线程池，当你想让你的任务延迟执行，或者固定每隔一段时间执行一次，你可以使用任务调度线程池<br>当任务调度线程池还没有出来执行，使用的是Timer来实现上面两个功能。<br>Timer的特点是：它只能串行执行任务，同一时间只能有一个任务在执行，前一个任务的延迟或异常都将会影响到之后的任务<br>Timer的使用如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TimerTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">TimerTask</span> task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task2<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以想象如果task1执行时间过长，则task已被拖到超过1秒再执行任务，因为任务是串行</span></code></pre><p>使用ScheduledThreadPoolExecutor就不会有上述问题，该线程池表现为：线程数固定，<br>任务数多于线程数时，会放入无界队列排队。任务执行完毕，这些线程也不会被释放。用来执行延迟或反复执行的任务。<br>下面是两个使用案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定时执行任务</span>    <span class="token class-name">ScheduledExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//每过1秒执行一次任务，如果任务执行时间都要2秒，那么会等待这2秒执行完后再执行</span>    pool<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我最帅！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//上个任务执行完，等待1秒再次执行任务，如果任务执行时间要2秒，则会等这2秒过后，再等1秒时间后才执行任务</span>    <span class="token comment">/*pool.scheduleWithFixedDelay(()->&#123;        System.out.println("你最丑");    &#125;,1,1,TimeUnit.SECONDS);*/</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如何让每周五，早上8点定时执行任务</span>    <span class="token comment">/*        1,算出现在到周五时间差，如果现在比周五小，就取这周五时间差，如果现在已经过了周五则取下周五的时间差        2,计算一周有多少毫秒        2，创建线程池执行定时任务     */</span>    <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalDateTime</span> time <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMinute</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSecond</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withNano</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        time<span class="token operator">=</span>time<span class="token punctuation">.</span><span class="token function">plusWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//计算出现在距离周五早上8点时间差</span>    <span class="token keyword">long</span> initialDelay <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2,计算一周的毫秒值</span>    <span class="token keyword">long</span> period <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token class-name">ScheduledExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pool<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在是周五早上8点时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> initialDelay<span class="token punctuation">,</span>period<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>以上就是使用Executors创建的四种线程池，那么在生产中我们常使用哪种线程池呢？<br>答案：上面四种线程池我们都不应该使用！如果需要使用线程池最好自己new一个ThreadPoolExecutor<br>而不是通过Executors方法创建，原因如下：</p><pre class="language-none"><code class="language-none">FixedThreadPool和SingleThreadExecutor: 允许请求的队列长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致OOM。CachedThreadPool和ScheduledThreadPool: 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。</code></pre><p>说白了就是：使用有界队列，控制线程创建数量。<br>除了避免 OOM 的原因之外，不推荐使用 <code>Executors</code>提供的两种快捷的线程池的原因还有：</p><pre class="language-none"><code class="language-none">1,实际使用中需要根据自己机器的性能、业务场景来手动配置线程池的参数比如核心线程数、使用的任务队列、饱和策略等等。2，我们应该显示地给我们的线程池命名，这样有助于我们定位问题。</code></pre></li><li><p><strong>ForkJoinPool</strong><br>采用分治思想，一步步将任务拆分计算，是stream的底层实现，由于内容众多，有机会接触到了再学习。</p></li></ul><blockquote><p><span id="c">AQS基本认识</span></p></blockquote><p>AQS，全称AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架<br>(就是一套规范，实现它就能自定义锁，不同的实现就是不同的锁)<br>有很多基于AQS实现的锁，下面是实现AQS机制的体系：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/8.png" loading="lazy"></p><p>AQS主要构成：</p><ul><li><p>state属性，该属性用来表示资源的状态（分独占模式和共享模式），子类需要定义如何维护这个状态，控制如何获取锁和释放锁</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//相关api</span><span class="token number">1.</span> getState <span class="token operator">-</span> 获取 state 状态<span class="token number">2.</span> setState <span class="token operator">-</span> 设置 state 状态<span class="token number">3.</span> compareAndSetState <span class="token operator">-</span> cas 机制设置 state 状态<span class="token number">4.</span> 独占模式是只有一个线程能够访问资源，而共享 模式可以允许多个线程访问资源</code></pre></li><li><p>提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList</p></li><li><p>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet</p></li></ul><p>上面基于AQS机制实现的锁，大多都是继承Lock类，然后锁的内部类实现AQS抽象类，然后调用内部类的方法<br>这个锁的内部类，一般叫做同步器，是AQS的具体实现，下面是一个自定义的不可重入锁：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*        AQS,全称是 AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架        ReentrantLock底层实现就是AQS，另外，阻塞队列中阻塞的线程，是通过park，unpark阻塞的，        synchronized锁通过调用wait方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//测试自定义不可重入锁</span>        <span class="token class-name">MyLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"locking..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                utils<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"unlocking..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"locking..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"unlocking..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    下面实现一个不可重入的阻塞式锁：使用AbstractQueuedSynchronizer自定义一个同步器来实现自定义锁！    外部类实现Lock接口，内部类继承 AbstractQueuedSynchronizer 抽象类 */</span><span class="token keyword">class</span> <span class="token class-name">MyLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">&#123;</span>    <span class="token comment">//独占锁，同步器类</span>    <span class="token keyword">class</span> <span class="token class-name">MySync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>   <span class="token comment">//获取锁</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*                因为本次实现的是不可重入锁，所以没有使用到arg参数进行计数             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>   <span class="token comment">//释放锁</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//state被volatile修饰，这两个语句顺序不能更改，写屏障保证写屏障之前的代码更新到主存中</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>   <span class="token comment">//判断当前线程是否拥有锁</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建条件变量</span>        <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">MySync</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token comment">//加锁，不成功会进入等待队列</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token comment">//加锁，不成功进入等待队列后，这个线程可被打断</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token comment">//尝试加锁，只会尝试一次</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token comment">//尝试加锁，带超时时间</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token comment">//解锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token comment">//创建条件变量</span>    <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上便是AQS基本认识</p><blockquote><p><span id="d">AQS原理</span></p></blockquote><p>上面我们说过，像什么ReentrantLock锁，读写锁都是基于AQS的，并且这些类都有一个内部类<br>继承AbstractQueuedSynchronizer抽象类，这个类被叫做同步器，各个锁都是调用自身同步器中的方法。<br>我们只需要研究各个基于AQS实现的锁的同步器，就能明白AQS原理，这里我们使用ReentrantLock来举例说明<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/9.png" loading="lazy"></p><ul><li><p><strong>加锁过程</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1，开始</span><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2，ReentrantLock，调用的是同步器中lock方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3，NonfairSync，默认是非公平锁，该类继承自Sync,Sync继承AQS，这里是重写AQS的lock方法</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//第一次尝试获取锁</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//4，AQS，if中3个方法很重要，是整个AQS加锁流程</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token comment">//1)再尝试加锁</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//加锁失败创建waiter节点，放入队列</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//5，NonfairSync，子类重写AQS方法，nonfairTryAcquire调用的是父类的方法</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//6，Sync，该方法总结为：第二次尝试获取锁，判断是否是重入锁，获取不到锁返回false</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//尝试加锁</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断是否为重入锁</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//这里表明ReentrantLock是可重入锁</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//7，AQS，第6步如果返回false，则该线程就要被包装成waiter节点并加入队列了</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果队列已经被初始化，则将该节点放在队尾</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果队列还没其他节点，则初始化队列</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//8，AQS，当阻塞队列还未初始化时，进入enq初始化队列，并添加节点</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Must initialize</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>             node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token comment">//注意：我们的节点是第二位节点，并不是头结点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//9，AQS</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果现在的节点是第二个节点，则再尝试获取锁</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC//获取锁以后将头节点剔除队列</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//10，AQS，该方法第一次调用，用于设置现在节点的前一个节点等待状态为-1，第二次再调用，返回true</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ws<span class="token operator">></span><span class="token number">0</span>是节点已经被取消        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>  <span class="token comment">//遍历之前的节点，剔除取消的节点</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//11，AQS</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点被阻塞，如果线程打断状态是true，是阻塞不了的</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//自此，该线程被阻塞住，它需要等待前一个线程唤醒</span></code></pre></li><li><p><strong>解锁过程</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1，开始</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2，ReentrantLock</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3，AQS</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//尝试释放锁</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//释放成功后，通知队列中第二个节点</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//4，Sync</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//等于0，则释放锁成功，不等于0，是因为锁重入原因</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//5，AQS</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//获得头节点的下一个节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//使第二个正在暂停的节点继续运行</span>        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>条件变量过程</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/11.png" loading="lazy"></p><ul><li><p>await 流程</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1，开始</span><span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建ConditionObject对象</span>condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2，AQS，主要逻辑方法</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个节点并关联此线程</span>    <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放掉此线程的锁</span>    <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//</span>        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> THROW_IE<span class="token punctuation">)</span>        interruptMode <span class="token operator">=</span> REINTERRUPT<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// clean up if cancelled</span>        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3，AQS</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>    <span class="token comment">// If lastWaiter is cancelled, clean out.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        firstWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">else</span>        t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    lastWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//4，AQS</span><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">release</span><span class="token punctuation">(</span>savedState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> savedState<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CANCELLED<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//5，AQS</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>waitStatus <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION <span class="token operator">||</span> node<span class="token punctuation">.</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// If has successor, it must be on queue</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">findNodeFromTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//自此线程已经被阻塞park住了</span></code></pre></li><li><p>signal流程</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1，开始</span>condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2，AQS</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//判断当前线程是不是持有锁的线程，不是就报错</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> first <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token function">doSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3，Sync</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//4，AQS，唤醒条件变量中第一个节点</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSignal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>firstWaiter <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            lastWaiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>             <span class="token punctuation">(</span>first <span class="token operator">=</span> firstWaiter<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//5，AQS</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">transferForSignal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">Node</span> p <span class="token operator">=</span> <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将条件变量的头结点放入阻塞队列中</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> p<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//唤醒节点</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p><strong>公平锁与非公平锁区别</strong><br>区别在于 tryAcquire 方法的实现，如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//非公平锁的获取锁</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//公平锁获取锁</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  <span class="token comment">//公平锁在获取锁时会检查等待队列中有没有节点线程</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//让已经等待的线程获取锁，很公平</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>AQS的打断模式</strong><br>AQS有不可打断模式和可打断模式，这里的打断指的是等待获取锁的线程，即阻塞队列中的线程是否能打断<br>通常使用lock方法加锁，这种属于不可打断模式，而使用lockInterruptibly方法加锁，则阻塞的线程可被打断</p><p>在不可打断模式下，如果线程在等待的时候被打断了，该线程依然会留在AQS队列中，一直要等到获得锁后方能得知自己被打断了<br>在可打断模式下，如果线程在等待的时候被打断了，该线程会立即抛出InterruptedException异常</p></li><li><p><strong>AQS的waitState</strong><br>阻塞队列中的节点状态默认是0，处于队尾的节点在阻塞之前会将前一个节点的状态改成-1，所以处于队尾的节点状态一直都是0<br>如果线程在阻塞时被打断了，则该节点的状态大于0，另外处于条件变量中的节点状态全部都是-2<br>当条件变量中的节点被唤醒后，会被加入到阻塞队列队尾，并将节点状态由-2改成0</p></li></ul><p>以上便是AQS原理的全部内容，在本博客末尾链接中有关于AQS的图解原理。</p><blockquote><p><span id="f">其他一些锁的使用</span></p></blockquote><p>这里我们主要介绍一些常用锁的使用，下面前4个都是基于AQS实现的锁：</p><ul><li><p><strong>ReentrantReadWriteLock</strong><br>读写锁，当读操作远远高于写操作时，这时候使用读写锁让读-读可以并发，提高性能。读-写，写-写都是相互互斥的！<br>注意：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span>，读写锁中的读锁不支持条件变量<span class="token number">2</span>，重入时升级不支持：即持有读锁的情况下去获取写锁，会导致获取写锁永久等待，下面这种方式是不行的    r<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>        w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// ...</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>        r<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token number">3</span>，重入时降级支持：即持有写锁的情况下去获取读锁<span class="token keyword">class</span> <span class="token class-name">CachedData</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token comment">// 是否有效，如果失效，需要重新计算 data</span>    <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> cacheValid<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock</span> rwl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">processCachedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheValid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取写锁前必须释放读锁</span>            rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rwl<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 判断是否有其它线程已经获取了写锁、更新了缓存, 避免重复更新</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheValid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    data <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    cacheValid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 降级为读锁, 释放写锁, 这样能够让其它线程读取缓存</span>                rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                rwl<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 自己用完数据, 释放读锁</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">use</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>读写锁理解：</strong><br>读写锁用的是同一个 Sycn 同步器，因此等待队列、state 等也是同一个，读锁占据state高16位，写锁占据低16位<br>读写锁与ReentrantLock的主要区别在于，如果是读锁加锁，则节点是共享模式而不是独占模式<br>ReentrantLock的节点全是独占模式，在唤醒节点时，如果被唤醒的节点是共享模式，并且其下一个节点也是共享模式节点<br>则会唤醒此节点，以此类推，直到之后的节点不是共享模式就停止了，这就形成了多个共享节点同时运行<br>也就是多个线程读读并发，只有等这些共享节点全部释放完毕，才能唤醒独占节点，因为读写不能并发。</p><p>有人可能会问？既然读写锁中读读并发，那为什么还要加读写？<br>其实看源码就知道，读取线程如果不被阻塞队列管理起来，很可能导致脏读和不可重复读问题。</p><p>更多图解原理请看最后链接中文件。</p></li><li><p><strong>Semaphore</strong><br>信号量，用来限制能同时访问共享资源的线程上限。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/10.png" loading="lazy"></p><p>下面是一个简单的案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*        Semaphore,信号量，用来限制能同时访问共享资源的线程上限        ReentrantLock使用在。同一时刻只允许一个线程访问共享资源        Semaphore使用在，共享资源有多个，我允许多个线程访问共享资源，Semaphore只是希望对访问线程上限做限制     */</span>    <span class="token comment">//实现效果：每次最多只能有三个线程能访问共享资源</span>    <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取许可</span>                semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//释放许可</span>                semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>CountdownLatch</strong><br>CountDownLatch允许 count 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。<br>CountDownLatch是共享锁的一种实现,它默认构造 AQS 的 state 值为 count。当线程使用countDown方法时,<br>其实使用了<code>tryReleaseShared</code>方法以CAS的操作来减少state,直至state为0就代表所有的线程都调用了countDown方法。<br>当调用await方法的时候，如果state不为0，就代表仍然有线程没有调用countDown方法，那么就把已经<br>调用过countDown的线程都放入阻塞队列Park,并自旋CAS判断state  == 0，直至最后一个线程调用了countDown<br>使得state == 0，于是阻塞的线程便判断成功，全部往下执行。</p><p>该工具类用来进行线程同步协作，等待所有线程完成倒计时。<br>其中构造参数用来初始化等待计数值，await() 用来等待计数归零，countDown() 用来让计数减一<br>下面是两个简单的案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*        CountdownLatch：用来进行线程同步协作，等待所以线程完成倒计时        其中构造参数用来初始化等待计数值，await()用来等待计数归零，countDown()用来让计数减一     */</span>    <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程做自己的操作,t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计数减1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程做自己的操作,t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计数减1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程做自己的操作,t3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计数减1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//主线程会一直等到计数为0时才会继续运行</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//线程池和CountdownLatch结合使用</span>    <span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AtomicInteger</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            sum<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>CyclicBarri</strong><br>CyclicBarri，循环栅栏，用来进行线程协作，等待线程满足某个计数。构造时设置『计数个数』，<br>每个线程执行到某个需要“同步”的时刻调用 await() 方法进行等待，当等待的线程数满足『计数个数』时，<br>继续执行。跟CountdownLatch一样，但这个可以重用<br>下面是一个简单的案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*        CyclicBarrier，循环栅栏，用来进行线程协作，等待线程满足某个协作，        与CountdownLatch类似，不同的是，CountdownLatch中计数减完后，不能再重新使用，得重新创建对象并指定计数        而CyclicBarrier是，调用了await方法的线程会阻塞，当阻塞线程数量等于构造参数数量时，就会继续向下运行，        而且累加器可以循环使用     */</span>    <span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CyclicBarrier</span> cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始任务1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//2-1=1，计数减一</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成任务1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始任务2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//2-1=1，计数减一</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成任务2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>StampedLock</strong><br>该类自 JDK 8 加入，是为了进一步优化读性能，它的特点是在使用读锁、写锁时都必须配合【戳】使用<br>加解读锁</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> stamp <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>加解写锁</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> stamp <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">unlockWrite</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>乐观读，StampedLock 支持 tryOptimisticRead() 方法（乐观读），读取完毕后需要做一次 戳校验<br>如果校验通过，表示这期间确实没有写操作，数据可以安全使用，如果校验没通过，需要重新获取读锁，保证数据安全。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> stamp <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验戳</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 锁升级</span><span class="token punctuation">&#125;</span></code></pre><p>下面是一个简单的案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//提供一个数据容器类,内部分别使用读锁保护数据的 read()方法，写锁保护数据的 write()方法 </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DataContainerStamped</span> dataContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataContainerStamped</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 可以看到实际没有加读锁         */</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            dataContainer<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        utils<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            dataContainer<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">DataContainerStamped</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">StampedLock</span> lock <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">DataContainerStamped</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> readTime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> stamp <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        utils<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>readTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"尝试使用乐观读...&#123;&#125;"</span><span class="token punctuation">,</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"成功使用了乐观读&#123;&#125;,数据 &#123;&#125;"</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 锁升级 - 读锁</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"乐观读锁升级到写锁加锁 &#123;&#125;"</span><span class="token punctuation">,</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            stamp <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"乐观读锁升级到写锁完成 &#123;&#125;"</span><span class="token punctuation">,</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            utils<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>readTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"乐观读锁升级到写锁解锁 &#123;&#125;"</span><span class="token punctuation">,</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> stamp <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" 加上写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            utils<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意：StampedLock 不支持条件变量，并且不支持可重入。</p></li></ul><blockquote><p><span id="g">CompletableFuture异步编排</span></p></blockquote><p>现学现卖了，刚开始看到这个异步编排的名词还不知道是什么东西，后来看到代码，我突然意识到，这不就是JS中的Promise嘛<br>CompletableFuture类实现了CompletionStage和Future接口。Future是Java 5添加的类，用来描述一个异步计算的结果<br>但是获取一个结果时方法较少,要么通过轮询isDone，确认完成后，调用get()获取值，要么调用get()设置一个超时时间。<br>但是这个get()方法会阻塞着调用线程，这种阻塞的方式显然和我们的异步编程的初衷相违背。<br>为了解决这个问题，JDK吸收了guava的设计思想，加入了Future的诸多扩展功能形成了CompletableFuture。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/12.png" loading="lazy"></p><p>注意：CompletableFuture的命名规则是有规律的</p><pre class="language-none"><code class="language-none">xxx()：表示该方法将继续在已有的线程中执行;xxxAsync()：表示将异步在线程池中执行。如果指定了线程池，会在指定的线程池中执行，如果没有指定，默认会在ForkJoinPool.commonPool()中执行</code></pre><p>以下是CompletableFuture的部分API</p><ul><li><p><strong>创建异步任务</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//runAsync方法不支持返回值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token comment">//supplyAsync可以支持返回值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> supplier<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">></span></span> supplier<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token comment">//举个案例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>                <span class="token number">5</span><span class="token punctuation">,</span>                <span class="token number">2L</span><span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> future4 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"future4带有返回值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1025</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭线程池</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>主动获得结果和触发计算</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/18.png" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一直会等待下去</span><span class="token comment">//System.out.println(future.get());</span><span class="token comment">//2s后如果没有返回结果就报错</span><span class="token comment">//System.out.println(future.get(2,TimeUnit.SECONDS));</span><span class="token comment">//没有计算完成的情况下,给我一个替代结果，如果主程序执行到getNow，之前的异步还没执行完，则直接返回参数值</span><span class="token comment">//Integer now = future.getNow(3);</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这里停顿了3s,而我2s后就有结果了,所以可以正常拿到值，输出：false获取到的值是1</span><span class="token comment">//如果这里停顿1s,而我2s后才有结果,那么就不可以正常拿到值，输出：true获取到的值是444</span><span class="token keyword">boolean</span> flag <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token operator">+</span><span class="token string">"获取到的值是"</span><span class="token operator">+</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>对计算结果进行处理</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/14.png" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果加上int error=1/0; 由于存在依赖关系(当前步错,不走下一步),当前步骤有异常的话就叫停</span>    <span class="token keyword">int</span> error<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//出现异常时根本不执行此处代码</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A:"</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B:"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来检测出现异常时是否执行此代码，并且v是多少，答案执行，v是null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result-----"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"over...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果程序正常，则输出</span>mainover<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">2</span><span class="token class-name">A</span><span class="token operator">:</span><span class="token number">2</span><span class="token class-name">B</span><span class="token operator">:</span><span class="token number">4</span>result<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">4</span>    <span class="token comment">//如果程序出现异常，则输出</span>mainover<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">1</span><span class="token class-name">B</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token class-name">C</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span><span class="token class-name">CompletionException</span><span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">ArithmeticException</span><span class="token operator">:</span> <span class="token operator">/</span> by zero</code></pre></li><li><p><strong>对计算结果进行消费</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/15.png" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>f <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> f<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>f <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> f<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>r <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 任务A执行完执行B,并且B不需要A的结果</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"resultA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 任务A执行完成执行B,B需要A的结果,但是任务B无返回值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"resultA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>resultA <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 任务A执行完成执行B,B需要A的结果,同时任务B有返回值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"resultA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>resultA <span class="token operator">-></span> resultA <span class="token operator">+</span> <span class="token string">" resultB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>对计算速度进行选用(applyToEither)</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/16.png" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//下面这个在第一个中停留1s,在第二种停留2s,返回的结果是1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//暂停几秒钟线程</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyToEither</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//暂停几秒钟线程</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>对计算结果进行合并</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/17.png" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//两个CompletionStage任务都完成后,最终把两个任务的结果一起交给thenCombine来处理</span><span class="token comment">//先完成的先等着,等待其他分支任务</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenCombine</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> r1 <span class="token operator">+</span> r2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenCombine</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r3<span class="token punctuation">,</span> r4<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> r3 <span class="token operator">+</span> r4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenCombine</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> r1 <span class="token operator">+</span> r2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>注意：如果执行XXXAsync方法，任务会交给默认线程池去执行，默认线程池中的线程都是守护线程<br>主线程一旦结束，线程池中线程都需要结束，所以可能导致一种情况：主线程执行完后，线程池中的任务还未执行完就退出了。</p><p>最后是别人总结的API图片：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/13.png" loading="lazy"></p><blockquote><p><span id="h">ThreadLocal</span></p></blockquote><ul><li><p><strong>ThreadLocal的认识</strong><br>什么是ThreadLocal，ThreadLocal是线程安全的另一种思路，想想看，线程安全产生的原因是因为多个线程<br>共享一个共享变量，那如果我们每个线程都使用自己的变量，也就没有共享变量了，那么线程也就不存在安全问题了<br>具体定义如下：</p><pre class="language-none"><code class="language-none">从Java官方文档中的描述：ThreadLocal类用来提供线程内部的局部变量。这种变量在多线程环境下访问(通过get和set方法访问)时能保证各个线程的变量相对独立于其他线程内的变量。ThreadLocal实例通常来说都是private static类型的，用于关联线程和线程上下文。说直白点：ThreadLocal就是提供给每个线程操作变量的工具类，做到了线程之间的变量隔离目的ThreadLocal，也叫线程变量</code></pre><p>ThreadLocal与锁实现线程安全的角度是不一样的，它们适用的场景不同，下面是两者的区别</p><pre class="language-none"><code class="language-none">synchronized原理:同步机制采用’以时间换空间’的方式, 只提供了一份变量,让不同的线程排队访问侧重点:多个线程之间访问资源的同步性ThreadLocal原理:ThreadLocal采用’以空间换时间’的方式, 为每一个线程都提供了一份变量的副本,从而实现同时访问而相不干扰侧重点:多线程中让每个线程之间的数据相互隔离</code></pre><p><strong>ThreadLocal的基本使用</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//没有ThreadLocal的场景</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">test2</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">test3</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    上面我们可以看到，在一个线程生命周期内调用了好几个方法，当我们想传递一个参数在其他地方使用时    不得不将每个方法都添加参数，并且逐层传递，例如我只需要在test3拿到userid，因为调用关系    不得不给test1，test2也添加参数进行传递，那ThreadLocal就可以解决这种问题，    因为这些方法调用全部是在一个线程生命周期内，如果我把值保存在线程内部，那么只要我线程还没结束    我就可以在任意地方获取这个值，而不需要像这种逐层传递参数方式，下面是使用ThreadLocal的方式*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        local<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">test2</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">test3</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>local<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        local<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    我们只需要把值存到线程中，然后在需要的地方取出来就行，那么你能有两个疑问        1，我看到明明是把值存到ThreadLocal中，为什么说存到了线程中呢？        2，为什么在最后还需要加上local.remove();语句呢？这么有什么作用吗？    不急，我们接下来慢慢讲*/</span></code></pre></li><li><p><strong>ThreadLocal原理</strong><br>让我们回到上面的问题，我们明明把值存到Thread中，为什么说是存到线程中，为什么可以在线程生命周期内获取到值呢？<br>这不得不说下线程了，Thread类中有两个属性，一个是threadLocals，一个是inheritableThreadLocals<br>这两个都是变量名，而他们的变量类型是ThreadLocalMap，但是和Map结构又不相同<br>ThreadLocalMap有一个内部类，名为Entry，它是Map结构，key存的是ThreadLocal，Value存的是我们的值而ThreadLocalMap本身结构是Entry数组，可以想象，一个ThreadLocalMap中可以有多个Entry，<br>而每个entry中存放不同的ThreadLocal和值，我们创建的ThreadLocal对象调用set后，其内部拿到本线程的<br>ThreadLocalMap，然后将ThreadLocal对象和我们存的值保存成entry，放入ThreadLocalMap中<br>当我们需要值得时候，直接获取当前线程的ThreadLocalMap，根据ThreadLocal对象获取值就行了<br>下面是ThreadLocal的方法解析：</p><pre class="language-java" data-language="java"><code class="language-java"> <span class="token comment">/**  * 返回当前线程中保存ThreadLocal的值  * 如果当前线程没有此ThreadLocal变量，  * 则它会通过调用&#123;@link #initialValue&#125; 方法进行初始化值  *  * @return 返回当前线程对应此ThreadLocal的值  */</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前线程对象</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取此线程对象中维护的ThreadLocalMap对象</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果此map存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 以当前的ThreadLocal为key，调用getEntry获取对应的存储实体e</span>        <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">.</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 找到对应的存储实体 e </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token comment">// 获取存储实体 e 对应的 value值</span>            <span class="token comment">// 即为我们想要的当前线程对应此ThreadLocal的值</span>            <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果map不存在，则证明此线程没有维护的ThreadLocalMap对象</span>    <span class="token comment">// 调用setInitialValue进行初始化</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * set的变样实现，用于初始化值initialValue， * 用于代替防止用户重写set()方法 * * @return the initial value 初始化后的值 */</span><span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用initialValue获取初始化的值</span>    <span class="token class-name">T</span> value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取当前线程对象</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取此线程对象中维护的ThreadLocalMap对象</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果此map存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token comment">// 存在则调用map.set设置此实体entry</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment">// 1）当前线程Thread 不存在ThreadLocalMap对象</span>        <span class="token comment">// 2）则调用createMap进行ThreadLocalMap对象的初始化</span>        <span class="token comment">// 3）并将此实体entry作为第一个值存放至ThreadLocalMap中</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回设置的值value</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 获取当前线程Thread对应维护的ThreadLocalMap  *  * @param  t the current thread 当前线程 * @return the map 对应维护的ThreadLocalMap  */</span><span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** *创建当前线程Thread对应维护的ThreadLocalMap  * * @param t 当前线程 * @param firstValue 存放到map中第一个entry的值 */</span><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这里的this是调用此方法的threadLocal</span>    t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>下面是ThreadLocal，Thread，ThreadLocalMap关系图<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/20.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/19.png" loading="lazy"><br>看到上面的结构图，你可能已经意识到了，我们如果想保存一个值就需要创建一个ThreadLocal对象<br>如果想保存多个值，就需要创建多个ThreadLocal对象，你一个ThreadLocal调用多次set方法是没用的，最终会被覆盖掉。<br>OK，现在你弄清楚了ThreadLocal的原理了，但是你可能还有疑问上面图中为什么Entry对象的key是弱引用，什么是弱引用？</p></li><li><p><strong>Java中四大引用类型</strong></p><p>Java中的引用类型分为强软弱虚四种引用<br>强引用，就是我们平时使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//obj指向堆中对象，只要obj还指向，那么gc线程就不能回收这个对象</span></code></pre><p>软引用，GC线程发现堆内存不够时才会回收软引用指向的对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R2_SoftReference</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> soft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10M</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>soft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//gc回收</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>soft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//再分配一个数组,好heap(堆)放不下, 这个时候系统会回收一次, 如果不够,会把软引用回收</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>soft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//结果:</span><span class="token punctuation">[</span><span class="token class-name">B</span><span class="token annotation punctuation">@1540e19d</span><span class="token punctuation">[</span><span class="token class-name">B</span><span class="token annotation punctuation">@1540e19d</span><span class="token keyword">null</span> <span class="token comment">//测试之前要设置虚拟机参数 -Xmx30M 堆内存最大30M 用于测试</span></code></pre><p>弱引用，遇到GC线程就会回收对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R3_WeakReference</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">></span></span> weak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weak<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//gc回收</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遇到GC就会被回收</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weak<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果<span class="token operator">:</span>com<span class="token punctuation">.</span>cz<span class="token punctuation">.</span>reference<span class="token punctuation">.</span><span class="token class-name">C</span><span class="token annotation punctuation">@3c679bde</span><span class="token keyword">null</span>finalize</code></pre><p>虚引用，看见就回收, get不到值，一直为null</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R4_PhantomReference</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> LIST <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReferenceQueue</span> QUEUE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">></span></span> phantomReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                LIST<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>phantomReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">></span></span> poll <span class="token operator">=</span> QUEUE<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>poll <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----虚引用对象被JVm回收了--------"</span> <span class="token operator">+</span> poll<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果<span class="token operator">:</span><span class="token keyword">null</span><span class="token keyword">null</span>finalize<span class="token keyword">null</span><span class="token keyword">null</span></code></pre><p>更多的引用知识点请看下面的文章，这么不再深究，我们只需要知道，ThreadLocalMap的Entry中的key是弱引用即可</p></li><li><p><strong>ThreadLocalMap的缺陷</strong><br>ThreadLocalMap中Entry的key使用强引用会怎样？<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/21.png" loading="lazy"><br>ThreadLocalMap中Entry的key使用弱引用会怎样？<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/22.png" loading="lazy"><br>从上面我们可以看到，不管是使用强引用还是使用弱引用都有可能造成内存泄漏，这和强弱引用没关系，那内存泄漏跟什么有关呢？<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread3/23.png" loading="lazy"><br>OK，既然强弱引用都可以，为什么一定要用弱引用呢？<br>因为，在ThreadLocalMap中的set/getEntry方法中，会对key为null (也即是ThreadLocal为null)进行判断<br>如果为null的话,那么是会对value置为null的。<br>这就意味着使用完ThreadLocal , CurrentThread依然运行的前提下,就算忘记调用remove方法<br>弱引用比强引用可以多一层保障：弱引用的ThreadLocal会被回收，对应的value在下一次ThreadLocalMap<br>调用set,get,remove中的任一方法的时候会被清除,从而避免内存泄漏。</p></li><li><p><strong>InheritableThreadLocal的认识</strong></p><p>让我们先来看个案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        local<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>local<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            local<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//主线程等待输出结果</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    输出结果为null，为什么呢？其实也很好解释，你的username保存在main线程的ThreadLocalMap中    你在新创建的线程中肯定获取不了username啊，那么如何才能让我在新线程中获取到username呢？    这就要使用InheritableThreadLocal了*/</span><span class="token comment">//将ThreadLocal对象替换为InheritableThreadLocal对象</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//其他都不需要更改，你就会发现就能拿到username了</span></code></pre><p>那么怎么样拿到其他线程的数据的呢？我们看InheritableThreadLocal源码找找看</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 仅仅是将获取map变为从线程中获取inheritableThreadLocals变量</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//仅仅是将赋值改为设置到线程的inheritableThreadLocals 变量</span>    t<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    这里跟ThreadLocal几乎一模一样，不过这个map获取的是线程的inheritableThreadLocals变量    而ThreadLocal获取的是线程的ThreadLocals变量而已，所以实现线程之间数据传递，不是由    inheritableThreadLocals类决定的，而是由Thread类决定的*/</span></code></pre><p>让我们继续看看线程类中源码部分：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//我测试代码中使用的线程的构造方法</span><span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//核心是init方法，其他构造方法也是调用init方法进行线程的初始化</span>       <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                     <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">,</span>                     <span class="token keyword">boolean</span> inheritThreadLocals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//由此可见name是必须设置，默认是thread-内部维护的自增方法</span>                         <span class="token comment">//此处就不发散开了</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"name cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">//将当前线程设置为新线程的父线程</span>       <span class="token class-name">Thread</span> parent <span class="token operator">=</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//省略代码----</span>       <span class="token comment">//初始时沿用父线程的守护线程属性</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>daemon <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//初始时沿用父线程的优先级</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//上下文类加载器的设置，这个可以写一个关于类加载器的文章来具体介绍，此处</span>       <span class="token comment">//就不发散了</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">isCCLOverridden</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>contextClassLoader <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">else</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>contextClassLoader <span class="token operator">=</span> parent<span class="token punctuation">.</span>contextClassLoader<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>inheritedAccessControlContext <span class="token operator">=</span>               acc <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> acc <span class="token operator">:</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//构造方法中传入了Runnable接口就有，否则为null，为null则调用在即的run方法        </span>       <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>       <span class="token function">setPriority</span><span class="token punctuation">(</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//#####此处是关键之处#######</span>       <span class="token comment">//默认inheritThreadLocals =true,那么就关心父线程的inheritableThreadLocals 变量了</span>       <span class="token comment">//由InheritableThreadLocal重写的两个方法可以看出，父线程如果使用其设置了上下文变量</span>       <span class="token comment">//那么parent.inheritableThreadLocals是有值得</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>inheritThreadLocals <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>          <span class="token comment">// 将父线程的变量遍历到子线程的inheritableThreadLocals 变量中</span>          <span class="token comment">//从而实现了新开线程也能获取到父线程设置的变量值了，</span>          <span class="token comment">//而且从该方法可以看出，线程的儿子可以得到，线程的孙子也能通过同样的方法获取到</span>          <span class="token comment">//该过程是自上而下传递的</span>          <span class="token comment">//#####此处是关键之处########</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span>               <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">createInheritedMap</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* Stash the specified stack size in case the VM cares */</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>stackSize <span class="token operator">=</span> stackSize<span class="token punctuation">;</span>         <span class="token comment">/* Set thread ID */</span>       tid <span class="token operator">=</span> <span class="token function">nextThreadID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p>我们可以看到，新线程在创建的时候，会将原来线程的inheritableThreadLocals变量的数据拷贝到新线程中<br>所以新线程中可以访问到其他线程的数据。</p></li><li><p><strong>InheritableThreadLocal的缺陷</strong><br>我们知道InheritableThreadLocal已经很优秀了，能在线程之间传递数据，它还存在缺陷吗？请看下面的案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token comment">//创建10个线程，每个线程中存放</span>                local<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//使用线程池中获取值</span>                pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>local<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    local<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"threadName-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//等待上述操作执行完毕</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span>threadName<span class="token operator">-</span><span class="token number">0</span><span class="token keyword">null</span><span class="token keyword">null</span><span class="token keyword">null</span><span class="token keyword">null</span><span class="token keyword">null</span>threadName<span class="token operator">-</span><span class="token number">2</span><span class="token keyword">null</span>threadName<span class="token operator">-</span><span class="token number">1</span><span class="token keyword">null</span></code></pre><p>上述代码含义：创建10个线程，每个线程中都有一个InheritableThreadLocal对象，保存着一个entry<br>我想在数据库连接池中访问这10个线程中的每一个数据，并输出出来，但是结果显然不是我想要的，<br>问题出在哪里呢？因为线程池是复用的啊，线程池3个线程创建出来后就不再创建了，当更多任务提交后<br>也是用这已经创建好的线程，然后InheritableThreadLocal的数据交换，只发生在线程创建的时候啊<br>三个线程创建完毕后，还是原来的三个线程执行local.get()，这个时候获取的数据都是旧数据(如果你没remove的话)<br>那么上面的问题该如何解决呢？阿里巴巴的TransmittableThreadLocal横空出世</p></li><li><p><strong>TransmittableThreadLocal</strong><br>先来看下TransmittableThreadLocal如何解决上面的问题的，我们导入该maven依赖，代码更改后如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1,使用TransmittableThreadLocal代替InheritableThreadLocal</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">TransmittableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> local <span class="token operator">=</span>                                  <span class="token keyword">new</span> <span class="token class-name">TransmittableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                local<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//2，使用TtlRunnable.get方法包装任务</span>                pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">TtlRunnable</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>local<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    local<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"threadName-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//等待上述操作执行完毕</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span>threadName<span class="token operator">-</span><span class="token number">3</span>threadName<span class="token operator">-</span><span class="token number">1</span>threadName<span class="token operator">-</span><span class="token number">4</span>threadName<span class="token operator">-</span><span class="token number">5</span>threadName<span class="token operator">-</span><span class="token number">6</span>threadName<span class="token operator">-</span><span class="token number">7</span>threadName<span class="token operator">-</span><span class="token number">9</span>threadName<span class="token operator">-</span><span class="token number">2</span>threadName<span class="token operator">-</span><span class="token number">8</span>threadName<span class="token operator">-</span><span class="token number">0</span></code></pre><p>那么TransmittableThreadLocal是如何做到在复用的线程中也能获取到值呢？<br>首先，从使用上来看，不管是修饰Runnable还是修饰线程池，本质都是将Runnable增强为TtlRunnable。<br>而从实现线程变量传递的原理上来看，TTL做的实际上就是将原本与Thread绑定的线程变量，<br>缓存一份到TtlRunnable对象中，在执行子线程任务前，将对象中缓存的变量值设置到子线程的ThreadLocal<br>中以供run()方法的代码使用，然后执行完后，又恢复现场，保证不会对复用线程产生影响。    </p><p>更多TransmittableThreadLocal原理内容请看下面链接</p></li></ul><blockquote><p><span id="i">文章及资料</span></p></blockquote><ul><li><p><a href="https://www.cnblogs.com/dolphin0520/p/10693891.html">深入理解Java中的不可变对象 </a></p></li><li><p><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html">浅谈Java中的final关键字</a></p></li><li><p><a href="https://www.cnblogs.com/haitaofeiyang/p/7725274.html">可变对象（immutable）和不可变对象（mutable）</a></p></li><li><p><a href="https://www.cnblogs.com/dragonetyu/articles/7592631.html">java 线程池带图详解</a></p></li><li><p><a href="https://www.cnblogs.com/cgsdg/p/15933435.html">线程池 ThreadPoolTaskExecutor 参数</a></p></li><li><p><a href="https://blog.csdn.net/TZ845195485/article/details/109210095">JUC并发编程目录</a></p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306581182447650">使用CompletableFuture</a></p></li><li><p><a href="https://blog.csdn.net/bbscz007/article/details/105686382">Java中引用类型 和 ThreadLocal</a></p></li><li><p><a href="https://blog.csdn.net/w172087242/article/details/83375022">java线程变量那点事儿</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/158033837">闲谈ThreadLocal</a></p></li><li><p><a href="https://blog.csdn.net/boguesfei/article/details/82838087">虚引用(PhantomReference)</a></p></li><li><p><a href="https://www.cnblogs.com/hama1993/p/10409740.html">TransmittableThreadLocal的使用及原理解析</a></p></li><li><p><a href="https://github.com/NicknamedCoco/cdn/tree/master/blog/thread">学习资料</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊多线程(二)</title>
      <link href="2022/02/14/%E8%81%8A%E8%81%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%BA%8C/"/>
      <url>2022/02/14/%E8%81%8A%E8%81%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>过个年感觉把自己过没了，明明很多东西都没学好，但总是提不起精神来，毕设是我上半年的心病，<br>但时间非常紧张，我3月份结束多线程网课，准备去杭州找份工作，与此同时，还要准备毕设，<br>偏偏毕设要做一个分布式的系统，怪我自己太自信了，以为学习完了前后端分布式就能搞定毕设，<br>实际上，知道和会使用中间有巨大的鸿沟，我还是太嫩了点，现在就想看完多线程网课，然后看尚硅谷类似的项目<br>把尚硅谷的分布式项目搞出来再修改这个项目，把若依的项目作为毕设的后台管理系统，前端再弄个网页。<br>算是拼凑一下吧，时间很紧迫，还不知道要不要去找工作，找工作感觉也浪费时间了，到时候工作上肯定要学习其他东西。<br>总之，加油吧！！！</p><p><strong>本篇博客内容如下</strong>：</p><ul><li><a href="#a"><strong>wait&amp;notify</strong></a></li><li><a href="#b"><strong>park&amp;unpark</strong></a></li><li><a href="#c"><strong>线程状态转换</strong></a></li><li><a href="#d"><strong>线程活跃性问题</strong></a></li><li><a href="#e"><strong>ReentrantLock</strong></a></li><li><a href="#f"><strong>Java内存模型</strong></a></li><li><a href="#g"><strong>Volatile原理</strong></a></li><li><a href="#h"><strong>CAS的认识</strong></a></li><li><a href="#i"><strong>JUC包下的类</strong></a></li><li><a href="#j"><strong>Unsafe</strong></a></li></ul><blockquote><p><span id="a">wait&amp;notify</span></p></blockquote><p>我们都知道线程的wait和notify方法是用来同步线程的，线程调用wait后，释放锁，进入monitor的waitSet队列等待<br>此时线程状态是waiting，此时线程不能被打断，而是需要等待其他线程唤醒，这与后面讲的ReentrantLock不同<br>ReentrantLock是可以被打断的。</p><p>那么既然wait和notify是用来同步线程的，那么就有以下几个实际应用，或者说设计模式吧。</p><ul><li><p><strong>同步模式之保护性暂停</strong><br>同步说的是，一个线程一直等待另一个线程的结果才会继续运行<br>保护性暂停被用来：一个线程实时等待另一个线程的执行结果<br>下面是保护性暂停的一个案例：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread2/1.png" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//案例，t1线程等待t2线程</span>        <span class="token class-name">GuardedObject</span> guardedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuardedObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在准备获取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> response <span class="token operator">=</span> guardedObject<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2发送结果为："</span><span class="token operator">+</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在准备发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            guardedObject<span class="token punctuation">.</span><span class="token function">setResponse</span><span class="token punctuation">(</span><span class="token string">"t1是大傻逼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">GuardedObject</span><span class="token punctuation">&#123;</span>    <span class="token comment">//用来交换线程结果</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> response<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//while防止虚假唤醒</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>response<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResponse</span><span class="token punctuation">(</span><span class="token class-name">String</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token operator">=</span>response<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面是同步性暂停的一个简单的案例，那么上面代码还是有点不足，不足在于t1线程获取结果会一直等待<br>直到t2线程设置好值，那么我们可以在上述代码上进行改进，增加超时使得t1在等待一段时间后，<br>如果在超时时间内还没有返回消息，就直接返回不等了，下面是改进代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//案例，t1线程等待t2线程</span>        <span class="token class-name">GuardedObject2</span> guardedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuardedObject2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在准备获取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> response <span class="token operator">=</span> guardedObject<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2发送结果为："</span><span class="token operator">+</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在准备发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            guardedObject<span class="token punctuation">.</span><span class="token function">setResponse</span><span class="token punctuation">(</span><span class="token string">"t1是大傻逼"</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">GuardedObject2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//保护性暂停进阶版，增加超时</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> response<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//开始时间</span>            <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//已经等待时间</span>            <span class="token keyword">long</span> passedTime <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>response<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//还要等待时间</span>                <span class="token keyword">long</span> waitedTime <span class="token operator">=</span> timeout<span class="token operator">-</span>passedTime<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitedTime<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>waitedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                passedTime<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>begin<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResponse</span><span class="token punctuation">(</span><span class="token class-name">String</span> response<span class="token punctuation">,</span><span class="token class-name">Integer</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token operator">=</span>response<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>除了增加超时外，其实上述代码实际上还存在一个缺陷，那就是：如果是多对线程之间通信，<br>那么你就要创建多个GuardedObject对象，因为一个response只能为一对线程通信嘛，<br>下面是一种改进，允许多对线程传递数据。</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread2/2.png" loading="lazy"><br>多任务版 GuardedObject图中 Futures 就好比居民楼一层的信箱（每个信箱有房间编号）<br>左侧的 t0，t2，t4 就好比等待邮件的居民，右侧的 t1，t3，t5 就好比邮递员。<br>如果需要在多个类之间使用 GuardedObject 对象，作为参数传递不是很方便，因此设计一个用来解耦的中间类，<br>这样不仅能够解耦【结果等待者】和【结果生产者】，还能够同时支持多个任务的管理。<br>和生产者消费者模式的区别就是：这个生产者和消费者之间是一一对应的关系，<br>但是生产者消费者模式并不是。rpc框架的调用中就使用到了这种模式。</p><p>案例代码如下：</p><ul><li><p>People&amp;Postman</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GuardedObject2</span> guardedObject <span class="token operator">=</span> <span class="token class-name">MailBoxes</span><span class="token punctuation">.</span><span class="token function">createGuardedObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收信人："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",正在等信来，关联id:"</span><span class="token operator">+</span>guardedObject<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> response <span class="token operator">=</span> guardedObject<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收信人："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"，信的内容是："</span><span class="token operator">+</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Postman</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mail<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Postman</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> mail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mail <span class="token operator">=</span> mail<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GuardedObject2</span> guardedObject2 <span class="token operator">=</span> <span class="token class-name">MailBoxes</span><span class="token punctuation">.</span><span class="token function">getGuardedObject2</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",正在送信，关联id:"</span><span class="token operator">+</span>guardedObject2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        guardedObject2<span class="token punctuation">.</span><span class="token function">setResponse</span><span class="token punctuation">(</span>mail<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>MailBoxes</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MailBoxes</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">GuardedObject2</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//生成id</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GuardedObject2</span> <span class="token function">getGuardedObject2</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GuardedObject2</span> <span class="token function">createGuardedObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">GuardedObject2</span> guardedObject2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuardedObject2</span><span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>guardedObject2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>guardedObject2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> guardedObject2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取map中所有id</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">getIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>GuardedObject3</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GuardedObject3</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//增加id属性</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">GuardedObject3</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">GuardedObject3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//保护性暂停进阶版，增加超时</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> response<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//开始时间</span>            <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//已经等待时间</span>            <span class="token keyword">long</span> passedTime <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>response<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//还要等待时间</span>                <span class="token keyword">long</span> waitedTime <span class="token operator">=</span> timeout<span class="token operator">-</span>passedTime<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitedTime<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>waitedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                passedTime<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>begin<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResponse</span><span class="token punctuation">(</span><span class="token class-name">String</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token operator">=</span>response<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>Test，测试类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*            小知识：内存泄漏是存在未释放的对象，内存溢出是堆中对象太多占满堆内存         */</span>        <span class="token comment">/*            本次案例实现，多个线程通信，借助中间类MailBoxes解耦收件人和邮递员         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> id <span class="token operator">:</span> <span class="token class-name">MailBoxes</span><span class="token punctuation">.</span><span class="token function">getIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Postman</span><span class="token punctuation">(</span><span class="token string">"postman"</span><span class="token operator">+</span>id<span class="token punctuation">,</span>id<span class="token punctuation">,</span><span class="token string">"postman"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"送的信"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//测试结果</span>收信人：people1<span class="token punctuation">,</span>正在等信来，关联id<span class="token operator">:</span><span class="token number">1</span>收信人：people0<span class="token punctuation">,</span>正在等信来，关联id<span class="token operator">:</span><span class="token number">3</span>收信人：people2<span class="token punctuation">,</span>正在等信来，关联id<span class="token operator">:</span><span class="token number">2</span>当前线程：postman3<span class="token punctuation">,</span>正在送信，关联id<span class="token operator">:</span><span class="token number">3</span>当前线程：postman2<span class="token punctuation">,</span>正在送信，关联id<span class="token operator">:</span><span class="token number">2</span>收信人：people0，信的内容是：postman3送的信收信人：people2，信的内容是：postman2送的信当前线程：postman1<span class="token punctuation">,</span>正在送信，关联id<span class="token operator">:</span><span class="token number">1</span>收信人：people1，信的内容是：postman1送的信</code></pre></li></ul></li><li><p><strong>异步模式之生产者/消费者</strong></p><p>生产者消费者模式与保护性暂停的区别在于，生产者消费者模式中消费者线程与生产者线程并不是一一对应的<br>JDK中各种阻塞队列，采用的就是这种模式。<br><strong>“异步”的意思就是生产者产生消息之后消息没有被立刻消费，而“同步模式”中，消息在产生之后被立刻消费了。</strong><br>下面是一个线程间通信的消息队列，要注意的是，像rabbitmq等消息框架是进程间通信的。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread2/3.png" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MessageQueue</span> messageQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//生产者线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token comment">//注意，lambda中引用外部变量，外部变量必须为不可变，这里messageQueue类被final修饰，id是基本类型，是不可变类</span>                messageQueue<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"消息"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"生产者"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//消费者线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                messageQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"消费者"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MessageQueue</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//存放消息的容器</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//消息队列容量</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//消费者</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前无消息，消费者阻塞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者已消费一条消息，消息："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> message<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//生产者</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息队列已满，"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在阻塞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            list<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"已存入一条消息："</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Message&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", value='"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><blockquote><p><span id="b">park&amp;unpark</span></p></blockquote><p>park和unpark是LockSupport的两个方法，作用同wait，notify类似，用来同步线程<br>这两个方法底层都是调用的Unsafe的park，unpark方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 暂停当前线程</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 恢复某个线程的运行</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>park&amp;unpark原理</strong></p><ul><li><p>park和unpark概念</p><pre class="language-none"><code class="language-none">每个线程都有自己的一个Parker对象，由三部分组成 _counter， _cond和 _mutex1. 打个比喻线程就像一个旅人，Parker 就像他随身携带的背包，条件变量 _ cond就好比背包中的帐篷。   _counter 就好比背包中的备用干粮（0 为耗尽，1 为充足）2. 调用park就是要看需不需要停下来歇息   1. 如果备用干粮耗尽，那么钻进帐篷歇息   2. 如果备用干粮充足，那么不需停留，继续前进3. 调用unpark，就好比令干粮充足   1. 如果这时线程还在帐篷，就唤醒让他继续前进   2. 如果这时线程还在运行，那么下次他调用 park 时，仅是消耗掉备用干粮，不需停留继续前进      1. 因为背包空间有限，多次调用 unpark 仅会补充一份备用干粮</code></pre></li><li><p>线程先调用park方法</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread2/4.png" style="zoom:80%;" / loading="lazy"><pre class="language-none"><code class="language-none">1. 当前线程调用Unsafe.park()方法2. 检查 _counter，本情况为 0，这时，获得 _mutex 互斥锁(mutex对象有个等待队列 _cond)3. 线程进入 _cond 条件变量阻塞4. 设置 _counter &#x3D; 0</code></pre></li><li><p>线程后调用unpark方法<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread2/5.png" loading="lazy"></p><pre class="language-none"><code class="language-none">1. 调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 12. 唤醒 _cond 条件变量中的 Thread_03. Thread_0 恢复运行4. 设置 _counter 为 0</code></pre></li><li><p>线程先调用unpark方法，后调用park方法<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread2/6.png" loading="lazy"></p><pre class="language-none"><code class="language-none">1. 调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 12. 当前线程调用 Unsafe.park() 方法3. 检查 _counter ，本情况为 1，这时线程无需阻塞，继续运行4. 设置 _counter 为 0</code></pre></li></ul><blockquote><p><span id="c">线程状态转换</span></p></blockquote><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread2/7.png" loading="lazy"></p><pre class="language-none"><code class="language-none">1. RUNNABLE &lt;--&gt; WAITING   线程用synchronized(obj)获取了对象锁后      1. 调用obj.wait()方法时，t 线程从RUNNABLE --&gt; WAITING      2. 调用obj.notify()，obj.notifyAll()，t.interrupt()时         1. 竞争锁成功，t 线程从WAITING --&gt; RUNNABLE         2. 竞争锁失败，t 线程从WAITING --&gt; BLOCKED2. RUNNABLE &lt;--&gt; WAITING   1. 当前线程调用 LockSupport.park() 方法会让当前线程从 RUNNABLE --&gt; WAITING   2. 调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt() ，会让目标线程从 WAITING --&gt;      RUNNABLE3. RUNNABLE &lt;--&gt; WAITING   1. 当前线程调用 t.join() 方法时，当前线程从 RUNNABLE --&gt; WAITING      注意是当前线程在t 线程对象的监视器上等待   2. t 线程运行结束，或调用了当前线程的 interrupt() 时，当前线程从 WAITING --&gt; RUNNABLE4. RUNNABLE &lt;--&gt; TIMED_WAITING   t 线程用 synchronized(obj) 获取了对象锁后     1. 调用 obj.wait(long n) 方法时，t 线程从 RUNNABLE --&gt; TIMED_WAITING     2. t 线程等待时间超过了 n 毫秒，或调用 obj.notify() ， obj.notifyAll() ， t.interrupt() 时        1. 竞争锁成功，t 线程从 TIMED_WAITING --&gt; RUNNABLE        2. 竞争锁失败，t 线程从 TIMED_WAITING --&gt; BLOCKED5. RUNNABLE &lt;--&gt; TIMED_WAITING   1. 当前线程调用 t.join(long n) 方法时，当前线程从 RUNNABLE --&gt; TIMED_WAITING      注意是当前线程在t 线程对象的监视器上等待   2. 当前线程等待时间超过了 n 毫秒，或t 线程运行结束，或调用了当前线程的 interrupt() 时，当前线程从      TIMED_WAITING --&gt; RUNNABLE6. RUNNABLE &lt;--&gt; TIMED_WAITING   1. 当前线程调用 Thread.sleep(long n) ，当前线程从 RUNNABLE --&gt; TIMED_WAITING   2. 当前线程等待时间超过了 n 毫秒或调用了线程 的 interrupt() ，当前线程从 TIMED_WAITING --&gt; RUNNABLE7. RUNNABLE &lt;--&gt; TIMED_WAITING   1. 当前线程调用 LockSupport.parkNanos(long nanos) 或 LockSupport.parkUntil(long millis)       时，当前线程从 RUNNABLE --&gt; TIMED_WAITING   2. 调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt() ，或是等待超时，会让目标线程从      TIMED_WAITING--&gt; RUNNABLE</code></pre><blockquote><p><span id="d">线程活跃性问题</span></p></blockquote><p>线程活跃性问题指的是线程没有按预期结束或执行不下去的情况，<br>活跃性问题主要有三个：死锁，活锁，饥饿。</p><ul><li><p>死锁表现为：多个线程持有各自的锁，既等待对方的锁又不释放自己的锁，从而周而复始的运行下去。<br>产生死锁的条件在操作系统中总结为四个：互斥，不可剥夺，请求和保持，循环等待<br>下面是一个死锁小案例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程一占有对象o的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程一占有对象o1的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程二占有对象o1的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程一占有对象o的锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>检测程序是否死锁可以使用jconsole工具，或者使用jps定位java程序id，再用jstack命令定位死锁<br>jps，jstack工具都是jdk安装的时候自带的，直接命令行就行。</p></li><li><p>活锁指的是：多个线程互相更改了其他线程的结束条件，导致这些线程都结束不了。</p><p>与死锁的区别在于，死锁中的线程都处于阻塞状态，而活锁中线程都处于运行状态</p></li><li><p>饥饿指的是：线程因为优先级太低始终得不到cpu时间片，从而无法执行，类似于操作系统中进程饥饿。</p></li></ul><p>以上三个线程活跃性问题都可以通过ReentrantLock来解决</p><blockquote><p><span id="e">ReentrantLock</span></p></blockquote><p>除了使用synchronized保证线程安全，ReentrantLock锁也能保证线程安全，如果说synchronized是jvm底层实现<br>线程安全，那么ReentrantLock就纯使用java代码实现线程安全，当然两者还有其他差别我们待会说.</p><ul><li><p>ReentrantLock的特点</p><ul><li>可打断<br>ReentrantLock是可打断的，线程被阻塞进入阻塞状态（blocked）后，可以通过其他对象进行打断，<br>使得阻塞中的线程退出阻塞状态，而synchronized锁和ReentrantLock的lock方法并不能打断阻塞中的线程<br>注意：这里说的可打断是线程处于阻塞状态，线程还未获得锁，像synchronized锁的线程处于阻塞状态就不可被打断<br>之前有提到线程的interrupted方法可中断线程是线程获得锁之后，两者时间上不同。</li><li>可以设置超时时间<br>上面提到，ReentrantLock锁是可打断的，这需要其他线程主动打断处于阻塞中的线程，然而你也可以<br>设置超时时间，使得阻塞线程在阻塞一段时间后，自己退出阻塞状态。</li><li>可以设置为公平锁<br>公平锁指的是在monitor的阻塞队列中，先阻塞的先获得锁，而不是随机获取锁，synchronized锁就是<br>随机在阻塞队列中选择一个线程获得锁。</li><li>支持多个条件变量<br>即对与不满足条件的线程可以放到不同的集合中等待<br>类似于，我们都知道，使用synchronized锁时，当线程不满足某个条件时会调用wait方法，线程释放锁<br>进入等待队列中，需要其他线程去唤醒这个线程，但是notify方法只能随机唤醒一个，而notifyAll方法<br>唤醒等待队列中所有线程，这就可能导致，不该被唤醒的线程被唤醒了，这就是虚假唤醒。<br>我们可以把这个唯一的等待队列看做一个条件变量，所有不满足运行的线程全部放在这里，<br>而ReentrantLock支持多个条件变量，则可以不同线程不满足运行时放入不同的条件变量，唤醒时<br>指定某个条件变量中线程唤醒，这样就避免了虚假唤醒的问题。</li></ul></li><li><p>ReentrantLock基本语法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取锁</span>reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 临界区</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 释放锁</span> reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>同步模式之顺序控制</p><ul><li><p>固定运行顺序，比如，必须先 2 后 1 打印<br><strong>wait，notify实现</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 设计模式。固定运行顺序之wait,notify实现     *     该模式作用：使得两个线程按照固定顺序运行，例如t2必须等待t1线程运行完毕才能运行     */</span>    <span class="token keyword">static</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>park，unpark实现</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>交替输出，线程 1 输出 a 5 次，线程 2 输出 b 5 次，线程 3 输出 c 5 次。现在要求输出abcabcabcabcabc 怎么实现<br><strong>wait,notify版</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//测试</span><span class="token class-name">WaitNotify</span> waitNotify <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaitNotify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    waitNotify<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    waitNotify<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    waitNotify<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//******************************************</span><span class="token keyword">class</span> <span class="token class-name">WaitNotify</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> waitFlag<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> loopNum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">WaitNotify</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> waitFlag<span class="token punctuation">,</span> <span class="token class-name">Integer</span> loopNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>waitFlag <span class="token operator">=</span> waitFlag<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loopNum <span class="token operator">=</span> loopNum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token class-name">Integer</span> waitFlag<span class="token punctuation">,</span><span class="token class-name">Integer</span> nextFlag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>loopNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>waitFlag<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>waitFlag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>waitFlag<span class="token operator">=</span>nextFlag<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>ReentrantLock条件变量版</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//测试</span><span class="token class-name">AwaitSignal</span> awaitSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AwaitSignal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Condition</span> c1 <span class="token operator">=</span> awaitSignal<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Condition</span> c2 <span class="token operator">=</span> awaitSignal<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Condition</span> c3 <span class="token operator">=</span> awaitSignal<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    awaitSignal<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    awaitSignal<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    awaitSignal<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span>c3<span class="token punctuation">,</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//main主线程先唤醒t1</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>awaitSignal<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    awaitSignal<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//********************************************</span><span class="token keyword">class</span> <span class="token class-name">AwaitSignal</span> <span class="token keyword">extends</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> loopNum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AwaitSignal</span><span class="token punctuation">(</span><span class="token keyword">int</span> loopNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loopNum<span class="token operator">=</span>loopNum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 参数1：当前线程打印的内容     * 参数2：当前线程所处的等待队列     * 参数3：下一个需要唤醒的等待队列     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Condition</span> current<span class="token punctuation">,</span><span class="token class-name">Condition</span> next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loopNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                current<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//让当前线程进入自己的等待队列</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                next<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//唤醒其他线程的等待队列</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>Park Unpark 版</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ParkUnpark</span> parkUnpark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParkUnpark</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    parkUnpark<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    parkUnpark<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    parkUnpark<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//main主线程先唤醒t1</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><blockquote><p><span id="f">Java内存模型</span></p></blockquote><p>JMM 即 Java Memory Model，它从java层面定义了主存、工作内存抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、CPU 指令优化等。JMM 体现在以下几个方面</p><ul><li>原子性，保证指令不会受到线程上下文切换的影响</li><li>可见性，保证指令不会受 cpu 缓存的影响</li><li>有序性，保证指令不会受 cpu 指令并行优化的影响</li></ul><p><strong>1，可见性</strong><br>可见性准确的描述应该是，一个线程对共享变量的修改对于另一个线程是否可见，有时候因为对共享变量的修改<br>其他线程不可见，会出现一些问题，例如下面代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// ....</span><span class="token comment">//                System.out.println(2323);  如果加上这个代码就会停下来</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        utils<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3434</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           run <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 线程t不会如预想的停下来</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>那么为什么线程不能够停下来呢？我们主线程明明修改了变量，这是因为cpu缓存的原因，分析如下：</p><ul><li>初始状态， t 线程刚开始从主内存读取了 run 的值到工作内存。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread2/8.png" loading="lazy"></li><li>因为t1线程频繁地从主存中读取run的值，jit即时编译器会将run的值缓存至自己工作内存中的高速缓存中，<br>减少对主存中run的访问以提高效率<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread2/9.png" loading="lazy"></li><li>1 秒之后，main 线程修改了 run 的值，并同步至主存，而 t 是从自己工作内存中的高速缓存中读取这个变量<br>的值，结果永远是旧值<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread2/10.png" loading="lazy"></li></ul><p>解决办法也很简单，给变量run加上volatile关键字，它可以用来修饰成员变量和静态成员变量，<br>他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 volatile 变量都是直接操作主存<br>使用synchronized关键字也有相同的效果！在Java内存模型中，synchronized规定，线程在加锁时， 先清空工作内存→在主内存中拷贝最新变量的副本到工作内存 →执行完代码→将更改后的共享变量的值刷新到主内存中→释放互斥锁。<br>想想为什么在上面代码中输出一下就能解决可见性问题？因为输出语句是synchronized修饰的！</p><p>volatile能解决可见性问题，但并不能解决原子性，单独的它解决不了线程安全问题哦<br>synchronized 语句块既可以保证代码块的原子性，也同时保证代码块内变量的可见性。<br>但缺点是synchronized 是属于重量级操作，性能相对更低。</p><p><strong>1.1，使用volatile改进两阶段终止模式</strong><br>两阶段终止模式上一篇讲过，是用来一个线程通知停止另一个线程的模式，使用volatile改进后代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TwoPhaseTermination2</span> twoPhaseTermination2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TwoPhaseTermination2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        twoPhaseTermination2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        twoPhaseTermination2<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">TwoPhaseTermination2</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在开启线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程正在停止，处理后事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行业务逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                        thread.interrupt();</span><span class="token comment">//                        e.printStackTrace();</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//停止线程</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在停止线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>1.2，两阶段终止增加balking模式</strong><br>上述TwoPhaseTermination2存在一个问题：如果当我多次调用start，就会创建多个线程，<br>实际上，我只需要一个线程，哪怕你多次调用start方法也没用，这就需要使用设计模式之犹豫模式了，<br>即Balking模式。该模式用在一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做了，直接结束返回</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TwoPhaseTermination3</span> twoPhaseTermination3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TwoPhaseTermination3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        twoPhaseTermination3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        twoPhaseTermination3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        twoPhaseTermination3<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">TwoPhaseTermination3</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//结束线程标志</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Boolean</span> starting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//是否已经开启线程标志</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>starting<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            starting<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在开启线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程正在停止，处理后事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行业务逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                        thread.interrupt();</span><span class="token comment">//                        e.printStackTrace();</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//停止线程</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在停止线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>2，有序性</strong><br>有序性指的是：因为JIT编译器在运行时做了一些优化，即指令重排，导致程序没有出现预期结果，<br>指令重排序在单线程下可以优化程序，但在多线程下就会造成一些问题，下面是一个出现有序性问题的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// volatile 修饰的变量，可以禁用指令重排 volatile boolean ready = false; 可以防止变量之前的代码被重排序</span><span class="token keyword">boolean</span> ready <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 线程1 执行此方法，</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor1</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> num <span class="token operator">+</span> num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 线程2 执行此方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor2</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>I_Result 是一个对象，有一个属性 r1 用来保存结果，问可能的结果有几种？<br>有同学这么分析<br>情况1：线程1 先执行，这时 ready = false，所以进入 else 分支结果为 1<br>情况2：线程2 先执行 num = 2，但没来得及执行 ready = true，线程1 执行，还是进入 else 分支，结果为1<br>情况3：线程2 执行到 ready = true，线程1 执行，这回进入 if 分支，结果为 4（因为 num 已经执行过了）<br>但我告诉你，结果还有可能是 0 ，信不信吧！这种情况下是：线程2 执行 ready = true，切换到线程1，<br>进入 if 分支，相加为 0，再切回线程2 执行 num = 2。即因为指令重排，ready=true比num=2先执行。</p><p>指令重排序也需要遵守一定规则</p><ul><li>重排序操作不会对存在数据依赖关系的操作进行重排序。比如：a=1;b=a; 这个指令序列，由于第二个操作依赖于第一个操作，所以在编译时和处理器运行时这两个操作不会被重排序。</li><li>重排序是为了优化性能，但是不管怎么重排序，单线程下程序的执行结果不能被改变。比如：a=1;b=2;c=a+b这三个操作，第一步（a=1)和第二步(b=2)由于不存在数据依赖关系，所以可能会发生重排序，但是c=a+b这个操作是不会被重排序的，因为需要保证最终的结果一定是c=a+b=3。</li></ul><p>解决办法就是使用volatile关键字修饰共享变量</p><p><strong>总结</strong><br>volatile能解决可见性，有序性，synchronized能解决原子性，可见性问题，但不能保证有序性，<br>因为synchronized并不能保证有序性问题，所以要想synchronized实现线程安全就要求共享变量完全被<br>synchronized管理起来，外面不能访问到共享变量，不然多线程下还是会出现线程不安全的情况。<br>只要共享变量完全被synchronized包裹住，就不会出现有序性问题。</p><blockquote><p><span id="g">Volatile原理</span></p></blockquote><p>volatile底层原理是内存屏障</p><ul><li>对volatile变量的读指令之前加入读屏障，保证读屏障之后的代码不能重排到读屏障之前<br>保证读屏障之后的代码读取的变量都是最新值(即都是从主存读取)</li><li>对volatile变量的写指令之后加入写屏障，保证写屏障之前的代码不能重排到写屏障之后<br>保证写屏障之前的代码全部都写入主存中。</li></ul><p>内存屏障底层原理是cpu缓存一致性，即MESI，没研究过，以后有用到再看。<br>我们结合一下上面代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">volatile</span> <span class="token keyword">boolean</span> ready <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//防止执行重排序</span><span class="token comment">// 线程1 执行此方法，</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor1</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//存在读屏障  保证之后读的数据都是最新值，并且防止后面指令重排到读屏障之前</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> num <span class="token operator">+</span> num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 线程2 执行此方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor2</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//存在写屏障，保证之前的代码不会重排到写屏障之后，即num=2不能在ready=true之后</span> <span class="token comment">//也保证写屏障之前对变量的修改能同步到主存中</span><span class="token punctuation">&#125;</span></code></pre><p><strong>Double-Checked Locking，双重检查锁</strong><br>双重检查锁是普通单例模式的改进型，也是volatile最常用的地方</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//普通的单例模式</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里有缺点，首次访问会同步，而之后的使用不用进入synchronized</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    可以看到，只有第一次创建实例才需要加锁，之后调用getInstance方法并不需要加锁    上述代码效率还是很有问题的，改进如下*/</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">// 首次访问会同步，而之后的使用没有 synchronized</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    如果你仔细分析，就会发现，上面代码其实在多线程环境下是有问题的，因为共享变量INSTANCE    并未完全被synchronized管理到，又因为synchronized并不能保证有序性，从而导致代码并不安全    结合上述代码，INSTANCE = new Singleton();可以被拆分为初始化对象中属性，返回给INSTANCE    但因为有序性问题，导致先返回给INSTANCE，再初始化对象属性，这样调用方就会得到一个未初始化的实例    这就是问题所在，解决办法自然是给INSTANCE变量加上volatile，这样就不会发生重排序，    保证返回INSTANCE实例操作在调用构造器之后，简直完美*/</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 实例没创建，才会进入内部的 synchronized代码块</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// t2</span>                <span class="token comment">// 也许有其它线程已经创建实例，所以再判断一次</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// t1</span>                    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    你可能有疑问了，为什么要加两个if判断呢？我们想象一下，假设INSTANCE为null，两个线程同时都经过    外层if判断(这是有可能的，外层if又没有锁),然后只有一个线程获得锁，如果没有里面的if，直接创建对象    那么第二个线程获取锁后，又创建了一次对象，所以里层if判断解决的是第一次加锁时线程竞争状况。*/</span></code></pre><p>大佬文章：<a href="https://www.cnblogs.com/xz816111/p/8470048.html">Java中的双重检查锁（double checked locking）</a></p><p><strong>Happens-Before规则</strong><br>因为jvm会对代码进行编译优化，指令会出现重排序的情况，为了避免编译优化对并发编程安全性的影响，需要happens-before规则定义一些禁止编译优化的场景，保证并发编程的正确性。</p><p>关于happens-before规则可以看这篇文章，写的非常好：<a href="https://www.jianshu.com/p/9464bf340234">深入理解happens-before规则</a></p><p><strong>总结</strong><br>volatile主要用在一个线程改多个线程读时的来保证可见性，<br>和double-checked locking模式中保证synchronized代码块外的共享变量的重排序问题</p><blockquote><p><span id="h">CAS的认识</span></p></blockquote><p>synchronized和ReentrantLock实现线程安全，都属于阻塞式锁，是悲观锁的思想<br>即时刻提防其他线程修改共享变量，我拿到锁，只有等我改完你们才能改</p><p>CAS+volatile方式实现线程安全，被叫做非阻塞式锁，是一种并不需要加锁就能实现线程安全的途径，<br>是乐观锁的思想，即不怕其他线程修改共享变量，大不了我再重试一次(while(true))</p><p>让我们从实际问题出发来认识些CAS</p><pre class="language-Java" data-language="Java"><code class="language-Java">public class Test &#123;        public static void main(String[] args) &#123;        Account account &#x3D; new AccountUnsafe(10000);        Account.demo(account);    &#125;&#125;class AccountUnsafe implements Account &#123;    private Integer balance;    ReentrantLock lock &#x3D; new ReentrantLock();    public AccountUnsafe(Integer balance) &#123;        this.balance &#x3D; balance;    &#125;    @Override    public Integer getBalance() &#123;        &#x2F;*synchronized (this)&#123;            return balance;        &#125;*&#x2F;        lock.lock();        try &#123;            return balance;        &#125;finally &#123;            lock.unlock();        &#125;    &#125;    @Override    public void  withdraw(Integer amount) &#123;        &#x2F;&#x2F; 通过这里加锁就可以实现线程安全，不加就会导致结果异常        &#x2F;*synchronized (this)&#123;            balance -&#x3D; amount;        &#125;*&#x2F;        &#x2F;&#x2F;reentrantLock锁对象创建应该作为实例变量，让所有线程共享        lock.lock();        try &#123;            balance -&#x3D; amount;        &#125;finally &#123;            lock.unlock();        &#125;    &#125;&#125;interface Account &#123;    &#x2F;&#x2F; 获取余额    Integer getBalance();    &#x2F;&#x2F; 取款    void withdraw(Integer amount);    &#x2F;**     * 方法内会启动 1000 个线程，每个线程做 -10 元 的操作     * 如果初始余额为 10000 那么正确的结果应当是 0     *&#x2F;    static void demo(Account account) &#123;        List&lt;Thread&gt; ts &#x3D; new ArrayList&lt;&gt;();        long start &#x3D; System.nanoTime();        for (int i &#x3D; 0; i &lt; 1000; i++) &#123;            ts.add(new Thread(() -&gt; &#123;                account.withdraw(10);            &#125;));        &#125;        ts.forEach(Thread::start);        ts.forEach(t -&gt; &#123;            try &#123;                t.join();            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;);        long end &#x3D; System.nanoTime();        System.out.println(account.getBalance()                + &quot; cost: &quot; + (end-start)&#x2F;1000_000 + &quot; ms&quot;);    &#125;&#125;</code></pre><p>上面代码是使用synchronized和ReentrantLock保证线程安全，但是加锁方式实现线程安全太耗费资源，<br>这里我们使用无锁来解决上面问题：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AccountSafe</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AccountSafe</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//悲观锁，阻塞方式解决线程安全</span>        <span class="token comment">/*synchronized (this)&#123;            return balance;        &#125;*/</span>        <span class="token comment">/*lock.lock();        try &#123;            return balance.get();        &#125;finally &#123;            lock.unlock();        &#125;*/</span>        <span class="token comment">//乐观锁，非阻塞方式解决线程安全</span>        <span class="token keyword">return</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过这里加锁就可以实现线程安全，不加就会导致结果异常</span>        <span class="token comment">/*synchronized (this)&#123;            balance -= amount;        &#125;*/</span>        <span class="token comment">//reentrantLock锁对象创建应该作为实例变量，让所有线程共享</span>        <span class="token comment">/*lock.lock();        try &#123;            balance -= amount;        &#125;finally &#123;            lock.unlock();        &#125;*/</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//线程的工作内存中保存的最新值</span>            <span class="token keyword">int</span> prev <span class="token operator">=</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//要修改的余额</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> prev <span class="token operator">-</span>amount<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//        balance.addAndGet(-amount);  //直接使用AtomicInteger包装后的方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上述代码中使用了无锁的方式实现线程安全，主要是取款操作这里，withdraw方法中while循环，<br>这里原子整数balance调用了compareAndSet方法，底层调用了Unsafe的compareAndSet方法，<br>这种方式简称为CAS方式，这个方法的具体含义是根据现在的值，即prev比较主存中的值，如果一致则<br>设置新值，即next值，如果不一致则不设置直接进行下一轮，另外CAS方法如果设置值成功返回true，否则返回false</p><p>CAS操作是原子操作，即<code>balance.compareAndSet(prev,next)</code>，另外CAS的使用必须要配合volatile才能实现<br>线程安全，AtomicInteger类有个value属性，这个属性是存放我们变量的值，这个属性就是被volatile修饰的。</p><p><strong>为什么无锁效率高？</strong></p><ul><li>无锁情况下，即使重试失败，线程始终在高速运行，没有停歇，而 synchronized 会让线程在没有获得锁的时候，<br>发生上下文切换，进入阻塞。打个比喻：线程就好像高速跑道上的赛车，高速运行时，速度超快，<br>一旦发生上下文切换，就好比赛车要减速、熄火，等被唤醒又得重新打火、启动、加速… 恢复到高速运行，代价比较大</li><li>但无锁情况下，因为线程要保持运行，需要额外 CPU 的支持，CPU 在这里就好比高速跑道，没有额外的跑道，<br>线程想高速运行也无从谈起，虽然不会进入阻塞，但由于没有分到时间片，仍然会进入可运行状态，还是会导致上下文切换。</li></ul><p><strong>CAS 的特点</strong><br>结合 CAS 和 volatile 可以实现无锁并发，适用于线程数少、多核 CPU 的场景下。</p><ul><li>CAS 是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试呗。</li><li>synchronized 是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，<br>我上了锁你们都别想改，我改完了解开锁，你们才有机会。</li><li>CAS 体现的是无锁并发、无阻塞并发，请仔细体会这两句话的意思<br>因为没有使用 synchronized，所以线程不会陷入阻塞，这是效率提升的因素之一<br>但如果竞争激烈(写操作多)，可以想到重试必然频繁发生，反而效率会受影响</li></ul><blockquote><p><span id="i">JUC包下的类</span></p></blockquote><p>java.util.concurrent.atomic并发包提供了一些并发工具类，这里把它分成五类：</p><ul><li>使用原子的方式更新基本类型<ul><li>AtomicInteger：整型原子类</li><li>AtomicLong：长整型原子类</li><li>AtomicBoolean ：布尔型原子类</li></ul></li><li>原子引用<ul><li>AtomicReference：引用类型原子类</li><li>AtomicStampedReference<br>原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，<br>可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题。</li><li>AtomicMarkableReference<br>原子更新带有标记的引用类型。该类将 boolean 标记与引用关联起来，AtomicStampedReference类似<br>只不过用boolean代替整型</li></ul></li><li>原子数组<ul><li>AtomicIntegerArray，整形数组原子类</li><li>AtomicLongArray，长整形数组原子类</li><li>AtomicReferenceArray，引用类型数组原子类</li></ul></li><li>字段更新器<ul><li>AtomicReferenceFieldUpdater<br>利用字段更新器，可以针对对象的某个域（属性）进行原子操作，只能配合 volatile 修饰的字段使用，否则会出现异常</li><li>AtomicIntegerFieldUpdater</li><li>AtomicLongFieldUpdater</li></ul></li><li>原子累加器，LongAdder</li></ul><p><strong>原子整型</strong><br>让我们先来了解一下原子整数类，以AtomicInteger为例讨论它的API接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AtomicInteger</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取并自增（i = 0, 结果 i = 1, 返回 0），类似于 i++</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 自增并获取（i = 1, 结果 i = 2, 返回 2），类似于 ++i</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 自减并获取（i = 2, 结果 i = 1, 返回 1），类似于 --i</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取并自减（i = 1, 结果 i = 0, 返回 1），类似于 i--</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取并加值（i = 0, 结果 i = 5, 返回 0）</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 加值并获取（i = 5, 结果 i = 0, 返回 0）</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取并更新（i = 0, p 为 i 的当前值, 结果 i = -2, 返回 0）</span>    <span class="token comment">// 函数式编程接口，其中函数中的操作能保证原子，但函数需要无副作用</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndUpdate</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更新并获取（i = -2, p 为 i 的当前值, 结果 i = 0, 返回 0）</span>    <span class="token comment">// 函数式编程接口，其中函数中的操作能保证原子，但函数需要无副作用</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">updateAndGet</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取并计算（i = 0, p 为 i 的当前值, x 为参数1, 结果 i = 10, 返回 0）</span>    <span class="token comment">// 函数式编程接口，其中函数中的操作能保证原子，但函数需要无副作用</span>    <span class="token comment">// getAndUpdate 如果在 lambda 中引用了外部的局部变量，要保证该局部变量是 final 的</span>    <span class="token comment">// getAndAccumulate 可以通过 参数1 来引用外部的局部变量，但因为其不在 lambda 中因此不必是 final</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndAccumulate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-></span> p <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算并获取（i = 10, p 为 i 的当前值, x 为参数1值, 结果 i = 0, 返回 0）</span>    <span class="token comment">// 函数式编程接口，其中函数中的操作能保证原子，但函数需要无副作用</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">accumulateAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-></span> p <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>原子引用</strong><br>为什么需要原子引用类型？保证引用类型的共享变量是线程安全的（确保这个原子引用没有引用过别人）。<br>基本类型原子类只能更新一个变量，如果需要原子更新多个变量，需要使用引用类型原子类。</p><p>在之前取款案例中，使用原子整型，如果是小数呢，那就需要更改成如下案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DecimalAccountCas</span> <span class="token keyword">implements</span> <span class="token class-name">DecimalAccount</span><span class="token punctuation">&#123;</span>    <span class="token comment">//private BigDecimal balance;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigDecimal</span><span class="token punctuation">></span></span> balance <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DecimalAccountCas</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">BigDecimal</span> pre <span class="token operator">=</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 注意：这里的balance返回的是一个新的对象，即 pre!=next</span>            <span class="token class-name">BigDecimal</span> next <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>ABA问题及解决</strong><br>现在面试问到CAS就必会问ABA问题，那么什么是ABA问题呢？<br>线程进行CAS操作，比较是主存中值和之前取出来的值(上面的pre局部变量)，如果一致就设置新值(上面的next局部变量)，<br>你想想如果一致就真的一定代表这个值有没有被改过吗？有没有这种可能，你取出内存中值，值假设是A，<br>然后你进行CAS操作时，发现主存中仍然是A，于是你觉得在我取之前到比较这段时间，没有人动过我的值<br>但实际上另一个线程将主存中值A改成B，再将B改成A，实际上主存中值已经被动过，但你并不知道，还以为没人<br>动过我的值，直接设置新值了，这就是ABA问题</p><p><strong>CAS只能确保取出的共享变量的值在比较时与主存中的值是一致的，但不能确保共享变量的值是否被其他线程更改过</strong></p><p>那么如果解决ABA问题呢？<br>答案是增加一个版本号，线程每次更改共享变量值就更改一次版本号(当然版本号肯定要随机的)。<br>在CAS时，不仅比较共享变量值是否一致，还要比较版本号是否一致，<br>这就需要使用到AtomicStampedReference类或者AtomicMarkableReference 类，<br>这两个类内部都维护着版本号，两者不同的是AtomicStampedReference维护的是一个整型，可以知道<br>线程更改多少次，如果有时候我们并不想知道在比较时其他线程更改共享变量多少次，而是仅仅想知道<br>其他线程有没有更改过，就只需要使用AtomicMarkableReference，该类内部维护的是boolean值。</p><p><strong>原子数组</strong></p><p>有时候我们在cas时，并不想设置一个新的值，而是修改的是原来对象中内部的属性值，<br>例如修改的是数组中元素而不是重新设置一个新数组，原子数组保护的是数组中元素的线程安全</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//这是上面一段代码，假设我们的共享变量是一个数组而不是整型，我们要保证的是数组中元素的线程安全</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BigDecimal</span> pre <span class="token operator">=</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注意：这里的balance返回的是一个新的对象，即 pre!=next</span>        <span class="token comment">//有时候我们并不想设置新数组，而是更改原来数组中某个元素的值，这就需要原子数组了</span>        <span class="token class-name">BigDecimal</span> next <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在介绍更深层次的原子数组应用之前，我们先来学习一些函数式接口，这些接口都可以作为方法参数上使用</p><ul><li><p>Supplier<br>不要求每次调用供应商时都返回一个新的或不同的结果。这是一个函数接口，其函数方法是get</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Gets a result.     * @return a result     */</span>    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>Function&amp;BiFunction<br>表示接受一个参数或两个参数并返回结果的函数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**    * Applies this function to the given argument.    * @param t the function argument    * @return the function result    */</span>  <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//....</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>Consumer&amp;BiConsumer<br>表示接受一个或两个输入参数且不返回结果的函数</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">U</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//....</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//....</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>下面是一个使用原子数组的案例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//普通数组，在多线程情况下，出现线程安全问题</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                array<span class="token operator">-></span> array<span class="token punctuation">.</span>length<span class="token punctuation">,</span>                <span class="token punctuation">(</span>array<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">-></span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span>                array<span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//原子数组</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                array<span class="token operator">-></span> array<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>array<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">-></span> array<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">//表示对某个元素进行自增，而不是atomicInteger中对变量自增</span>                array<span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> arr<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> arrLength<span class="token punctuation">,</span>                    <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> operation<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> printOperation<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">T</span> array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> length <span class="token operator">=</span> arrLength<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获得数组长度</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建10个线程，每个线程运行1万次自增，将自增的数平均存到数组中</span>            <span class="token comment">//正确情况下，数组每个元素的值应该是1万，但是如果不使用原子数组就会有问题</span>            <span class="token comment">//而函数式编程，就把数组的定义抽离了出去，只要调用者将普通数组更改为原子数组即可</span>            ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    operation<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>j<span class="token operator">%</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//开启所有线程</span>        ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>x<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用所有线程的join，让主线程等这些线程结束</span>        ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>thread <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printOperation<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">volatile</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>字段更新器</strong><br>字段更新器保护的是某个对象中的属性(成员变量)是线程安全的，保证多个线程访问同一个对象的成员变量的安全性<br>下面是一个字段更新器案例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> updater <span class="token operator">=</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AtomicReferenceFieldUpdater</span> updater1 <span class="token operator">=</span> <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>updater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>updater1<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"万一"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已被更改为“万一”，520了</span></code></pre><p><strong>原子累加器</strong><br>使用CAS对共享变量自增，你可能会想到使用AtomicInteger的getAndIncrement方法，<br>其实，也可以使用原子累加器LongAdder，这个类也是用来做多线程下共享变量的累加的，不同的是这个累加器效率更高<br>下面是一个LongAdder使用案例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> adder <span class="token operator">-></span> adder<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> adder <span class="token operator">-></span> adder<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> adderSupplier<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">T</span> adder <span class="token operator">=</span> adderSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4 个线程，每人累加 50 万</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">500000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>adder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t <span class="token operator">-></span> t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>adder <span class="token operator">+</span> <span class="token string">" cost:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>性能提升的原因很简单，就是在有竞争时，设置多个累加单元(但不会超过cpu的核心数)，Therad-0 累加 Cell[0]，<br>而 Thread-1 累加Cell[1]… 最后将结果汇总。这样它们在累加时操作的不同的 Cell 变量，因此减少了 CAS 重试失败，从而提高性能。</p><blockquote><p><span id="j">Unsafe</span></p></blockquote><p>Unsafe类是JVM本地方法，是由C++编写的，也是CAS底层实现，原子整型等等都是在这个类基础上包装的<br>Unsafe 对象提供了非常底层的，操作内存、线程的方法，Unsafe 对象不能直接调用，只能通过反射获得。<br>LockSupport的park方法，cas相关的方法底层都是通过Unsafe类来实现的。<br>下面举个例子，来拿到unsafe对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetUnsafe</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token class-name">Unsafe</span> unsafe<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Unsafe 使用了单例模式，unsafe对象是类中的一个私有的变量</span>            <span class="token class-name">Field</span> theUnsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            theUnsafe<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> theUnsafe<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token class-name">Unsafe</span> <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>让我们来实现一个自定义的线程安全的原子整型，并用之前的取款实例来进行验证</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicData</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AtomicData</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AtomicData</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        unsafe <span class="token operator">=</span> <span class="token class-name">GetUnsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">AtomicData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> pre <span class="token operator">-</span> amount<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>valueOffset<span class="token punctuation">,</span>pre<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">decrement</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊多线程(一)</title>
      <link href="2022/01/14/%E8%81%8A%E8%81%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%80/"/>
      <url>2022/01/14/%E8%81%8A%E8%81%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>实习结束了就回到家里，准备毕设和学习多线程了，我还是自制力太差，学习效果不太好，自制力差的原因<br>在于没有认清自己目前所处的阶段，所以才无所事事，在沉沦很多天之后，期间断断续续学习，坦白说<br>没有很好的收获，人啊，一旦没有了目标，心就空了，就容易迷茫，人还是应该有所追求，有目标才有动力。</p><p>我一直认为，学习如果没有输出，是很难继续下去的，这就是为什么我写博客的原因，哪怕没人看<br>最近一段时间开始学习多线程，原本想搞定完毕设再学习的，但是毕设学习若依项目，继续不下去，<br>而且需要另写一套前端，CSS极差，又没有经验写，虽然学习过vue，但是我给鸽了，唉，<br>我怕再不学习多线程，等家人都回来过年了，吵吵闹闹的又没定力学习去了，怕是又跑去打麻将了~<br>所以趁家人没回来，赶紧把多线程学习了，这个多线程，是我众多心病之一，所以要解决掉它<br>现在写第一篇多线程博客，随便聊聊</p><p>本篇博客内容如下：</p><ul><li><a href="#a">Java线程的6种状态</a></li><li><a href="#b">创建线程的3种方式</a></li><li><a href="#c">Thread的常用方法</a></li><li><a href="#d">线程安全问题</a></li><li><a href="#e">变量的线程安全分析</a></li><li><a href="#f">常见的线程安全类</a></li><li><a href="#g">对象头与monitor</a></li><li><a href="#h">synchronized原理</a></li><li><a href="#i">synchronized原理进阶</a></li><li><a href="#j">文章及资料</a></li></ul><blockquote><p><span id="a">Java线程的6种状态</span></p></blockquote><p>我们有时候很难分清楚线程的状态到底有几种，有人说5种，有人说6种，我们在操作系统上看到过<br>进程的5种状态，你可能有疑问，进程？是的，操作系统上说的是进程的5种状态，一般指的是进程只有1个线程。<br>所以，操作系统书上说进程的5种状态，我们可以简单理解为线程的5种状态。<br>这5种状态是：新建，就绪，运行，阻塞/等待，死亡</p><p>这5种状态是对于操作系统而言的，而对于JVM而言，却是有6种线程状态，Java线程的6种状态在Thread类<br>中的State枚举类中，它们分别是：New，Runnable，Blocked，Waiting，Timed_Waiting，Terminated</p><p>注意：这6种状态与操作系统状态并不是一一对应的，例如Java中的Runnable状态相当于操作系统中的<br>就绪，运行，一部分阻塞状态(IO阻塞)，而Blocked，Waiting，Timed_Waiting都属于操作系统中阻塞状态的一部分。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/1.png" loading="lazy"></p><p>具体聊聊Java的线程状态</p><ul><li>新建和死亡状态与操作系统中一致，就没什么好讲的</li><li>Runnable状态这是对jvm而言，jvm才不需要管操作系统如何调度线程，不管这个线程在操作系统中<br>是就绪状态，还是运行状态，还是在等待IO操作完成，对于jvm来说都是Runnable状态，</li><li>Blocked状态则是多线程环境中，使用synchronized关键字，当线程被动阻塞后，<br>这个线程的状态就是Blocked，这个线程会被放进monitor对象的entry list中，当然这是后话了<br>简单而言，当线程进入同步方法时，没有拿到锁时，该线程处于blocked状态</li><li>Waiting状态<br>当线程拿到锁进入同步代码块后，主动调用wait方法，主动阻塞后，该线程释放锁，进入monitor对象<br>中的wait set中，等到其他线程调用notify方法唤醒，此时该线程处于Waiting状态，当该线程被唤醒后，<br>重新获取锁，获取锁失败，进入entry set中等待竞争锁，waiting状态转变成blocked状态，<br>获取锁成功，则waiting状态转变成runnable状态，并从之前调用wait方法处开始执行。</li><li>Timed_Waiting<br>当线程在执行代码时调用sleep等方法，并不一定要在同步代码块中调用，只要调用sleep等方法<br>则该线程进入monitor对象的wait set中，此时的线程状态是Time_Waiting，相比于Waiting状态<br>Timed_Waiting状态是有限时间内等待，而处于Waiting状态的线程则是需要其他线程唤醒的，<br>Timed_Waiting状态的线程则不需要，另外，sleep方法并不会释放锁，时间一到，线程继续执行<br>原来的代码，而不需要竞争，另外不只是sleep方法可以使线程处于Timed_Waiting状态，<br>像wait(时间)，join(时间)，这些方法都可以，都是使线程有限时间内等待，当然，这种方式就释放<br>锁了。</li></ul><p>看完线程状态，你可能仍然觉得，写的什么鬼，乱七八糟的，没关系，我找到了一个大佬的文章<br>看完感觉神清气爽，仿佛打通任督二脉~</p><ul><li><a href="https://xiaogd.net/md/%E5%85%B3%E4%BA%8Ejava%E7%9A%84%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81">关于 Java 的线程状态</a></li><li><a href="https://xiaogd.net/md/java-%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E4%B9%8B-runnable">Java 线程状态之 RUNNABLE</a></li><li><a href="https://my.oschina.net/goldenshaw/blog/706663">Java 线程状态之 BLOCKED</a></li><li><a href="https://my.oschina.net/goldenshaw/blog/802620">Java 线程状态之 WAITING</a></li><li><a href="https://my.oschina.net/goldenshaw/blog/806018">Java 线程状态之 TIMED_WAITING</a></li></ul><blockquote><p><span id="b">创建线程的3种方式</span></p></blockquote><ul><li><p>通过Thread子类，或者匿名类创建线程</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//通过Thread创建线程</span>    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义线程正在执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main线程执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>重写run方法后，当jvm调用run方法时，就走重写后的run方法。</p></li><li><p>通过Runnable接口创建线程</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//通过runnable接口配合Thread创建线程，下面是不断的简化</span>    <span class="token comment">//方式1</span>    <span class="token class-name">Runnable</span> runnable  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1线程正在执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//方式2</span>    <span class="token class-name">Runnable</span> runnable1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2线程正在执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable1<span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//方式3</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t3线程正在执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main线程执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>通过Callable接口创建线程<br>我们从Runnable接口可以看到，实际上是将同步代码抽离成接口，但是这个run方法并不能抛出异常<br>也没有返回值，而Callable接口有返回值并且可以抛出异常。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//通过FutureTask配合Thread创建线程</span><span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t4线程正在执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span><span class="token string">"t4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main线程执行，拿到t4线程数据："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这种方式能使得main线程拿到其他线程的返回值</span></code></pre></li></ul><blockquote><p><span id="c">Thread的常用方法</span></p></blockquote><p>Thread有很多方法，我这里就不一一介绍了，下面是一些常用的方法的含义<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/2.png" loading="lazy"></p><p>我这里就简单聊聊<strong>interrupt方法</strong><br>当我们想停止一个线程时，我们可能会发现Thread类中有stop方法，但是这个stop方法却被废弃了<br>因为stop方法太暴力了，还没等线程处理完自己的事就直接关掉，所以后来使用了Interrupt方法来代替stop方法<br>当在主线程代码中，其他线程调用interrupt方法后，相当于主线程通知其他线程快点结束吧，并不会直接杀掉该线程<br>其他线程停不停止完全取决于自己的处理，interrupt方法仅仅给该线程设置一个打断标记，线程打断标记默认是false<br>下面是来自interrupt源码注释的三句话：</p><pre class="language-none"><code class="language-none">调用正常运行线程的isInterrupted方法返回false，即打断标记默认为false调用正常运行中线程的interrupt方法会将打断标记置为trueinterrupt一个被sleep，wait，join锁住的方法，会将打断标记置为true，然后清除打断标记，然后throw interrupted exception，这里的清除打断标记，我想是恢复打断标记为false</code></pre><p>由上可知，打断一个线程就是仅仅通知该线程应该尽快结束运行，那被打断线程应该如何停止当前线程呢？<br>等下讲讲多线程设计模式中的二阶段终止模式。</p><p>我们还需要了解的方法是，<strong>isInterrupted方法和interrupted方法</strong><br>这两个方法都是用来判断当前线程是否被打断了，但有区别的是，isInterrupted方法判断后，不会修改线程打断标记<br>而interrupted方法判断后，会修改当前线程的打断标记，false改为true，true改为false。</p><p>除了使用interrupt方法可以打断线程，LockSupport的park方法也可以打断线程，下面是一个例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入线程run方法，此时线程打断标记："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当线程打断标记为false时，则线程在此处暂停运行,如果当前线程打断标记为true，则不会暂停，直接向下运行</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被打断后，继续运行,此时线程打断标记："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过调用intercepted方法，查看线程打断标记"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再来看此时的线程打断标记："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果输出为：</p><pre class="language-none"><code class="language-none">进入线程run方法，此时线程打断标记：false线程被打断后，继续运行,此时线程打断标记：true通过调用intercepted方法，查看线程打断标记true再来看此时的线程打断标记：false</code></pre><p>那么，既然interrupt方法只是通知被打断线程尽快结束线程，那么我们应该如何停止一个线程呢？<br><strong>二阶段终止模式</strong><br>来看看该模式下的代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*            多线程的设计模式之二阶段终止模式            该设计模式用来在一个线程T1中优雅的终止线程T2            错误思路                1，使用线程对象的stop方法停止线程                    stop方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁                    其他线程将永远无法获取锁                2，使用System.exit(int)方法停止线程                    目的仅是停止一个线程，但这种做法会让整个程序都停止         */</span>        <span class="token class-name">TwoPhaseTermination</span> twoPhaseTermination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TwoPhaseTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        twoPhaseTermination<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        twoPhaseTermination<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">TwoPhaseTermination</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在开启线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程正在停止，处理后事"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程休眠之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行业务逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//停止线程</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>由上我们看到，我们在catch块异常处理中，再次打断了当前线程，这是因为，如果线程休眠时当前线程中断标志<br>为true，则会抛出打断异常，并会清除打断标志，即将打断标志true改为false，这样的话，再一次循环就出不去了<br>所以在异常处理中，再一次打断线程，将因异常被改为false的中断标志，重新改为true，从而停止while循环，停止线程运行。</p><p>有一点需要注意的是：只要线程的中断标志为true时调用了sleep等方法，都会抛出中断异常，并不一定要<br>线程在睡眠的时候中断，才会抛出异常，当然，在线程睡眠之后，哪怕仍然在try catch块中打断线程，都不会抛出<br>中断异常。</p><p>总之：线程停不停止运行，不在于自身被不被打断，而在于自己想不想停止！线程停止运行最好使用二阶段终止模式。</p><blockquote><p><span id="d">线程安全问题</span></p></blockquote><p>什么是线程安全？在多线程环境下，因为线程上下文切换导致其执行顺序发生改变，从而影响最终结果的代码存在线程安全问题。<br>下面是一段存在线程安全的代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//成员变量，被所有线程共享</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"count的值是&#123;&#125;"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如果了解过JMM，java内存模型的都知道，count++，count–的操作在底层都不是原子性的操作，它分为多个指令<br>下面是JMM，内存模型<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/3.png" loading="lazy"></p><p>可以看到，每个线程都有自己的工作内存，一个线程如果对一个数相加，需要先从主内存(共享内存)中拿到值<br>拷贝到工作内存中，再对工作内存中数据+1，再将相加后的结果写回主内存中。正常的执行顺序如下：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/4.png" style="zoom:80%;" / loading="lazy"></p><p>但是如果发生线程上下文切换的时候，就是下面这种执行顺序<br>出现负数的情况</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/5.png" style="zoom:80%;" / loading="lazy">出现正数的情况：<img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/6.png" style="zoom:80%;" / loading="lazy"><p>我们知道，线程上下文切换是操作系统调度的，JVM并不能控制什么时候切换，什么时候不切换，那如果解决呢？<br>答案当然是使用synchronized关键字，对那些多线程修改共享变量的代码进行加锁，也就是对临界区进行加锁<br>临界区是操作系统的名词，指的是：一段代码内如果存在对共享资源的多线程读写操作，那么称这段代码为临界区<br>如果任由多个线程在临界区执行对共享变量读写操作，则一定会发生线程安全问题，所以我们要控制在多线程<br>并发修改共享变量的时候，只能有一个线程进入临界区修改代码，这也叫加锁，锁的是临界区的代码<br>加锁的方式有很多种，最常用的就是使用synchronized关键字，我们知道，synchronized关键字可以使用在<br>静态方法上，锁的对象是该类的Class对象，可以使用在实例方法上，锁的对象是该类的实例，<br>可以使用在方法块上，锁的就是提供的参数对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//临界区</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//临界区</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//这里的对象可以是任意对象</span>        <span class="token comment">//临界区</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>上面案例中的代码修改如下，即可解决线程安全问题：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> room <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>room<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             counter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>room<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             counter<span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>synchronized实际上利用对象保证了临界区代码的原子性，临界区内的代码在外界看来是不可分割的，不会被线程切换所打断<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/7.png"  / loading="lazy"></p><blockquote><p><span id="e">变量的线程安全分析</span></p></blockquote><p>之所以存在线程安全问题，就是因为多个线程并发修改共享变量的值，如果变量不是共享的，<br>或者多个线程只是读取并未修改共享变量，都不会产生线程安全问题。那么关键在于变量是否是共享变量<br>下面是一段对变量的安全分析</p><ul><li><p>成员变量(实例变量+静态变量)和静态变量的线程安全分析</p><ul><li><p>如果没有变量没有在线程间共享，那么变量是安全的<br><strong>实例变量没有共享案例</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyThread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span>t1<span class="token operator">:</span><span class="token number">4</span>t2<span class="token operator">:</span><span class="token number">4</span>t2<span class="token operator">:</span><span class="token number">3</span>t2<span class="token operator">:</span><span class="token number">2</span>t2<span class="token operator">:</span><span class="token number">1</span>t2<span class="token operator">:</span><span class="token number">0</span>t1<span class="token operator">:</span><span class="token number">3</span>t1<span class="token operator">:</span><span class="token number">2</span>t1<span class="token operator">:</span><span class="token number">1</span>t1<span class="token operator">:</span><span class="token number">0</span></code></pre></li><li><p>如果变量在线程间共享<br>1)如果只有读操作，则线程安全<br>2)如果有读写操作，则这段代码是临界区，需要考虑线程安全</p><p><strong>实例变量共享案例</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*    实例变量是共享变量有多种方式，例如上面的案例，如果把private int count = 5;加上static静态变量    因为静态变量是所有类实例共享的，所以count变量是共享变量*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyRunnable</span> myRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span>t2<span class="token operator">:</span><span class="token number">3</span>t1<span class="token operator">:</span><span class="token number">3</span>t2<span class="token operator">:</span><span class="token number">1</span>t1<span class="token operator">:</span><span class="token number">1</span>t1<span class="token operator">:</span><span class="token number">0</span></code></pre></li></ul></li><li><p>局部变量线程安全分析</p><ul><li><p>局部变量【局部变量被初始化为基本数据类型】是安全的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>局部变量引用的对象未必是安全的<br>1)如果局部变量引用的对象没有引用线程共享的对象，那么是线程安全的<br>2)如果局部变量引用的对象引用了一个线程共享的对象，那么要考虑线程安全的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test15</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UnsafeTest</span> unsafeTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnsafeTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                unsafeTest<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"线程"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UnsafeTest</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上述案例中，method2和method3引用的变量是多个线程共享的成员变量，所以上述代码是线程不安全的<br>代码的内存示意图如下：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/8.png" loading="lazy"></p><p>我们只需要将共享的成员变量，修改成局部变量即可，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> safeTest<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">method2</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method3</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>修改后的内存示意图如下：</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/9.png" style="zoom:80%;" / loading="lazy"></li></ul></li></ul><p>看一个类是否是线程安全，先关注变量是否共享，再关注共享变量是否被修改，<br>下面是一些文章，关于线程间通过共享变量通信，和变量的线程安全性分析</p><ul><li><a href="https://blog.csdn.net/m0_37695902/article/details/119032369">成员变量与线程安全</a></li><li><a href="https://blog.csdn.net/m0_37695902/article/details/119032737">任何一个类只要没有成员变量，就是线程安全的</a></li><li><a href="https://www.cnblogs.com/tonglin0325/p/6260485.html">Java多线程——线程范围内共享变量和ThreadLocal</a></li></ul><p>以上便是变量的线程安全分析</p><blockquote><p><span id="f">常见的线程安全类</span></p></blockquote><p>常见的线程安全类如下：</p><ul><li>String</li><li>Integer</li><li>StringBuffer</li><li>Random</li><li>Vector，底层list</li><li>Hashtable，底层map</li><li>JUC包下的类</li></ul><p>这里所说它们是线程安全指的是：多个线程调用它们同一个实例的某个方法时，是线程安全的<br>例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Hashtable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是，并不代表这些类方法的组合是线程安全的，例如下面代码就不是线程安全的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Hashtable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 线程1，线程2</span><span class="token keyword">if</span><span class="token punctuation">(</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>线程调用示意图如下：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/10.png" loading="lazy"></p><blockquote><p><span id="g">对象头与monitor</span></p></blockquote><p>之前说过，要解决线程安全问题，最常用的是使用synchronized关键字进行加锁，那么在学习synchronized原理之前<br>我们先来了解一下什么是对象头和monitor</p><p><strong>对象头</strong><br>一个Java对象包括三个部分，对象头，实例数据，对齐补充，其中对象头又包括Mark Word，Klass Word<br>如图所示：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/11.png" loading="lazy"></p><p>再看具体对象头具体结构，以 32 位虚拟机为例</p><ul><li>普通对象的对象头结构如下，其中的Klass Word为指针，指向对应的Class对象<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/12.png" loading="lazy"></li><li>数组对象的对象头结构如下<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/13.png" loading="lazy"></li></ul><p>对象头中Mark Word有以下几种状态：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/14.png" loading="lazy"><br>其中，Normal指的是一个对象创建出来，默认无锁的，即Normal状态<br>如果经过JVM配置的话，我们可以使得对象一创建出来是拥有偏向锁的，即Biased，与Normal区别在于Mark Word的倒数第三位是1<br>拥有偏向锁的对象，其Mark Word中保存的是线程的ID，这个ID是操作系统级别，并不是JVM<br>Lightweight Locked则指的是轻量级锁，它的Mark Work中保存的是栈帧中的锁记录指针，<br>锁记录是栈帧中一个对象，这里记录的是锁记录的地址，具体最后一节再说。<br>Heavyweight Locked表示的是重量级锁，如果多个线程竞争对临界区的共享变量进行操作，我们可以通过<br>synchronized关键字为该对象进行加锁，加锁就是改变这个对象对象头的Mark Word，换成一个monitor地址<br>monitor是操作系统创建的一个内存空间，具体等下介绍。<br>Marked for GC，当GC线程检测该对象没有被引用后，就将堆中该对象的内存回收。</p><p><strong>Monitor</strong><br>Monitor，也被叫做管程或监视器，其实是一种同步工具，也可以说是一种同步机制，它通常被描述为一个对象<br>我们可以简单理解为操作系统分配的一个内存空间。不同的编译器对monitor有不同的实现。<br>在HotSpot虚拟机中，Monitor是基于C++的<strong>ObjectMonitor类</strong>实现的，其主要成员包括：</p><pre class="language-none"><code class="language-none">_owner：指向持有ObjectMonitor对象的线程_WaitSet：存放处于wait状态的线程队列，即调用wait()方法的线程_EntryList：存放处于等待锁block状态的线程队列_count：约为_WaitSet 和 _EntryList 的节点数之和_cxq: 多个线程争抢锁，会先存入这个单向链表_recursions: 记录重入次数</code></pre><p>每个java对象都可以关联一个Monitor，如果使用<code>synchronized</code>给对象上锁（重量级），<br>该对象头的Mark Word中就被设置为指向Monitor对象的指针<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/15.png" loading="lazy"></p><p>上图具体含义如下：</p><ul><li>刚开始时Monitor中的Owner为null</li><li>当Thread-2 执行synchronized(obj){}代码时就会将Monitor的所有者Owner 设置为 Thread-2，上锁成功<br>Monitor中同一时刻只能有一个Owner</li><li>当Thread-2 占据锁时，如果线程Thread-3，Thread-4也来执行synchronized(obj){}代码，<br>就会进入EntryList中变成BLOCKED状态</li><li>Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争时是非公平的</li><li>图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，<br>这里的条件不满足，指的是线程主动阻塞调用wait方法，调用wait方法后，当前线程释放锁，<br>并进入wait set等待其他线程唤醒。</li></ul><p>注意：synchronized 必须是进入同一个对象的monitor才有上述的效果，不加 synchronized 的对象不会关联监视器(monitor)。</p><blockquote><p><span id="h">synchronized原理</span></p></blockquote><p>synchronized关键字就是用来给同步代码块加锁的，加锁指的是线程去修改锁对象的对象头的mark word为其他指针<br>如果修改成功，则表示该线程成功上锁，或者该线程成功拿到锁，锁分为下面几种：</p><ul><li>如果是重量级锁，则mark word中就是指向一个monitor地址，或者说指向一个monitor对象<br>相当于让这个对象关联了一个monitor对象</li><li>如果是轻量级锁，则mark word中就是指向当前线程所在栈的栈帧的锁记录，这个锁记录可以理解为<br>栈帧中的一个对象(Lock Record)，说白了，mark word保存的也是指向一个对象的地址</li><li>如果是偏向锁，则mark word中就是指向当前线程的ID，把当前整个线程抽象成一个内存空间，<br>类似的monitor，锁记录都是一块内存空间。</li></ul><p>在锁的级别上来看，偏向锁是对轻量级锁的优化，轻量级锁是对重量级锁的优化，都是通过synchronized关键字来实现<br>jvm默认创建的对象是无锁状态，随着线程竞争越来越激烈，锁会从偏向锁升级到轻量级锁，最后是重量级锁。</p><p><strong>我一直不知道怎么描述锁到底是什么东西，synchronized需要的对象是锁吗？monitor对象是锁吗？</strong><br><strong>后来我终于感觉到，锁其实是一种机制，一种保证多线程环境下只有一个线程进入临界区的机制。</strong><br><strong>锁记录，monitor，synchronized需要的对象等等，都是锁机制的一部分，偏向锁，轻量级锁，重量级锁</strong><br><strong>也都是一种机制，锁不是某个地址空间，某个对象。</strong></p><p>有时候你可能看到说加锁指的是对synchronized指定的对象加锁，这个对象被称为锁对象，<br>我觉得加锁指的是对临界区加锁，当然这个对象也可以说是锁对象，只是这些乱七八糟的含义很影响学习<br>比如成员变量，全局变量，实例变量，静态变量，或者javaweb中描述实体类的pojo，bean，domain。</p><blockquote><p><span id="i">synchronized原理进阶</span></p></blockquote><p>这小节细讲一下synchronized中各个锁机制</p><ul><li><p><strong>轻量级锁</strong><br>锁是一种机制，当锁对象(synchronized指定的对象)的mark word指向线程的栈帧中锁记录时，<br>我们称这个线程获得了轻量锁，锁记录简单理解为使用synchronized就在栈帧中创建一个锁记录对象吧</p><p>轻量级锁的使用场景是：如果一个对象虽然有多个线程要对它进行加锁，但是加锁的时间是错开的<br>（也就是没有人可以竞争的），那么可以使用轻量级锁来进行优化。轻量级锁对使用者是透明的，<br>即语法仍然是<code>synchronized</code>，假设有两个方法同步块，利用同一个对象加锁</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 同步块 A</span>         <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 同步块 B</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>线程获取轻量锁流程如下：</p><ul><li>每次线程运行到synchronized代码块时，都会创建锁记录（Lock Record）对象，<br>锁记录内部可以储存对象的Mark Word和对象引用reference（这个对象就是synchronized指定的对象）<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/16.png" loading="lazy"></li><li>让锁记录中的Object reference指向对象，并且尝试用cas(compare and sweep)替换<br>Object对象的Mark Word ，将Mark Word 的值存入锁记录中<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/17.png" loading="lazy"></li><li>如果cas替换成功，那么对象的对象头储存的就是锁记录的地址和状态01，如下所示<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/18.png" loading="lazy"></li><li>如果cas失败，有两种情况<br>1)如果是其它线程已经持有了该Object的轻量级锁，那么表示有竞争，将进入锁膨胀阶段<br>2)如果是自己的线程已经执行了synchronized进行加锁，那么那么再添加一条 Lock Record 作为重入的计数<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/19.png" loading="lazy"></li><li>当线程退出synchronized代码块的时候，如果获取的是取值为 null 的锁记录 ，表示有重入，则直接释放掉，删除锁记录<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/20.png" loading="lazy"></li><li>当线程退出synchronized代码块的时候，如果获取的锁记录取值不为 null，那么使用cas将Mark Word的值恢复给对象<br>1)成功则解锁成功<br>2)失败，则说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li></ul></li><li><p><strong>锁膨胀</strong><br>如果线程在cas交换Object中mark word时失败，说明之前已经有线程交换过Object信息了，<br>如果是自己，则进入锁重入阶段，即当前线程创建一个新的锁记录对象，并将锁记录的地址设置为null</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 同步块</span>      <span class="token class-name">A</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">// 同步块 B</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面代码中，如果一个线程进入method1的同步代码块时，则栈帧中就创建了一个锁记录对象，<br>当在锁记录中又调用其他同步方法时，则会创建一个值为null的锁记录，这就是锁重入。</p><p>如果不是自己，是其他线程已经为这个对象加上了轻量级锁，那么就要进入锁膨胀阶段，即升级为重量级锁</p><ul><li>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/21.png" loading="lazy"></li><li>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程<br>即为对象申请Monitor锁，让Object指向重量级锁地址，然后自己进入Monitor 的EntryList变成BLOCKED状态<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/22.png" loading="lazy"></li><li>当Thread-0 推出synchronized同步块时，使用cas将Mark Word的值恢复给对象头，失败，那么会进入重量级锁的解锁过程，即按照Monitor的地址找到Monitor对象，将Owner设置为null，唤醒EntryList 中的Thread-1线程</li></ul></li><li><p><strong>锁自旋</strong></p><p>重量级锁竞争锁资源的时候，还可以通过自旋来进行优化，<br>场景发生在：当锁资源被占用的情况下，Monitor对象中的Entry List线程不用马上进入堵塞队列，<br>而是进入自旋状态，简单可以理解为在做循环试探锁资源是否被释放了，目的是达到锁资源一释放就可以<br>立马被下一个线程使用，不要再去进行唤醒操作。<br>但是要注意的是：</p><ul><li>自旋会占用CPU的资源，如果是单核CPU就会存在很大的浪费，所以自旋使用与多核的CPU.</li><li>Java 7之后就不能手动控制是否开启自旋功能了，而是由JVM自动执行，并且是自适应的，<br>例如如果一次自旋成功，就会被认为自旋成功的可能性大，就会多自旋几次，反之，少自旋或者不自旋，设计的比较智能。</li></ul></li><li><p><strong>偏向锁</strong><br>偏向锁是对轻量级锁的优化，在轻量级锁中，我们可以发现，如果同一个线程对同一个对象进行重入锁时，<br>也需要执行CAS操作，这个操作非常耗时，那么java6开始引入了偏向锁，只有第一次使用CAS时将对象的<br>Mark Word头设置为线程ID，之后这个线程再进行重入锁时，发现线程ID是自己的，那么就不用再进行CAS了。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/23.png" loading="lazy"></p><p>如果发现线程ID不是自己的时候，就会尝试CAS替换操作：<br>如果操作成功了， 此时该线程就获得了锁对象。( <code>此时是交替访问临界区, 撤销偏向锁, 升级为轻量级锁</code>)<br>如果操作失败了， 此时说明发生了锁竞争。( <code>此时是多线程访问临界区, 撤销偏向锁, 升级为重量级锁</code>)</p><ul><li><p>偏向锁的状态<br>1）一个java对象在被创建出来的时候，这个对象的对象头中mark word默认是偏向锁状态，<br>其mark word末尾三位是101，此时其他位(thread位，epoch位，age位)都是0，这些值都是在加锁的时候才会被设置</p><p>2）可当你测试的时候，你会发现你打印的对象的mark word信息末尾三位竟然是001，也就是无锁状态<br>这是因为对象偏向锁状态默认是有延迟的，不会在程序启动的时候立刻生效，如果想避免延迟，<br>可以添加虚拟机参数来禁用延迟：<code>-XX:BiasedLockingStartupDelay=0</code>来禁用延迟</p><p>3）处于偏向锁的对象解锁后，线程 id 仍存储于对象头中，这就体现了偏向的概念了<br>等待下次同一个线程再次加锁就会发现，这个线程id与自己一致，表明需要进行锁重入了，而不需要进行CAS替换</p></li><li><p>偏向锁被撤销的三种情况<br>1）synchronized指定的对象，即锁对象调用了hashcode方法后，该对象就从偏向锁状态转为无锁状态</p><p>2）当其他线程进行cas交换失败时，此时偏向锁被撤销，升级为轻量级锁，偏向锁适合一个线程执行同步代码块<br>轻量级锁适合多个线程执行不同的代码块，或者交替获取锁，没有存在竞争情况<br>重量级锁适合多个线程竞争执行同一个代码块，存在相互竞争的情况</p><p>3）当锁对象调用wait,notify方法后，偏向锁会被撤销，这时偏向锁会转变为重量级锁，因为这些方法是重量级锁才有。</p></li><li><p>批量重偏向<br>当只有一个线程在执行同步代码块时，这是锁对象状态是偏向锁状态，但如果此时另一个线程获取锁<br>执行其他同步代码块，没有产生竞争时，这时锁对象状态从偏向锁状态被撤销，升级为轻量级锁状态，<br>如果线程中上述对象撤销偏向锁的次数超过20次，则对象的mark ward的线程ID会偏向另一个线程。</p></li><li><p>批量撤销<br>如果线程中上述对象撤销偏向锁的次数超过40次，则之后创建的所有对象都是无锁状态。</p></li><li><p>锁消除<br>如果jvm中的即时编译器发现你同步代码块中，根本没有对共享变量的修改，或者根本没有线程安全问题<br>那么你加的synchronized并不会生效，编译后的字节码中不存在monitorenter和monitorexit原语<br>相当于没写synchronized，这就是锁消除。</p></li></ul></li></ul><p><strong>梳理下整个流程</strong><br>假设我们关闭了偏向锁的延迟，那么创建的锁对象的mark word状态是偏向锁状态<br>此时一个线程准备进入同步代码块，我们叫它t1吧，t1线程碰到synchronized关键字，首先检查锁对象状态<br>很显然是偏向锁状态，但此时的mark word只有后三位是101，而前面位数都还是0，t1线程随即进行CAS操作<br>将t1线程的线程id保存到mark word中，当然，此时没其他线程跟它争抢，CAS操作成功代表t1线程拥有了锁<br>紧接着t1线程执行同步代码块中代码。</p><p>当t1线程在同步代码块中又调用了其他同步方法，则t1线程会检查锁对象中的markword保存的内容，<br>很显然，markword中保存的正是t1线程id，这时t1不需要进行CAS操作就拥有锁，这是锁重入</p><p>当t1线程执行完同步代码块后，锁对象中markword仍然保留着t1线程的线程id，等t1线程走后<br>t2线程执行同步代码块，t2线程会撤销锁对象的偏向锁，升级为轻量级锁，t2会在栈帧中创建锁记录对象<br>并进行CAS操作，交换锁对象中的mark word，使mark word保存锁记录的地址，当然锁记录中还会保存<br>锁对象的地址，此时锁对象的mark word中后两位是00，代表此时已经是轻量级锁的状态</p><p>当t2线程还未结束同步代码块时，又有一个线程t3准备进入和t2同一处代码块中，首先t3进行CAS交换锁对象<br>的mark word信息，发现CAS操作失败了，这时，t3线程会申请一个monitor对象，并将锁对象中mark word<br>锁记录的地址改成monitor对象的地址，然后t3修改monitor中owner指向，使之指向t2线程，并自己保存在<br>monitor对象的entry set中。</p><p>当t2线程结束同步代码块时，t2进行CAS操作，交换锁对象的mark word信息，发现失败了，于是通过锁对象<br>中保存的monitor的地址，找到monitor对象，将monitor中owner引用置为null，并唤醒entry set中的t3线程<br>最后t2线程退出同步代码块中</p><p>以上过程是非常不清晰的，部分重要操作有遗漏，仅仅当做大概的流程，等以后学习更加深入再更新<br>下面是一张锁升级步骤图，可能也有些不太正确，例如自旋并不会发生在获取轻量级锁时，而是用来获取重量级锁<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/thread/thread1/24.png" loading="lazy"></p><blockquote><p><span id="j">文章及资料</span></p></blockquote><ul><li><a href="https://blog.nowcoder.net/n/3943f69fa12f4ec8b32249948ff43501?from=nowcoder_improve">Java Monitor对象与Synchronized原理</a></li><li><a href="https://blog.csdn.net/m0_37989980/article/details/111460733">学习《Java并发编程》目录索引 (持续更新中)</a></li><li><a href="https://www.cnblogs.com/yescode/p/14474104.html">轻量级锁会自旋？好像并不是这样的</a></li><li><a href="https://www.cnblogs.com/wade-luffy/p/5969418.html">偏向锁，轻量级锁，自旋锁，重量级锁的详细介绍</a></li><li><a href="https://www.cnblogs.com/aspirant/p/11470858.html">深入分析Synchronized原理(阿里面试题)</a></li><li><a href="https://cloud.tencent.com/developer/article/1465413">深入理解synchronized底层原理，一篇文章就够了！</a></li><li><a href="https://zhuanlan.zhihu.com/p/141554048">轻量级锁加解锁过程详解</a></li><li><a href="https://cloud.tencent.com/developer/article/1520488">通俗易懂讲解偏向锁、轻量级锁和重量级锁</a></li><li><a href="https://github.com/NicknamedCoco/cdn/tree/master/blog/thread">github上的资料</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依微服务之权限管理</title>
      <link href="2022/01/02/%E8%8B%A5%E4%BE%9D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>2022/01/02/%E8%8B%A5%E4%BE%9D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>很久没有写博客了，确实有些懈怠了，接下来的日子我会持续学习若依系统的精华，好好准备毕设内容<br>2022年的主要任务是搞毕设吧，虽然还有很多不会的知识点，多线程或者刷面试题等等，但是我个人太菜<br>如果不抓紧时间搞毕设，那毕业都成问题了，时不我待，好好努力！</p><p>最近学习了一下若依中的权限管理，之前没有了解过这方面的内容，但学习了几天后，感觉大概有了一个认识了吧<br>我的博客目标一直很简单，记录学习的东西，未来总有用得到时候，以后可以作为借鉴，查漏补缺。<br>OK，咱们言归正传，看看本篇博客我们具体学习一下哪些内容</p><ul><li><a href="#a">权限管理的概念及分类</a></li><li><a href="#b">权限管理设计及其流程</a></li><li><a href="#c">若依项目中的权限管理</a></li><li><a href="#d">若依项目中的数据权限</a></li><li><a href="#e">大佬文章</a></li></ul><blockquote><p><span id="a">权限管理的概念及分类</span></p></blockquote><p>权限管理，指的是对系统的资源做一些限制，限制哪些用户可以访问，哪些用户不能访问，<br>资源是什么？哪些东西需要管理，需要限制，哪些东西就是资源，实际开发中，我们需要管理页面访问<br>API接口调用，数据，这些都是资源。</p><pre class="language-none"><code class="language-none">前端页面为什么是一种资源？在实际场景中，我们可能需要使得普通用户可以查看哪些页面，管理员能查看哪些页面，这就需要我们对前端页面做一个管控，做一些限制，使得普通用户和管理员查看不同的页面，我们知道，往往一个页面对应一个菜单项，当我们点击某个菜单选项时，就会跳转相应页面，那么我们只需要限制普通用户能看到哪些菜单项，管理员能看到哪些菜单项即可，这如何做到呢？每个菜单选项对应不同的组件路由我们只需要在用户登录后，查到该用户拥有哪些菜单，将菜单的数据(这些菜单的路由信息)发送给前端前端将拿到的菜单数据显示即可达到不同用户对应不同的菜单数据，即拥有不同的页面，从而对页面(菜单)进行限制达到我们的目标API接口为什么是一种资源在实际场景中，我们可能需要使得普通用户可以点击哪些按钮，管理员能点击哪些按钮用户可不可以点击某个按钮，就表示用户能不能看到某个按钮，就表示用户有没有权限点击这个按钮一个按钮对应一次请求，就表示用户有没有调用这个接口的权限，接口就是API，API接口也是一种资源我们也需要对接口进行一些限制，以达到某些用户能请求该接口，某些用户没有权限请求该接口数据是资源是显而易见的，有时候我们需要某一部分普通用户可以查看哪些数据，另一部分普通用户可以查看哪些数据这就需要用户和用户之间是存在差别的，比如，一个部门下的用户不能查看另一个部门的数据如何做到呢？部门，分公司等等这是用户组的概念，我们对用户分组就能做到不同用户查看不同的数据。</code></pre><p>我们通常把对页面资源的限制，叫做页面权限，很简单，就是有这个权限的用户才能访问这个页面，<br>没这个权限的用户就无法访问，它是以整个页面为维度，而判断用户有无权限就是判断用户有无相应的菜单项</p><p>我们通常把对API接口资源的限制，叫做操作权限，属于按钮级别权限，你有无操作该接口的权限，就是你有无调用该接口的权限</p><p>我们通常把对数据资源的限制，叫做数据权限，上面两种判断你有没有权限，统称为功能权限，<br>而数据权限则是你有多少权限，限制用户查询全部数据，只能查询属于自己的数据。</p><p>综上所述，权限管理就是对资源进行管理，判断用户有无访问该资源的权限，权限管理分为三类：页面权限，操作权限，数据权限。</p><blockquote><p><span id="b">权限管理设计及其流程</span></p></blockquote><p><strong>权限管理设计</strong><br>权限管理有很多著名的设计模型，其中最著名，使用最广泛的当属RBAC模型(Role Based Access Control)<br>基于角色的访问控制，请看下图：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/ruoyi/permissionManage/2.png" style="zoom:80%;" / loading="lazy"></p><p>上图中就是一个典型的RBAC模型，在RBAC模型中，用户表示我们注册的用户，查看订单，删除订单等<br>这些都表示资源，这里的举例就是API接口资源，这里限制的是API接口的权限，即操作权限。<br>本来我们以为，某个用户拥有操作权限，其他用户拥有哪些操作权限，用户与操作权限是绑定在一起的，<br>但是这样有很多弊端，例如如果我每新增一个用户，我就需要为这个用户添加很多操作权限，不现实。<br>还有很多其他方面的弊端，为此在RBAC模型中新增角色的概念，将所有的权限全部绑定到角色中，<br>不管你是操作权限，还是页面权限，还是功能权限，全部绑定到不同的角色中，我新增的用户只需要绑定<br>某个或某几个角色即可拥有角色的权限，这就是RBAC模型。</p><p>通过上面描述，我们知道，用户与角色其实是多对多的关系，例如某个人即使开发又是测试，这就相当于<br>拥有两个角色，而角色与权限也是多对多的关系，一个角色拥有多个权限，一个权限被多个角色共有。<br>根据上面的描述，我们可以看下对应的数据库的表设计：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/ruoyi/permissionManage/1.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/ruoyi/permissionManage/3.png" loading="lazy"></p><p>可以看到，因为多对多的关系，所以都有中间表关联，另外我们可以看到这里的资源表的资源存储的是路径path<br>其实就是页面菜单的路由路径，也就是页面权限，可以想象资源还可以是API接口路径，即操作权限<br>实际开发中菜单的路由信息(页面权限)和API接口的路径信息(操作权限)都放在同一个表中，统一成菜单表，菜单表既包含菜单的路由信息，<br>也包含API接口的路径信息，若依微服务中就是这样实现，来看看若依微服务中，菜单表的设计吧<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/ruoyi/permissionManage/4.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/ruoyi/permissionManage/5.png" loading="lazy"><br>上面菜单表的perms字段就是属于操作权限，操作是每一个请求，每一个请求对应一个url，而这里的权限标识<br>相当于请求的url，也是唯一的。</p><p>另外我们如何实现数据权限呢？数据权限的本质是不同的用户看到不同的数据，如何区分不同的用户，<br>现实生活中往往是不同部门的人看到不同部门的数据，所以这里的资源表也可以是部门表，这样就能<br>区分不同的用户属于不同的部门，从而实现数据权限，简而言之，新增一个部门表与角色绑定，<br>角色再与用户绑定，这样就能区分不同的用户，再通过判断部门的不同限制不同的用户查看不同部门的数据。</p><p>像不同用户属于不同的部门，其实就是用户组的概念，按组来分配角色，按组来分配权限，<br>其实还有权限组的概念，权限组是一类API接口的聚合，比如用户操作权限组就可以包含对用户数据的增删查改操作<br>使用权限组的时候，角色不是和api去绑定，而是去和权限组绑定；<br>另外，有些权限系统中，角色与角色之间还有继承，互斥的关系，权限设计水太深，我只能了解个大概。</p><p><strong>权限管理流程</strong></p><p>现在我们已经知道了权限管理的设计模型，通过RBAC可以做到权限管理，那具体是如何实现呢？<br>我们常常提到认证和授权，认证指的是用户账号密码正不正确，用户合不合法，而授权指的是检查用户权限够不够<br>每一个用户都会被绑定角色，每个角色都有不同的权限，授权是为用户绑定角色，授予权限，也是当用户请求时<br>检查用户是否有相应的权限。</p><p>实际开发中，当用户登录成功后，前端会请求用户的数据，前端携带token到后端，后端根据token查到用户数据<br>根据用户数据中用户id，查询该用户所拥有的角色数据，根据角色查询菜单权限数据，菜单权限数据存放在一张表中<br>与角色表多对多关联，菜单权限数据中有该角色拥有的菜单数据，这些菜单数据就是前端需要的路由路径，<br>控制用户拥有哪些前端页面，属于页面权限，菜单权限数据表中还有该角色拥有的权限数据，权限数据则表示<br>该用户可以调用哪些API接口，属于操作权限，当然角色不仅关联菜单权限表，还可以是部门表，表明当前角色<br>属于哪些部门，也是多对多关联，属于数据权限了。</p><p>回归正题，用户登录成功后请求后端，拿到属于该用户的权限数据，菜单数据，前端拿到后，会根据菜单数据渲染<br>用户页面，不同菜单数据表示不同用户显示不同的页面，会根据用户权限数据，显示或者隐藏某些按钮，<br>当用户再一次请求后端后，后端首先检查是否登录，然后查询当前用户权限数据，判断该用户是否有权限调用该接口<br>以上便是大概的权限管理流程。</p><blockquote><p><span id="c">若依项目中的权限管理</span></p></blockquote><p>若依项目中通过注解判断用户是否登录，是否拥有相应的权限，是否拥有某些角色，这些注解标注在控制器方法上<br>如果是，才能执行控制器方法，如果不是则不能执行控制器方法，会抛出无权限异常等信息返回给前端。</p><p>下面我们将跟踪请求的执行流程，分析权限注解，AOP，数据库表结构，看看若依项目中权限管理是怎样的</p><ul><li><p>权限管理的第一步是用户已经完成登录，若依项目中，用户登录后，前端会发起一个请求，拿到该用户的<br>菜单数据，权限数据，用户数据信息。<br>这个请求的url：<code>http://localhost/dev-api/system/user/getInfo</code><br>这个请求接收到的数据如下：</p><pre class="language-none"><code class="language-none">&#123;    &quot;msg&quot;:&quot;操作成功&quot;,    &quot;code&quot;:200,    &quot;permissions&quot;:[        &quot;system:user:resetPwd&quot;,        &quot;system:post:list&quot;,        &quot;system:menu:query&quot;,        &quot;system:dept:remove&quot;,        &quot;system:menu:list&quot;,        &quot;tool:gen:edit&quot;,        这些属于该用户所拥有的权限标识，表示该用户拥有的权限    ],    &quot;roles&quot;:[        &quot;common&quot;        这是该用户拥有的角色    ],    &quot;user&quot;:&#123;        用户数据,略...,        &quot;dept&quot;:&#123;            该用户的部门数据,略...        &#125;,        &quot;roles&quot;:[            该用户的角色数据,略...        ],    &#125;&#125;</code></pre><p>这些用户数据，权限数据，菜单数据只需通过表的关联查询就能查出来，对了，你可能有疑问上面中也没有<br>菜单数据，前端怎么渲染菜单选项呢？</p><p>其实这里本可以一次性查出来，但若依中并没有放在一起查询。若依中，查完上面的数据中，<br>又发了一个请求：<code>http://localhost/dev-api/system/menu/getRouters</code><br>请求后数据如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"操作成功"</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"System"</span><span class="token punctuation">,</span>            <span class="token property">"path"</span><span class="token operator">:</span><span class="token string">"/system"</span><span class="token punctuation">,</span>            <span class="token property">"hidden"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"redirect"</span><span class="token operator">:</span><span class="token string">"noRedirect"</span><span class="token punctuation">,</span>            <span class="token property">"component"</span><span class="token operator">:</span><span class="token string">"Layout"</span><span class="token punctuation">,</span>            <span class="token property">"alwaysShow"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"meta"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"系统管理"</span><span class="token punctuation">,</span>                <span class="token property">"icon"</span><span class="token operator">:</span><span class="token string">"system"</span><span class="token punctuation">,</span>                <span class="token property">"noCache"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"link"</span><span class="token operator">:</span><span class="token null keyword">null</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"children"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"User"</span><span class="token punctuation">,</span>                    <span class="token property">"path"</span><span class="token operator">:</span><span class="token string">"user"</span><span class="token punctuation">,</span>                    <span class="token property">"hidden"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                    <span class="token property">"component"</span><span class="token operator">:</span><span class="token string">"system/user/index"</span><span class="token punctuation">,</span>                    <span class="token property">"meta"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                        <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"用户管理"</span><span class="token punctuation">,</span>                        <span class="token property">"icon"</span><span class="token operator">:</span><span class="token string">"user"</span><span class="token punctuation">,</span>                        <span class="token property">"noCache"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token property">"link"</span><span class="token operator">:</span><span class="token null keyword">null</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                略            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        略    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>根据上面的数据，渲染该用户的页面，当然我们的重点是权限管理。</p></li><li><p>上面我们通过<code>/user/getInfo</code>请求，我们拿到了该用户下的用户信息和权限信息，我们接着看看该请求的控制器方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getInfo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">AjaxResult</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//根据token拿到用户数据</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 角色集合，根据用户id拿到角色</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> roles <span class="token operator">=</span> permissionService<span class="token punctuation">.</span><span class="token function">getRolePermission</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 权限集合，根据用户id拿到该用户拥有的权限标识，即权限信息</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissions <span class="token operator">=</span> permissionService<span class="token punctuation">.</span><span class="token function">getMenuPermission</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AjaxResult</span> ajax <span class="token operator">=</span> <span class="token class-name">AjaxResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajax<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> userService<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajax<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"roles"</span><span class="token punctuation">,</span> roles<span class="token punctuation">)</span><span class="token punctuation">;</span>    ajax<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"permissions"</span><span class="token punctuation">,</span> permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ajax<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>上面的代码很简单，就是简单查询数据库数据而已，下面来看看数据库的表结构吧<br>因为是基于RBAC模型，所有有三张表，用户表，角色表，菜单权限表，他们两两多对多关联<br>若依系统中表结构如下:</p><ul><li><p>用户表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sys_user<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'部门ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户账号'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>nick_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户昵称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_type<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'00'</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户类型（00系统用户）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户邮箱'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>phonenumber<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'手机号码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户性别（0男 1女 2未知）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>avatar<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'头像地址'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'帐号状态（0正常 1停用）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>del_flag<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'删除标志（0代表存在 2代表删除）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>login_ip<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后登录IP'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>login_date<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后登录时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_by<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_by<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>remark<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'备注'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">100</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户信息表'</span></code></pre></li><li><p>角色表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sys_role<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>role_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>role_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色名称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>role_key<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色权限字符串'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>role_sort<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'显示顺序'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>data_scope<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1'</span> <span class="token keyword">COMMENT</span> <span class="token string">'数据范围（1：全部数据权限 2：自定数据权限        3：本部门数据权限 4：本部门及以下数据权限）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>menu_check_strictly<span class="token punctuation">`</span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单树选择项是否关联显示'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>dept_check_strictly<span class="token punctuation">`</span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1'</span> <span class="token keyword">COMMENT</span> <span class="token string">'部门树选择项是否关联显示'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色状态（0正常 1停用）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>del_flag<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'删除标志（0代表存在 2代表删除）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_by<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_by<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>remark<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'备注'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">100</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'角色信息表'</span></code></pre></li><li><p>用户角色表，中间表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sys_user_role<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>role_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色ID'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户和角色关联表'</span></code></pre></li><li><p>菜单权限表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sys_menu<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>menu_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>menu_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单名称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>parent_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'父菜单ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>order_num<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'显示顺序'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>path<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'路由地址'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>component<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'组件路径'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>query<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'路由参数'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>is_frame<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1'</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否为外链（0是 1否）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>is_cache<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否缓存（0缓存 1不缓存）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>menu_type<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单类型（M目录 C菜单 F按钮）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>visible<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单状态（0显示 1隐藏）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单状态（0正常 1停用）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>perms<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'权限标识'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>icon<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'#'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单图标'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_by<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_by<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>remark<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'备注'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>menu_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2000</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'菜单权限表'</span></code></pre></li><li><p>菜单权限角色表，中间表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sys_role_menu<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>role_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>menu_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单ID'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>menu_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'角色和菜单关联表'</span></code></pre></li></ul><p>通过上面表结构，我们自然能通过用户id，查到用户数据，用户的权限数据，用户权限数据也就是权限标识<br>就是菜单权限表perms字段中保存，这个权限标识的格式，在上面返回的数据中也展示了部分。</p></li><li><p>直到目前为止，我仍然没有讲到权限管理哦，只是把权限管理的表结构贴了出来，好，那么继续<br>权限管理就是当用户请求后，判断用户有没有登录成功，判断该请求属不属于权限管理的请求，<br>判断用户有没有该请求的权限标识。</p><p>具体做法是，创建一个拦截器，每个请求来了都拦截一下，在拦截器中，查询被权限管理的所有请求路径<br>查询该用户拥有的权限路径，如果当前请求不在被权限管理的范围内，则放行，如果在权限管理范围内，<br>则表示需要接受权限检查，再判断当前用户有没有该请求的权限，下面是大佬博客中的拦截器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerInterceptorAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ResourceService</span> resourceService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是静态资源，直接放行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取请求的最佳匹配路径，这里的意思就是我之前数据演示的/API/user/test/&#123;id&#125;路径参数</span>        <span class="token comment">// 如果用uri判断的话就是/API/user/test/100，就和路径参数匹配不上了，所以要用这种方式获得</span>        <span class="token class-name">String</span> pattern <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>                <span class="token class-name">HandlerMapping</span><span class="token punctuation">.</span>BEST_MATCHING_PATTERN_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将请求方式（GET、POST等）和请求路径用 : 拼接起来，等下好进行判断。最终拼成字符串的就像这样：DELETE:/API/user</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> pattern<span class="token punctuation">;</span>        <span class="token comment">// 拿到所有权限路径 和 当前用户拥有的权限路径</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allPaths <span class="token operator">=</span> resourceService<span class="token punctuation">.</span><span class="token function">getAllPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userPaths <span class="token operator">=</span> resourceService<span class="token punctuation">.</span><span class="token function">getPathsByUserId</span><span class="token punctuation">(</span><span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">getCurrentUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 第一个判断：所有权限路径中包含该接口，才代表该接口需要权限处理，所以这是先决条件，</span>        <span class="token comment">// 第二个判断：判断该接口是不是属于当前用户的权限范围，如果不是，则代表该接口用户没有权限</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>allPaths<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>userPaths<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span>FORBIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 有权限就放行</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>but，若依项目中没有这么做，若依项目中通过权限注解实现权限管理，如果控制器方法标注了该注解<br>则表示该方法需要权限验证，反之则无需权限处理，这就表示不需要判断该请求属不属于权限管理范围内了。<br>因为没有标识权限注解的方法不会被AOP拦截到，就代表无需权限管理，只需要判断该用户有没有该请求的权限就行</p></li><li><p>OK，让我们来看看权限注解是怎样的吧，当然不止有权限注解，还有角色注解，登录注解和一个枚举类<br>我们重点关注下处理注解的AOP实现即可</p><ul><li><p>RequiresPermissions，权限注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 权限认证：必须具有指定权限才能进入该方法 */</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RequiresPermissions</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 需要校验的权限码     */</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 验证模式：AND | OR，默认AND     */</span>    <span class="token class-name">Logical</span> <span class="token function">logical</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Logical</span><span class="token punctuation">.</span>AND<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>RequiresRoles，角色注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 角色认证：必须具有指定角色标识才能进入该方法 */</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RequiresRoles</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 需要校验的角色标识     */</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 验证逻辑：AND | OR，默认AND     */</span>    <span class="token class-name">Logical</span> <span class="token function">logical</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Logical</span><span class="token punctuation">.</span>AND<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>RequiresLogin，登录注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 登录认证：只有登录之后才能进入该方法 */</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RequiresLogin</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>Logical，枚举类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 权限注解的验证模式 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Logical</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 必须具有所有的元素     */</span>    AND<span class="token punctuation">,</span>    <span class="token comment">/**     * 只需具有其中一个元素     */</span>    OR<span class="token punctuation">&#125;</span></code></pre></li><li><p>PreAuthorizeAspect，上面三个注解的AOP切面</p><pre class="language-none"><code class="language-none">package com.ruoyi.common.security.aspect;&#x2F;** * 基于 Spring Aop 的注解鉴权 *&#x2F;@Aspect@Componentpublic class PreAuthorizeAspect&#123;    &#x2F;**     * 构建     *&#x2F;    public PreAuthorizeAspect()    &#123;    &#125;    &#x2F;**     * 定义AOP签名 (切入所有使用鉴权注解的方法)     *&#x2F;    public static final String POINTCUT_SIGN &#x3D; &quot; @annotation(com.ruoyi.common.security.annotation.RequiresLogin) || &quot;            + &quot;@annotation(com.ruoyi.common.security.annotation.RequiresPermissions) || &quot;            + &quot;@annotation(com.ruoyi.common.security.annotation.RequiresRoles)&quot;;    &#x2F;**     * 声明AOP签名     *&#x2F;    @Pointcut(POINTCUT_SIGN)    public void pointcut()    &#123;    &#125;    &#x2F;**     * 环绕切入     *      * @param joinPoint 切面对象     * @return 底层方法执行后的返回值     * @throws Throwable 底层方法抛出的异常     *&#x2F;    @Around(&quot;pointcut()&quot;)    public Object around(ProceedingJoinPoint joinPoint) throws Throwable    &#123;        &#x2F;&#x2F; 注解鉴权        MethodSignature signature &#x3D; (MethodSignature) joinPoint.getSignature();        checkMethodAnnotation(signature.getMethod());        try        &#123;            &#x2F;&#x2F; 执行原有逻辑            Object obj &#x3D; joinPoint.proceed();            return obj;        &#125;        catch (Throwable e)        &#123;            throw e;        &#125;    &#125;    &#x2F;**     * 对一个Method对象进行注解检查     *&#x2F;    public void checkMethodAnnotation(Method method)    &#123;        &#x2F;&#x2F; 校验 @RequiresLogin 注解        RequiresLogin requiresLogin &#x3D; method.getAnnotation(RequiresLogin.class);        if (requiresLogin !&#x3D; null)        &#123;            AuthUtil.checkLogin();        &#125;        &#x2F;&#x2F; 校验 @RequiresRoles 注解        RequiresRoles requiresRoles &#x3D; method.getAnnotation(RequiresRoles.class);        if (requiresRoles !&#x3D; null)        &#123;            AuthUtil.checkRole(requiresRoles);        &#125;        &#x2F;&#x2F; 校验 @RequiresPermissions 注解        RequiresPermissions requiresPermissions &#x3D; method.getAnnotation(RequiresPermissions.class);        if (requiresPermissions !&#x3D; null)        &#123;            AuthUtil.checkPermi(requiresPermissions);        &#125;    &#125;&#125;</code></pre></li><li><p>我们看看上面类的checkMethodAnnotation方法中，是如何校验@RequiresPermissions 注解的<br>进入<code>AuthUtil.checkPermi(requiresPermissions);</code>，如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 根据注解传入参数鉴权, 如果验证未通过，则抛出异常: NotPermissionException* * @param requiresPermissions 权限注解*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkPermi</span><span class="token punctuation">(</span><span class="token class-name">RequiresPermissions</span> requiresPermissions<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    authLogic<span class="token punctuation">.</span><span class="token function">checkPermi</span><span class="token punctuation">(</span>requiresPermissions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>进入<code>authLogic.checkPermi(requiresPermissions);</code>，如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 根据注解(@RequiresPermissions)鉴权, 如果验证未通过，则抛出异常: NotPermissionException* * @param requiresPermissions 注解对象*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkPermi</span><span class="token punctuation">(</span><span class="token class-name">RequiresPermissions</span> requiresPermissions<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requiresPermissions<span class="token punctuation">.</span><span class="token function">logical</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Logical</span><span class="token punctuation">.</span>AND<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">checkPermiAnd</span><span class="token punctuation">(</span>requiresPermissions<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">checkPermiOr</span><span class="token punctuation">(</span>requiresPermissions<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里通过requiresPermissions注解的logical，选择与或逻辑，如果你权限注解中有多个权限，判断是<br>需要同时满足还是只需满足一个权限即可，我们随便进个，就进与逻辑吧<br>进入<code>checkPermiAnd(requiresPermissions.value());</code>，如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 验证用户是否含有指定权限，必须全部拥有** @param permissions 权限列表*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkPermiAnd</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> permissions<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissionList <span class="token operator">=</span> <span class="token function">getPermiList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> permission <span class="token operator">:</span> permissions<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPermi</span><span class="token punctuation">(</span>permissionList<span class="token punctuation">,</span> permission<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotPermissionException</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面就是权限判断的逻辑了，getPermiList方法获取该用户拥有的全部权限，而参数permissions<br>则是标注在控制器方法上的权限注解的value值，下面看看getPermiList方法中的内容吧</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 获取当前账号的权限列表* * @return 权限列表*/</span><span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getPermiList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> loginUser<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>就是简单拿到该用户的权限数据而已</p></li></ul></li><li><p>上面我们看了权限管理的主要逻辑，接下来我们看看权限注解@RequiresPermissions如何使用<br>这个权限注解，和登录注解，角色注解都标注在控制器方法上即可，下面是一个例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 获取用户列表*/</span><span class="token annotation punctuation">@RequiresPermissions</span><span class="token punctuation">(</span><span class="token string">"system:user:list"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">TableDataInfo</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">startPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">selectUserList</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">getDataTable</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>注解如果只有一个值，则这个值会赋值该注解的value属性上，上面权限注解表示，如果要调用这个方法<br>则需要用户有<code>system:user:list</code>权限，然后因为控制器方法标注了这个注解，在执行该方法前进入<br>该注解的AOP切面，即上面的PreAuthorizeAspect类，接着执行权限判断逻辑了。</p></li></ul><p>以上便是若依项目中的权限管理的设计与流程</p><blockquote><p><span id="d">若依项目中的数据权限</span></p></blockquote><p>但是还没完呢，上面的权限管理只是包含页面权限和操作权限的设计，而数据权限还没有讲到，<br>页面权限和操作权限属于功能权限，你没有权限我就不能让你执行控制器方法，而数据权限则是需要对数据<br>进行过滤，你只能看到你能看到的数据，我们通过新增部门表即可实现，不同的部门的用户，查看各自的数据<br>那么若依中，数据权限是如何设计的呢？还是通过注解，@DataScope，只要将该注解标注在控制器方法上<br>并且在mybatis原来的sql语句后添加一个<code>$&#123;params.dataScope&#125;</code>，即可进行数据限制，具体实现是动态的拼接<br>过滤的sql语句，然后保存在params对象的dataScope属性上。下面看看具体实现：</p><ul><li><p>DataScope注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 数据权限过滤注解 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DataScope</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 部门表的别名     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 用户表的别名     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">userAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>DataScopeAspect，AOP切面</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>common<span class="token punctuation">.</span>datascope<span class="token punctuation">.</span>aspect</span><span class="token punctuation">;</span><span class="token comment">/** * 数据过滤处理 */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataScopeAspect</span><span class="token punctuation">&#123;</span>    <span class="token comment">//全部数据权限</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DATA_SCOPE_ALL <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token comment">//自定数据权限</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DATA_SCOPE_CUSTOM <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>    <span class="token comment">//部门数据权限</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DATA_SCOPE_DEPT <span class="token operator">=</span> <span class="token string">"3"</span><span class="token punctuation">;</span>    <span class="token comment">//部门及以下数据权限</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DATA_SCOPE_DEPT_AND_CHILD <span class="token operator">=</span> <span class="token string">"4"</span><span class="token punctuation">;</span>    <span class="token comment">//仅本人数据权限</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DATA_SCOPE_SELF <span class="token operator">=</span> <span class="token string">"5"</span><span class="token punctuation">;</span>    <span class="token comment">//数据权限过滤关键字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DATA_SCOPE <span class="token operator">=</span> <span class="token string">"dataScope"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"@annotation(controllerDataScope)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> point<span class="token punctuation">,</span> <span class="token class-name">DataScope</span> controllerDataScope<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span>    <span class="token punctuation">&#123;</span>        <span class="token function">clearDataScope</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">handleDataScope</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> controllerDataScope<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleDataScope</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">DataScope</span> controllerDataScope<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取当前的用户</span>        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">SysUser</span> currentUser <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getSysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果是超级管理员，则不过滤数据</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>currentUser<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>currentUser<span class="token punctuation">.</span><span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">dataScopeFilter</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> currentUser<span class="token punctuation">,</span> controllerDataScope<span class="token punctuation">.</span><span class="token function">deptAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        controllerDataScope<span class="token punctuation">.</span><span class="token function">userAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 数据范围过滤     *      * @param joinPoint 切点     * @param user 用户     * @param deptAlias 部门别名     * @param userAlias 用户别名     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dataScopeFilter</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">SysUser</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> deptAlias<span class="token punctuation">,</span> <span class="token class-name">String</span> userAlias<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sqlString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SysRole</span> role <span class="token operator">:</span> user<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> dataScope <span class="token operator">=</span> role<span class="token punctuation">.</span><span class="token function">getDataScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DATA_SCOPE_ALL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sqlString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>DATA_SCOPE_CUSTOM<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sqlString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                  <span class="token string">" OR &#123;&#125;.dept_id IN ( SELECT dept_id FROM sys_role_dept WHERE role_id = &#123;&#125; ) "</span><span class="token punctuation">,</span> deptAlias<span class="token punctuation">,</span>                        role<span class="token punctuation">.</span><span class="token function">getRoleId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>DATA_SCOPE_DEPT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sqlString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">" OR &#123;&#125;.dept_id = &#123;&#125; "</span><span class="token punctuation">,</span> deptAlias<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>DATA_SCOPE_DEPT_AND_CHILD<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                sqlString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                  <span class="token string">" OR &#123;&#125;.dept_id IN ( SELECT dept_id FROM sys_dept WHERE dept_id = &#123;&#125; or find_in_set( &#123;&#125; , ancestors ) )"</span><span class="token punctuation">,</span>                        deptAlias<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>DATA_SCOPE_SELF<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>userAlias<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    sqlString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">" OR &#123;&#125;.user_id = &#123;&#125; "</span><span class="token punctuation">,</span> userAlias<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                <span class="token punctuation">&#123;</span>                    <span class="token comment">// 数据权限为仅本人且没有userAlias别名不查询任何数据</span>                    sqlString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" OR 1=0 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>sqlString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> params <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> params <span class="token keyword">instanceof</span> <span class="token class-name">BaseEntity</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">BaseEntity</span> baseEntity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BaseEntity</span><span class="token punctuation">)</span> params<span class="token punctuation">;</span>                baseEntity<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DATA_SCOPE<span class="token punctuation">,</span> <span class="token string">" AND ("</span> <span class="token operator">+</span> sqlString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 拼接权限sql前先清空params.dataScope参数防止注入     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">clearDataScope</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> params <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> params <span class="token keyword">instanceof</span> <span class="token class-name">BaseEntity</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">BaseEntity</span> baseEntity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BaseEntity</span><span class="token punctuation">)</span> params<span class="token punctuation">;</span>            baseEntity<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DATA_SCOPE<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>部门表及部门角色表的结构</p><ul><li><p>部门表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sys_dept<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'部门id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>parent_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'父部门id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>ancestors<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'祖级列表'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>dept_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'部门名称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>order_num<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'显示顺序'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>leader<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'负责人'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>phone<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'联系电话'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'部门状态（0正常 1停用）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>del_flag<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'删除标志（0代表存在 2代表删除）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_by<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_by<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">200</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'部门表'</span></code></pre></li><li><p>部门与角色关联表</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sys_role_dept<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>role_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'部门ID'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'角色和部门关联表'</span></code></pre></li></ul></li><li><p>数据权限注解具体使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//在控制器方法上标注数据权限注解</span><span class="token annotation punctuation">@DataScope</span><span class="token punctuation">(</span>deptAlias <span class="token operator">=</span> <span class="token string">"d"</span><span class="token punctuation">,</span> userAlias <span class="token operator">=</span> <span class="token string">"u"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">></span></span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在mybatis查询底部标签添加数据范围过滤</span><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"select"</span> parameterType<span class="token operator">=</span><span class="token string">"..."</span> resultMap<span class="token operator">=</span><span class="token string">"...Result"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"select...Vo"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 数据范围过滤 <span class="token operator">--</span><span class="token operator">></span>    $<span class="token punctuation">&#123;</span>params<span class="token punctuation">.</span>dataScope<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><p>上面是使用方式，使用数据范围过滤效果是：<br>没有使用数据权限的sql：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> u<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> u<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span> u<span class="token punctuation">.</span>login_name<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span> u<span class="token punctuation">.</span>email<span class="token punctuation">,</span> u<span class="token punctuation">.</span>phonenumber<span class="token punctuation">,</span> u<span class="token punctuation">.</span>password<span class="token punctuation">,</span> u<span class="token punctuation">.</span>sex<span class="token punctuation">,</span> u<span class="token punctuation">.</span>avatar<span class="token punctuation">,</span> u<span class="token punctuation">.</span>salt<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">status</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>del_flag<span class="token punctuation">,</span> u<span class="token punctuation">.</span>login_ip<span class="token punctuation">,</span> u<span class="token punctuation">.</span>login_date<span class="token punctuation">,</span> u<span class="token punctuation">.</span>create_by<span class="token punctuation">,</span> u<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span> u<span class="token punctuation">.</span>remark<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_name<span class="token keyword">from</span> sys_user u<span class="token keyword">left</span> <span class="token keyword">join</span> sys_dept d <span class="token keyword">on</span> u<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>dept_id<span class="token keyword">where</span> u<span class="token punctuation">.</span>del_flag <span class="token operator">=</span> <span class="token string">'0'</span></code></pre><p>使用了数据权限的sql：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> u<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> u<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span> u<span class="token punctuation">.</span>login_name<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span> u<span class="token punctuation">.</span>email<span class="token punctuation">,</span> u<span class="token punctuation">.</span>phonenumber<span class="token punctuation">,</span> u<span class="token punctuation">.</span>password<span class="token punctuation">,</span> u<span class="token punctuation">.</span>sex<span class="token punctuation">,</span> u<span class="token punctuation">.</span>avatar<span class="token punctuation">,</span> u<span class="token punctuation">.</span>salt<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">status</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>del_flag<span class="token punctuation">,</span> u<span class="token punctuation">.</span>login_ip<span class="token punctuation">,</span> u<span class="token punctuation">.</span>login_date<span class="token punctuation">,</span> u<span class="token punctuation">.</span>create_by<span class="token punctuation">,</span> u<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span> u<span class="token punctuation">.</span>remark<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_name<span class="token keyword">from</span> sys_user u<span class="token keyword">left</span> <span class="token keyword">join</span> sys_dept d <span class="token keyword">on</span> u<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>dept_id<span class="token keyword">where</span> u<span class="token punctuation">.</span>del_flag <span class="token operator">=</span> <span class="token string">'0'</span><span class="token operator">and</span> u<span class="token punctuation">.</span>dept_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> dept_id<span class="token keyword">from</span> sys_role_dept<span class="token keyword">where</span> role_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>可以看到通过对象参数，动态增加了sql语句，其实还有其他的实现方式，只要能动态拼接sql，加上部门的<br>限制，就可以使得用户只能查看本部门的数据了，这就是数据权限的实现。</p></li></ul><blockquote><p><span id="e">大佬文章</span></p></blockquote><ul><li><a href="https://juejin.cn/post/6892918622230937613">一文带你搞定页面权限、按钮权限以及数据权限</a></li><li><a href="https://juejin.cn/post/6941734947551969288">史上最强的权限系统设计攻略(上)、基础概念、RBAC以及ABAC模型</a></li><li><a href="https://juejin.cn/post/6993235736057249806">RBAC简单的前后端分离权限管理思路</a></li><li><a href="https://juejin.cn/post/6844904004179230733">图文详解基于角色的权限控制模型RBAC</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ruoyi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依微服务之导入导出</title>
      <link href="2021/12/15/%E8%8B%A5%E4%BE%9D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
      <url>2021/12/15/%E8%8B%A5%E4%BE%9D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>最近自己懈怠了，没有在努力学习，还没有很好的认清自己，没有看清自己的方向，所以才没有紧张感<br>马上就要毕业了，毕设还是没有着落，说着要做分布式毕设，但积极性不够，专心学习吧，未来的路还很长<br>一步一步来，你不会比别人晚，不会错过什么。</p><p>进入正题，今天我又要水一篇博客了，若依微服务系列博客的目的是为了当我自己要去完成这些工作时，<br>我能有很好的借鉴，多看看别人的代码是怎么写的，功能是怎么实现的，才能不断进步。</p><p>那么本篇博客讲的是导入导出功能，将数据库的数据导出成excel表格，使用的是apache的POI吧。<br>我也是第一次学习这类接口，POI 提供 API 接口给 Java 程序对 Microsoft office 格式文档读写能力。<br>若依项目中，通过在实体类上添加@Excel注解，就能将数据导出到excel表中，或者将excel表中数据转成实体类<br>通过POI接口+注解+反射结合使用从而实现该功能，下面看看本博客具体内容：</p><ul><li><a href="#a">POI接口的API基本使用</a></li><li><a href="#b">若依源代码实现</a></li></ul><blockquote><p><span id="a">POI接口的API基本使用</span></p></blockquote><ul><li><p>创建excel对象，Workbook<br>若依代码中有这样一句代码：<code>this.wb = WorkbookFactory.create(is);</code><br>WorkbookFactory自然是Workbook的工厂类，根据输入流is，创建一个Workbook对象<br>相当于创建了一个excel文件，再次体会到了什么叫万物皆对象，思绪再次展开，<br>那么类不可以是对象吗？如果类是对象，那是什么产生的类？Class类啊！这就是为什么它叫类的模板。<br>那Class类不可以是对象吗？没完没了了是吧，笑~</p></li><li><p>得到一个excel表格，Sheet<br>我们知道一个excel文件是可以有多个表格的，例如下面这样子：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/ruoyi/importAndExport/1.png" loading="lazy"></p><p>那么我们如何得到指定的表格对象呢？在若依项目中，当导入excel文件时，我们需要拿到excel表格对象<br>  Sheet，通过Workbook对象，可以根据指定名称拿到某个表格，或者根据下标位置拿到excel表格</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果指定sheet名,则取指定sheet中的内容 否则默认指向第1个sheet</span><span class="token class-name">Sheet</span> sheet <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span> <span class="token operator">?</span> wb<span class="token punctuation">.</span><span class="token function">getSheet</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span> <span class="token operator">:</span> wb<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个Sheet对象就是代表excel文件中某个表格对象了<br>这个对象中有一些常用的方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取最后一个非空行的行下标，比如总行数为n，则返回的为n-1</span><span class="token class-name">Row</span> <span class="token function">getRow</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拿到指定行的行对象，Sheet是某个表格对象，表格中的每一行就是Row对象</span><span class="token keyword">void</span> <span class="token function">removeRow</span><span class="token punctuation">(</span><span class="token class-name">Row</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Row</span> <span class="token function">createRow</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> <span class="token function">getSheetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取表格的名称</span><span class="token class-name">Workbook</span> <span class="token function">getWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取该excel文件对象</span></code></pre></li><li><p>得到excel表格某一行对象，Row<br>就是上面的getRow方法，若依项目中有如下使用：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取表头，每一行都是ROW对象</span><span class="token class-name">Row</span> heard <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>titleNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拿到这一行的列数，并遍历这一行中所有单元格，将单元格的值和列号存到cellMap中</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heard<span class="token punctuation">.</span><span class="token function">getPhysicalNumberOfCells</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Cell</span> cell <span class="token operator">=</span> heard<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCellValue</span><span class="token punctuation">(</span>heard<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cellMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//存表头中，列号和列号的值，列号从0开始，例如 0:用户序号  1:部门编号</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    cellMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>Row对象常用的方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">short</span> <span class="token function">getFirstCellNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取这一行第一个单元格的位置</span><span class="token keyword">short</span> <span class="token function">getLastCellNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取这一行最后一个单元的位置</span><span class="token keyword">int</span> <span class="token function">getPhysicalNumberOfCells</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取这一行实际的单元格数量</span><span class="token class-name">Sheet</span> <span class="token function">getSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取这一行所在的excel表格</span><span class="token comment">//还有创建单元格，移出单元格，得到该行所在行数，得到指定位置的单元格对象，就不一一列举了</span></code></pre></li><li><p>得到某一个单元格对象，Cell<br>如上：<code>Cell cell = heard.getCell(i);</code>，我们可以通过Row对象，根据列号，拿到指定的单元格对象<br>这个对象有下面的一些方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//得到该单元格所在的列号</span><span class="token keyword">int</span> <span class="token function">getRowIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//得到该单元格所在行号</span><span class="token class-name">Sheet</span> <span class="token function">getSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//得到该单元格所在excel表格对象</span><span class="token class-name">Row</span> <span class="token function">getRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//得到该单元格所在行对象</span><span class="token keyword">void</span> <span class="token function">setBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将该单元格值设置为空</span><span class="token class-name">CellType</span> <span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//得到该单元格的数据类型</span></code></pre></li></ul><blockquote><p><span id="b">若依源代码实现</span></p></blockquote><p>这里是关于若依项目中部分代码，有些代码放在了github上，代码行数太多展示不出来了<br>下面看看若依项目中如何使用注解实现导入导出吧</p><ul><li><p>导入POI依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- excel工具 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>@Excel和@Excels注解，以及他们实际使用</p><ul><li><p>@Excel</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token comment">//省略常用的导入代码</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>poi<span class="token punctuation">.</span></span><span class="token class-name">ExcelHandlerAdapter</span><span class="token punctuation">;</span><span class="token comment">/** * 自定义导出Excel数据注解 */</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Excel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 导出时在excel中排序     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token comment">/**     * 导出到Excel中的名字.     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 日期格式, 如: yyyy-MM-dd     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 读取内容转表达式 (如: 0=男,1=女,2=未知)     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readConverterExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 分隔符，读取字符串组内容     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">separator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">","</span><span class="token punctuation">;</span>    <span class="token comment">/**     * BigDecimal 精度 默认:-1(默认不开启BigDecimal格式化)     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/**     * BigDecimal 舍入规则 默认:BigDecimal.ROUND_HALF_EVEN     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">roundingMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_HALF_EVEN<span class="token punctuation">;</span>    <span class="token comment">/**     * 导出类型（0数字 1字符串）     */</span>    <span class="token keyword">public</span> <span class="token class-name">ColumnType</span> <span class="token function">cellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">ColumnType</span><span class="token punctuation">.</span>STRING<span class="token punctuation">;</span>    <span class="token comment">/**     * 导出时在excel中每个列的高度 单位为字符     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">14</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 导出时在excel中每个列的宽 单位为字符     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 文字后缀,如% 90 变成90%     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 当值为空时,字段的默认值     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">defaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 提示信息     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 设置只能选择不能输入的列内容.     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">combo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 是否导出数据,应对需求:有时我们需要导出一份模板,这是标题需要但内容需要用户手工填写.     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isExport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 另一个类中的属性名称,支持多级获取,以小数点隔开     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">targetAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 是否自动统计数据,在最后追加一行统计数据总和     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 导出字段对齐方式（0：默认；1：靠左；2：居中；3：靠右）     */</span>    <span class="token keyword">public</span> <span class="token class-name">Align</span> <span class="token function">align</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Align</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">;</span>    <span class="token comment">/**     * 自定义数据处理器     */</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">ExcelHandlerAdapter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 自定义数据处理器参数     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Align</span> <span class="token punctuation">&#123;</span>        <span class="token function">AUTO</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">LEFT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">CENTER</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">RIGHT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token class-name">Align</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 字段类型（0：导出导入；1：仅导出；2：仅导入）     */</span>    <span class="token class-name">Type</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>ALL<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Type</span> <span class="token punctuation">&#123;</span>        <span class="token function">ALL</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">EXPORT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">IMPORT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token class-name">Type</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ColumnType</span> <span class="token punctuation">&#123;</span>        <span class="token function">NUMERIC</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">STRING</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">IMAGE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token class-name">ColumnType</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>@Excels</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Excel注解集 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Excels</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Excel</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>实际使用<br>@Excel注解和@Excels注解都使用在实体类的字段上，下面是某个实体类上的@Excel字段</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 用户对象 sys_user */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUser</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 用户ID     */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"用户序号"</span><span class="token punctuation">,</span> cellType <span class="token operator">=</span> <span class="token class-name">ColumnType</span><span class="token punctuation">.</span>NUMERIC<span class="token punctuation">,</span> prompt <span class="token operator">=</span> <span class="token string">"用户编号"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>    <span class="token comment">/**     * 部门ID     */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"部门编号"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>IMPORT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> deptId<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户账号     */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"登录名称"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户昵称     */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"用户名称"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户邮箱     */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"用户邮箱"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token comment">/**     * 手机号码     */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"手机号码"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phonenumber<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户性别     */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"用户性别"</span><span class="token punctuation">,</span> readConverterExp <span class="token operator">=</span> <span class="token string">"0=男,1=女,2=未知"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户头像     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>    <span class="token comment">/**     * 密码     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">/**     * 帐号状态（0正常 1停用）     */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"帐号状态"</span><span class="token punctuation">,</span> readConverterExp <span class="token operator">=</span> <span class="token string">"0=正常,1=停用"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> status<span class="token punctuation">;</span>    <span class="token comment">/**     * 删除标志（0代表存在 2代表删除）     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> delFlag<span class="token punctuation">;</span>    <span class="token comment">/**     * 最后登录IP     */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"最后登录IP"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>EXPORT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> loginIp<span class="token punctuation">;</span>    <span class="token comment">/**     * 最后登录时间     */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"最后登录时间"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>EXPORT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> loginDate<span class="token punctuation">;</span>    <span class="token comment">/**     * 部门对象     */</span>    <span class="token annotation punctuation">@Excels</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"部门名称"</span><span class="token punctuation">,</span> targetAttr <span class="token operator">=</span> <span class="token string">"deptName"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>EXPORT<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"部门负责人"</span><span class="token punctuation">,</span> targetAttr <span class="token operator">=</span> <span class="token string">"leader"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>EXPORT<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">SysDept</span> dept<span class="token punctuation">;</span>    <span class="token comment">//省略部分代码</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>ExcelUtil<br>重要的Excel工具类，使用该工具类完成Excel文件与实体类之间的数据转换，下面是导入的转换方法，<br>即将Excel文件中数据转成实体类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 对excel表单指定表格索引名转换成list** @param sheetName 表格索引名* @param titleNum  标题占用行数* @param is        输入流* @return 转换后集合*/</span>     <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">importExcel</span><span class="token punctuation">(</span><span class="token class-name">String</span> sheetName<span class="token punctuation">,</span> <span class="token class-name">InputStream</span> is<span class="token punctuation">,</span> <span class="token keyword">int</span> titleNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span>IMPORT<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>wb <span class="token operator">=</span> <span class="token class-name">WorkbookFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果指定sheet名,则取指定sheet中的内容 否则默认指向第1个sheet</span>  <span class="token class-name">Sheet</span> sheet <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span> <span class="token operator">?</span> wb<span class="token punctuation">.</span><span class="token function">getSheet</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span> <span class="token operator">:</span> wb<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sheet <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"文件sheet不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 获取最后一个非空行的行下标，比如总行数为n，则返回的为n-1</span>  <span class="token keyword">int</span> rows <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义一个map用于存放excel列的序号和field.</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> cellMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取表头</span>    <span class="token class-name">Row</span> heard <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>titleNum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//titleNum： excel中标题所在下标，即第0行</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heard<span class="token punctuation">.</span><span class="token function">getPhysicalNumberOfCells</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Cell</span> cell <span class="token operator">=</span> heard<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCellValue</span><span class="token punctuation">(</span>heard<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cellMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//存表头中，列号和列号的值，列号从0开始，例如 0:用户序号  1:部门编号</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        cellMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 有数据时才处理 得到类的所有field.  确定哪些字段要导出，[&#123;userId,userId上的excel注解&#125;,&#123;&#125;]</span>    <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fields <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> fieldsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Excel</span> attr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Excel</span><span class="token punctuation">)</span> objects<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token class-name">Integer</span> column <span class="token operator">=</span> cellMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>column <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fieldsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>column<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> titleNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 从第2行开始取数据,默认第一行是表头.</span>      <span class="token class-name">Row</span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 判断当前行是否是空行</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRowEmpty</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">T</span> entity <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> entry <span class="token operator">:</span> fieldsMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCellValue</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果不存在实例则新建.</span>        entity <span class="token operator">=</span> <span class="token punctuation">(</span>entity <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从map中得到对应列的field.</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Field</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Excel</span> attr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Excel</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 取得类型,并根据对象类型设置值.</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> fieldType <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">".0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substringBefore</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">".0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> dateFormat <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Excel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              val <span class="token operator">=</span> <span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token function">parseDateToStr</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              val <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>TYPE <span class="token operator">==</span> fieldType <span class="token operator">||</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          val <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>TYPE <span class="token operator">==</span> fieldType <span class="token operator">||</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          val <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span>TYPE <span class="token operator">==</span> fieldType <span class="token operator">||</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          val <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span>TYPE <span class="token operator">==</span> fieldType <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          val <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          val <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toBigDecimal</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> <span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token function">parseDate</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">Double</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">getJavaDate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span>TYPE <span class="token operator">==</span> fieldType <span class="token operator">||</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          val <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toBool</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>fieldType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">String</span> propertyName <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">targetAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            propertyName <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">targetAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">readConverterExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> <span class="token function">reverseByExp</span><span class="token punctuation">(</span><span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> attr<span class="token punctuation">.</span><span class="token function">readConverterExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attr<span class="token punctuation">.</span><span class="token function">separator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>attr<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">ExcelHandlerAdapter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> <span class="token function">dataFormatHandlerAdapter</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token class-name">ReflectUtils</span><span class="token punctuation">.</span><span class="token function">invokeSetter</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> propertyName<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>全部的类方法，请见：<a href="https://github.com/NicknamedCoco/cdn/raw/1ee5c8c461a35e80551e16e14bee7c36e2557020/blog/ruoyi/importAndExport/poi/ExcelUtil.java">ExcelUtil</a></p></li><li><p>ExcelHandlerAdapter接口<br>这个自定义接口是用于数据格式处理的，有时候我们希望数据展现为一个特殊的格式，或者需要对数据进行其它处理。<br>只要实现该接口的format方法，并在@Excel注解上标注该接口的实现类<br>即可使用该实现类去转换数据，这个接口的实现类用于对Excel文件中数据进行加工，加工后的数据再绑定到实体类属性中。</p><ul><li><p>ExcelHandlerAdapter接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Excel数据格式处理适配器 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExcelHandlerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 格式化     *     * @param value 单元格数据值     * @param args  excel注解args参数组     * @return 处理后的值     */</span>    <span class="token class-name">Object</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>使用方式：<br>1，在实体类用<code>Excel</code>注解<code>handler</code>属性指定自定义的数据处理器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"用户名称"</span><span class="token punctuation">,</span> handler <span class="token operator">=</span> <span class="token class-name">MyDataHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>2，编写数据处理器<code>MyDataHandler</code>继承<code>ExcelHandlerAdapter</code>，返回值为处理后的值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDataHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ExcelHandlerAdapter</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// value 为单元格数据值</span><span class="token comment">// args 为excel注解args参数组</span><span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>最后让我们来看看Controller中的实现<br>上面介绍了关于如何实现数据的导入导出，通过ExcelUtil工具类，结合POI的相关API，通过注解反射的形式实现<br>下面是当导入请求来到后的实际过程：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Log</span><span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"用户管理"</span><span class="token punctuation">,</span> businessType <span class="token operator">=</span> <span class="token class-name">BusinessType</span><span class="token punctuation">.</span>IMPORT<span class="token punctuation">)</span><span class="token annotation punctuation">@RequiresPermissions</span><span class="token punctuation">(</span><span class="token string">"system:user:import"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/importData"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">AjaxResult</span> <span class="token function">importData</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token keyword">boolean</span> updateSupport<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>  <span class="token class-name">ExcelUtil</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">></span></span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelUtil</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">SysUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">importExcel</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> operName <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> message <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">importUser</span><span class="token punctuation">(</span>userList<span class="token punctuation">,</span> updateSupport<span class="token punctuation">,</span> operName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">AjaxResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这是用户导入的controller，Excel文件中包含用户数据，当我们导入该Excel后，请求来到这里，<br>通过ExcelUtil工具类解析，将Excel中用户数据转换成实体类集合，再持久化用户数据，<br>该方法的updateSupport参数表示，如果数据库存在相同的用户数据，是否更新。</p></li><li><p>最后的最后<br>我已经相关导入导出的代码全部放在GitHub上，有需要的可以查看具体导入导出过程，当然肯定是以后的自己需要~<br><a href="https://github.com/NicknamedCoco/cdn/tree/master/blog/ruoyi/importAndExport">导入导出相关代码</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ruoyi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依微服务之系统日志</title>
      <link href="2021/12/09/%E8%8B%A5%E4%BE%9D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97/"/>
      <url>2021/12/09/%E8%8B%A5%E4%BE%9D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>这周主要在看若依的微服务后台管理系统，看了别人的项目，感觉自己很多地方不太懂，<br>多线程方面知识严重欠缺，某些技术学的不扎实，包括一些代码设计思路吧，总之，我太菜了<br>12月份的主要目标，学习若依微服务系统，可以让我学习很多东西，B站上也有相关视频，<br>12月份看完项目代码+视频，能完成后端部分就已经很满足了。</p><p>进入正题，来看看本篇博客具体内容</p><ul><li>系统日志<ul><li><a href="#a">操作日志</a></li><li><a href="#b">登录日志</a></li></ul></li><li><a href="#c">相关文章</a></li></ul><blockquote><p>系统日志</p></blockquote><p>若依项目中通过注解的方式来做日志，并将日志持久化到数据库中，方便后面展示到页面中<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/ruoyi/log/1.png" loading="lazy"></p><p>若依系统中把日志分为操作日志和登录日志，来看看具体是怎么实现的吧</p><p><span id="a"><strong>操作日志</strong></span><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/ruoyi/log/2.png" loading="lazy"></p><ul><li><p>基本执行流程</p><pre class="language-none"><code class="language-none">操作日志指的是当请求调用某个方法的时候，我们记录调用方法时的形参，返回值，用户数据信息所以操作日志实现是通过配置自定义注解，标注在方法上，然后通过AOP拦截请求，从而获取到请求的一些信息，并持久化数据库中。日志注解及AOP切面都在ruoyi-common-log模块中，在该模块的AsyncLogService类中，使用ruoyi-api-system模块中的RemoteLogService接口，feign调用ruoyi-modules-system模块的controller如果是登录日志，则调用该模块的SysLogininforController，如果是操作日志，调用的是SysOperlogController然后执行之后的service，dao层进行持久化，持久化到数据库便可从中获取并前端展示出来。</code></pre><p>当然，我们看的是具体实现，而不是大致流程，操作日志配置都放在<code>ruoyi-common-log</code>模块中</p></li><li><p>自定义Log注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义操作日志记录注解 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Log</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 模块     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 功能     */</span>    <span class="token keyword">public</span> <span class="token class-name">BusinessType</span> <span class="token function">businessType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">BusinessType</span><span class="token punctuation">.</span>OTHER<span class="token punctuation">;</span>    <span class="token comment">/**     * 操作人类别     */</span>    <span class="token keyword">public</span> <span class="token class-name">OperatorType</span> <span class="token function">operatorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">OperatorType</span><span class="token punctuation">.</span>MANAGE<span class="token punctuation">;</span>    <span class="token comment">/**     * 是否保存请求的参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSaveRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 是否保存响应的参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSaveResponseData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>自定义AOP切面，LogAspect</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>common<span class="token punctuation">.</span>log<span class="token punctuation">.</span>aspect</span><span class="token punctuation">;</span><span class="token comment">/** * 操作日志记录处理 */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogAspect</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AsyncLogService</span> asyncLogService<span class="token punctuation">;</span>    <span class="token comment">/**     * 处理完请求后执行     *     * @param joinPoint 切点     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"@annotation(controllerLog)"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"jsonResult"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Log</span> controllerLog<span class="token punctuation">,</span> <span class="token class-name">Object</span> jsonResult<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">handleLog</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> controllerLog<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> jsonResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 拦截异常操作     *      * @param joinPoint 切点     * @param e 异常     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"@annotation(controllerLog)"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterThrowing</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Log</span> controllerLog<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">handleLog</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> controllerLog<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleLog</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Log</span> controllerLog<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Exception</span> e<span class="token punctuation">,</span> <span class="token class-name">Object</span> jsonResult<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token comment">// *========数据库日志=========*//</span>            <span class="token class-name">SysOperLog</span> operLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysOperLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//数据库表的实体类</span>            operLog<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">BusinessStatus</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 请求的地址</span>            <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token class-name">IpUtils</span><span class="token punctuation">.</span><span class="token function">getIpAddr</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            operLog<span class="token punctuation">.</span><span class="token function">setOperIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>            operLog<span class="token punctuation">.</span><span class="token function">setOperUrl</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                operLog<span class="token punctuation">.</span><span class="token function">setOperName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                operLog<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">BusinessStatus</span><span class="token punctuation">.</span>FAIL<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                operLog<span class="token punctuation">.</span><span class="token function">setErrorMsg</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 设置方法名称</span>            <span class="token class-name">String</span> className <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            operLog<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>className <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">"()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置请求方式</span>            operLog<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 处理设置注解上的参数</span>            <span class="token function">getControllerMethodDescription</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> controllerLog<span class="token punctuation">,</span> operLog<span class="token punctuation">,</span> jsonResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 保存数据库</span>            asyncLogService<span class="token punctuation">.</span><span class="token function">saveSysLog</span><span class="token punctuation">(</span>operLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 记录本地异常日志</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"==前置通知异常=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"异常信息:&#123;&#125;"</span><span class="token punctuation">,</span> exp<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exp<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取注解中对方法的描述信息 用于Controller层注解     *      * @param log 日志     * @param operLog 操作日志     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getControllerMethodDescription</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Log</span> log<span class="token punctuation">,</span>         <span class="token class-name">SysOperLog</span> operLog<span class="token punctuation">,</span> <span class="token class-name">Object</span> jsonResult<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 设置action动作</span>        operLog<span class="token punctuation">.</span><span class="token function">setBusinessType</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">businessType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置标题</span>        operLog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置操作人类别</span>        operLog<span class="token punctuation">.</span><span class="token function">setOperatorType</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">operatorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 是否需要保存request，参数和值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isSaveRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 获取参数的信息，传入到数据库中。</span>            <span class="token function">setRequestValue</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> operLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 是否需要保存response，参数和值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isSaveResponseData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>jsonResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            operLog<span class="token punctuation">.</span><span class="token function">setJsonResult</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>jsonResult<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取请求的参数，放到log中     *      * @param operLog 操作日志     * @throws Exception 异常     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setRequestValue</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">SysOperLog</span> operLog<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> requestMethod <span class="token operator">=</span> operLog<span class="token punctuation">.</span><span class="token function">getRequestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>requestMethod<span class="token punctuation">)</span> <span class="token operator">||</span>               <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>requestMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token function">argsArrayToString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            operLog<span class="token punctuation">.</span><span class="token function">setOperParam</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 参数拼装     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">argsArrayToString</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramsArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>paramsArray <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> paramsArray<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> paramsArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isFilterObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                        <span class="token class-name">Object</span> jsonObj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>                        params <span class="token operator">+=</span> jsonObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> params<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断是否需要过滤的对象。     *      * @param o 对象信息。     * @return 如果是需要过滤的对象，则返回true；否则返回false。     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFilterObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> value <span class="token operator">:</span> collection<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> value <span class="token keyword">instanceof</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> value <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> o <span class="token keyword">instanceof</span> <span class="token class-name">MultipartFile</span> <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletRequest</span> <span class="token operator">||</span>            o <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletResponse</span>  <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token class-name">BindingResult</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>该类中需要关注以下几点</strong>：</p><ul><li><p>切入点的annotation注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"@annotation(controllerLog)"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"jsonResult"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Log</span> controllerLog<span class="token punctuation">,</span> <span class="token class-name">Object</span> jsonResult<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">handleLog</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> controllerLog<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> jsonResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>@annotation是匹配拥有指定注解的方法的，也就是说只要标注了该注解的方法，都能匹配到。<br>上述：<code>pointcut = &quot;@annotation(controllerLog)&quot;</code>，表示将匹配的方法上的注解赋值给参数controllerLog<br>这样我们就拿到了，自定义注解上的一些属性值，例如Log注解上有title，businessType等属性值。</p></li><li><p>获取当前请求及IP地址</p><pre class="language-none"><code class="language-none">IpUtils.getIpAddr(ServletUtils.getRequest());</code></pre><p>如何在任何地方都能拿到当前请求中的一些信息，例如请求类型，请求路径，请求ip地址？<br>通过RequestContextHolder就可以完成，上面工具类底层就是使用了该类，工具类具体内容已放在博客最后面。</p></li><li><p>枚举类的ordinal方法</p><pre class="language-java" data-language="java"><code class="language-java">operLog<span class="token punctuation">.</span><span class="token function">setBusinessType</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">businessType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该方法用于获取枚举属性的索引值，索引从0开始。</p></li><li><p>字节码对象的getComponentType方法，isAssignableFrom方法的使用</p><pre class="language-none"><code class="language-none">clazz.getComponentType().isAssignableFrom(MultipartFile.class);Map.class.isAssignableFrom(clazz)</code></pre><p>getComponentType方法用来获取数组中元素的Class对象，如果不是Class对象那么返回null</p><pre class="language-none"><code class="language-none">String [] arr &#x3D; new String[10];String str &#x3D; &quot;&quot;;System.out.println(arr.getClass().getComponentType()); &#x2F;&#x2F; String类System.out.println(str.getClass().getComponentType()); &#x2F;&#x2F; 得到null值，因为str不是数组</code></pre><p>isAssignableFrom方法</p><pre class="language-none"><code class="language-none">isAssignableFrom()方法与instanceof关键字的区别总结为以下两个点：  isAssignableFrom()方法是从类继承的角度去判断，instanceof关键字是从实例继承的角度去判断。  isAssignableFrom()方法是判断是否为某个类的父类，instanceof关键字是判断是否某个类的子类。使用方式：  父类.class.isAssignableFrom(子类.class)  子类实例 instanceof 父类类型isAssignableFrom()方法的调用者和参数都是Class对象，调用者为父类，参数为本身或者其子类。instanceof关键字两个参数，前一个为类的实例，后一个为其本身或者父类的类型。</code></pre></li></ul></li><li><p>三个表示状态的枚举类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>common<span class="token punctuation">.</span>log<span class="token punctuation">.</span>enums</span><span class="token punctuation">;</span><span class="token comment">/** * 操作状态 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">BusinessStatus</span><span class="token punctuation">&#123;</span>    <span class="token comment">//成功</span>    SUCCESS<span class="token punctuation">,</span>    <span class="token comment">//失败</span>    FAIL<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//**************************************************************</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>common<span class="token punctuation">.</span>log<span class="token punctuation">.</span>enums</span><span class="token punctuation">;</span><span class="token comment">/** * 业务操作类型 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">BusinessType</span><span class="token punctuation">&#123;</span>    <span class="token comment">//其它</span>    OTHER<span class="token punctuation">,</span>    <span class="token comment">//新增</span>    INSERT<span class="token punctuation">,</span>    <span class="token comment">//修改</span>    UPDATE<span class="token punctuation">,</span>    <span class="token comment">//删除</span>    DELETE<span class="token punctuation">,</span>    <span class="token comment">//授权</span>    GRANT<span class="token punctuation">,</span>    <span class="token comment">//导出</span>    EXPORT<span class="token punctuation">,</span>    <span class="token comment">//导入</span>    IMPORT<span class="token punctuation">,</span>    <span class="token comment">//强退</span>    FORCE<span class="token punctuation">,</span>    <span class="token comment">//生成代码</span>    GENCODE<span class="token punctuation">,</span>    <span class="token comment">//清空数据</span>    CLEAN<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//**************************************************************</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>common<span class="token punctuation">.</span>log<span class="token punctuation">.</span>enums</span><span class="token punctuation">;</span><span class="token comment">/** * 操作人类别 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OperatorType</span><span class="token punctuation">&#123;</span>    <span class="token comment">//其它</span>    OTHER<span class="token punctuation">,</span>    <span class="token comment">//后台用户</span>    MANAGE<span class="token punctuation">,</span>    <span class="token comment">//移动用户</span>    MOBILE<span class="token punctuation">&#125;</span></code></pre></li><li><p>持久化的Service，AsyncLogService</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 异步调用日志服务 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncLogService</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RemoteLogService</span> remoteLogService<span class="token punctuation">;</span>    <span class="token comment">/**     * 保存系统日志记录     */</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSysLog</span><span class="token punctuation">(</span><span class="token class-name">SysOperLog</span> sysOperLog<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        remoteLogService<span class="token punctuation">.</span><span class="token function">saveLog</span><span class="token punctuation">(</span>sysOperLog<span class="token punctuation">,</span> <span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>INNER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上便是ruoyi-common-log模块的主要内容，AsyncLogService类中使用了ruoyi-api-system模块中的<br>RemoteLogService接口远程调用ruoyi-modules-system模块的SysOperlogController，<br>后续便是进入service，进入dao层使用mybatis持久化。</p></li><li><p>操作日志表结构</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sys_oper_log<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>oper_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'日志主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'模块标题'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>business_type<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'业务类型（0其它 1新增 2修改 3删除）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>method<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'方法名称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>request_method<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'请求方式'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>operator_type<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'操作类别（0其它 1后台用户 2手机端用户）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>oper_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'操作人员'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>dept_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'部门名称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>oper_url<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'请求URL'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>oper_ip<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'主机地址'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>oper_location<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'操作地点'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>oper_param<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'请求参数'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>json_result<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'返回参数'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'操作状态（0正常 1异常）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>error_msg<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'错误消息'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>oper_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'操作时间'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>oper_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">104</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'操作日志记录'</span></code></pre></li><li><p>操作日志表结构对应的实体类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>system<span class="token punctuation">.</span>api<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token comment">/** * 操作日志记录表 oper_log */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysOperLog</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/** 日志主键 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"操作序号"</span><span class="token punctuation">,</span> cellType <span class="token operator">=</span> <span class="token class-name">ColumnType</span><span class="token punctuation">.</span>NUMERIC<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> operId<span class="token punctuation">;</span>    <span class="token comment">/** 操作模块 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"操作模块"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token comment">/** 业务类型（0其它 1新增 2修改 3删除） */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"业务类型"</span><span class="token punctuation">,</span> readConverterExp <span class="token operator">=</span> "<span class="token number">0</span><span class="token operator">=</span>其它<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">=</span>新增<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">=</span>修改<span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">=</span>删除<span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">=</span>授权<span class="token punctuation">,</span>          <span class="token number">5</span><span class="token operator">=</span>导出<span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">=</span>导入<span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">=</span>强退<span class="token punctuation">,</span><span class="token number">8</span><span class="token operator">=</span>生成代码<span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">=</span>清空数据"<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> businessType<span class="token punctuation">;</span>    <span class="token comment">/** 业务类型数组 */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> businessTypes<span class="token punctuation">;</span>    <span class="token comment">/** 请求方法 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"请求方法"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> method<span class="token punctuation">;</span>    <span class="token comment">/** 请求方式 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"请求方式"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> requestMethod<span class="token punctuation">;</span>    <span class="token comment">/** 操作类别（0其它 1后台用户 2手机端用户） */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"操作类别"</span><span class="token punctuation">,</span> readConverterExp <span class="token operator">=</span> <span class="token string">"0=其它,1=后台用户,2=手机端用户"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> operatorType<span class="token punctuation">;</span>    <span class="token comment">/** 操作人员 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"操作人员"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> operName<span class="token punctuation">;</span>    <span class="token comment">/** 部门名称 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"部门名称"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> deptName<span class="token punctuation">;</span>    <span class="token comment">/** 请求url */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"请求地址"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> operUrl<span class="token punctuation">;</span>    <span class="token comment">/** 操作地址 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"操作地址"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> operIp<span class="token punctuation">;</span>    <span class="token comment">/** 请求参数 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"请求参数"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> operParam<span class="token punctuation">;</span>    <span class="token comment">/** 返回参数 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"返回参数"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> jsonResult<span class="token punctuation">;</span>    <span class="token comment">/** 操作状态（0正常 1异常） */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"状态"</span><span class="token punctuation">,</span> readConverterExp <span class="token operator">=</span> <span class="token string">"0=正常,1=异常"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token comment">/** 错误消息 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"错误消息"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">;</span>    <span class="token comment">/** 操作时间 */</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"操作时间"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> operTime<span class="token punctuation">;</span>        <span class="token comment">//已省略getter，setter，@Excel注解是自定义注解，用来做导入导出功能的。</span><span class="token punctuation">&#125;</span></code></pre><p>以上便是若依微服务操作日志功能的具体实现，只要将@Log注解标注在方法上，便可以收集一些数据。</p></li></ul><p><span id="b"><strong>登录日志</strong></span><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/ruoyi/log/3.png" loading="lazy"></p><ul><li><p>基本执行流程</p><pre class="language-none"><code class="language-none">请求最先来到网关模块,之后被转发到ruoyi-auth认证模块，在该模块的SysLoginService类中有一个recordLogininfor方法，该方法专门做登录日志的持久化操作，即将登录日志保存在数据库中该方法内仍然是使用ruoyi-api-system模块中的RemoteLogService接口，调用ruoyi-modules-system模块的controller，并执行后续操作。</code></pre></li><li><p>ruoyi-auth认证模块的SysLoginService类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token comment">/** * 登录校验方法 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysLoginService</span><span class="token punctuation">&#123;</span>    <span class="token comment">//ruoyi-api-system模块中的feign接口</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RemoteLogService</span> remoteLogService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RemoteUserService</span> remoteUserService<span class="token punctuation">;</span>    <span class="token comment">/**     * 登录     */</span>    <span class="token keyword">public</span> <span class="token class-name">LoginUser</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 用户名或密码为空 错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_FAIL<span class="token punctuation">,</span> <span class="token string">"用户/密码必须填写"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"用户/密码必须填写"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 密码如果不在指定范围内 错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">UserConstants</span><span class="token punctuation">.</span>PASSWORD_MIN_LENGTH                <span class="token operator">||</span> password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token class-name">UserConstants</span><span class="token punctuation">.</span>PASSWORD_MAX_LENGTH<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_FAIL<span class="token punctuation">,</span> <span class="token string">"用户密码不在指定范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"用户密码不在指定范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 用户名不在指定范围内 错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">UserConstants</span><span class="token punctuation">.</span>USERNAME_MIN_LENGTH                <span class="token operator">||</span> username<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token class-name">UserConstants</span><span class="token punctuation">.</span>USERNAME_MAX_LENGTH<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_FAIL<span class="token punctuation">,</span> <span class="token string">"用户名不在指定范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"用户名不在指定范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 查询用户信息</span>        <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginUser</span><span class="token punctuation">></span></span> userResult <span class="token operator">=</span> remoteUserService<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>INNER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>FAIL <span class="token operator">==</span> userResult<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span>userResult<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>userResult<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>userResult<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_FAIL<span class="token punctuation">,</span> <span class="token string">"登录用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"登录用户："</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">" 不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">LoginUser</span> userInfo <span class="token operator">=</span> userResult<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SysUser</span> user <span class="token operator">=</span> userResult<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">UserStatus</span><span class="token punctuation">.</span>DELETED<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getDelFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_FAIL<span class="token punctuation">,</span> <span class="token string">"对不起，您的账号已被删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"对不起，您的账号："</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">" 已被删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">UserStatus</span><span class="token punctuation">.</span>DISABLE<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_FAIL<span class="token punctuation">,</span> <span class="token string">"用户已停用，请联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"对不起，您的账号："</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">" 已停用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">matchesPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_FAIL<span class="token punctuation">,</span> <span class="token string">"用户密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"用户不存在/密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_SUCCESS<span class="token punctuation">,</span> <span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token class-name">String</span> loginName<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>loginName<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGOUT<span class="token punctuation">,</span> <span class="token string">"退出成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 注册     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 用户名或密码为空 错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"用户/密码必须填写"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">UserConstants</span><span class="token punctuation">.</span>USERNAME_MIN_LENGTH                <span class="token operator">||</span> username<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token class-name">UserConstants</span><span class="token punctuation">.</span>USERNAME_MAX_LENGTH<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"账户长度必须在2到20个字符之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">UserConstants</span><span class="token punctuation">.</span>PASSWORD_MIN_LENGTH                <span class="token operator">||</span> password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token class-name">UserConstants</span><span class="token punctuation">.</span>PASSWORD_MAX_LENGTH<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"密码长度必须在5到20个字符之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 注册用户信息</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setNickName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">encryptPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> registerResult <span class="token operator">=</span> remoteUserService<span class="token punctuation">.</span><span class="token function">registerUserInfo</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">,</span> <span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>INNER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>FAIL <span class="token operator">==</span> registerResult<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span>registerResult<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>REGISTER<span class="token punctuation">,</span> <span class="token string">"注册成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 记录登录信息     *      * @param username 用户名     * @param status 状态     * @param message 消息内容     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recordLogininfor</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> status<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//登录日志表的实体类</span>        <span class="token class-name">SysLogininfor</span> logininfor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysLogininfor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logininfor<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        logininfor<span class="token punctuation">.</span><span class="token function">setIpaddr</span><span class="token punctuation">(</span><span class="token class-name">IpUtils</span><span class="token punctuation">.</span><span class="token function">getIpAddr</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logininfor<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 日志状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsAny</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_SUCCESS<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGOUT<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>REGISTER<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            logininfor<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_FAIL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            logininfor<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        remoteLogService<span class="token punctuation">.</span><span class="token function">saveLogininfor</span><span class="token punctuation">(</span>logininfor<span class="token punctuation">,</span> <span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>INNER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>登录日志表结构</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sys_logininfor<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>info_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'访问ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户账号'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>ipaddr<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'登录IP地址'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'登录状态（0成功 1失败）'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>msg<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'提示信息'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>access_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'访问时间'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>info_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">123</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'系统访问记录'</span></code></pre></li><li><p>登录日志表实体类，SysLogininfor</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ruoyi<span class="token punctuation">.</span>system<span class="token punctuation">.</span>api<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token comment">/** * 系统访问记录表 sys_logininfor */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysLogininfor</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/** ID */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"序号"</span><span class="token punctuation">,</span> cellType <span class="token operator">=</span> <span class="token class-name">ColumnType</span><span class="token punctuation">.</span>NUMERIC<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> infoId<span class="token punctuation">;</span>    <span class="token comment">/** 用户账号 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"用户账号"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token comment">/** 状态 0成功 1失败 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"状态"</span><span class="token punctuation">,</span> readConverterExp <span class="token operator">=</span> <span class="token string">"0=成功,1=失败"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> status<span class="token punctuation">;</span>    <span class="token comment">/** 地址 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"地址"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ipaddr<span class="token punctuation">;</span>    <span class="token comment">/** 描述 */</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"描述"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token comment">/** 访问时间 */</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Excel</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"访问时间"</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> accessTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><blockquote><p><span id="c">相关文章</span></p></blockquote><ul><li><a href="https://www.cnblogs.com/beeenwei/p/12553474.html">Class对象（字节码对象）</a></li><li><a href="http://www.manongjc.com/detail/24-uvmoferonfytrng.html">Java反射用法以及isAssignableFrom()方法与instanceof关键字用法</a></li><li><a href="https://blog.51cto.com/luckybins/1589384">getComponentType、isPrimitive方法说明</a></li><li><a href="https://blog.csdn.net/qq_33546330/article/details/89784811">getComponentType()意义和用法</a></li><li><a href="https://blog.csdn.net/liuzixin_lzx/article/details/113876212">若依前后端分离框架学习-6：日志管理</a></li><li><a href="https://github.com/NicknamedCoco/cdn/tree/master/blog/ruoyi/log">若依微服务中日志代码已上传到github上</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ruoyi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存数据一致性及多级缓存概念</title>
      <link href="2021/12/01/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E5%8F%8A%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E6%A6%82%E5%BF%B5/"/>
      <url>2021/12/01/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E5%8F%8A%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>再来水一篇博客，我觉得写博客最重要的是创新，总结，而不是照搬，不然和重复造轮子有什么分别<br>但我个人实在太菜，要做创新也是非常难的，想到一个笑话：把别人的变成自己的，把自己的变成祖传的~</p><p>话不多说，让我们来看看这篇博客具体水哪些内容吧</p><ul><li><p><a href="#a">缓存误用场景</a></p></li><li><p><a href="#b">如何保证缓存与数据一致性</a></p></li><li><p><a href="#c">三个经典的缓存模式</a></p></li><li><p><a href="#d">多级缓存的概念</a></p></li></ul><blockquote><p><span id="a">缓存误用场景</span></p></blockquote><ul><li><p><strong>误用一：把缓存作为服务与服务之间传递数据的媒介</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/1.png" loading="lazy"><br>如上图：<br>服务1和服务2约定好key和value，通过缓存传递数据<br>服务1将数据写入缓存，服务2从缓存读取数据，达到两个服务通信的目的</p><p>该方案存在的问题：</p><ul><li><p>数据管道，数据通知场景，MQ更加适合</p><pre class="language-none"><code class="language-none">1,MQ是互联网常见的逻辑解耦，物理解耦组件，支持1对1，1对多各种模式，非常成熟的数据通道，    而cache反而会将service-A&#x2F;B&#x2F;C&#x2F;D耦合在一起，大家要彼此协同约定key的格式，ip地址等2,MQ能够支持push，而cache只能拉取，不实时，有时延3,MQ天然支持集群，支持高可用，而cache未必4,MQ能支持数据落地，cache具备将数据存在内存里，具有“易失”性，当然，有些cache支持落地，    但互联网技术选型的原则是，让专业的软件干专业的事情：nginx做反向代理，db做固化，cache做缓存，mq做通道</code></pre></li><li><p>多个服务关联同一个缓存实例，会导致服务耦合</p><pre class="language-none"><code class="language-none">1,大家要彼此协同约定key的格式，ip地址等，耦合2,约定好同一个key，可能会产生数据覆盖，导致数据不一致3,不同服务业务模式，数据量，并发量不一样，会因为一个cache相互影响    例如service-A数据量大，占用了cache的绝大部分内存，会导致service-B的热数据全部被挤出cache，导致cache失效    又例如service-A并发量高，占用了cache的绝大部分连接，会导致service-B拿不到cache的连接，从而服务异常</code></pre></li></ul></li><li><p><strong>误用二：使用缓存未考虑雪崩</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/2.png" loading="lazy"><br>常规的缓存玩法，如上图：<br>服务先读缓存，缓存命中则返回<br>缓存不命中，再读数据库</p><p><strong>什么时候会产生雪崩？</strong><br>答：如果缓存挂掉，所有的请求会压到数据库，如果未提前做容量预估，可能会把数据库压垮<br>（在缓存恢复之前，数据库可能一直都起不来），导致系统整体不可服务。</p><p><strong>如何应对潜在的雪崩？</strong><br>答：提前做容量预估，如果缓存挂掉，数据库仍能扛住，才能执行上述方案。</p><p>否则，就要进一步设计，常见方案如下：</p><ul><li><p><strong>高可用缓存</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/3.png" loading="lazy"></p><p>使用高可用缓存集群，一个缓存实例挂掉后，能够自动做故障转移。</p></li><li><p><strong>缓存水平切分</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/4.png" loading="lazy"></p><p>如上图：使用缓存水平切分（推荐使用一致性哈希算法进行切分），一个缓存实例挂掉后，不至于所有的流量都压到数据库上。</p></li></ul></li><li><p><strong>误用三：调用方缓存数据</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/5.png" loading="lazy"></p><p>如上图：<br>服务提供方缓存，向调用方屏蔽数据获取的复杂性（这个没问题）<br>服务调用方，也缓存一份数据，先读自己的缓存，再决定是否调用服务（这个有问题）</p><p>该方案存在的问题是：</p><pre class="language-none"><code class="language-none">1、调用方需要关注数据获取的复杂性（耦合问题）2、更严重的，服务修改db里的数据，淘汰了服务cache之后，难以通知调用方淘汰其cache里的数据，从而导致数据不一致（带入一致性问题）3、有人说，服务可以通过MQ通知调用方淘汰数据，额，难道下游的服务要依赖上游的调用方，分层架构设计不是这么玩的（反向依赖问题）</code></pre></li><li><p><strong>误用四：多服务共用缓存实例</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/6.png" loading="lazy"></p><p>如上图：服务A和服务B共用一个缓存实例（不是通过这个缓存实例交互数据）</p><p>该方案存在的问题是：</p><pre class="language-none"><code class="language-none">1、可能导致key冲突，彼此冲掉对方的数据    画外音：可能需要服务A和服务B提前约定好了key，以确保不冲突，常见的约定方式是使用namespace:key的方式来做key。2、不同服务对应的数据量，吞吐量不一样，共用一个实例容易导致一个服务把另一个服务的热数据挤出去3、共用一个实例，会导致服务之间的耦合，与微服务架构的“数据库，缓存私有”的设计原则是相悖的</code></pre><p>建议的玩法是：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/7.png" loading="lazy"></p><p>如上图：各个服务私有化自己的数据存储，对上游屏蔽底层的复杂性。</p></li><li><p><strong>总结</strong></p><pre class="language-none"><code class="language-none">1、服务与服务之间不要通过缓存传递数据2、如果缓存挂掉，可能导致雪崩，此时要做高可用缓存，或者水平切分3、调用方不宜再单独使用缓存存储服务底层的数据，容易出现数据不一致，以及反向依赖4、不同服务，缓存实例要做垂直拆分</code></pre></li></ul><blockquote><p><span id="b">如何保证缓存与数据一致性</span></p></blockquote><ul><li><p><strong>缓存，究竟是淘汰，还是修改？</strong><br>1，KV缓存都缓存了一些什么数据？</p><pre class="language-none"><code class="language-none">1)朴素类型的数据，例如：int2)序列化后的对象，例如：User实体，本质是binary3)文本数据，例如：json或者html4)...</code></pre><p>2，淘汰缓存中的这些数据，修改缓存中的这些数据，有什么差别？</p><pre class="language-none"><code class="language-none">1)淘汰某个key，操作简单，直接将key置为无效，但下一次该key的访问会cache miss2)修改某个key的内容，逻辑相对复杂，但下一次该key的访问仍会cache hit可以看到，差异仅仅在于一次cache miss。</code></pre><p>3，缓存中的value数据一般是怎么修改的？</p><pre class="language-none"><code class="language-none">1)朴素类型的数据(string等)，直接set修改后的值即可2)序列化后的对象：一般需要先get数据，反序列化成对象，修改其中的成员，再序列化为binary，再set数据3)json或者html数据：一般也需要先get文本，parse成dom树对象，修改相关元素，序列化为文本，再set数据结论：对于对象类型，或者文本类型，修改缓存value的成本较高，一般选择直接淘汰缓存。</code></pre><p>4，对于朴素类型的数据，究竟应该修改缓存，还是淘汰缓存？</p><pre class="language-none"><code class="language-none">答：仍然视情况而定。案例1：假设，缓存里存了某一个用户uid&#x3D;123的余额是money&#x3D;100元，业务场景是，购买了一个商品pid&#x3D;456。分析：如果修改缓存，可能需要：1)去db查询pid的价格是50元2)去db查询活动的折扣是8折（商品实际价格是40元）3)去db查询用户的优惠券是10元（用户实际要支付30元）4)从cache查询get用户的余额是100元5)计算出剩余余额是100 - 30 &#x3D; 706)到cache设置set用户的余额是70为了避免一次cache miss，需要额外增加若干次db与cache的交互，得不偿失。结论：此时，应该淘汰缓存，而不是修改缓存。案例2：假设，缓存里存了某一个用户uid&#x3D;123的余额是money&#x3D;100元，业务场景是，需要扣减30元。分析：如果修改缓存，需要：1)从cache查询get用户的余额是100元2)计算出剩余余额是100 - 30 &#x3D; 703)到cache设置set用户的余额是70为了避免一次cache miss，需要额外增加若干次cache的交互，以及业务的计算，得不偿失。结论：此时，应该淘汰缓存，而不是修改缓存。案例3：假设，缓存里存了某一个用户uid&#x3D;123的余额是money&#x3D;100元，业务场景是，余额要变为70元。分析：如果修改缓存，需要：1)到cache设置set用户的余额是70修改缓存成本很低。结论：此时，可以选择修改缓存。当然，如果选择淘汰缓存，只会额外增加一次cache miss，成本也不高。</code></pre><p><strong>总结：</strong><br>允许cache miss的KV缓存写场景：<br>大部分情况，修改value成本会高于“增加一次cache miss”，因此应该淘汰缓存<br>如果还在纠结，总是淘汰缓存，问题也不大</p></li><li><p><strong>发生数据不一致有哪些原因</strong></p><p>缓存一致性或者叫缓存双写一致性，缓存同步，说的是在同时操作数据库和缓存时发生数据不一致情况<br>本质上是因为两个操作不是原子性的。</p><p>上面我们排除了更新缓存，那么摆在我们面前的就只有两种方案了</p><pre class="language-none"><code class="language-none">1)先操作数据库，再删除缓存2)先删除缓存，再操作数据库</code></pre><p>让我们来理一理，发生数据不一致在实际生产中，主要有哪些原因？</p><pre class="language-none"><code class="language-none">1)异常，即第二步操作失败    有人问第一步操作不能失败嘛？当然不会，如果第一步操作失败，第二步操作就不执行，哪来的数据不一致2)并发3)主从数据库时延</code></pre></li><li><p><strong>在出现异常情况下，上面两个方案的比较</strong></p><ul><li><p>先操作数据库</p><pre class="language-none"><code class="language-none">线程A操作数据库，数据库数据发生改变线程A删除缓存，删除缓存失败线程B读取缓存，读到旧数据出现异常情况下，删除缓存失败，会出现数据不一致情况</code></pre></li><li><p>先操作缓存</p><pre class="language-none"><code class="language-none">线程A删除缓存，删除缓存成功线程A操作数据库，操作数据库失败线程B读取缓存，读取缓存失败线程B读取数据库，读取数据库成功出现异常情况下，线程B读取到的数据与数据库数据一致，并没有发生数据不一致情况</code></pre></li></ul><p>注意哦，上面异常的情况下，线程都是同步的哦，而我们更多的是讨论异步的情况</p></li><li><p><strong>在并发的情况下，上面两个方案的比较</strong></p><ul><li><p>先操作数据库</p><pre class="language-none"><code class="language-none">如果有2个线程要并发读写数据，可能会发生以下场景：1)缓存中 X 不存在（数据库 X &#x3D; 1）2)线程 A 读取数据库，得到旧值（X &#x3D; 1）3)线程 B 更新数据库（X &#x3D; 2)4)线程 B 删除缓存5)线程 A 将旧值写入缓存（X &#x3D; 1）最终 X 的值在缓存中是 1（旧值），在数据库中是 2（新值），发生数据不一致。</code></pre><p>这种情况「理论」来说是可能发生的，但实际真的有可能发生吗？<br>其实概率「很低」，这是因为它必须满足 3 个条件：</p><pre class="language-none"><code class="language-none">1.缓存刚好已失效2.读请求 + 写请求并发3.更新数据库 + 删除缓存的时间(步骤 3-4)，要比读数据库 + 写缓存时间短(步骤 2 和 5)  因为3,4步骤如果时间长，线程B还是能把缓存删除，从而保持数据一致</code></pre><p>仔细想一下，条件 3 发生的概率其实是非常低的。<br>因为写数据库一般会先「加锁」，所以写数据库，通常是要比读数据库的时间更长的。<br>这么来看，「先更新数据库 + 再删除缓存」的方案，是可以保证数据一致性的。<br>所以，我们应该采用这种方案，来操作数据库和缓存，这个方案也是旁路缓存策略的写部分。</p></li><li><p>先操作缓存</p><pre class="language-none"><code class="language-none">依旧是 2 个线程并发「读写」数据：1)线程 A 先删除缓存2)线程 B 读缓存，发现不存在，从数据库中读取到旧值（X &#x3D; 1）3)线程 A 将新值写入数据库（X &#x3D; 2）4)线程 B 将旧值写入缓存（X &#x3D; 1）最终 X 的值在缓存中是 1（旧值），在数据库中是 2（新值），发生不一致。</code></pre><p>可见，先删除缓存，后更新数据库，当发生「读+写」并发时，还是存在数据不一致的情况。</p></li><li><p>总结<br>上面可以看到，在并发读写情况下，[先操作数据库]优于[先操作缓存]，[先操作缓存]发生数据不一致情况<br>比[先操作数据库]发生数据不一致情况的概率要高。</p><p>我们也可以通过某种方法使得[先操作缓存]同样数据保持一致，即<strong>延迟双删策略</strong><br>再看看[先操作缓存]中的线程A，线程B，如果我们添加第5步，线程A再次删除缓存<br>只要我们保证线程A的第5步在最后一步执行，就能保证数据库是最新数据，缓存中无数据，保证数据一致<br>如何保证线程A的第5步在最后一步执行，我们需要给线程A一个休眠时间，这个休眠时间要大于<br>[线程B读缓存，读取失败，线程B读数据库，并将数据写到缓存中]的时间，才能保证线程A删除有效<br>休眠太小，线程A再次删除缓存就不是最后一步</p><p>注意：并发和异常的情况是有可能都发生的哦<br>也就是说，并发+异常情况下，<br>[先操作数据库]虽然并发下，数据暂且认为可以一致(很小概率不一致)，但异常下可能会删除缓存操作失败，从而导致数据不一致<br>[先操作缓存]虽然并发下增加延迟双删机制保证数据一致，但异常下，最后删除操作失败，又可以导致数据不一致<br>现在的问题明确了，删除操作失败怎么办？引入<strong>删除重试机制</strong>！下面会有详细介绍</p></li></ul></li><li><p><strong>在有主从时延的情况下，上面两个方案的比较</strong><br>先来个结论：发生写请求后（不管是先操作数据库，还是先删除缓存），在主从数据库同步完成之前，<br>如果有读请求，都可能发生读Cache Miss，读从库把旧数据存入缓存的情况。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/8.png" loading="lazy"><br>上图是先操作缓存，其实先操作数据库也是同样的情况，都会发生数据不一致情况。<br>主从时延导致的数据不一致问题根本原因是数据库主从不一致引起的，当主库上发生写操作之后，<br>从库binlog同步的时间间隔内，读请求，可能导致有旧数据入缓存。</p><p>那么主从时延的问题如何解决？这里有一个思路：<br><strong>可选择性读主</strong></p><pre class="language-none"><code class="language-none">那能不能写操作记录下来，在主从时延的时间段内，读取修改过的数据的话，强制读主，并且更新缓存，这样子缓存内的数据就是最新。在主从时延过后，这部分数据继续读从库，从而继续利用从库提高读取能力。</code></pre><p>可以利用一个缓存记录必须读主的数据。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/9.png" loading="lazy"><br>如上图，当写请求发生时：</p><pre class="language-none"><code class="language-none">1)写主库2)将哪个库，哪个表，哪个主键三个信息拼装一个key设置到cache里，这条记录的超时时间，设置为“主从同步时延”    PS：key的格式为“db:table:PK”，假设主从延时为1s，这个key的cache超时时间也为1s。注意：你别跟我说在1,2步之间如果有读请求查询发现没这个key,就去读从库了，没完没了了~</code></pre><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/10.png" loading="lazy"><br>如上图，当读请求发生时：<br>这是要读哪个库，哪个表，哪个主键的数据呢，也将这三个信息拼装一个key，到cache里去查询</p><pre class="language-none"><code class="language-none">1)如果cache里有这个key，说明1s内刚发生过写请求，数据库主从同步可能还没有完成，此时就应该去主库查询。    并且把主库的数据set到缓存中，防止下一次cahce miss。2)如果cache里没有这个key，说明最近没有发生过写请求，此时就可以去从库查询</code></pre><p>所以我们可以知道，可选择性读可以解决主从时延的问题，但终究解决不了删除缓存失败问题。</p></li><li><p><strong>缓存删除重试机制</strong><br>删除缓存失败，如果同步再删除缓存，大概率还会失败，一般都是通过异步的方式<br>异步删除缓存分为两种，一种使用消息队列的方式，一种使用订阅数据库的binlog二进制日志文件。</p><ul><li>使用消息队列方式<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/11.png" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/12.png" loading="lazy"><br>此时解决方案就是利用消息队列进行删除的补偿。但是这个方案会有一个缺点<br>就是会对业务代码造成大量的侵入，深深的耦合在一起，所以我们可以尝试下面的方式。</li><li>使用订阅数据库binlog方式<br>我们知道对 Mysql 数据库更新操作后再 binlog 日志中我们都能够找到相应的操作，<br>那么我们可以订阅 Mysql 数据库的 binlog 日志对缓存进行操作。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/13.png" loading="lazy"><br>订阅binlog服务方式比直接使用消息队列方式要好，因为订阅binlog服务方式是独立的服务<br>而消息队列则要集成到微服务中，耦合性要低，阿里巴巴有一个叫canal的框架，就可以帮助我们<br>将binlog日志采集发送到MQ队列里面，然后通过ACK机制确认处理这条更新消息，删除缓存，保证数据缓存一致性</li></ul></li></ul><p>经过上面的不断验证，有两个完整方案出炉</p><ul><li>[先操作数据库，再删除缓存]+[订阅数据库binlog，解决删除缓存失败]+[可选择性读，解决主从延迟]</li><li>[先删除缓存，再操作数据库]+[延迟双删]+[订阅数据库binlog]+[可选择性读]</li></ul><p>这两个方案孰优孰劣呢？都挺好的，但都不好，提升了缓存一致性，便降低了并发能力，我就只想用个缓存，给我整这么多~</p><p>下面是一些有关文章，本文大量采用其他博客内容，如有雷同，纯属我抄你</p><ul><li><a href="https://juejin.cn/post/7016696467662307341">缓存一致性问题，这样回答肯定没毛病！</a></li><li><a href="https://juejin.cn/post/6850418121754050567">如何保证缓存与数据库双写时的数据一致性？</a></li><li><a href="https://segmentfault.com/a/1190000015804406">缓存同步、如何保证缓存一致性、缓存误用</a></li><li><a href="https://juejin.cn/post/6964531365643550751">美团二面：Redis与MySQL双写一致性如何保证？</a></li><li><a href="https://www.cnblogs.com/myseries/p/12859410.html">redis 主从复制常见的一些坑</a></li><li><a href="https://zhuanlan.zhihu.com/p/408515044">缓存和数据库一致性问题，看这篇就够了</a></li></ul><blockquote><p><span id="c">三个经典的缓存模式</span></p></blockquote><p>缓存可以提升性能、缓解数据库压力，但是使用缓存也会导致数据不一致性的问题。一般我们是如何使用缓存呢？有三种经典的缓存模式：</p><pre class="language-none"><code class="language-none">1)Cache-Aside Pattern，旁路缓存模式2)Read-Through&#x2F;Write through，读写穿透模式3)Write behind，异步缓存写入模式</code></pre><ul><li><p><strong>Cache-Aside Pattern</strong><br>旁路缓存模式，它的提出是为了尽可能地解决缓存与数据库的数据不一致问题。<br>该模式是最用的模式，该模式的写流程，读流程如下</p><ul><li>读流程<br>先读缓存–&gt;缓存命中则直接返回数据–&gt;缓存未命中则查询数据库–&gt;将查询的数据写入缓存并返回数据</li><li>写流程<br>先操作数据库–&gt;再删除缓存</li></ul></li><li><p><strong>Read-Through/Write through</strong><br>这两个模式统称为读写穿透模式，该模式中服务端把缓存作为主要数据存储。应用程序跟数据库缓存交互，都通过<strong>抽象缓存层</strong>完成的<br>抽象缓存层是请求和缓存之间的一层，我们只需要操作抽象缓存层即可，不用管下面如何实现，计算机不就是<br>不停的封装，抽象嘛，任何问题都可以通过加一层来解决，如果不行，加两层~<br>让我们看看Read-Through/Write through的工作流程</p><ul><li>Read-Through<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/14.png" loading="lazy"><br>Read-Through实际只是在<strong>Cache-Aside</strong>之上进行了一层封装，它会让程序代码变得更简洁，同时也减少数据源上的负载。</li><li>Write through<br>Write-Through模式下，当发生写请求时，也是由缓存抽象层完成数据源和缓存数据的更新,流程如下：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/15.png" loading="lazy"></li></ul></li><li><p><strong>Write behind</strong></p><p>异步缓存写入模式，Write behind跟Read-Through/Write-Through有相似的地方，<br>都是由<code>Cache Provider</code>来负责缓存和数据库的读写。它俩又有个很大的不同：<br><strong>Read/Write Through</strong>是同步更新缓存和数据的，<br><strong>Write Behind</strong>则是只更新缓存，不直接更新数据库，通过<strong>批量异步</strong>的方式来更新数据库。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/16.png" loading="lazy"><br>这种方式下，缓存和数据库的一致性不强，<strong>对一致性要求高的系统要谨慎使用</strong>。但是它适合频繁写的场景，<br>MySQL的<strong>InnoDB Buffer Pool机制</strong>就使用到这种模式。</p></li></ul><blockquote><p><span id="d">多级缓存的概念</span></p></blockquote><p>聊多级缓存之前，我们看看之前我们脑中缓存的流程：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/17.png" loading="lazy"></p><p>请求来到后端服务器，后端服务器查询redis，如果查询失败，则查询数据库，查到后将数据回填到redis中</p><p>那么多级缓存是个什么概念呢？请看下图：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/cache-consistent/18.png" loading="lazy"></p><pre class="language-none"><code class="language-none">1，请求先查询浏览器缓存(localStorage,SessionStorage)2，如果没查到，请求来看nginx反向代理服务器，经过反向代理，来到nginx的本地缓存集群    使用nginx存储本地缓存3，如果nginx本地缓存中没有数据，则通过OpenResty框架+Lua脚本语言向redis查询数据4，如果nginx查询redis失败，则nginx请求后端服务器，查询tomcat中的进程缓存，进程缓存指的是运行在JVM中的缓存    例如集合，map之类的，当然更多的是使用Caffeine库，这是一个高性能的进程缓存库，spring内部的缓存使用的就是caffeine5，如果进程缓存库中也没有数据，则直接查询数据库，并将数据回填到上面各个缓存中。</code></pre><p>上面流程中，最主要就是nginx本地缓存能够查询redis，查询tomcat，和进程缓存的使用。<br>nginx之所以可以被编程，全靠OpenResty框架，这是一个封装了nginx的lua库，使得nginx可以编程代码了。<br>当然语言用的是lua脚本语言。</p><p>具体lua基本语法，进程缓存的caffeine的API使用就不多说了，百度查一查都有，<a href="https://github.com/NicknamedCoco/cdn/tree/master/blog/redis/cache-consistent">多级缓存网课资料</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建Mysql主从复制</title>
      <link href="2021/11/30/Docker%E6%90%AD%E5%BB%BAMysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>2021/11/30/Docker%E6%90%AD%E5%BB%BAMysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>复习redis的时候有看到缓存一致性方面的知识，这部分很重要，我感觉我只是了解了一个大概，<br>回头看能不能水一波缓存同步的博客，今天尝试搭建了一下mysql主从复制，记录一下，以后忘记可以看看</p><blockquote><p>docker-compose搭建Mysql主从复制步骤</p></blockquote><ul><li><p>基本配置文件及目录</p><pre class="language-none"><code class="language-none">mysql-master-slave&#x2F;├── docker-compose.yaml├── master│   ├── conf│   │   └── my.cnf│   ├── data│   ├── Dockerfile│   ├── logs│   └── wanyi.sql└── slave    ├── conf    │   └── my.cnf    ├── data    ├── Dockerfile    ├── logs    └── wanyi.sql#master中除my.cnf有略微差别外，其他都与slave中配置文件一致</code></pre></li><li><p>wanyi.sql</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> wanyi<span class="token punctuation">;</span><span class="token keyword">use</span> wanyi<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>wanyi<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>wanyi<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'test for mysq-master-slave'</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>wanyi<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"万一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>wanyi<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"万二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>wanyi<span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"万三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>Dockerfile</p><pre class="language-none"><code class="language-none">#设定初始镜像mysql版本FROM mysql#设定工作目录，用于处理初始化mysql的sql文件WORKDIR &#x2F;docker-entrypoint-initdb.d#默认mysql无法输入中文，修改编码使其支持中文ENV LANG&#x3D;C.UTF-8#加入需要初始化的sql文件ADD .&#x2F;wanyi.sql .</code></pre></li><li><p>My.cnf<br><strong>master中My.cnf</strong></p><pre class="language-none"><code class="language-none">[mysqld]## server_id，一般设置为IP，注意要唯一server_id&#x3D;1log_bin&#x3D;mysql-bin## 需要主从复制的数据库binlog-do-db&#x3D;wanyi## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）binlog-ignore-db&#x3D;mysql## 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存binlog_cache_size&#x3D;1M## 主从复制的格式（mixed,statement,row，默认格式是statement。建议是设置为row，主从复制时数据更加能够统一）binlog_format&#x3D;mixed## 二进制日志自动删除&#x2F;过期的天数。默认值为0，表示不自动删除。binlog_expire_logs_seconds&#x3D;3600## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致slave_skip_errors&#x3D;1062</code></pre><p><strong>slave中My.cnf</strong></p><pre class="language-none"><code class="language-none">[mysqld]## 设置server_id，一般设置为IP，注意要唯一server_id&#x3D;2## 需要主从复制的数据库replicate-do-db&#x3D;wanyi## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）binlog-ignore-db&#x3D;mysql## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用log_bin &#x3D; mysql-bin## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存binlog_cache_size&#x3D;1M## 主从复制的格式（mixed,statement,row，默认格式是statement）binlog_format&#x3D;row## 二进制日志自动删除&#x2F;过期的天数。默认值为0，表示不自动删除。binlog_expire_logs_seconds&#x3D;3600## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致slave_skip_errors&#x3D;1062## relay_log配置中继日志relay_log&#x3D;replicas-mysql-relay-bin## log_slave_updates表示slave将复制事件写进自己的二进制日志log_slave_updates&#x3D;1## 防止改变数据(除了特殊的线程)read_only&#x3D;1</code></pre></li><li><p>docker-compose.yaml</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql-master</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./master    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"MYSQL_ROOT_PASSWORD=root"</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"33065:3306"</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>master    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./master/data/:/var/lib/mysql/"</span>      <span class="token comment">#mysql数据目录</span>      <span class="token punctuation">-</span> <span class="token string">"./master/logs/:/var/log/mysql/"</span>      <span class="token comment">#mysql的日志目录</span>      <span class="token punctuation">-</span> <span class="token string">"./master/conf/:/etc/mysql/conf.d/"</span>   <span class="token comment">#mysql的配置目录</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'--character-set-server=utf8mb4'</span><span class="token punctuation">,</span>      <span class="token string">'--collation-server=utf8mb4_unicode_ci'</span><span class="token punctuation">,</span>      <span class="token string">'--lower_case_table_names=1'</span>          <span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>master    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql<span class="token punctuation">-</span>slave   <span class="token key atrule">mysql-slave</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./slave    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"MYSQL_ROOT_PASSWORD=root"</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"33066:3306"</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>slave    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>slave    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./slave/data/:/var/lib/mysql/"</span>      <span class="token comment">#mysql数据目录</span>      <span class="token punctuation">-</span> <span class="token string">"./slave/logs/:/var/log/mysql/"</span>      <span class="token comment">#mysql的日志目录</span>      <span class="token punctuation">-</span> <span class="token string">"./slave/conf/:/etc/mysql/conf.d/"</span>   <span class="token comment">#mysql的配置目录</span></code></pre></li><li><p>配置mysql权限<br>当我们启动两个mysql容器后，我们需要使用sqlyog或者Navicat连接这两个mysql，但是因为是mysql8版本<br>我们并不能直接使用工具连接上，所以我们需要更改这两个mysql的root用户权限。</p><p>进入这两个mysql容器的mysql中，执行下面两句命令：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#用于更换MySQL root账户的密码和加密方式</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'123765'</span><span class="token punctuation">;</span><span class="token comment">#用于刷新权限</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span></code></pre></li><li><p>在master容器的mysql中，查询出File和Position字段的值<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/docker/mysql/1.png" loading="lazy"></p></li><li><p>在slave容器的mysql中，执行下面语句</p><pre class="language-sql" data-language="sql"><code class="language-sql">CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span><span class="token string">'47.98.138.53'</span><span class="token punctuation">,</span>MASTER_PORT<span class="token operator">=</span><span class="token number">33065</span><span class="token punctuation">,</span>MASTER_USER<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>MASTER_PASSWORD<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>MASTER_LOG_FILE<span class="token operator">=</span><span class="token string">'mysql-bin.000003'</span><span class="token punctuation">,</span>MASTER_LOG_POS<span class="token operator">=</span><span class="token number">2797</span><span class="token punctuation">;</span><span class="token comment"># MASTER_LOG_FILE的值就是master中File字段的值，</span><span class="token comment"># MASTER_LOG_POS的值就是master中Position字段的值，这是在确定slave从哪里开始复制</span><span class="token comment">#重新启动slave,使配置生效</span>stop slave<span class="token keyword">start</span> slave</code></pre><p>执行上面语句，相当于slave容器的mysql作为了master容器mysql的从机，<br>我们可以通过命令查看从机状态：<code>show slave status</code><br>如果出现下面Slave_SQL_ Running和Slave_IO_Running字段的值都为YES，<br>Slave_IO_Status值为：<code>Waiting for source to send event</code>，则表示部署成功，从机可以从主机中拷贝数据<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/docker/mysql/2.png" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/docker/mysql/3.png" loading="lazy"></p></li></ul><ul><li>文章及资料<ul><li><a href="https://zhuanlan.zhihu.com/p/45193580">Docker Compose搭建MySQL主从复制集群</a></li><li><a href="https://www.jianshu.com/p/944e03095351">mysql 基于docker-compose配置主从复制（一主一从）</a></li><li><a href="https://www.cnblogs.com/wade-lt/p/9008058.html">MySQL主从同步与主主同步</a></li><li><a href="https://github.com/NicknamedCoco/cdn/tree/master/blog/docker/mysql">本案例文件，已压缩</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建Redis集群</title>
      <link href="2021/11/25/Docker%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4/"/>
      <url>2021/11/25/Docker%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>最近两天把redis复习了一下，确实学习到了很多新的东西，我对redis的了解还远远不够啊，慢慢学吧，<br>之前有搭过redis主从复制，哨兵模式，分片集群，现在使用docker重新搭建了一次，当然复习redis不光是搭建<br>这些东西，主要目标是想学习redis的分布式缓存，认识一下到底什么是分布式缓存，OK，回归正题，<br>现在暂且记录一下docker搭建三个基本的redis模型吧。</p><ul><li><p>Docker搭建主从复制</p><ul><li><p>基本配置文件和目录</p><pre class="language-none"><code class="language-none">redis-MasterAndSlave&#x2F;#主目录├── docker-compose.yaml├── master&#x2F; #目录       │   ├── data&#x2F;#目录│   ├── redis.conf├── slave1&#x2F; │   ├── data&#x2F;      │   ├── redis.conf└── slave2&#x2F;    ├── data&#x2F;          ├── redis.conf</code></pre></li><li><p>redis.conf<br><strong>master中redis.conf</strong></p><pre class="language-none"><code class="language-none">port 6379  protected-mode no    repl-diskless-sync no  repl-disable-tcp-nodelay no    requirepass  master123765#给主机设置密码</code></pre><p><strong>slave中redis.conf</strong></p><pre class="language-none"><code class="language-none">port 6379  protected-mode no    slaveof 172.25.0.101 6379  masterauth master123765#主机密码  slave-read-only yes  slave-serve-stale-data yes    requirepass 123765    #从机密码</code></pre></li><li><p>docker-compose.yaml</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token comment">#reids-master </span>  <span class="token key atrule">redis-master</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>master    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'6379:6379'</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">mynetwork</span><span class="token punctuation">:</span>    <span class="token comment">#配置固定IP</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.19.0.10    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./master/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./master/data:/data"</span><span class="token comment">#redis的持久化配置文件将会保存在该目录</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span class="token comment">#容器启动失败后会不断尝试重启</span>      <span class="token comment">#reids-slave1 </span>  <span class="token key atrule">redis-slave1</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>slave1    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> <span class="token string">'6380:6379'</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">mynetwork</span><span class="token punctuation">:</span>    <span class="token comment">#配置固定IP</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.19.0.11    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./slave1/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./slave1/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always      <span class="token comment">#reids-slave2</span>  <span class="token key atrule">redis-slave2</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>slave2    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>               <span class="token punctuation">-</span> <span class="token string">'6381:6379'</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>          <span class="token key atrule">mynetwork</span><span class="token punctuation">:</span>    <span class="token comment">#配置固定IP</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.19.0.12    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./slave2/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./slave2/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">mynetwork</span><span class="token punctuation">:</span>  <span class="token comment">#配置一个子网，前提是没有这个网络，如果有，docker network rm mynetwork</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge<span class="token comment">#这个子网会在配置文件启动时自动创建</span>    <span class="token key atrule">ipam</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.19.0.0/24 </code></pre></li><li><p>然后启动主从复制<br>在主目录下执行，<code>docker-compose up -d </code>，关闭直接：<code>docker-compose down</code><br>进入master容器中：<code>docker exec -it redis-master bash </code><br>进入redis客户端：<code>redis-cli -a master123765</code>，需填写密码<br>或者你可以先进入客户端：<code>redis-cli</code>，然后再密码认证<code>auth master123765</code><br>注意：主从复制模式下，主机挂掉后，从机并不会上位，依然是从机状态，当主机重新上线后，<br>仍然维持主机状态，若想当主机挂掉后，从机上位成主机，除了手动通过命令外，还可使用哨兵模式。</p></li></ul></li><li><p>Docker搭建哨兵模式</p><p>哨兵，用来监控master节点，当master节点挂掉后，通过选举将slave节点转换成master结点，<br>哨兵节点务必大于三个才有效，哨兵节点需要获取所有节点的信息，但其只需监控master即可，通过master<br>即可获取到slave节点，其他哨兵结点的信息，下面是搭建步骤</p><ul><li><p>基本配置文件和目录</p><pre class="language-none"><code class="language-none">sentinel&#x2F;├── docker-compose.yml├── master&#x2F;│   ├── data&#x2F;│   └── redis.conf├── slave1&#x2F;│   ├── data&#x2F;│   └── redis.conf├── slave2&#x2F;|   ├── data&#x2F;|   └── redis.conf├── sentinel1│   └── sentinel.conf├── sentinel2│   └── sentinel.conf└── sentinel3    └── sentinel.conf</code></pre></li><li><p>redis.conf<br><strong>master的redis.conf</strong></p><pre class="language-none"><code class="language-none">port 6379pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pidprotected-mode notimeout 0tcp-keepalive 300loglevel noticerequirepass  123765################################# REPLICATION #################################slave-serve-stale-data yesslave-read-only yesrepl-diskless-sync norepl-diskless-sync-delay 5repl-disable-tcp-nodelay no##################################### RDB #####################################dbfilename dump.rdbsave 900 1save 300 10save 60 10000stop-writes-on-bgsave-error yesrdbcompression yesrdbchecksum yesdir .&#x2F;##################################### AOF #####################################appendonly yesappendfilename &quot;appendonly.aof&quot;appendfsync everysecno-appendfsync-on-rewrite noaof-load-truncated yesaof-use-rdb-preamble no</code></pre><p><strong>slave的redis.conf</strong></p><pre class="language-none"><code class="language-none"># 在master的redis.conf的REPLICATION下添加，其他与master一致slaveof 172.19.0.10 6379#主机地址masterauth 123765#主机的密码requirepass 123765#自己redis的密码注意：哨兵模式下，主机的密码和从机的密码必须一样，不然从机上位不了！！！</code></pre></li><li><p>sentinel.conf</p><pre class="language-none"><code class="language-none"># 所有哨兵端口都一致，因为使用 Docker 桥接网络映射 port 26379# 哨兵设置，所有哨兵皆一致，都指向 Mastersentinel monitor mymaster 172.19.0.10 6379 2sentinel parallel-syncs mymaster 1sentinel auth-pass mymaster 123765#配置主机密码，从机和主机密码务必一致sentinel down-after-milliseconds mymaster 30000sentinel failover-timeout mymaster 180000bind 0.0.0.0protected-mode nodaemonize nopidfile &#x2F;var&#x2F;run&#x2F;redis-sentinel.pidlogfile &quot;&quot;dir &#x2F;tmp</code></pre></li><li><p>docker-compose.yaml</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">redis-replication</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">ipam</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.19.0.0/24<span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6379:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./master/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./master/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">redis-replication</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.19.0.10  <span class="token key atrule">slave1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">1</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6380:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./slave1/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./slave1/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">redis-replication</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.19.0.11  <span class="token key atrule">slave2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">2</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6381:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./slave2/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./slave2/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">redis-replication</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.19.0.12    <span class="token key atrule">sentinel1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span><span class="token number">1</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"26380:26379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token string">"./sentinel1/sentinel.conf:/etc/sentinel.conf"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"cp /etc/sentinel.conf /sentinel.conf &amp;&amp; redis-sentinel /sentinel.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">redis-replication</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.19.0.13  <span class="token key atrule">sentinel2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span><span class="token number">2</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"26381:26379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token string">"./sentinel2/sentinel.conf:/etc/sentinel.conf"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"cp /etc/sentinel.conf /sentinel.conf &amp;&amp; redis-sentinel /sentinel.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">redis-replication</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.19.0.14  <span class="token key atrule">sentinel3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span><span class="token number">3</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"26382:26379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token string">"./sentinel3/sentinel.conf:/etc/sentinel.conf"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"cp /etc/sentinel.conf /sentinel.conf &amp;&amp; redis-sentinel /sentinel.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">redis-replication</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.19.0.15</code></pre><p>以上就是docker搭建哨兵模式的配置步骤</p></li></ul></li><li><p>Docker搭建分片集群<br>主从复制解决了 Redis 的性能问题，哨兵模式解决了 Redis 的可用性问题，但单个master仍然抗住高并发写<br>因此分片集群产生，分片集群有多个master，每个master至少一台slave，分片指的是将数据分片存储。<br>分片集群会根据数据计算分出16384个插槽(0-16383)，插槽指的是存储单位，任何一个数据要想存储到集群<br>都会将根据该数据做一个计算，看这个数据属于哪个插槽，而不同的master管理不同范围的插槽。<br>如果一个客户端向集群中一个结点存储数据，redis便通过计算，判断这个数据属于哪个插槽，再将请求转给<br>相应的master节点进行处理，所以不管你向集群中master结点存储数据，还是slave结点存储数据都行，<br>redis会帮助你转发请求。</p><p>这个分片就是划分不同的master管理不同范围的插槽，通过计算划分16384个插槽<br>再根据数据计算该数据应该存放在哪个插槽中，这不就是散列存储，像散列表一样，大概如此吧。</p><p>分片集群最少需要6个结点，3主3从，下面是分片集群的配置步骤</p><ul><li><p>基本的配置文件和目录</p><pre class="language-none"><code class="language-none">redis-cluster&#x2F;├── docker-compose.yaml├── node1│   ├── data│   └── redis.conf├── node2│   ├── data│   └── redis.conf├── node3│   ├── data│   └── redis.conf├── node4│   ├── data│   └── redis.conf├── node5│   ├── data│   └── redis.conf└── node6    ├── data    └── redis.conf</code></pre></li><li><p>redis.conf</p><pre class="language-none"><code class="language-none">port 6371#6371~6376protected-mode nodaemonize no################################ REDIS CLUSTER  ###############################cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 15000cluster-announce-bus-port 16371#16371~16376</code></pre><p>6个redis.conf，除了port和cluster-announce-bus-port不同，其他都一样。</p></li><li><p>docker-compose.yaml</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">node1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">1</span>    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./node1/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./node1/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">node2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">2</span>    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./node2/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./node2/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">node3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">3</span>    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./node3/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./node3/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">node4</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">4</span>    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./node4/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./node4/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">node5</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">5</span>    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./node5/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./node5/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">node6</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">6</span>    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./node6/redis.conf:/etc/redis.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./node6/data:/data"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"redis-server"</span><span class="token punctuation">,</span> <span class="token string">"/etc/redis.conf"</span><span class="token punctuation">]</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre><p>这6个节点都是部署在宿主机上的，所以他们的端口号不同，之前sentinel，主从复制都是配置在子网中<br>redis集群的结点如果配置在子网中，那么当宿主机使用客户端存储数据时，redis可能将请求转发到其他<br>结点做存储，但是这些结点都是子网ip，宿主机根本访问不到，会造成阻塞，所以分片集群最好部署在宿主机上。</p></li></ul></li><li><p>Redis的主从复制原理</p><ul><li>从机会发消息给主机，要求增量同步，此时主机会检查从机的replication id和offset数据偏移量<br>每个redis服务都会有一个id，称为replication id，如果两个redis进程replId一致，说明是主从关系<br>offset则是该redis进程从其他redis进程拷贝的数据的偏移量。</li><li>主机接收到从机发过来的消息，它需要判断，如果从机是第一次发送请求，则需要拒绝该增量同步请求<br>需要全量同步，而如果不是第一次发送请求，则同意它的增量请求，判断从机是否是第一次请求，<br>需要根据replId来判断，redis中规定，每个redis结点最初replId都不一致，如果称为了主从关系，<br>则从机的replId需要与主机的replId保持一致，比较两者的replId就能知道是不是第一次发送请求了。</li><li>如果不是第一次发送请求，则说明之前已经发送过数据给从机了，此时没必要再全量同步，而是同意增量<br>请求，如果是第一次发送请求，则拒绝增量请求，需要全量请求，现在假设该从机是第一次发送消息<br>此时主机会有两个操作<br>1，主机会生成一个线程去拷贝内存中的数据进行持久化成rdb文件，拷贝好rdb文件后，将该文件发给从机<br>2，在线程持久化内存数据的时候，主机会开辟一个内存缓存区，叫<code>repl_baklog</code>的区域，用来存储在此<br>期间接收的客户端请求的数据。</li><li>当从机接收到rdb文件后，会清除本地自己的rdb文件，加载接收到的rdb文件，从而获得主机的数据<br>从机拿到主机的数据，并不是完整的，因为可能在主机持久化数据的时候，有新的数据，被存到内存缓存区中<br>所以从机再次发送增量请求</li><li>主机仍然判断从机是否为第一次发送消息，发现replId一致，则同意增量请求，将repl_baklog中的数据<br>发送给从机，但并不是将内存缓冲区数据全部发送给从机，而是根据从机的offset来确定到底发多少数据<br>内存缓冲区相当于一个双向链表，或者说是一个环，从机的offset和主机的offset像两个指针一样，<br>它们之间的间隔就是主机需要发送的数据，所以我们可以知道，从机的offset一定是小于主机的offset的<br>如果它们的offset则说明它们的数据一致，完成同步。</li></ul></li><li><p>文章与资料<br>掘金有非常多好文章，我也是看着别人的文章搭建的，下面放上大佬的文章和一些网课资料<br>资料中有上述的案例文件，中文解析的redis.conf，redis数据同步原理的ppt</p><ul><li><a href="https://juejin.cn/post/6997804248457019399">【Redis】docker compose 部署主从复制</a></li><li><a href="https://juejin.cn/post/6997458845148659743">【Redis】docker compose 部署哨兵集群模式</a></li><li><a href="https://juejin.cn/post/6997723668155482149">【Redis】docker compose 部署集群模式</a></li><li><a href="https://blog.csdn.net/weixin_45444133/article/details/119642841">docker 部署 redis 的三种集群模式</a></li><li><a href="https://bbs.csdn.net/topics/392374837">redis配置哨兵问题，当主库宕机后，不自动切换</a></li><li><a href="https://blog.csdn.net/a123qwertyuiop/article/details/107957229">redis 主从服务设置密码的sentinel 配置</a></li><li><a href="https://blog.csdn.net/a_newbird/article/details/105522061">redis主从复制，主读不到从节点信息的坑</a></li><li><a href="https://github.com/NicknamedCoco/cdn/tree/master/blog/redis"><strong>docker部署redis集群案例.zip</strong></a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建Nacos集群</title>
      <link href="2021/11/22/Docker%E6%90%AD%E5%BB%BANacos%E9%9B%86%E7%BE%A4/"/>
      <url>2021/11/22/Docker%E6%90%AD%E5%BB%BANacos%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>简述</p></blockquote><p>我又来水一篇了，在搭建的过程中，备受折磨，如果不把它记录下来，岂不是白难受了！<br>我的小服务器太差了，1核2G内存，容器一开起来，CPU和内存直接98%。。。<br>害，难受，直接去Vultr开了高性能的vps实验，下面进入正题</p><p>如果我们使用的是单机版nacos，则我们的数据存储在内置的derby数据库中，<br>如果我们使用nacos集群，那么就需要我们配置mysql，让所有nacos的配置都保存到mysql数据库中<br>以防数据库数据不一致的情况出现。</p><p>具体配置：</p><ul><li><p>拉取nacos，nginx，mysql的镜像，默认全部最新版的</p><pre class="language-none"><code class="language-none">docker pull nacos&#x2F;nacos-serverdocker pull nginxdocker pull mysql</code></pre></li><li><p>创建各个挂载目录和必要的配置文件</p><ul><li><p>创建主目录用于存放各个挂载目录及配置文件：<code>mkdir nacos-cluster</code>，主目录直接在根目录创建即可<br>主目录下创建三个配置目录：<code>mkdir mysql nacos nginx</code></p></li><li><p>在mysql目录下创建3个挂载目录：<code>mkdir logs data conf</code></p><pre class="language-none"><code class="language-none">logs目录挂载到：&#x2F;var&#x2F;log&#x2F;mysql&#x2F;data目录挂载到：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;conf目录挂载到：&#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;</code></pre></li><li><p>将nacos的sql文件放在mysql目录下<br>nacos数据库文件在nacos的conf目录下，nacos-mysql.sql<br>我们可以在window版本的nacos中找到该sql文件再传到linux中</p></li><li><p>在mysql目录下创建Dockerfile文件，该文件内容如下</p><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment">#设定初始镜像mysql版本</span><span class="token keyword">FROM</span> mysql<span class="token comment">#设定工作目录，用于处理初始化mysql的sql文件</span><span class="token keyword">WORKDIR</span> /docker<span class="token punctuation">-</span>entrypoint<span class="token punctuation">-</span>initdb.d<span class="token comment">#默认mysql无法输入中文，修改编码使其支持中文</span><span class="token keyword">ENV</span> LANG=C.UTF<span class="token punctuation">-</span>8<span class="token comment">#加入需要初始化的sql文件</span><span class="token keyword">ADD</span> ./nacos<span class="token punctuation">-</span>mysql.sql .</code></pre></li><li><p>在nacos目录下创建6个挂载目录</p><pre class="language-none"><code class="language-none">mkdir nacos1-logs nacos2-logs nacos3-logs nacos1-config nacos2-config nacos3-config分别对应三个nacos容器的日志目录和配置目录  logs目录挂载到&#x2F;home&#x2F;nacos&#x2F;logs&#x2F;  config目录挂载到&#x2F;home&#x2F;nacos&#x2F;init.d&#x2F;</code></pre></li><li><p>在nginx目录下创建2个挂载目录：<code>mkdir nginx-config nginx-logs</code></p><pre class="language-none"><code class="language-none">nginx-config目录挂载到：&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;nginx-logs目录挂载到：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;</code></pre></li><li><p>在nginx/nginx-config目录下创建nacos-cluster.conf文件，该文件内容如下：</p><pre class="language-none"><code class="language-none">server &#123;listen 9000;server_name 你的nginx的ip地址(也就是宿主机ip);location &#x2F; &#123;        proxy_pass http:&#x2F;&#x2F;cluster;    &#125;&#125;</code></pre></li><li><p>在nginx目录下创建nginx.conf文件，该文件将挂载到/etc/nginx/nginx.conf<br>注意：这个文件创建后最好改一下该文件的权限，将该文件权限改成666，防止更新nginx.conf文件后<br>容器内文件不能被及时修改，如果不改权限，则每次修改配置，需要重启容器才能生效。<br>该文件内容如下：</p><pre class="language-none"><code class="language-none">user  nginx;worker_processes  auto;error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log notice;pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;events &#123;    worker_connections  1024;&#125;http &#123;    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;    default_type  application&#x2F;octet-stream;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;    #nacos1:8848,是通过容器名:容器内部端口来访问，你可以通过45.32.108.28:宿主机端口访问    upstream cluster &#123;  server nacos1:8848 weight&#x3D;1 max_fails&#x3D;5 fail_timeout&#x3D;30s;  server nacos2:8848 weight&#x3D;1 max_fails&#x3D;5 fail_timeout&#x3D;30s;  server nacos3:8848 weight&#x3D;1 max_fails&#x3D;5 fail_timeout&#x3D;30s;    &#125;    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;&#125;</code></pre></li></ul><p>上面众多文件结构如下：</p><pre class="language-none"><code class="language-none">nacos-cluster&#x2F;├── docker-compose.yml├── mysql│   ├── conf│   ├── data│   ├── Dockerfile│   ├── logs│   └── nacos-mysql.sql├── nacos│   ├── nacos1-config│   ├── nacos1-logs│   ├── nacos2-config│   ├── nacos2-logs│   ├── nacos3-config│   └── nacos3-logs└── nginx    ├── nginx.conf    ├── nginx-config    │   └── nacos-cluster.conf    └── nginx-logs</code></pre></li><li><p>差点忘记我们的docker-compose文件，该文件内容如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql        <span class="token key atrule">build</span><span class="token punctuation">:</span> ./mysql        <span class="token key atrule">environment</span><span class="token punctuation">:</span>            <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123765</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token comment">#    - /nacos-cluster/mysql/init:/docker-entrypoint-initdb.d/ #初始化nacos的数据库文件</span>            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/mysql/data/<span class="token punctuation">:</span>/var/lib/mysql/   <span class="token comment">#mysql数据目录</span>            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/mysql/logs/<span class="token punctuation">:</span>/var/log/mysql/   <span class="token comment">#mysql的日志目录</span>            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/mysql/conf/<span class="token punctuation">:</span>/etc/mysql/conf.d/  <span class="token comment">#mysql的配置目录</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">'--character-set-server=utf8mb4'</span><span class="token punctuation">,</span>            <span class="token string">'--collation-server=utf8mb4_unicode_ci'</span><span class="token punctuation">,</span>            <span class="token string">'--lower_case_table_names=1'</span>                <span class="token punctuation">]</span>        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">nacos1</span><span class="token punctuation">:</span>        <span class="token key atrule">hostname</span><span class="token punctuation">:</span> nacos1        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nacos1        <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server        <span class="token key atrule">environment</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> MODE=cluster        <span class="token punctuation">-</span> NACOS_SERVERS=45.32.108.28<span class="token punctuation">:</span>8000 45.32.108.28<span class="token punctuation">:</span>8001 45.32.108.28<span class="token punctuation">:</span><span class="token number">8002</span>        <span class="token punctuation">-</span> PREFER_HOST_MODE=hostname        <span class="token punctuation">-</span> SPRING_DATASOURCE_PLATFORM=mysql        <span class="token punctuation">-</span> MYSQL_SERVICE_HOST=mysql <span class="token comment">#Mysql的主机号，同一台机器不能使用IP，直接使用容器名</span>        <span class="token punctuation">-</span> MYSQL_SERVICE_PORT=3306        <span class="token punctuation">-</span> MYSQL_SERVICE_DB_NAME=nacos_config        <span class="token punctuation">-</span> MYSQL_SERVICE_USER=root        <span class="token punctuation">-</span> MYSQL_SERVICE_PASSWORD=123765        <span class="token punctuation">-</span> MYSQL_DATABASE_NUM=1        <span class="token punctuation">-</span> MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8<span class="token important">&amp;connectTimeout=10000&amp;socketTimeout=30000</span> <span class="token comment">#控制数据库连接时间</span>        <span class="token punctuation">-</span> JVM_XMS=256m        <span class="token punctuation">-</span> JVM_XMX=256m        <span class="token punctuation">-</span> JVM_XMN=256m        <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token string">"8000:8848"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/nacos/nacos1<span class="token punctuation">-</span>logs/<span class="token punctuation">:</span>/home/nacos/logs/            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/nacos/nacos1<span class="token punctuation">-</span>config<span class="token punctuation">:</span>/home/nacos/init.d/        <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> mysql        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">nacos2</span><span class="token punctuation">:</span>        <span class="token key atrule">hostname</span><span class="token punctuation">:</span> nacos2        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nacos2        <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server        <span class="token key atrule">environment</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> MODE=cluster        <span class="token punctuation">-</span> NACOS_SERVERS=45.32.108.28<span class="token punctuation">:</span>8000 45.32.108.28<span class="token punctuation">:</span>8001 45.32.108.28<span class="token punctuation">:</span><span class="token number">8002</span>        <span class="token punctuation">-</span> PREFER_HOST_MODE=hostname        <span class="token punctuation">-</span> SPRING_DATASOURCE_PLATFORM=mysql        <span class="token punctuation">-</span> MYSQL_SERVICE_HOST=mysql        <span class="token punctuation">-</span> MYSQL_SERVICE_PORT=3306        <span class="token punctuation">-</span> MYSQL_SERVICE_DB_NAME=nacos_config        <span class="token punctuation">-</span> MYSQL_SERVICE_USER=root        <span class="token punctuation">-</span> MYSQL_SERVICE_PASSWORD=123765        <span class="token punctuation">-</span> MYSQL_DATABASE_NUM=1        <span class="token punctuation">-</span> MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8<span class="token important">&amp;connectTimeout=10000&amp;socketTimeout=30000</span>        <span class="token punctuation">-</span> JVM_XMS=256m        <span class="token punctuation">-</span> JVM_XMX=256m        <span class="token punctuation">-</span> JVM_XMN=256m        <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token string">"8001:8848"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/nacos/nacos2<span class="token punctuation">-</span>logs/<span class="token punctuation">:</span>/home/nacos/logs/            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/nacos/nacos2<span class="token punctuation">-</span>config<span class="token punctuation">:</span>/home/nacos/init.d/        <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> mysql        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">nacos3</span><span class="token punctuation">:</span>        <span class="token key atrule">hostname</span><span class="token punctuation">:</span> nacos3        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nacos3        <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server        <span class="token key atrule">environment</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> MODE=cluster <span class="token comment"># 集群模式</span>        <span class="token punctuation">-</span> NACOS_SERVERS=45.32.108.28<span class="token punctuation">:</span>8000 45.32.108.28<span class="token punctuation">:</span>8001 45.32.108.28<span class="token punctuation">:</span><span class="token number">8002</span>        <span class="token punctuation">-</span> PREFER_HOST_MODE=hostname        <span class="token punctuation">-</span> SPRING_DATASOURCE_PLATFORM=mysql        <span class="token punctuation">-</span> MYSQL_SERVICE_HOST=mysql        <span class="token punctuation">-</span> MYSQL_SERVICE_PORT=3306        <span class="token punctuation">-</span> MYSQL_SERVICE_DB_NAME=nacos_config        <span class="token punctuation">-</span> MYSQL_SERVICE_USER=root        <span class="token punctuation">-</span> MYSQL_SERVICE_PASSWORD=123765        <span class="token punctuation">-</span> MYSQL_DATABASE_NUM=1        <span class="token punctuation">-</span> MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8<span class="token important">&amp;connectTimeout=10000&amp;socketTimeout=30000</span>        <span class="token punctuation">-</span> JVM_XMS=256m        <span class="token punctuation">-</span> JVM_XMX=256m        <span class="token punctuation">-</span> JVM_XMN=256m        <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token string">"8002:8848"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/nacos/nacos2<span class="token punctuation">-</span>logs/<span class="token punctuation">:</span>/home/nacos/logs/            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/nacos/nacos2<span class="token punctuation">-</span>config<span class="token punctuation">:</span>/home/nacos/init.d/        <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> mysql        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token string">"9000:9000"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/nginx/nginx<span class="token punctuation">-</span>logs<span class="token punctuation">:</span>/var/log/nginx/            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/nginx/nginx<span class="token punctuation">-</span>config<span class="token punctuation">:</span>/etc/nginx/conf.d/            <span class="token punctuation">-</span> /nacos<span class="token punctuation">-</span>cluster/nginx/nginx.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf        <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> nacos1            <span class="token punctuation">-</span> nacos2            <span class="token punctuation">-</span> nacos3        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always        <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>          <span class="token key atrule">nproc</span><span class="token punctuation">:</span> <span class="token number">65535</span>          <span class="token key atrule">nofile</span><span class="token punctuation">:</span>            <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">65535</span>            <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">65535</span></code></pre></li><li><p>安装docker-compose并执行docker-compose.yml文件</p><pre class="language-none"><code class="language-none">安装：apt install docker-compose在主目录nacos-cluster目录下执行：docker-compose -f docker-compose.yml up -d</code></pre><p>通过<code>docker logs -f 容器名</code>，查看各容器运行情况<br>如果成功则浏览器访问：<code>http://宿主机ip:9000/nacos</code>，查看是否成功进入nacos登录页</p><img src="https://github.com/NicknamedCoco/Practice/raw/e04e5d52e7e66bdde13d9d7fe96435a5fbbb9d1f/Practice11/nacos%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.png" style="zoom: 50%;" / loading="lazy"></li><li><p>什么？你太懒了不想又是创建文件又是找sql文件？没关系，我就喜欢你这样的同学！<br>我已经将上面所有文件全部放到github上了，你只需要下载仓库中的nacos-cluster目录<br>拷贝到linux上，进入主目录直接执行：<code>docker-compose -f docker-compose.yml up -d</code><br>即可运行！还等什么？快去下载吧，<a href="https://github.com/NicknamedCoco/Practice/tree/main/Practice11">nacos集群搭建资料</a></p></li><li><p>以上就是配置的全部过程，下面是一些注意事项和命令</p><ul><li><p>注意：docker如果是挂载文件，一定要将该文件权限修改为666<br>最好是挂载目录，就不会出现宿主机文件修改后，容器内文件没有修改的情况<br>不改文件状态，只有容器重新启动，容器内的文件才会被重新加载。</p></li><li><p>注意：如果重新执行docker-compose文件，需要把<code>/nacos-cluster/mysql/data</code> 中的所有文件全部删除<br>当然其他目录中也会生成一些日志文件，以防万一可以一并删除。</p></li><li><p>注意：访问nacos网站是：<code>ip:端口号/nacos</code>，例如<code>http://xx.xx.xx.xx:8848/nacos</code><br>当nginx配置好后，ip地址，端口号改成nginx的，当然请求后还是需要加上/nacos。</p></li><li><p>停止所有容器：<code>docker stop $(docker ps -a -q)</code><br>重启容器：<code>docker restart 容器名称  //如果重启不了，杀死进程再重启</code></p></li><li><p>停止docker服务：<code>systemctl stop docker</code><br>开启docker服务：<code>systemctl start docker</code></p></li><li><p>查看所有端口信息：<code>netstat -anp</code><br>查看端口占用信息：<code>lsof -i:端口号</code><br>查看进程信息：<code>ps -ef | grep java</code></p></li><li><p>查看系统内存：<code>free -m</code></p></li><li><p>最后发现一个有意思的事，git上传不了空文件夹，我们可以通过命令为每个空文件夹<br>创建gitignore文件来占位，命令：<code>find . -type d -empty -exec touch &#123;&#125;/.gitignore \;</code><br>如果你从github上直接拷贝下来nacos-cluster目录，记得把挂载目录中的gitignore文件去除哦！！！</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习之案例与总结</title>
      <link href="2021/11/19/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A1%88%E4%BE%8B%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
      <url>2021/11/19/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A1%88%E4%BE%8B%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>8,9月份学习了ES6，webpack，Vue的内容，10,11月份在学微服务的内容，不能说学的有多好，<br>但大致都了解了一下，很多名词也不再陌生，当然，很多技术仅仅学习了使用，具体原理什么的<br>我暂时没有深入，因为现在的时间不允许，我还有很多其他要紧的事，现在的学习是为以后学习做个铺垫。</p><p>在未来，我会弥补自身基础不足，这是道心上的坎，操作系统，计算机网络，计算机组成，数据结构和算法<br>这些我都不会放弃，我从始至终都认为重要，但我没有时间，我必须先找到一份工作，才有机会沉淀。<br>学习Java上，同样也有很多重要的内容没有完成，多线程，JVM之类的，Linux什么的都没有好好学习。<br>有人问我想走前端还是后端，坦白说我也不太清楚，不过我觉得国外程序员都是两者都学，没有像国内划分明显<br>所以，我大概也是两者都学习，既然自己实在太菜，深度不够，只有拿广度来凑了，多学点，总没有坏处。</p><p>本篇博客主要是对之前微服务的学习做一个总结，复习Feign，nacos，sentinel，gateway，seata内容，<br>当然，eureka，rabbitMQ，Ribbon，Hystrix都大致了解使用了下，本案例更多使用alibaba组件。<br>案例描述：三个微服务，订单服务，账户服务，库存服务，用户下订单，调用订单服务接口，<br>订单服务创建订单，并调用账户服务进行扣款，库存服务扣减库存，最后如果一切顺利，订单服务更改订单状态<br>表示完成该订单，如果另外两个微服务失败，则数据回滚，这是典型的分布式事务场景。</p><p>下面是本篇博客索引</p><ul><li><a href="#a">案例框架搭建</a></li><li><a href="#b">增加业务</a></li><li><a href="#c">增加nacos</a></li><li><a href="#d">增加feign</a></li><li><a href="#e">增加sentinel</a></li><li><a href="#f">增加gateway</a></li><li><a href="#g">增加seata</a></li><li><a href="#h">案例中不完美的地方</a></li><li><a href="#i">案例资料</a></li></ul><blockquote><p><span id="a">案例框架搭建</span></p></blockquote><ul><li><p>创建父子模块</p><ul><li><p>父子模块</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/summary/1.png" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/summary/2.png" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/summary/3.png"  / loading="lazy"></li><li><p><strong>父模块的POM文件</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>world.keyi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringCloudDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>SpringCloudDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>ApiCommon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>OrderService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>AccountService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>StorageService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>GatewayService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>2.13.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>8.0.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.SR9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--        alibaba依赖版本是2.2.6，但是nacos最高只有2.2.0，所以会报错spring-cloud-alibaba-nacos-config版本找不到        我们需要自己指定版本号      --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mysql.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;druid.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mybatis.spring.boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;junit.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;lombok&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;log4j.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>OrderService模块POM文件</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SpringCloudDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>world.keyi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>OrderService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>OrderService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--去除jackson-dataformat-xml，否则降级方法会返回xml数据，而不是JSON数据--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>world.keyi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ApiCommon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mysql.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;druid.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mybatis.spring.boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>OrderService模块依赖相比AccountService模块，Storage模块只多了OpenFeign<br>所以另外两个模块依赖省略了</p></li><li><p><strong>ApiCommon模块POM文件</strong><br>本模块用来存放公共类或工具类</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>Gateway模块POM文件</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>搭建三个业务数据库<br>OrderServie，AccountService，StorageService三个模块分别对应三个数据库，下面是建库建表语句</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建order表</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> springcloud_order<span class="token keyword">USE</span> springcloud_order<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_order<span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>    user_id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>    product_id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'产品id'</span><span class="token punctuation">,</span>    COUNT <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'数量'</span><span class="token punctuation">,</span>    money <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'金额'</span><span class="token punctuation">,</span>    <span class="token keyword">STATUS</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单状态：0创建中，1已完结'</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">#创建account表</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> springcloud_account<span class="token keyword">USE</span> springcloud_account<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_account<span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>    user_id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>    total <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'总额度'</span><span class="token punctuation">,</span>    used <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'已用额度'</span><span class="token punctuation">,</span>    residue <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'剩余可用额度'</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_account<span class="token punctuation">(</span>id<span class="token punctuation">,</span> user_id<span class="token punctuation">,</span> total<span class="token punctuation">,</span> used<span class="token punctuation">,</span> residue<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#创建storage表</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> springcloud_storage<span class="token keyword">USE</span> springcloud_storage<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_storage<span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>    product_id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'产品id'</span><span class="token punctuation">,</span>    total <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'总库存'</span><span class="token punctuation">,</span>    used <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'已用库存'</span><span class="token punctuation">,</span>    residue <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'剩余库存'</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_storage<span class="token punctuation">(</span>id<span class="token punctuation">,</span> product_id<span class="token punctuation">,</span> total<span class="token punctuation">,</span> used<span class="token punctuation">,</span> residue<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>seata所需要的的数据库和表语句放在下面</p></li><li><p>配置三个微服务的配置文件<br>暂时先贴上三个和业务相关的配置文件，不引入任何微服务组件配置</p><ul><li><p>OrderService</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2346</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123765</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/springcloud_order<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;useSSL=false&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> mapper/<span class="token important">*.xml</span><span class="token comment">#在resources资源目录下创建mapper目录</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre></li><li><p>AccountService</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2345</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123765</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/springcloud_account<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;useSSL=false&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> mapper/<span class="token important">*.xml</span><span class="token comment">#在resources资源目录下创建mapper目录</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre></li><li><p>StorageService</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2347</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123765</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/springcloud_storage<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;useSSL=false&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>除了数据库URL和端口号不同，其他都一样。</p></li></ul></li></ul><blockquote><p><span id="b">增加业务</span></p></blockquote><p>上面我们创建了父子模块，增加了依赖，配置了基本的配置文件，下面我们编写基本业务</p><ul><li><p>OrderService微服务</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/summary/4.png" style="zoom:80%;" / loading="lazy"><ul><li><p>Order</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>     <span class="token comment">//用户id</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> productId<span class="token punctuation">;</span>  <span class="token comment">//产品id</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> count<span class="token punctuation">;</span>       <span class="token comment">//数量</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> money<span class="token punctuation">;</span>       <span class="token comment">//金额</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> status<span class="token punctuation">;</span>      <span class="token comment">//订单状态：0创建中，1已完结</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>OrderController</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//以上略</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>      <span class="token comment">//CommonResult是ApiCommon服务公共类</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span>orderService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>OrderService及OrderServiceImpl</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">OrderDao</span> orderDao<span class="token punctuation">;</span>    <span class="token comment">/*    * 案例主方法：增加订单--->扣减账户余额--->扣减库存--->更改订单状态    * */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        orderDao<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*           这里需要使用feign调用账户模块，库存模块         */</span>        <span class="token class-name">Integer</span> result <span class="token operator">=</span> orderDao<span class="token punctuation">.</span><span class="token function">updateOrderStatus</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token comment">//若修改状态成功，则返回1，否则为0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>OrderDao及OrderMapper.xml</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderDao</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> <span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> <span class="token function">updateOrderStatus</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.dao.OrderDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addOrder<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.bean.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into t_order(user_id,product_id,count,money,status)        values($&#123;userId&#125;,$&#123;productId&#125;,$&#123;count&#125;,$&#123;money&#125;,$&#123;status&#125;)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateOrderStatus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update t_order set status=$&#123;status&#125; where user_id=$&#123;userId&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>AccountService微服务</p><ul><li><p>Account</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>     <span class="token comment">//用户id</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> total<span class="token punctuation">;</span>       <span class="token comment">//总额度</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> used<span class="token punctuation">;</span>        <span class="token comment">//已用额度</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> residue<span class="token punctuation">;</span>     <span class="token comment">//剩余可用额度</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>AccountController</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> accountService<span class="token punctuation">.</span><span class="token function">getAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">reduceAccount</span><span class="token punctuation">(</span>      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span>      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>accountService<span class="token punctuation">.</span><span class="token function">reduceAccount</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>AccountService及AccountServiceImpl</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> <span class="token function">getAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> <span class="token function">reduceAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AccountDao</span> accountDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> <span class="token function">getAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">getAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">reduceAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">reduceAccount</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>AccountDao及AccountMapper.xml</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> <span class="token function">getAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">reduceAccount</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.dao.AccountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAccountList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.bean.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from t_account;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reduceAccount<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update t_account set residue=residue-$&#123;money&#125;,used=used+$&#123;money&#125; where user_id=$&#123;userId&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>StorageService微服务</p><ul><li><p>Storage</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> productId<span class="token punctuation">;</span>      <span class="token comment">//产品id</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> total<span class="token punctuation">;</span>           <span class="token comment">//总库存</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> used<span class="token punctuation">;</span>            <span class="token comment">//已用库存</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> residue<span class="token punctuation">;</span>         <span class="token comment">//剩余库存</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>StorageController</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/storage"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StorageController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StorageService</span> storageService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">reduceStorage</span><span class="token punctuation">(</span>      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span>      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span>storageService<span class="token punctuation">.</span><span class="token function">reduceStorage</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>StorageService及StorageServiceImpl</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> <span class="token function">reduceStorage</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">String</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StorageServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StorageService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StorageDao</span> storageDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">reduceStorage</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">String</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> storageDao<span class="token punctuation">.</span><span class="token function">reduceStorage</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>StorageDao及StorageMapper.xml</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageDao</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> <span class="token function">reduceStorage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.dao.StorageDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reduceStorage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update t_storage set used=used+$&#123;count&#125;,residue=residue-$&#123;count&#125; where product_id=$&#123;productId&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><blockquote><p><span id="c">增加nacos</span></p></blockquote><ul><li><p>导入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--nacos服务注册--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--nacos热部署--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>有一点你可能有疑问，为什么在父模块中需要额外nacos依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我在配置seata的时候，百度到seata依赖：<code>spring-cloud-starter-alibaba-seata</code>最好是2.2.1及以上版本<br>所以我需要将：<code>spring-cloud-alibaba-dependencies</code>调整到2.2.1版本，但是刷新maven依赖时报错<br>找不到nacos-config依赖，原因是nacos-config最高只有2.2.0版本，又考虑到alibaba，cloud，boot三者<br>需要保持一致，所以将alibaba依赖版本号更改成2.2.6并且额外配置nacos-config版本号为2.2.0.</p></li><li><p>在微服务入口类上增加@EnableDiscoveryClient注解</p></li><li><p>在微服务配置文件中配置nacos<br>没使用nacos之前微服务配置文件是application.yaml，引入nacos后，为了实现热部署，需要将配置文件<br>改成bootstrap.yaml，它会先微服务启动时，去nacos控制台上拉取相应的配置信息。<br>下面是OrderService微服务的bootstrap.xml，另外两个微服务的naocs配置一样</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2346</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123765</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/springcloud_order<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;useSSL=false&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> OrderService  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 47.98.138.53<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> a3a5fee0<span class="token punctuation">-</span>15a2<span class="token punctuation">-</span>4023<span class="token punctuation">-</span>894c<span class="token punctuation">-</span>34fbde0f5138        <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 47.98.138.53<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> a3a5fee0<span class="token punctuation">-</span>15a2<span class="token punctuation">-</span>4023<span class="token punctuation">-</span>894c<span class="token punctuation">-</span>34fbde0f5138</code></pre></li><li><p>在nacos控制台配置中心创建好namespace和微服务配置文件<br>配置文件的dataId规则如下：<br><code>#dataId=$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code><br>下面是OrderService微服务在nacos上配置文件的内容，OrderService-dev.yaml</p><pre class="language-none"><code class="language-none">info: 一只穿云箭</code></pre></li><li><p>测试nacos上的配置文件，在OrderController类上增加@RefreshScope注解<br>下面是更新后的OrderController</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;info&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/nacos"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">nacosTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span>orderService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上就是配置nacos的全部内容，其他两个微服务也是如此</p></li></ul><blockquote><p><span id="d">增加feign</span></p></blockquote><p>三个业务微服务中，是OrderService调用另外两个微服务，所以只需要在OrderService中配置feign就好</p><ul><li><p>导入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在微服务的入口类上增加@EnableFeignClients注解</p></li><li><p>在微服务配置文件中增加feign的配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>  <span class="token comment">#全局设置为default,可以填其他微服务名称</span>        <span class="token comment"># ribbon的超时时间，默认等待1秒，得不到爆错，所以重新设置超时时间</span>        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token comment"># 指的是建立连接所用的时间，适用于网路状况正常情况下，两端连接所用的时间</span>        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>   <span class="token comment"># 指的是建立连接后从服务器读取到可用资源所用的时间</span>        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> full <span class="token comment">#日志级别</span></code></pre></li><li><p>创建另外两个微服务的feign接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"AccountService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountServiceFeign</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">reduceAccount</span><span class="token punctuation">(</span>      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span>       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> money    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"StorageService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/storage"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageServiceFeign</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">reduceStorage</span><span class="token punctuation">(</span>      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span>       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> count    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>在OrderServiceImpl中调用另外两个微服务的接口方法<br>底层是feign创建这两个接口的实现类，来看看更新后的OrderServiceImpl</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">OrderDao</span> orderDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AccountServiceFeign</span> accountServiceFeign<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StorageServiceFeign</span> storageServiceFeign<span class="token punctuation">;</span>    <span class="token comment">/*    * 案例主方法：增加订单--->扣减账户余额--->扣减库存--->更改订单状态    * */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        orderDao<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*            feign接口不能有异常处理，需要错误需要暴露在这里，不然seata任务没有报错，不回滚数据库         */</span>        accountServiceFeign<span class="token punctuation">.</span><span class="token function">reduceAccount</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>order<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        storageServiceFeign<span class="token punctuation">.</span><span class="token function">reduceStorage</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>order<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> result <span class="token operator">=</span> orderDao<span class="token punctuation">.</span><span class="token function">updateOrderStatus</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token comment">//若修改状态成功，则返回1，否则为0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上就是配置feign的全部内容</p></li></ul><blockquote><p><span id="e">增加sentinel</span></p></blockquote><p>sentinel分为核心库和控制台dashboard，sentinel控制台独立运行，核心库则被整合进微服务，<br>我们在sentinel控制台配置的规则数据，会被发送到sentinel核心库中，sentinel核心库运行于内存中，<br>接收的规则数据立即生效。</p><p>值得注意的是：sentinel核心库与微服务整合在一起，但也开启了另一个端口，用来接收sentinel控制台规则数据<br>sentinel核心库，sentinel控制台，微服务三个最好在同一台机器上，否则可能sentinel监控不了微服务，<br>只是我推测，因为控制台在阿里云上时，监控不了我的微服务。</p><ul><li><p>导入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--去除jackson-dataformat-xml，否则降级方法会返回xml数据，而不是JSON数据--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在微服务配置文件中配置sentinel</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token comment">#sentinel-1</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span>  <span class="token comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描，直到找到未被占用的端口</span>        <span class="token comment">#这里的port和clientIp指的是sentinel核心库，接收sentinel dashboard的数据并将规则数据注册到sentinel进程中</span>        <span class="token key atrule">clientIp</span><span class="token punctuation">:</span> localhost <span class="token comment">#sentinel-2</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#开启actuator对sentinel的支持</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token comment">#sentinel与feign整合需要开启</span>  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>上述就是sentinel的配置，暴露微服务端点，配置sentinel控制台地址，开启feign对sentinel的支持<br>之前已经展示的配置已省略</p></li><li><p>为OrderController接口配置限流和降级方法<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/summary/5.png" loading="lazy"></p><ul><li><p>OrderController更新后</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;info&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/nacos"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> <span class="token string">"nacos"</span><span class="token punctuation">,</span>            blockHandlerClass <span class="token operator">=</span> <span class="token class-name">OrderDegradeAndException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"info_degrade"</span><span class="token punctuation">,</span>            fallbackClass <span class="token operator">=</span> <span class="token class-name">OrderDegradeAndException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"info_exception"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">nacosTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> <span class="token string">"create"</span><span class="token punctuation">,</span>            blockHandlerClass <span class="token operator">=</span> <span class="token class-name">OrderDegradeAndException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"create_degrade"</span><span class="token punctuation">,</span>            fallbackClass <span class="token operator">=</span> <span class="token class-name">OrderDegradeAndException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"create_exception"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">,</span>orderService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>OrderDegradeAndException</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDegradeAndException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//对指定方法配置熔断降级方法和异常处理方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">create_degrade</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"OrderController--create方法被熔断限流："</span><span class="token operator">+</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"error:"</span><span class="token operator">+</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">create_exception</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"OrderController--create方法出现异常："</span><span class="token operator">+</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"error:"</span><span class="token operator">+</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">info_degrade</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"OrderController--info方法被熔断限流："</span><span class="token operator">+</span>exception<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"info方法被熔断限流："</span><span class="token operator">+</span>exception<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">info_exception</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"OrderController--info方法出现异常："</span><span class="token operator">+</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"info方法出现异常："</span><span class="token operator">+</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//全局异常处理</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">global_exception</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"OrderController--create方法出现异常："</span><span class="token operator">+</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"error:"</span><span class="token operator">+</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>注意：随着后来的认识，blockHandler指定的方法本以为专门处理限流，降级，<br>fallback指定的方法本以为是专门处理接口处理异常的情况，其实并不对，<br>@SentinelResource注解中blockHandler指定的方法处理的是限流，而fallback指定的方法处理异常，<br>熔断降级的方法，接口熔断后或发生异常后，执行fallback方法，接口被限流后，执行blockHandler方法</p></li><li><p>为feign接口配置降级方法<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/summary/6.png" loading="lazy"><br>ps:interceptor中是seata的配置</p><ul><li><p>AccountServiceFeign更新后<br><code>@FeignClient(value=&quot;AccountService&quot;,fallbackFactory=AccountServiceFallback.class)</code></p><p>增加fallbackFactory配置项</p></li><li><p>AccountServiceFallback</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceFallback</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccountServiceFeign</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">AccountServiceFeign</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceFeign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">reduceAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"AccountServiceFeign报错："</span><span class="token operator">+</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"error:"</span><span class="token operator">+</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>StorageServiceFeign也是同样的配置，注意，使用seata时，不能为feign配置降级方法，<br>不然seata认为feign接口并没有报错，导致另外两个微服务数据库不回滚！！！</p></li></ul><blockquote><p><span id="f">增加gateway</span></p></blockquote><p>Gateway微服务则是独立的微服务了，一般作为业务网关，做权限验证，请求负载均衡，熔断限流等等<br>Gateway同样需要注册进nacos，所以也需要nacos依赖，具体依赖上面已经给出。<br>下面是gateway的配置文件，bootstrap.yaml</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2348</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> GatewayService  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 47.98.138.53<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> a3a5fee0<span class="token punctuation">-</span>15a2<span class="token punctuation">-</span>4023<span class="token punctuation">-</span>894c<span class="token punctuation">-</span>34fbde0f5138      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 47.98.138.53<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> a3a5fee0<span class="token punctuation">-</span>15a2<span class="token punctuation">-</span>4023<span class="token punctuation">-</span>894c<span class="token punctuation">-</span>34fbde0f5138    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> OrderService <span class="token comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span><span class="token comment">#          uri: http://localhost:8001   #匹配后提供服务的路由地址</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//OrderService          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/order/<span class="token important">**</span>   <span class="token comment">#断言,路径相匹配的进行路由</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> AccountService<span class="token comment">#          uri: http://localhost:8001</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//AccountService   <span class="token comment">#使用服务名进行路由，需要开启discovery.locator.enabled=true</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/account/<span class="token important">**</span>   <span class="token comment">#断言,路径相匹配的进行路由</span>            <span class="token punctuation">-</span> After=2021<span class="token punctuation">-</span>10<span class="token punctuation">-</span>26T22<span class="token punctuation">:</span>48<span class="token punctuation">:</span>16.597+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> AddRequestHeader=Truth<span class="token punctuation">,</span>zhangsan is freaking awesome<span class="token tag">!</span>      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span>  <span class="token comment"># 这里是默认路由作用每一个路由</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>      <span class="token comment"># 注意：路由实例过滤器(配置在路由里面),defaultFilter,globalFilter，这三个路由器是根据order排序的</span>      <span class="token comment"># 如果order值相同，则defaultFilter>路由实例过滤器>globalFilter</span></code></pre><p>Gateway微服务的路由规则可以通过配置实现，还可以自定义过滤器，这里偷懒没有配置了</p><blockquote><p><span id="g">增加seata</span></p></blockquote><p>seata是解决分布式事务的组件，其中三个重要的角色，TC,TM,RM，TC作为seata-server服务端<br>TM,RM作为seata客户端被整合进微服务中，seata有几种分布式解决方案模型，这里使用是默认的AT模式<br>让我们来看看在案例中如何配置seata</p><ul><li><p>seata-server(TC)的配置</p><ul><li><p>下载好seata-server服务端，服务端是独立运行的，点击下载<a href="https://github.com/seata/seata/releases">seata-server</a></p></li><li><p>创建seata-server需要使用的数据库(数据库名任意，本案例数据库名是springcloud_seata，之后在配置文件中要指定)，<br>下面是建表sql语句，ps：seata-server有不同的数据存储模式，如果模式是db，则需要建数据库，当然大多都是建数据库</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ---------------------- The script used when storeMode is 'db' ----------------------</span><span class="token comment">-- the table to store GlobalSession data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>global_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>                       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>            <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>                    <span class="token keyword">TINYINT</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_id<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_service_group<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_name<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>timeout<span class="token punctuation">`</span>                   <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>begin_time<span class="token punctuation">`</span>                <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>                <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>              <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_gmt_modified_status<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_transaction_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment">-- the table to store BranchSession data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>branch_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>         <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>               <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>    <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_group_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_type<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>            <span class="token keyword">TINYINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>client_id<span class="token punctuation">`</span>         <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>        <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>      <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_xid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment">-- the table to store lock data</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>lock_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>row_key<span class="token punctuation">`</span>        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>      <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>    <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span>     <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pk<span class="token punctuation">`</span>             <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>     <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>   <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>row_key<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_branch_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span></code></pre></li><li><p>上述提到的存储模式，可以在<code>seata-server-1.4.2/conf/file.conf</code>文件中修改，现在我们需要修改该文件<br>修改后文件如下，ps：如果你打算将seata的配置放到nacos配置中心上，那么可以不修改该文件</p><pre class="language-none"><code class="language-none">## transaction log store, only used in seata-serverstore &#123;  ## store mode: file、db、redis  mode &#x3D; &quot;db&quot;  ## rsa decryption public key  publicKey &#x3D; &quot;&quot;   ## database store property  db &#123;    datasource &#x3D; &quot;druid&quot;    ## mysql&#x2F;oracle&#x2F;postgresql&#x2F;h2&#x2F;oceanbase etc.    dbType &#x3D; &quot;mysql&quot;    driverClassName &#x3D; &quot;com.mysql.cj.jdbc.Driver&quot;    ## if using mysql to store the data, recommend add rewriteBatchedStatements&#x3D;true in jdbc connection param    url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;springcloud_seata?serverTimezone&#x3D;GMT&amp;useSSL&#x3D;false&amp;characterEncoding&#x3D;utf-8&quot;    user &#x3D; &quot;root&quot;    password &#x3D; &quot;123765&quot;    minConn &#x3D; 5    maxConn &#x3D; 100    globalTable &#x3D; &quot;global_table&quot;    branchTable &#x3D; &quot;branch_table&quot;    lockTable &#x3D; &quot;lock_table&quot;    queryLimit &#x3D; 100    maxWait &#x3D; 5000  &#125;&#125;</code></pre></li><li><p>file.conf文件中内容是seata-server所必须的，我们也可以将该文件中的内容放在配置中心上，<br>你需要修改的是registry.conf文件，与file.conf文件是同级目录。下面是修改后的文件内容</p><pre class="language-java" data-language="java"><code class="language-java">registry <span class="token punctuation">&#123;</span>  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa  type <span class="token operator">=</span> <span class="token string">"nacos"</span>  nacos <span class="token punctuation">&#123;</span>    application <span class="token operator">=</span> <span class="token string">"SeataServer"</span>#TC服务在nacos上的服务名称    serverAddr <span class="token operator">=</span> <span class="token string">"47.98.138.53:8848"</span>#nacos地址    group <span class="token operator">=</span> <span class="token string">"DEFAULT_GROUP"</span>#TC服务所在组    namespace <span class="token operator">=</span> <span class="token string">"a3a5fee0-15a2-4023-894c-34fbde0f5138"</span>    cluster <span class="token operator">=</span> <span class="token string">"HZ"</span>#TC服务所在集群，client端需要配置一致的映射，重要！    username <span class="token operator">=</span> <span class="token string">"nacos"</span>    password <span class="token operator">=</span> <span class="token string">"nacos"</span>  <span class="token punctuation">&#125;</span>  file <span class="token punctuation">&#123;</span>    #改成nacos后，file<span class="token punctuation">.</span>conf就不加载了，之前配置的数据库信息也就无效了，我们需要在nacos上配置数据库信息    name <span class="token operator">=</span> <span class="token string">"file.conf"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>config <span class="token punctuation">&#123;</span>#TC服务的配置文件在nacos上的位置  # file、nacos 、apollo、zk、consul、etcd3  type <span class="token operator">=</span> <span class="token string">"nacos"</span>  nacos <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"47.98.138.53:8848"</span>    namespace <span class="token operator">=</span> <span class="token string">"a3a5fee0-15a2-4023-894c-34fbde0f5138"</span>    group <span class="token operator">=</span> <span class="token string">"SEATA_GROUP"</span>#这里是TC的配置文件的组，可随意    username <span class="token operator">=</span> <span class="token string">"nacos"</span>    password <span class="token operator">=</span> <span class="token string">"nacos"</span>    dataId <span class="token operator">=</span> <span class="token string">"seataServer.properties"</span>#TC的配置文件名称，nacos配置中心需要同样配置  <span class="token punctuation">&#125;</span>   file <span class="token punctuation">&#123;</span>     name <span class="token operator">=</span> <span class="token string">"file.conf"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>其实就是配置seata-server在nacos上的一些信息。</p></li><li><p>上面配置中，我们将seata-server需要的信息，本来是放在file.conf的信息放在了nacos配置文件上<br>配置文件名为：seataServer.properties，所以我们现在需要在nacos上创建该配置文件<br>并添加seata-server需要的内容，该文件内容如下：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 数据存储方式，db代表数据库</span><span class="token attr-name">store.mode</span><span class="token punctuation">=</span><span class="token attr-value">db</span><span class="token attr-name">store.db.datasource</span><span class="token punctuation">=</span><span class="token attr-value">druid</span><span class="token attr-name">store.db.dbType</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token attr-name">store.db.driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">store.db.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/springcloud_seata?serverTimezone=GMT&amp;useSSL=false&amp;characterEncoding=utf-8</span><span class="token attr-name">store.db.user</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">store.db.password</span><span class="token punctuation">=</span><span class="token attr-value">123765</span><span class="token attr-name">store.db.minConn</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token attr-name">store.db.maxConn</span><span class="token punctuation">=</span><span class="token attr-value">30</span><span class="token attr-name">store.db.globalTable</span><span class="token punctuation">=</span><span class="token attr-value">global_table</span><span class="token attr-name">store.db.branchTable</span><span class="token punctuation">=</span><span class="token attr-value">branch_table</span><span class="token attr-name">store.db.queryLimit</span><span class="token punctuation">=</span><span class="token attr-value">100</span><span class="token attr-name">store.db.lockTable</span><span class="token punctuation">=</span><span class="token attr-value">lock_table</span><span class="token attr-name">store.db.maxWait</span><span class="token punctuation">=</span><span class="token attr-value">5000</span><span class="token comment"># 事务、日志等配置</span><span class="token attr-name">server.recovery.committingRetryPeriod</span><span class="token punctuation">=</span><span class="token attr-value">1000</span><span class="token attr-name">server.recovery.asynCommittingRetryPeriod</span><span class="token punctuation">=</span><span class="token attr-value">1000</span><span class="token attr-name">server.recovery.rollbackingRetryPeriod</span><span class="token punctuation">=</span><span class="token attr-value">1000</span><span class="token attr-name">server.recovery.timeoutRetryPeriod</span><span class="token punctuation">=</span><span class="token attr-value">1000</span><span class="token attr-name">server.maxCommitRetryTimeout</span><span class="token punctuation">=</span><span class="token attr-value">-1</span><span class="token attr-name">server.maxRollbackRetryTimeout</span><span class="token punctuation">=</span><span class="token attr-value">-1</span><span class="token attr-name">server.rollbackRetryTimeoutUnlockEnable</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">server.undo.logSaveDays</span><span class="token punctuation">=</span><span class="token attr-value">7</span><span class="token attr-name">server.undo.logDeletePeriod</span><span class="token punctuation">=</span><span class="token attr-value">86400000</span><span class="token comment"># 客户端与服务端传输方式</span><span class="token attr-name">transport.serialization</span><span class="token punctuation">=</span><span class="token attr-value">seata</span><span class="token attr-name">transport.compressor</span><span class="token punctuation">=</span><span class="token attr-value">none</span><span class="token comment"># 关闭metrics功能，提高性能</span><span class="token attr-name">metrics.enabled</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">metrics.registryType</span><span class="token punctuation">=</span><span class="token attr-value">compact</span><span class="token attr-name">metrics.exporterList</span><span class="token punctuation">=</span><span class="token attr-value">prometheus</span><span class="token attr-name">metrics.exporterPrometheusPort</span><span class="token punctuation">=</span><span class="token attr-value">9898</span></code></pre><p>之后只需双击<code>seata-server-1.4.2/bin/seata-server.bat</code>即可启动seata-server<br>以上就是seata服务端配置的全部过程</p></li></ul></li><li><p>seata客户端(TM,RM)的配置</p><p>seata客户端已经整合进了微服务，三个业务微服务都需要进行seata客户端的配置</p><ul><li><p>导入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>因为alibaba-seata依赖中seata依赖版本是1.3，我们最好使用最新的seata版本，所以将内部自带的<br>依赖排除，添加最新的seata依赖</p></li><li><p>在微服务的入口类上添加@EnableAutoDataSourceProxy注解，该注解用于代理druid的数据库连接池<br>注意，因为seata版本不同，会有不同的配置，使用1.4.2最新版本，或者比较新版本需要这个注解<br>使用版本比较低的seata，需要使用<code>@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</code></p></li><li><p>因为seata默认使用AT模式，需要我们在各个微服务的数据库中增加undo_log表，用于存储seataAt模式下的前后镜像<br>创建表的sql语句如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>     <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'branch transaction id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>           <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'global transaction id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>context<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'undo_log context,such as serialization'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>rollback_info<span class="token punctuation">`</span> LONGraw     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'rollback info'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_status<span class="token punctuation">`</span>    <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'0:normal status,1:defense status'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_created<span class="token punctuation">`</span>   <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'create datetime'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_modified<span class="token punctuation">`</span>  <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'modify datetime'</span><span class="token punctuation">,</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>ux_undo_log<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">'AT transaction mode undo table'</span><span class="token punctuation">;</span></code></pre></li><li><p>接下来在各个微服务配置文件中配置Seata</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># seata的配置，用于找到seata-server(TC)的服务实例和配置文件信息</span><span class="token key atrule">seata</span><span class="token punctuation">:</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#开启seata</span>  <span class="token key atrule">enable-auto-data-source-proxy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#seata自动代理数据源，新版本有的</span>  <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>demo  <span class="token comment">#配置事务组，事务组用于映射TC服务的集群名称</span>  <span class="token key atrule">data-source-proxy-mode</span><span class="token punctuation">:</span> AT    <span class="token comment">#配置seata模式</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>     <span class="token comment">#配置的是TC服务的配置文件在nacos上的地址TC服务的配置中心</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 47.98.138.53<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP    <span class="token comment">#这里的组与registry.conf中config一致</span>      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> a3a5fee0<span class="token punctuation">-</span>15a2<span class="token punctuation">-</span>4023<span class="token punctuation">-</span>894c<span class="token punctuation">-</span>34fbde0f5138      <span class="token key atrule">dataId</span><span class="token punctuation">:</span> client.properties  <span class="token comment">#这里是nacos的配置文件，本应该是seataServer.properties</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos          <span class="token comment">#但我这里做了一个抽离成新的配置文件，这两个文件内容可以放一起</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">registry</span><span class="token punctuation">:</span>    <span class="token comment">#配置的是TC服务在nacos上的地址，TC服务的注册中心</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">application</span><span class="token punctuation">:</span> SeataServer    <span class="token comment">#TC服务名称</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 47.98.138.53<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP    <span class="token comment">#TC所在的组，需要与业务微服务同组</span>      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> a3a5fee0<span class="token punctuation">-</span>15a2<span class="token punctuation">-</span>4023<span class="token punctuation">-</span>894c<span class="token punctuation">-</span>34fbde0f5138      <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos      <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos  <span class="token key atrule">service</span><span class="token punctuation">:</span>    <span class="token key atrule">vgroup-mapping</span><span class="token punctuation">:</span>      <span class="token key atrule">seata-demo</span><span class="token punctuation">:</span> HZ    <span class="token comment"># 事务组与nacos中集群的映射关系，集群指的是TC所在的集群</span>    <span class="token key atrule">disable-global-transaction</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre></li><li><p>上面提到了client.properties，这个文件中的内容可以放在之前配置的seataServer.properties文件中<br>这里做了一个拆分，下面是client.properties中的内容</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 事务组映射关系</span><span class="token attr-name">service.vgroupMapping.seata-demo</span><span class="token punctuation">=</span><span class="token attr-value">HZ</span>    <span class="token attr-name">service.enableDegrade</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">service.disableGlobalTransaction</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment"># 与TC服务的通信配置</span><span class="token attr-name">transport.type</span><span class="token punctuation">=</span><span class="token attr-value">TCP</span><span class="token attr-name">transport.server</span><span class="token punctuation">=</span><span class="token attr-value">NIO</span><span class="token attr-name">transport.heartbeat</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">transport.enableClientBatchSendRequest</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">transport.threadFactory.bossThreadPrefix</span><span class="token punctuation">=</span><span class="token attr-value">NettyBoss</span><span class="token attr-name">transport.threadFactory.workerThreadPrefix</span><span class="token punctuation">=</span><span class="token attr-value">NettyServerNIOWorker</span><span class="token attr-name">transport.threadFactory.serverExecutorThreadPrefix</span><span class="token punctuation">=</span><span class="token attr-value">NettyServerBizHandler</span><span class="token attr-name">transport.threadFactory.shareBossWorker</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">transport.threadFactory.clientSelectorThreadPrefix</span><span class="token punctuation">=</span><span class="token attr-value">NettyClientSelector</span><span class="token attr-name">transport.threadFactory.clientSelectorThreadSize</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">transport.threadFactory.clientWorkerThreadPrefix</span><span class="token punctuation">=</span><span class="token attr-value">NettyClientWorkerThread</span><span class="token attr-name">transport.threadFactory.bossThreadSize</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">transport.threadFactory.workerThreadSize</span><span class="token punctuation">=</span><span class="token attr-value">default</span><span class="token attr-name">transport.shutdown.wait</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span class="token comment"># RM配置</span><span class="token attr-name">client.rm.asyncCommitBufferLimit</span><span class="token punctuation">=</span><span class="token attr-value">10000</span><span class="token attr-name">client.rm.lock.retryInterval</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token attr-name">client.rm.lock.retryTimes</span><span class="token punctuation">=</span><span class="token attr-value">30</span><span class="token attr-name">client.rm.lock.retryPolicyBranchRollbackOnConflict</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">client.rm.reportRetryCount</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token attr-name">client.rm.tableMetaCheckEnable</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">client.rm.tableMetaCheckerInterval</span><span class="token punctuation">=</span><span class="token attr-value">60000</span><span class="token attr-name">client.rm.sqlParserType</span><span class="token punctuation">=</span><span class="token attr-value">druid</span><span class="token attr-name">client.rm.reportSuccessEnable</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">client.rm.sagaBranchRegisterEnable</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment"># TM配置</span><span class="token attr-name">client.tm.commitRetryCount</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token attr-name">client.tm.rollbackRetryCount</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token attr-name">client.tm.defaultGlobalTransactionTimeout</span><span class="token punctuation">=</span><span class="token attr-value">60000</span><span class="token attr-name">client.tm.degradeCheck</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">client.tm.degradeCheckAllowTimes</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token attr-name">client.tm.degradeCheckPeriod</span><span class="token punctuation">=</span><span class="token attr-value">2000</span>    <span class="token comment"># undo日志配置</span><span class="token attr-name">client.undo.dataValidation</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">client.undo.logSerialization</span><span class="token punctuation">=</span><span class="token attr-value">jackson</span><span class="token attr-name">client.undo.onlyCareUpdateColumns</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">client.undo.logTable</span><span class="token punctuation">=</span><span class="token attr-value">undo_log</span><span class="token attr-name">client.undo.compress.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">client.undo.compress.type</span><span class="token punctuation">=</span><span class="token attr-value">zip</span><span class="token attr-name">client.undo.compress.threshold</span><span class="token punctuation">=</span><span class="token attr-value">64k</span><span class="token attr-name">client.log.exceptionRate</span><span class="token punctuation">=</span><span class="token attr-value">100</span></code></pre><p>这里有个特别重要的配置：service.vgroupMapping.seata-demo=HZ<br>seata-demo是随意取的TC的事务组名，HZ则表示TC服务在nacos上的集群名称<br>我们不仅要在nacos配置文件上配置事务组与TC服务集群名称的映射，还要在我们微服务上，也就是seata客户端上配置映射</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>demo<span class="token key atrule">service</span><span class="token punctuation">:</span>    <span class="token key atrule">vgroup-mapping</span><span class="token punctuation">:</span>      <span class="token key atrule">seata-demo</span><span class="token punctuation">:</span> HZ    <span class="token comment"># 事务组与nacos中集群的映射关系，集群指的是TC所在的集群</span></code></pre><p>我们还需要seata-server的registry.conf文件中registry的cluster的值和微服务上配置文件的值一致<br>registry.conf中是TC集群名称，nacos配置文件上配置是事务组和集群名称，微服务配置的是事务组和集群名称<br>以上就是seata客户端的配置</p></li></ul></li><li><p>seata一些需要注意的地方</p><ul><li><p>seata1.4.2之后，需要回滚的表中日期类型不能使用datetime，可以使用timestamp</p></li><li><p>当使用@globalTransactional注解开启一个TM全局事务时，如果内部使用feign调用其他微服务，<br>则当调用失败时，应该直接报错，而不是进入熔断降级方法，不然seata认为并没有报错，从而不回滚<br>换句话说，使用seata时，内部的feign不能配置降级异常处理方法，报错要上报到TM方法中</p></li><li><p>还记得在sentinel为feign接口配置熔断降级的时候，feign包下有个interceptor包吗，这里放的是feign<br>的拦截器，有些情况下，或许是seata版本不同，或许是在某个特定场景下，会出现微服务数据库不回滚<br>这是因为AT模式中全局锁XID没有传递到其他微服务中，需要我们配置feign拦截器在请求时添加上xid<br>下面是feign的拦截器类：FeignInterceptor</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">RequestInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> template<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//解决seata的xid未传递</span>        <span class="token class-name">String</span> xid <span class="token operator">=</span> <span class="token class-name">RootContext</span><span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"feign传递分布式事务xid：&#123;&#125;"</span><span class="token punctuation">,</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span>            template<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">RootContext</span><span class="token punctuation">.</span>KEY_XID<span class="token punctuation">,</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然后在feign注解上添加configuration选项，例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"AccountService"</span>        <span class="token comment">/*,configuration = FeignInterceptor.class*/</span>             <span class="token comment">//用于传递xid的配置，对seata无影响，暂时还不知道作用</span>        <span class="token comment">/*,fallbackFactory = AccountServiceFallback.class*/</span>     <span class="token comment">//异常处理对seata有影响</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountServiceFeign</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">reduceAccount</span><span class="token punctuation">(</span>      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span>       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> money  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">    因为本案例中并没有出现xid不传递现象，所以无需配置feign拦截器  - 有些人说seata事务不回滚是因为mybatis使用了数据库主键自增导致的，我们执行sql语句时  需要自己设置数据的id，不能使用数据库自增，但是我的案例没有这样的问题，可能还是某个版本的缘故  我也不清楚，或者是别人自己本身的原因，或者是seata模式不同的原因。</code></pre></li></ul></li><li><p>一些博客</p><ul><li><a href="https://blog.csdn.net/zhang18024666607/article/details/113118599">seata 1.4安装与配置</a></li><li><a href="https://blog.csdn.net/scientificCommunity/article/details/107290752">seata源码分析之全局事务的开启跟xid的传递</a></li><li><a href="https://blog.csdn.net/qq853632587/article/details/111644295">Seata 1.4.0 + nacos配置和使用，超详细</a></li><li><a href="https://blog.csdn.net/qq_18432653/article/details/109612235">Spring Boot、Spring Cloud与Spring Cloud Alibaba版本对应关系</a></li><li><a href="https://blog.csdn.net/lwd18175239125/article/details/119040005">springboot，springCloud，springCloudAlibaba各版本之间的对应关系</a></li></ul></li></ul><blockquote><p><span id="h">案例中不完美的地方</span></p></blockquote><ul><li>nacos没有配置集群，如果配置nacos集群则需要更改存储到外部mysql</li><li>sentinel没有持久化到nacos</li><li>gateway的熔断限流，黑白名单没有配置</li><li>seata的TC集群没有配置</li></ul><blockquote><p><span id="i">案例资料</span></p></blockquote><p>本篇博客基本结束，也宣告了微服务这块暂告一段落，虽说很多东西都没有做一个深层次的了解，但学习起来<br>只是时间问题，接下去我应该去学习之前遗漏的知识点，主要是多线程一块吧，还有毕设要写。<br>本案例的资料，放在github上，有需要可以查看一下：<a href="https://github.com/NicknamedCoco/Practice/tree/main/Practice10">案例资料</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习之Sentinel,Seata的基本使用</title>
      <link href="2021/11/12/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BSentinel,Seata%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>2021/11/12/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BSentinel,Seata%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>好久没有水博客了，之前本来打算写篇docker部署nacos集群，但碰到问题了，不知道问谁，各种折腾，<br>结果给搁置下来了，今天来水下sentinel和seata吧，随便记记，不然光看网课啥也不做很没有动力啊。<br>sentinel主要介绍下客户端的配置，与openfeign的整合，sentinel的持久化<br>seata就做一个案例，然后介绍下几个实现分布式事务的模型吧，以后忘记也可以过来看看。</p><blockquote><p>Sentinel</p></blockquote><p>分布式系统的流量防卫兵，比hystrix更强大的流控，熔断，降级工具<br>sentinel分为核心库和dashboard控制台，dashboard控制台允许我们实时配置各种规则，并且实时生效<br>当我们在dashboard控制台配置好规则后，sentinel dashboard会将规则配置发送到sentinel核心库(客户端)。<br>注意：sentinel核心库，也被称为sentinel客户端，与springcloud等进行整合后，sentinel客户端<br>运行在微服务内部，并开启一个端口，监听来自dashboard的配置数据，并且使规则配置实时生效<br>所以微服务的端口和sentinel客户端的端口不是一样的，另外，sentinel dashboard控制台常常与微服务配置在<br>同一个服务器，因为我分开配置，可能因为请求延迟过大会导致监听不了微服务，所以最好配置在一起。</p><p>下面是sentinel的具体内容介绍</p><ul><li><p>sentinel dashboard配置和sentinel客户端的配置</p><ul><li><p>sentinel dashboard的配置</p><p>直接官网下载sentinel dashboard控制台，或者点击此处去下载：<a href="https://github.com/NicknamedCoco/cdn/tree/master/blog/sentinel">sentinel dashboard</a><br>然后在有java环境中运行启动命令：<br><code>java -jar [-Dserver.port=xxx] sentinel-dashboard-1.8.2.jar</code><br>指定端口号是可选的，如果不指定端口号，则默认端口号为8080</p></li><li><p>sentinel客户端与cloud的整合<br>经过上述配置，sentinel dashboard成功可以运行起来，但是想要监控微服务，需要微服务整合<br>sentinel客户端，这样，当sentinel客户端启动后，sentinel dashboard就能监控到了。整合如下：<br>1，导入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--用于sentinel的持久化，将sentinel配置的限流规则持久化到nacos上--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--nacos注册和配置依赖，以后用来做sentinel持久化需要--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--一般做dashboard都需要actuator的支持，即暴露出微服务的端点数据--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2，配置application.yaml</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> MySentinelService  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 47.98.138.53<span class="token punctuation">:</span><span class="token number">8849</span><span class="token comment">#nacos的地址</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 47.98.138.53<span class="token punctuation">:</span><span class="token number">8849</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2346</span>  <span class="token comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描，直到找到未被占用的端口</span>        <span class="token key atrule">clientIp</span><span class="token punctuation">:</span> localhost           <span class="token comment">#port和clientIp指的是sentinel客户端，整合在微服务内部，结合下面可知，三个配置最好在同一台机器。</span>        <span class="token comment">#sentinel dashboard和sentinel客户端不再同一台机器无法访问</span><span class="token comment">#      filter:  #如果不配置filter，则sentinel监控controller的url只能监控一层</span><span class="token comment">#        url-patterns: /**</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#开启actuator对sentinel的支持</span></code></pre><p>3，配置好controller接口，然后使用启动微服务</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test1"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"test2"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>4，当我们启动后，刷新sentinel dashboard发现并没有我们的微服务，是因为sentinel客户端默认懒加载<br>需要我们先调用一下微服务的接口，然后我们的微服务才能被sentinel dashboard监控到，<br>如果想关闭懒加载，则在配置文件中进行以下配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>     <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>       <span class="token key atrule">eager</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p>对了，sentinel dashboard用户名密码默认都是sentinel<br>上述便是sentinel客户端与微服务的整合</p></li></ul></li><li><p>sentinel dashboard的各个配置介绍</p><ul><li>实时监控<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/sentinel/1.png" loading="lazy"></li><li>簇点链路<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/sentinel/2.png" loading="lazy"></li><li>流控规则<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/sentinel/3.png" loading="lazy"></li><li>熔断规则<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/sentinel/4.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/sentinel/5.png" loading="lazy"></li><li>热点规则<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/sentinel/6.png" loading="lazy"></li><li>系统规则<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/sentinel/7.png" loading="lazy"></li><li>授权规则<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/sentinel/8.png" loading="lazy"></li></ul></li><li><p>sentinel中@SentinelResource注解<br>该注解标注在方法上，被标注的方法被称为资源，可以被sentinel监控到，该注解的value值就是资源名<br>当然，我们降级方法，异常处理方法也在该注解上配置。</p><ul><li><p>@SentinelResource注解有个blockHandler选项，则是指定降级方法，当发生熔断降级时，执行该方法<br>还有一个blockHandlerClass选项，如果没有指定blockHandlerClass选项，则降级方法配置在业务类中<br>如果指定该选项则去指定的类中寻找对应的降级方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/handle"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"handle"</span><span class="token punctuation">,</span>                  blockHandlerClass <span class="token operator">=</span> <span class="token class-name">CustomerBlockHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                  blockHandler <span class="token operator">=</span> <span class="token string">"handlerException"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">globalExceptionTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"正常的处理逻辑"</span><span class="token operator">+</span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*上述表示，如果该资源被降级熔断，则去CustomerBlockHandler类中执行handlerException方法注意：handlerException方法返回值和参数列表务必与业务方法一致，参数列表可以多一个BlockException exception参数*/</span></code></pre></li><li><p>blockHandler选项指定的降级方法只能处理资源被熔断的情况，如果资源方法本身发生异常，<br>blockHandler选项是处理不了的，所以我们需要fallback选项，相应的有一个fallbackClass选项</p></li></ul><p>该注解需要注意的点：</p><pre class="language-none"><code class="language-none">1，SentinelResource注解只能修饰public方法2，可以根据url限流或者SentinelResource的资源名限流3，如果SentinelResource注解配置了blockHandler选项，则找本类中找降级方法，    如果同时配置了blockHandlerClass选项，则去指定的类中找降级方法。4，如果降级方法被放在其他类中，则该降级方法必须是静态的    使用这种方式，在sentinel控制台配置的是根据资源名限流，而不是url路径4，如果配置了SentinelResource注解，但没有配置blockHandler选项，    则使用sentinel默认的降级方法：返回&quot;Blocked by Sentinel (flow limiting)&quot;字符串5，需要注意的是，如果方法出现异常，blockHandler选项所指定的降级方法是处理不了的，需要开启fallback选项，指定fallback方法  当blockHandler选项和fallback选项都配置时，会先走fallback指定的处理异常的方法，  如果之后触发了限流熔断规则才会走blockHandler指定的方法。6，SentinelResource注解有一个exceptionToIgnore选项，该选项的值是一个对象，你可以指定某些异常发生时  不走fallback指定的方法,而是直接页面报错error page7，如果在openfeign和sentinel一起使用，则需要开启sentinel对feign的支持，在微服务配置文件中配置如下：feign:  sentinel:    enabled: true  然后处理逻辑还是像之前的方式处理，只不过底层从使用默认的hystrix变成了sentinel.但是使用方式不变</code></pre></li><li><p>sentinel与feign的整合</p><ul><li><p>导入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--openfeign--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--sentinel--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--如果引入sentinel导致返回格式从json变成了xml,需要添加--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>开启openfeign注解@EnableFeignClients，然后在配置文件中开启sentinel对feign的支持</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token comment">#开启feign对sentinel的支持</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre></li><li><p>在@FeignClient注解上指定熔断降级类，该类需实现FallbackFactory接口，重写方法，重写的方法<br>正是降级方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"nacos-service"</span><span class="token punctuation">,</span>fallbackFactory <span class="token operator">=</span> <span class="token class-name">BaseFeignServiceFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span>MAPPING_BASE_PREFIX<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseFeignService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"要和nacos-service服务同样的请求地址"</span><span class="token punctuation">)</span>    <span class="token class-name">CommonResult</span> <span class="token function">queryArmySysCodeItemList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"setId"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> setId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseFeignServiceFallback</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseFeignService</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 提高容错率 防止服务雪崩     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">BaseFeignService</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BaseFeignService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">queryArmySysCodeItemList</span><span class="token punctuation">(</span><span class="token class-name">Long</span> setId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"远程服务调用出现问题了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">CommonResultUtil</span><span class="token punctuation">.</span><span class="token function">getCommonResult</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>看下大佬的文章：<a href="https://blog.csdn.net/qq_18298439/article/details/85059780">Spring Cloud Alibaba Sentinel 整合 Feign 的设计实现</a></p></li></ul></li><li><p>sentinel的持久化</p><p>这里有很多资料，以及大佬的实现，我的任务是集中这些资源，方便以后查看</p><ul><li><a href="https://www.cnblogs.com/jian0110/p/14139044.html">Sentinel Dashboard（基于1.8.1）流控规则持久化到Nacos</a></li><li><a href="https://github.com/alibaba/Sentinel/wiki/Sentinel-%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%88%E9%9B%86%E7%BE%A4%E6%B5%81%E6%8E%A7%E7%AE%A1%E7%90%86%EF%BC%89#%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE">Sentinel规则配置官方文档</a></li><li><a href="https://www.cnblogs.com/crazymakercircle/p/14285001.html">大佬文章</a></li><li><a href="https://github.com/NicknamedCoco/cdn/tree/master/blog/sentinel">一些Sentinel资料</a></li></ul></li></ul><blockquote><p>Seata</p></blockquote><p>本来是想做一个seata案例，不过打算留在之后吧，之后会做一个案例结合微服务各个知识点<br>openfeign，nacos，ribbon，gateway，sentinel，seata，案例就和网课老师的一样<br>用户下订单，订单增加，库存扣减，账户余额扣减，留坑到以后写吧，我这个人太懒了<br>这里随便记录下seata吧，毕竟，我的博客也没人看</p><p>说到分布式事务，我们知道，之前的事务是本地事务，即我们只有一个数据库，拿锁，修改数据，释放锁，<br>大概如此，分布式中，不同微服务使用的是各自的数据库，一个请求下来，会调用多个微服务，会产生多个微服务<br>事务，我们需要把这些事务看成一个整体，这些事务中，任意一个事务失败，则所有事务都需要回滚或者进行数据补偿<br>保证数据一致性，那么如果保证所有的事务被当成一个整体事务，如何保证这个整体事务同样具备ACID原则，<br>这就是seata所做的事情，seata中有四种解决方案实现分布式事务。</p><p>在介绍上面的分布式事务解决方案之前，来看下<strong>seata事务管理中三个重要角色</strong></p><ul><li><strong>TC (Transaction Coordinator) -</strong> <strong>事务协调者：</strong>维护全局和分支事务的状态，协调全局事务提交或回滚</li><li><strong>TM (Transaction Manager) -</strong> <strong>事务管理器：</strong>定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li><li><strong>RM (Resource Manager) -</strong> <strong>资源管理器：</strong>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/seata/1.png" loading="lazy"></p><p>将上述翻译一下，现在的框架设计大体是CS架构，框架有个服务端server，微服务作为客户端，TC就是seata-server<br>微服务添加seata依赖作为seata的客户端。一个请求可能产生多个微服务事务，TM是全局事务，说的是：<br>最开始开启事务的方法，A调用B，执行B方法，B方法中调用其他微服务的方法，这些方法都会产生一个事务<br>这就是RM，可以这么理解吧，而B方法就是全局事务的开始，可以简单认为B方法就是全局事务，只要我们通过<br>@GlobalTransactional注解标注的方法，我们就可以认为该方法是全局事务，暂且这么认为吧，很多底层东西不懂</p><p><strong>Seata中四种分布式事务解决方案</strong></p><ul><li><p>XA模式<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/seata/2.png" loading="lazy"><br>简单理解：seata解决方案中通常把操作分成2个阶段，第一个阶段决定本地事务提不提交，第二个阶段决定<br>如何保证数据一致性，是通过回滚保证还是通过补偿数据方式。</p><p>XA模式下，第一阶段，所有分支事务修改完本地数据后，都不提交，等到所有分支事务修改完成后，<br>在二阶段由TC决定是否提交本地事务，这是种强一致性的实现。<br>这里的一致性指的是：各个事务数据一致性，当某个事务失败后，其他事务数据回到原来的状态。<br>一致性分为强一致性和最终一致性，强一致性表示，数据没有其他状态，数据在任何时候都是正确的。<br>最终一致性指的是，事务提交后，我通过执行反向sql，使得数据还原了，从而保证了数据一致性。<br>这种数据一致性的实现方式就被称为最终一致性，数据经过最后修正才保持一致。</p></li><li><p>AT模式<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/seata/3.png" loading="lazy"><br>AT模式指的是：各个分支事务在第一阶段全部提交，但在提交之前和提交之后对数据做一个保存，或者说镜像<br>到第二阶段时，TC决定提交还是回滚，当然，第一阶段中已经提交的事务回滚不了，但是通过之前保存的镜像<br>我们仍然可以保证数据回到过去，实现数据最终一致性。</p><p>我们可能会想，既然数据执行之前记录快照，为什么之后还需要对数据做快照，这个快照是干嘛的？<br>OK，这是个好问题，让我们细致的说下AT模式中前快照的用途</p><ul><li>请求来到TM方法，TM中调用其他微服务方法产生分支事务，分支事务向TC注册信息<br>分支事务修改数据前记录数据，分支事务执行修改语句，分支事务修改数据后记录数据，分支事务提交</li><li>二阶段中，TC决定是否回滚，其实分支事务已经提交了，没法回滚，所以如果要回滚数据，就需要分支事务修改之前的数据，拿过来这个数据，直接覆盖即可，因为分支事务已经提交，所以TC二阶段也只是把<br>前快照，后快照删除即可。</li></ul><p>上面操作其实会产生一个脏写问题，问题出在一阶段中，分支事务全部提交，二阶段如果要回滚<br>则拿到前快照，对现在分支事务的数据覆盖，可是如果一阶段中我们的分支事务提交后，二阶段还没开始的时候<br>另一个分支事务修改了同样的数据，在二阶段做回滚的时候，我们就回到了最初的数据，那另一个分支事务<br>修改数据的操作就被覆盖掉了，即造成了脏写问题。</p><p><strong>那么如何解决AT模式的脏写问题呢？</strong>AT模式引入了一个全局锁的概念，来看看全局锁在上述过程是干嘛的<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/seata/9.png" loading="lazy"><br>事务在提交事务时，必须拿到全局锁才能提交，而二阶段回滚事务时必须拿到本地锁才能数据恢复<br>这样会造成事务1,2互相持有锁并等待对方锁，造成死锁，因为本地锁比全局锁时间等待时间长，所以<br>在事务1提交数据之后，二阶段恢复数据之前期间修改数据是没有效果的，会导致任务超时，修改不了数据<br>通过全局锁方式隔离两个事务，避免了死锁问题。</p><p>还记得最初的问题么？既然有了前镜像，为什么还要有后镜像？<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/seata/10.png" loading="lazy"><br>如果事务2是seata管理的事务，我们可以通过全局锁实现写隔离，但是如果事务2不是seata管理的事务，<br>则没有全局锁怎么办？这个时候我们在修改数据之后做一个快照，这样在二阶段恢复数据的时候，<br>如果现在的数据和后镜像数据一致，说明事务1修改数据之后，二阶段回滚数据之前，没有其他事务修改数据<br>我们可以恢复数据，如果现在的数据和后镜像数据不一致，说明数据被动过，这样我们便不能去恢复数据。<br>因为如果直接恢复数据，则其他事务对数据的修改被覆盖，造成脏写问题，这个时候就需要人工干预了。<br>所以后镜像是用来判断，非seata管理的事务有没有修改数据，没有可以恢复数据，有则恢复不了。</p><p>AT模式需要我们在数据库中创建一个undo_log表，用过临时保存前镜像和后镜像，二阶段中该表中数据会被删除</p></li><li><p>TCC模式<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/seata/4.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/seata/5.png" loading="lazy"><br>TCC模式只能处理特定的事务，即资源要可预留，因为没有锁，所以性能很高，但是也有其他问题</p><ul><li>回滚代码由人工编写，较复杂</li><li>明明是一个事务，因使用TCC模式，我们需要多建资源预留表，我们在confirm中需要进行多次事务操作<br>修改业务数据表，修改预留表数据。</li><li>TCC模式有空回滚和业务悬挂的问题<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/seata/6.png" loading="lazy"></li></ul></li><li><p>SAGA模式<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/seata/7.png" loading="lazy"><br>saga方案个人不太了解，通过补偿业务进行回滚显然是数据最终一致性实现，没有锁表示性能很好<br>有脏写问题可能数据隔离性不太行，具体细节我太了解，暂且先记录一下。</p></li></ul><p>四种分布式事务解决方案的对比<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/seata/8.png" loading="lazy"></p><blockquote><p>seata资料</p></blockquote><p>seata服务端就是seata-server，运行它之前，我们需要创建一个seata数据库，并把该数据库信息配置在<br>seata-server中，另外在AT模式下，我们需要在业务数据库表中创建undo_log表，用来记录前后快照的。<br>具体的搭建步骤请点击链接，我已经把seata的资料放在github上了，<a href="https://github.com/NicknamedCoco/cdn/tree/master/blog/seata">seata资料</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> sentinel </tag>
            
            <tag> seata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习之Docker,RabbitMQ的基本使用</title>
      <link href="2021/11/01/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BDocker,RabbitMQ%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>2021/11/01/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BDocker,RabbitMQ%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>简述</p></blockquote><p>最近看了这部分的网课，但网课只是大概了解了一下这部分的基础知识，后期还会专门找视频学习<br>有些人喜欢看书学习，有些人喜欢看视频学习，我觉得初期了解一样东西，看视频更好，后期熟悉了这部分内容<br>可能看书能学到更多的东西，话不多说，直接来进入正题。</p><blockquote><p>Docker</p></blockquote><p>Docker一些基础命令我就不介绍了，我会把docker基础内容pdf放到github上，<br>这里我记录一下docker部署一个前后端分离项目，使用基本的Dockerfile部署项目，没有使用Docker-compose的方式<br>下次有时间尝试一下使用Docker-compose方式部署项目，到时候再记录一下</p><p>回归正题，使用docker部署前后端分离的项目步骤如下：</p><ul><li><p>先部署mysql容器</p><ul><li><p>拉取mysql镜像：<code>docker pull mysql</code></p></li><li><p>配置宿主机和容器的映射文件<br>这样我们可以通过修改宿主机文件从而修改mysql容器中的数据和配置</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;1，创建三个宿主机映射文件,在&#x2F;dockerFile&#x2F;myproject&#x2F;arsystem&#x2F;arsystem-mysql&#x2F;下mkdir data logs conf  &#x2F;&#x2F;2，在该conf目录下创建一个my.cnf文件,这会覆盖掉mysql容器中的配置文件  cd conf  touch my.cnf</code></pre></li><li><p>创建mysql容器</p><pre class="language-none"><code class="language-none">docker run  \--name arsystem-mysql \-p 3306:3306 \-v &#x2F;dockerFile&#x2F;myproject&#x2F;arsystem&#x2F;arsystem-mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \-v &#x2F;dockerFile&#x2F;myproject&#x2F;arsystem&#x2F;arsystem-mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d \-v &#x2F;dockerFile&#x2F;myproject&#x2F;arsystem&#x2F;arsystem-mysql&#x2F;logs:&#x2F;var&#x2F;log&#x2F;mysql \-e MYSQL_ROOT_PASSWORD&#x3D;123765 \-d mysql&#x2F;&#x2F;上述，mysql最新版，所以没有加tag版本号，设置了mysql密码，进行了文件映射，完美~&#x2F;&#x2F;上述宿主机文件路径一定要是绝对路径，不然会当成数据卷</code></pre></li><li><p>创建mysql容器后，使用sqlyog连接该数据库，账号：root，密码：123765，IP地址就是宿主机IP地址<br>你可能出现连接不上远程mysql的情况：</p><pre class="language-none"><code class="language-none">连接可能爆：Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded错误报错原因：  MySQL8.0以后，身份验证插件默认使用caching_sha2_password，旧版则是mysql_native_password  这可能造成一些MySQL客户端连接不上的问题，从而报错：plugin caching_sha2_password could not be loaded解决办法：  1，登录mysql容器中的mysql：    docker exec -it arsystem-mysql bash    mysql -uroot -p 输入123765(密码)  2，执行以下命令：    #用于更换MySQL root账户的密码和加密方式    ALTER USER &#39;root&#39; IDENTIFIED WITH mysql_native_password BY &#39;123765&#39;;    #用于刷新权限    FLUSH PRIVILEGES;</code></pre></li><li><p>使用sqlyog连接远程mysql后，根据<code>xxx.sql</code>文件创建数据库和表</p></li></ul></li><li><p>接着部署springboot容器</p><ul><li><p>首先修改项目中数据库的地址<br>修改项目中mysql的IP地址为mysql容器的地址，即宿主机地址，然后再将项目打成jar包</p></li><li><p>配置springboot项目Dockerfile文件</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;创建Dockerfile文件，并将项目jar包放在同一目录下，Dockerfile文件内容如下：FROM java:8ADD arsystem-0.0.1-SNAPSHOT.jar app.jarRUN bash -c &#39;touch &#x2F;app.jar&#39;ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]&#x2F;&#x2F;根据java8镜像获取底层依赖，将项目jar包加入镜像文件系统的根目录下并改名称app.jar&#x2F;&#x2F;第三句是修改文件的创建修改时间，最后一句是运行我们的项目</code></pre></li><li><p>根据Dockerfile文件制作镜像</p><pre class="language-none"><code class="language-none">docker build -t arsystem-backend .&#x2F;&#x2F;-t 表示设置项目的名字和版本号，版本号不设置则为latest&#x2F;&#x2F;. 表示Dockerfile的位置，.表示Dockerfile就在当前目录下</code></pre></li><li><p>启动项目容器</p><pre class="language-none"><code class="language-none">制作好项目镜像后，查看：docker images然后根据该镜像启动一个容器：docker run \--name arsystem-backend \-p 8081:8081 \-d arsystem-backend&#x2F;&#x2F;当然，我觉得在Dockerfile中应该要暴露8081端口的，这里我漏了&#x2F;&#x2F;另外我的Dockerfile并不好，可能需要配置一些其他宿主机文件映射啥的</code></pre></li></ul></li><li><p>最后配置nginx容器</p><ul><li><p>拉取nginx镜像，创建宿主机映射文件</p><pre class="language-none"><code class="language-none">1，拉取nginx镜像：docker pull nginx2，创建宿主机映射文件，这里有两个地方需要映射，  第一个是nginx容器的配置文件目录，&#x2F;etc&#x2F;nginx&#x2F;conf.d目录  第二个是前端vue文件在nginx容器中存放的目录，&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录  所以我们需要把vue项目生成的dist目录拿到宿主机上，  我把dist目录在了&#x2F;dockerFile&#x2F;myproject&#x2F;arsystem&#x2F;arsystem-frontend下，用来映射html目录  然后在dist同级目录创建好nginx-config目录，用来映射容器中conf.d目录</code></pre></li><li><p>宿主机nginx-config目录用来映射nginx容器的conf.d目录，该目录下所有<code>*.conf</code>文件都会被加载进<br>nginx配置文件nginx.conf中，所以我们需要在nginx-config文件中创建一个nginx配置文件</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;nginx-config目录下创建keyi.conf，该文件内容如下：server &#123;listen 80;server_name 47.98.138.53;location &#x2F; &#123;        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;        index  index.html index.htm;    &#125;&#125;&#x2F;&#x2F;请求一进来，被转到html目录下的index.html中</code></pre></li><li><p>创建nginx容器</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;宿主机映射目录创建好，nginx配置文件创建好后，下面就创建nginx容器了docker run \&gt; --name arsystem-nginx \&gt; -p 80:80 \&gt; -v &#x2F;dockerFile&#x2F;myproject&#x2F;arsystem&#x2F;nginx-config&#x2F;:&#x2F;etc&#x2F;nginx&#x2F;conf.d \&gt; -v &#x2F;dockerFile&#x2F;myproject&#x2F;arsystem&#x2F;arsystem-frontend&#x2F;dist&#x2F;:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F; \&gt; -d nginx&#x2F;&#x2F;将宿主机映射目录挂载到nginx容器目录中，这样，我们就可以通过修改keyi.conf来修改容器中的nginx配置文件&#x2F;&#x2F;我们的vue项目也被部署在nginx中，当我们访问http:&#x2F;&#x2F;宿主机ip&#x2F;，就被转发到html目录下index.html中</code></pre></li></ul></li><li><p>以上就是docker部署前后端分离项目的步骤，其中还有很多注意的地方，</p><pre class="language-none"><code class="language-none">例如docker容器文件挂载问题  如果宿主机目录有文件，容器目录中有文件会导致容器目录中文件被覆盖，如果宿主机目录没有文件  而容器目录中有文件，则容器内文件会拷贝到宿主机目录中例如docker创建容器时，宿主机目录务必是绝对路径，不然会被识别成数据卷例如docker的文件挂载最好是目录挂载目录，如果是文件挂载文件，可能导致宿主机文件修改后，容器内文件没有被修改</code></pre><p>下面是一些大佬docker文章</p><ul><li><a href="https://www.cnblogs.com/zouzou-busy/p/11838524.html">docker部署vue项目</a></li><li><a href="https://juejin.cn/post/7000579016147075079">使用docker容器化开发部署Vue项目</a></li><li><a href="https://www.cnblogs.com/chenyameng/p/14433203.html">使用docker部署springboot项目到服务器</a></li><li><a href="https://www.jianshu.com/p/656f3da6dcbb">docker数据的覆盖问题</a></li><li><a href="https://blog.csdn.net/alalafan/article/details/81358551">Docker MySql报2059错误</a></li><li><a href="https://www.cnblogs.com/ivictor/p/4834864.html">关于Docker目录挂载的总结</a></li><li><a href="https://cloud.tencent.com/developer/article/1708294">解密 Docker 挂载文件，宿主机修改后容器里文件没有修改</a></li><li><a href="https://blog.csdn.net/weixin_45139342/article/details/104704096">Docker的常用管理命令&amp;Docker将数据挂载到容器的三种方式</a></li></ul><p>最后是网课中关于docker的基础笔记PDF：<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/docker/Docker%E5%AE%9E%E7%94%A8%E7%AF%87.pdf">docker笔记</a>，如果访问不了尝试使用外网访问。</p></li></ul><blockquote><p>RabbitMQ</p></blockquote><p>RabbitMQ，一款消息队列工具，让我们可以实现异步通信，更多具体内容见最下方的Rabbit基础文档<br>我大概了解了一下Rabbit基本概念，SpringAMQP的基本使用，队列，和3种交换机(分发规则不同)的使用</p><p>本小节不深入RabbitMQ，只记录下RabbitMQ的5个基本消息模型，使用SpringAMQP实现一下这5种模型<br>以后有机会将专门找这类网课学习，本次实验通过docker搭建rabbitMQ服务。</p><p>配置rabbitMQ：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;拉取rabbitMQ镜像docker pull rabbitmq:3-management&#x2F;&#x2F;开启rabbitMQ容器docker run -d -p 5672:5672 -p 15672:15672 --name my-rabbit rabbitmq:3-management</code></pre><p>配置依赖：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>配置application.yaml：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 47.98.138.53    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /    <span class="token key atrule">username</span><span class="token punctuation">:</span> wanyi    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123765</span>    <span class="token comment">#rabbitMQ初始用户名和密码为：guest</span></code></pre><p>5种基本消息模型：</p><ul><li><p>BasicQueue，基本消息模型<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/rabbitmq/basicQueue.png" loading="lazy"></p><ul><li><p>发送方</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleQueueProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">"simple.queue"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"这里是简单消息队列测试消息"</span><span class="token punctuation">;</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数应该少给了，rabbit需要有该队列</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>接收方</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRabbitMQConsumerComponent</span> <span class="token punctuation">&#123;</span><span class="token comment">/*simpleQueue测试*/</span>  <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"simple.queue"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleQueueTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"simple.queue----接收消息为："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>WorkQueue，工作消息模型<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/rabbitmq/workQueue.png" loading="lazy"></p><ul><li><p>发送方</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//发送50条消息</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">workQueueProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">"work.queue"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"工作队列第"</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>msg<span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"条消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>接收方</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*workQueue测试，一个queue，两个消费者*/</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"work.queue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">workQueue1Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work.queue----消费者1接收消息为："</span><span class="token operator">+</span>msg<span class="token operator">+</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"work.queue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">workQueue2Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work.queue----消费者2接收消息为："</span><span class="token operator">+</span>msg<span class="token operator">+</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*我们可以看到，queue1消费者比queue2消费者处理数据更快，本该处理更多请求，但由于rabbitMQ中消费者可以预取消息，即消费者处理之前，先把消息平均分配好给各个消费者，所以导致queue1和queue2处理的消息数量一样，并没有利用好queue1的优势，我们可以通过配置，实现每次预取从默认无上限改成每次预取1条消息*/</span>spring<span class="token operator">:</span>  rabbitmq<span class="token operator">:</span>    host<span class="token operator">:</span> <span class="token number">47.98</span><span class="token number">.138</span><span class="token number">.53</span>    port<span class="token operator">:</span> <span class="token number">5672</span>    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>    username<span class="token operator">:</span> wanyi    password<span class="token operator">:</span> <span class="token number">123765</span>    listener<span class="token operator">:</span>      simple<span class="token operator">:</span>        prefetch<span class="token operator">:</span> <span class="token number">1</span>  #控制消费者预取的消费数量，改成<span class="token number">1</span>，表示每个消费者先从消息队列中拿一个消息。</code></pre></li></ul></li><li><p>FanoutExchange，订阅模型之Fanout<br>订阅模式中使用到Exchange，交换机，其作用：交换机本身不存储消息，而是接收消息并路由给队列<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/rabbitmq/Exchange%E7%BB%A7%E6%89%BF%E5%9B%BE.png" loading="lazy"></p><p>根据路由的规则不同大致分为FanoutExchange,DirectExchange,TopicExchange三种，它们区别如下：</p><pre class="language-none"><code class="language-none">fanoutExchange会将消息发给每一个绑定的队列directExchange会将接收到的消息根据规则(routingKey)路由到指定的Queue，因此称为路由模式(routes)topicExchange，和directExchange类似，不同的是，topicExchange的routingKey可以设置成通配符的形式，简化操作例如如果队列routingKey为：china.#   则匹配所有key是china.xxx的消息，类似正则匹配，#代表0或多个单词，*代表一个单词</code></pre><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/rabbitmq/FanoutExchange.png" loading="lazy"></p><ul><li><p>发送方</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fanoutExchangeProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">"wanyi.fanout"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"hello everyone!"</span><span class="token punctuation">;</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*第二个参数是routingKey，如果不指定则是向每个关联的队列发送消息，如果指定则是向带有该key的队列发送消息*/</span></code></pre></li><li><p>接收方<br>接收方需要配置一下队列与交换机的关联，配置方式有两种，一种是通过注解的方式，一种是通过<br>注册bean的方式，FanoutExchange案例这里通过注册bean的方式实现，下面DirectExchange，Topic通过注解实现</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//FanoutConfig</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//交换机</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">"wanyi.fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//两个队列</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">fanoutQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanout.queue1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">fanoutQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanout.queue2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//队列绑定到交换机上</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">fanoutBinding1</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fanoutExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> fanoutQueue1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fanoutQueue1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">fanoutBinding2</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fanoutExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> fanoutQueue2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fanoutQueue2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>接收消息：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*fanoutExchange，两个queue，每个queue一个消费者*/</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanout.queue1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fanoutQueue1Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fanout.queue1----接收消息为："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanout.queue2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fanoutQueue2Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fanout.queue2----接收消息为："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>DirectExchange，订阅模型之Direct<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/rabbitmq/DirectExchange.png" loading="lazy"></p><ul><li><p>发送方</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">directExchangeProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">"wanyi.direct"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"hello red!!!"</span><span class="token punctuation">;</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//与DirectExchange没什么差别，无非指定某些队列发送消息</span></code></pre></li><li><p>接收方</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*directExchange，两个queue，每个queue一个消费者*/</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>  value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"direct.queue1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"wanyi.direct"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">,</span>  key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">directQueue1Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"direct.queue1----接收消息为："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>  value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"direct.queue2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"wanyi.direct"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">,</span>  key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">directQueue2Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"direct.queue2----接收消息为："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>TopicExchange，订阅模型之Topic<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/rabbitmq/TopicExchange.png" loading="lazy"></p><ul><li><p>发送方</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">topicExchangeProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">"wanyi.topic"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"china fake new !!!"</span><span class="token punctuation">;</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span><span class="token string">"china.news"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>接收方</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*directExchange，两个queue，每个queue一个消费者*/</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>  value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topic.queue1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"wanyi.topic"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">,</span>  key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"china.#"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">topicQueue1Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"topic.queue1----接收消息为："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>  value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topic.queue2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"wanyi.topic"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">,</span>  key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"#.news"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">topicQueue2Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"topic.queue2----接收消息为："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//接收方使用key进行匹配消息</span></code></pre></li></ul></li></ul><p>上述便是5种基本消息模型的案例，最后说一下消息转换器，我们可以通过消息队列工具发送任意类型消息<br>对象，map等等，底层使用JDK的序列化，这种方式数据体积大，可读性差，解决办法就和SpringMVC一样<br>SpringMVC使用了Jackson做数据格式转换，所以我们也需要配置一个Jackson的消息转换器</p><ul><li><p>添加依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>将消息转换器注册进容器中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">MessageConverter</span> <span class="token function">jsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>最后rabbitMQ的基本资料已经放在github上了，点击下载：<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/rabbitmq/RabbitMQ.pdf">rabbitMQ笔记</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习之OpenFeign,Hystrix,Gateway的基本使用</title>
      <link href="2021/10/28/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BOpenFeign,Hystrix,Gateway%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>2021/10/28/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BOpenFeign,Hystrix,Gateway%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>简述</p></blockquote><p>写博客记笔记违背了我的初心：记录学到的技术的使用，以免以后使用的时候忘记，<br>现在的情况是，自己记录的笔记并不完整，很多地方写的不好，而随手百度就能比我写的更完善更好，<br>写博客还需要大量时间，于此对比，自己写博客就显示很不值得，但是我并不想放弃写博客，不然学的东西<br>没有产出，打击学习积极性，所以我决定在自己的博客中使用别人写的优质博客，做知识的整理者，归纳者<br>而不生产创造优质文章(我这实力也创造不了)，OK，通过看别人写的优质文章，不仅提升自己，<br>而且节约时间，以后某个技术不记得怎么使用了来查查就行，最后还算是产出不打击学习积极性，完美~</p><p>本章内容</p><ul><li><a href="#a">OpenFeign</a></li><li><a href="#b">Hystrix</a></li><li><a href="#c">Gateway</a></li></ul><blockquote><p><span id="a">OpenFeign</span></p></blockquote><p>使用注解方式发送服务调用的HTTP客户端，内置了ribbon负载均衡工具，hystrix熔断器<br>OpenFeign与Feign的区别见下图：</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/feign%E4%B8%8EopenFeign%E7%9A%84%E5%8C%BA%E5%88%AB.png" loading="lazy"></p><ul><li><p>基本使用</p><ul><li><p>声明式<br>假设场景：消费者调用生产者的controller接口，那么openFeign就需要配置在消费者端，以提供服务调用，来看下使用步骤：</p><p>1，导入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--服务注册中心用eureka还是nacos随意--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2，在消费者主类上标记注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token comment">//注册中心</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token comment">//openfeign注解，该注解的basePackages属性可以指定扫描包路径</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ProviderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>3，消费者端增加一个接口，ProviderClient接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//会根据服务名，从注册中心找到对应的IP地址，name值表示生产者的服务名称</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"provider"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProviderClient</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这里跟服务生产者controller接口的URL一致，调用生产者的/provider/list</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/provider/list"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>4，定义好上述的接口，然后消费者的controller处调用上面接口的方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//引入Feign客户端</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ProviderClient</span> providerClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/callProvider"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">callProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用Feign客户端调用其他服务的接口，底层自动调用生产者的controller，拿到数据</span>        <span class="token keyword">return</span> providerClient<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>继承式<br>上面就是声明式使用openfeign，我们会发现消费者定义的ProviderClient接口，下面的方法其实和<br>生产者的controller方法一样，使用同样的注解，那么我们可以定义一个模块，把ProviderClient接口<br>写在那个模块中，然后生产者的controller类实现该模块的ProviderClient接口，消费者的接口继承<br>ProviderClient接口，这样，我们只需在ProviderClient接口定义方法和注解，生产者实现细节，<br>消费者继承接口后，消费者自己的接口也拥有了ProviderClient接口的方法</p><p>但是这样做让这三个模块耦合在一起了，感觉非常不好，具体代码，请在最下面链接处查看</p></li></ul></li><li><p>超时控制<br>feign内部包含了ribbon和hystrix，所以我们需要设置ribbon的超时时间和hystrix的熔断超时时间。<br>所以feign的超时控制指的是配置这两个工具的超时时间，下面是一个样例：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>  <span class="token comment">#全局设置，</span>        <span class="token comment"># ribbon的超时时间，默认等待1秒，得不到爆错</span>        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token comment"># 指的是建立连接所用的时间，适用于网路状况正常情况下，两端连接所用的时间</span>        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>   <span class="token comment"># 指的是建立连接后从服务器读取到可用资源所用的时间</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启熔断器，默认包装请求接口的所有方法，并将这些方法过期时间设置为1秒，需要进行下面的配置</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment"># 设置hystrix的超时时间为10000ms</span></code></pre><p>如何配置好Hystrix和Ribbon的超时时间呢？</p><p>因为Feign的请求：其实是Hystrix+Ribbon。Hystrix在最外层，然后再到Ribbon，最后里面的是http请求<br>所以说。Hystrix的熔断时间必须大于Ribbon的 ( ConnectTimeout + ReadTimeout )。而如果Ribbon开启了重试机制<br>还需要乘以对应的重试次数，保证在Ribbon里的请求还没结束时，Hystrix的熔断时间不会超时。</p><p>关于更多超时控制，请看最下面的链接</p></li><li><p>日志增强<br>日志配置分为全局配置和局部配置，分为代码实现和配置实现，这里都是配置实现，代码查看下面链接</p><ul><li><p>局部配置日志级别<br>局部配置指的是针对请求某个微服务时，设置特定的日志级别，而其他的日志级别使用默认</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token comment">#想要调用的微服务名称，server1指的是其他微服务的服务名称</span>      <span class="token key atrule">server-1</span><span class="token punctuation">:</span>        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> FULL</code></pre></li><li><p>全局配置日志级别<br>全局配置日志级别顾名思义，对所有微服务请求时，都使用该日志级别</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token comment">#将调用的微服务名称改成default就配置成全局的了</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> FULL</code></pre></li></ul></li><li><p>负载均衡配置<br>openfeign中的负载均衡配置，就是ribbon的负载均衡的配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">服务名称</span><span class="token punctuation">:</span><span class="token comment">#这里填微服务的服务名称</span>  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule<span class="token comment">#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #配置规则 随机</span><span class="token comment">#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询</span><span class="token comment">#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule #配置规则 重试</span><span class="token comment">#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule #配置规则 响应时间权重</span><span class="token comment">#NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策略</span></code></pre></li><li><p>更多文章</p><ul><li><a href="https://blog.csdn.net/hhj13978064496/article/details/104653297">openFeign超时控制</a></li><li><a href="https://www.jianshu.com/p/879d39d1e5c7">openFeign的使用</a></li><li><a href="https://developer.aliyun.com/article/775626">详细讲解OpenFeign，有继承式实现</a></li><li><a href="https://www.cnblogs.com/FlyGoldfish/articles/14223063.html">openFeign博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/409184804">openFeign知乎</a></li></ul></li></ul><blockquote><p><span id="b">Hystrix</span></p></blockquote><p>在微服务架构下，服务调用的链路可能会非常长，服务A调用服务B，服务B调用服务C，，，<br>一次请求调用的链路越长，那么一旦链路中某个服务不可用，或者该服务执行时间太久，<br>则会造成整个请求时间变长，即一粒老鼠屎坏了一锅粥，我调用你的服务，你服务不能用或者你服务处理太慢<br>你得告诉我一声，总之，我不管你服务是好是坏，我就要及时得到反馈。</p><p>此时Hystrix，豪猪哥出现了，专门解决一旦某个服务接口不可用或延迟高，仍然能给对方一个反馈<br>一般出现在并发量比较大的场景，当一个接口并发量特别大，会导致tomcat的工作线程全都处理该接口下的请求<br>使得其他接口响应也会变慢，一句话，我提供的接口如果其中一个接口非常多请求，我的其他接口响应速度下降<br>那我就要降低这个接口的请求量，怎么降低？接口并发量大的具体表现是该接口响应变慢，我设定，只要该接口<br>响应延迟特别慢或者该接口内报错，我直接响应一个后备接口，这就是<strong>服务降级</strong>，这就是上面所说的反馈。<br>后备方法里面，一般写该服务不可用，你一直请求别人，接收到的都是服务不可用，自然请求量就降下来了<br>请求量降下来，接口处理速度就上来了，处理接口速度上来了，自然就不走后备方法，转成去执行正常的接口了</p><p>除了服务降级，你还可能听说过服务熔断，它指的是：我根据请求量进行统计，一旦执行后备方法多了，<br>我直接让所有请求全部走后备方法，啥也不处理了，直接躺平，这就是<strong>服务熔断</strong>，等一段时间后，<br>我放一个请求进来，看接口正不正常(延迟小，不报错)，如果正常，我就关闭服务熔断，让接口正常处理请求，否则继续走我的后备方法。<br>hystrix服务熔断的状态可以用一个断路器表示，如果服务被熔断了，则处于断路器打开状态，<br>此时服务正常业务接口不可用，走后备方法，过了一段时间，熔断器自动变成半开状态，这一状态下，<br>hystrix会监测服务接口是否正常，如果正常，则断路器关闭，服务熔断状态关闭，服务业务接口正常处理请求。</p><p>下面介绍简单的使用方式，更多的内容看最下方的链接</p><ul><li><p>导入依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--新增hystrix，不过openfeign包含了hystrix依赖，可以不用引入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--本次实验openfeign和hystrix一起使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加hystrix注解在模块主类上</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span>@<span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token comment">//用于hystrix服务熔断注解，如果只使用服务降级，不需要该注解</span><span class="token comment">//友情提示：@SpringCloudApplication可代替下面三个注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConsumerFeignWithHystrixOrder80</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyConsumerFeignWithHystrixOrder80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>实验是openfeign配合hystrix使用，则我们也需要配置ribbon的超时时间</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">default</span><span class="token punctuation">:</span>  <span class="token comment">#全局设置，</span>        <span class="token comment"># ribbon的超时时间，默认等待1秒，得不到爆错</span>        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token comment"># 指的是建立连接所用的时间，适用于网路状况正常情况下，两端连接所用的时间</span>        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>   <span class="token comment"># 指的是建立连接后从服务器读取到可用资源所用的时间</span></code></pre></li><li><p>服务降级的配置可以配置在消费方也可以配置在生产方，因为消费者也可能是生产者，<br>下面服务降级的配置，配置在消费方的controller中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//消费方的controller</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order/feign/hystrix"</span><span class="token punctuation">)</span><span class="token comment">//@DefaultProperties(defaultFallback = "globalFallback")//配置全局的降级方法/后备方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFeignController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MyFeignWithPayment</span> myFeignWithPayment<span class="token punctuation">;</span> <span class="token comment">//消费方的接口，直接使用即可拿到其他服务数据</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/ok/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token comment">//    @HystrixCommand //如果没有指定fallback，则走全局降级方法，这样就无需每个业务方法都写个fallback方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPaymentInfo_OKTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行order模块中的okTest方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> myFeignWithPayment<span class="token punctuation">.</span><span class="token function">getPaymentInfo_OKTest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/timeout/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"order_timeoutOrError"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">"3000"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//3秒内，该注解的方法没有执行完毕，则走降级方法，表示消费者不等生产方提供数据了</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPaymentInfo_NotOKTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行order模块中的notOKTest方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> myFeignWithPayment<span class="token punctuation">.</span><span class="token function">getPaymentInfo_NotOKTest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用其他服务</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你是啥？"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*当上面服务处理失败后(运行异常，超时异常)，回调下面的方法，进行兜底操作，即指定的降级方法*/</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">order_timeoutOrError</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"订单接口异常，当前线程名："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*全局降级方法，只要标注了@HystrixCommand注解，但没有指定fallback，就执行全局的降级方法*/</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">globalFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入全局的熔断方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"方法执行异常。。。。"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*你可以指定fallback降级方法，如果使用了@HystrixCommand注解，不指定fallback方法，则执行全局的降级方法*/</span></code></pre></li><li><p>默认情况下，使用@HystrixCommand注解会导致该接口hystrix的超时时间为1秒，你需要在配置文件中配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#在新版本的Springcloud中，Feign默认关闭了对Hystrix的支持</span>feign  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启hyxtrix，默认包装请求接口的所有方法，并将这些方法过期时间设置为1秒，需要进行下面的配置</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">6000</span> <span class="token comment"># 设置hystrix的超时时间为6000ms</span></code></pre></li><li><p>上面是服务降级的配置，下面来看看服务熔断的配置，本案例将服务熔断配置在生产方的service中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//服务熔断指的是，如果短时间内有较多的方法被服务降级，则触发器状态，使得之后一定时间内，任何请求访问的都是降级方法</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentCircuitBreaker_fallback"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//是否开启断路器</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment">//请求次数，默认10秒内大于20次请求则进行统计</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment">//统计的时间范围</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment">//失败率达到多少后跳闸，10秒内fallback到60%</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"*****id 不能负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> serialNumber <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"调用成功,流水号："</span><span class="token operator">+</span>serialNumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//降级方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentCircuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"id 不能负数，请稍候再试,(┬＿┬)/~~     id: "</span> <span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></li></ul><p>hystrix还有很多内容，请看：<a href="https://www.jianshu.com/p/e07661b9bae8">hystrix原理</a></p><blockquote><p><span id="c">Gateway</span></p></blockquote><p>spring cloud Gateway，服务网关，内外系统的中间门户，用户发出请求，到达nginx集群，然后nginx将请求负载到Gateway网关集群<br>网关再对请求做一些认证，鉴权，监控，负载均衡，流量管控等等，最后将请求转发给各个微服务中。<br>网关分为流量网关和业务网关，nginx就是流量网关，而springCloud Gateway就是业务网关，至于其具体区别<br>大概可以看下下图：然后他们各自做的事，看下大佬写的博客，在最下面<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/%E6%B5%81%E9%87%8F%E7%BD%91%E5%85%B3%E5%92%8C%E4%B8%9A%E5%8A%A1%E7%BD%91%E5%85%B3.png" loading="lazy"></p><p>再来看看几张关于网关的图，了解一下它在微服务中扮演的角色：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/gateway1.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/gateway2.png" loading="lazy"></p><p>大佬的博客写的太好，我这里就简单写写配置吧：</p><ul><li><p>导入依赖，菜狗是这样的，导依赖，写配置，加注解三板斧~~</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--gateway当然也是需要注册进服务注册中心的，eureka/nacos/...--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置网关，gateway中路由，断言，过滤器是基本操作</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> MyGateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span><span class="token comment">#下面是配置的一个个路由，即转发规则和转发微服务地址，满足断言规则，则转发请求</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh <span class="token comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span><span class="token comment">#          uri: http://localhost:8001   #匹配后提供服务的路由地址</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//MyProviderPayment<span class="token comment">#开启服务发现后，只用服务名称进行请求转发</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span><span class="token comment"># 断言，满足下面的条件才转发请求</span>            <span class="token punctuation">-</span> Path=/payment/eureka/<span class="token important">**</span>   <span class="token comment">#断言,路径相匹配的进行路由</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token comment">#路由实例过滤器，仅对该路由有效</span>            <span class="token punctuation">-</span> AddRequestHeader=Truth<span class="token punctuation">,</span>zhangsan is freaking awesome<span class="token tag">!</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2<span class="token comment">#          uri: http://localhost:8001</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//MyProviderPayment   <span class="token comment">#使用服务名进行路由，需要开启discovery.locator.enabled=true</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/eureka/lb   <span class="token comment">#断言,路径相匹配的进行路由</span>            <span class="token punctuation">-</span> After=2021<span class="token punctuation">-</span>10<span class="token punctuation">-</span>26T22<span class="token punctuation">:</span>48<span class="token punctuation">:</span>16.597+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span><span class="token comment">#默认过滤器，作用于每个路由</span>        <span class="token punctuation">-</span> After=2021<span class="token punctuation">-</span>10<span class="token punctuation">-</span>26T22<span class="token punctuation">:</span>48<span class="token punctuation">:</span>16.597+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>  <span class="token comment"># 这里是默认路由作用每一个路由</span>      <span class="token comment"># 注意：路由实例过滤器(配置在路由里面),defaultFilter,globalFilter，这三个路由器是根据order排序的</span>      <span class="token comment"># 如果order值相同，则defaultFilter>路由实例过滤器>globalFilter</span></code></pre></li><li><p>上面是通过配置进行网关的路由功能，下面一个案例是使用编码的方式，设置路由规则，仅作了解，不太懂</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    * 网关的配置可以通过编码方式，也可以通过配置application.xml方式，这里是通过编码方式    * */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">toBlog</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> routeLocatorBuilder<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RouteLocatorBuilder</span><span class="token punctuation">.</span><span class="token class-name">Builder</span> routes <span class="token operator">=</span> routeLocatorBuilder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"keyi.world"</span><span class="token punctuation">,</span>r<span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token comment">//这里有问题，网关只是替换了域名和端口，但是后面路径不替换，因为我博客后没有/keyi路径，所以404</span>            <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/keyi"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://www.keyi.world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>项目中往往需要自定义过滤器，而不是使用网关中提供给我们的过滤器，下面是一个案例实现全局过滤器接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">//数字越小，优先级越高</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGatewayGlobalFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 自定义的网关过滤器     * @param exchange     * @param chain     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"********************进入自定义网关全局过滤器，time:"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> wanyi <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"wanyi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>wanyi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"wanyi为null，不允许进入系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>UNAUTHORIZED<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回状态码401，表示未登录</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//请求放行，执行下一个过滤器</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>再来看看Gateway中是如何配置跨域的吧</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token comment"># 。。。</span>      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span> <span class="token comment"># 全局的跨域处理</span>        <span class="token key atrule">add-to-simple-url-handler-mapping</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 解决options请求被拦截问题</span>        <span class="token key atrule">corsConfigurations</span><span class="token punctuation">:</span>          <span class="token key atrule">'[/**]'</span><span class="token punctuation">:</span>            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token comment"># 允许哪些网站的跨域请求 </span>              <span class="token punctuation">-</span> <span class="token string">"http://localhost:8090"</span>            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token comment"># 允许的跨域ajax的请求方式</span>              <span class="token punctuation">-</span> <span class="token string">"GET"</span>              <span class="token punctuation">-</span> <span class="token string">"POST"</span>              <span class="token punctuation">-</span> <span class="token string">"DELETE"</span>              <span class="token punctuation">-</span> <span class="token string">"PUT"</span>              <span class="token punctuation">-</span> <span class="token string">"OPTIONS"</span>            <span class="token key atrule">allowedHeaders</span><span class="token punctuation">:</span> <span class="token string">"*"</span> <span class="token comment"># 允许在请求中携带的头信息</span>            <span class="token key atrule">allowCredentials</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否允许携带cookie</span>            <span class="token key atrule">maxAge</span><span class="token punctuation">:</span> <span class="token number">360000</span> <span class="token comment"># 这次跨域检测的有效期</span></code></pre><p>当然你也可以通过编码方式实现跨域，例如自定义过滤器解决跨域</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CorsWebFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CorsConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathPatternParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsWebFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>最后是各个大佬的文章，网关还有很多限流，鉴权等等操作，没接触过，就不乱写了，看下大佬博客</p><ul><li><a href="https://www.jianshu.com/p/98f7e61a2148">Gateway基本介绍</a></li><li><a href="https://www.jianshu.com/p/fb60a8c75892">Gateway内置的过滤器工厂</a></li><li><a href="https://www.jianshu.com/p/db0d6bbfdadc">Gateway内置的断言工厂</a></li><li><a href="https://www.jianshu.com/p/42fdb9bd6949">Gateway扩展</a></li><li><a href="https://www.cnblogs.com/Courage129/p/14446586.html">常见网关对比</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> OpenFeign </tag>
            
            <tag> Hystrix </tag>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习之服务注册中心</title>
      <link href="2021/10/22/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>2021/10/22/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>一转眼12天就过去了，又忙实习的事情，又看网课，还有学校方面的事情，看完这部分的网课终于可以着手<br>写一篇博客了，说是博客，我更加觉得我只是在记笔记，记笔记是必要的，不然在学习上不能给我成就感<br>没有成就感，就难有动力继续走下去，但凡能让我有成就感的事情，我都想去完成，这种成就感鼓励我继续<br>写博客记笔记，形成正循环，现在这个博客还不完美，等以后，我可能想去做一个自己的博客，现在实力不够<br>继续好好学习，OK，咱们废话不多说，先来看看本篇博客主要讲写什么：</p><ul><li><a href="#a">微服务，服务注册中心的概念和理解</a></li><li><a href="#f">项目基本介绍</a></li><li><a href="#b">eureka的基本使用</a></li><li><a href="#c">ribbon的基本使用</a></li><li><a href="#d">consul的基本使用</a></li><li><a href="#e">nacos中关于注册中心的使用</a></li></ul><blockquote><p><span id="a">微服务，服务注册中心的概念和理解</span></p></blockquote><ul><li><p>微服务的概念<br>从前我们的后端项目只是单体应用，所有东西写在一个项目中，大不了搞多个实例做负载均衡<br>而微服务指的是将大型单体应用按功能划分，将不同的功能拆分出来，形成许多小的应用，<br>我们可以使用maven中的模块功能来实现上面功能，从而实现一个个模块，例如拆分成：订单模块，用户模块等等。</p><p>这一个个模块我们称之为微服务，而被拆分出来的微服务同时也面临着很多问题，自然而然产生了许多解决<br>微服务问题的框架，技术，例如我们的SpringCloud，SpringCloud解决的是这些问题中的服务治理问题<br>由这些解决问题的框架加上我们一个个业务模块，以此形成一整套架构，这被称为分布式架构或者微服务架构</p><p>分布式架构的主要特点是高可用，什么是高可用，例如订单模块访问用户模块，如果这些模块只有一台实例<br>那么当用户模块挂了，订单模块岂不是也会被影响到，所以这肯定不是高可用，高可用的前提是集群<br>即一个模块有多个实例，模块也被称为服务，所以可以说订单服务下有多个订单实例，用户服务下有多个用户实例，<br>当某个订单实例访问某个用户实例时，这个用户实例挂了，还有其他用户实例可以访问，不会影响到自己，<br>这就是所谓的高可用，分布式架构需要的就是高可用，可以随时配置服务实例，之后你会看到，分布式架构中，<br>不管什么东西都会是集群配置。最后，或许你会看到分布式架构，微服务架构，在我初学者看来，这两者都是一样的概念。</p></li><li><p>我们在微服务中需要学习哪些技术<br>如何快速学习一项技术，需要看这个技术是什么，有什么作用，在整体环境下解决什么问题，<br>先从大的角度了解这项技术，再去学习这个技术下的每一个部分，</p><p>下面来看看微服务中我们需要学习哪些技术<br>图一：</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF.png" alt="微服务技术栈" loading="lazy"></p><p>图二：  <img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF4.png" alt="微服务技术栈" loading="lazy"><br>图3：<br>  <img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF3.png" alt="微服务技术栈" loading="lazy"><br>接着看下，黑马和尚硅谷微服务课程中教授的框架：<br>黑马：</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF2.png" alt="微服务技术栈" loading="lazy"><br>  尚硅谷：<br>  <img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/Springcloud%E5%8D%87%E7%BA%A7.png" alt="微服务技术栈" loading="lazy"><br>  最后来看看，微服务架构整体设计：<br>  <img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="微服务技术栈" loading="lazy"></p></li><li><p>服务注册中心<br>黑马尚硅谷的网课我都看，目前学完nacos为止，个人感觉尚硅谷网课非常不错，我们看上面尚硅谷技术图中<br>服务注册中心下需要学习的框架是：eureka，ZooKeeper，consul，nacos，当然在学习这些框架时候<br>我还学习了部分Ribbon的部分知识，本篇博客就围绕简单介绍这几个框架的应用吧，当然在介绍框架之前<br>让我们来了解下，什么是服务注册中心</p><p>上面提到SpringCloud是用来解决服务治理问题的，而SpringCloud正是借助eureka模块来实现服务治理的，<br>在传统的RPC远程调用框架中，管理每个服务与服务之间的依赖关系比较复杂，管理非常复杂，所以需要使用<br>服务治理，管理服务与服务之间的依赖关系，可以实现服务调用，负载均衡，容错等，实现服务发现与注册<br>上述的服务就是我们说的模块，即服务=模块</p><p><strong>服务注册中心概念</strong>：你可以想象，有一个服务器，我们所有微服务将自身的信息，IP，端口号等等<br>信息保存在服务器的程序中，当有一个微服务/服务实例(服务或模块内的其中一个实例)想访问另一个微服务<br>时，它会先从保存微服务信息的服务器上获取其他微服务的信息，再发送请求到指定的微服务获取数据。<br>这个服务器上运行的程序，能保存微服务的自身信息，能把数据交给需要请求的微服务，<br>这个程序或者说服务/模块，被称为服务注册中心。</p><p>我们微服务将自身数据保存在服务注册中心这个过程叫做<strong>服务注册发现</strong><br>我们微服务拿到其他微服务的信息，向其中一个微服务发送请求这个过程叫做<strong>服务调用</strong>，<br>我们微服务想调用其他服务时，先从服务注册中心获取这个服务的全部实例数据到本地内存中，然后挑选其中<br>一个服务实例，向它发送真实请求，这个挑选一个服务实例的过程被叫做<strong>软件负载均衡</strong>，<br>与硬件负载均衡nginx不同的是，软件负载均衡实现微服务内部调用的负载均衡，而nginx则是内外系统的负载均衡。<br>对于发起请求的微服务，我们叫它<strong>服务消费者</strong>，对于响应请求的微服务，我们叫它<strong>服务提供者</strong>。<br>最后，实现服务注册中心功能有很多种框架或模块，例如：eureka，ZooKeeper，consul，nacos<br>下面将会讲这些框架的使用，因为没正式学过ZooKeeper，只在网课中看老师在linux中使用过，所以没有去了解。<br>另外顺便介绍下ribbon的使用，这是一个实现客户端软件负载均衡的工具。</p></li></ul><blockquote><p><span id="f">项目基本介绍</span></p></blockquote><p>在讲各种服务注册中心框架之前，我先大概介绍一下他们在什么环境下测试的</p><ul><li><p>项目结构图<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BE.png" loading="lazy"><br>MyAPI_Commons放着所有模块都需要的代码，都是些实体类<br>MyConsumer_Order80是eureka测试中服务消费者，端口80，表示订单服务<br>MyConsumerXXX_Order80则是使用不同技术作为服务消费者<br>MyEureka_Server7001,7002是eureka服务注册中心<br>MyProvider_Payment8001,8002是eureka测试中服务提供者，表示支付服务<br>MyProviderXXX_Payment则是使用不同技术作为服务提供者</p></li><li><p>项目POM文件<br>下面是主项目MySpringCloud的pom文件</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>world.keyi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>MySpringCloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--父模块下所有子模块，父模块打包方式务必是POM方式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>MyAPI_Commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>MyEureka_Server7001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>MyEureka_Server7002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>MyProvider_Payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>MyProvider_Payment8002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>MyConsumer_Order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>MyProviderConsul_Payment8006<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>MyConsumerConsul_Order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>MyProviderNacos_Payment8840<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>MyConsumerNacos_Order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--统一jar包和版本号的管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>2.13.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok</span><span class="token punctuation">></span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>8.0.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        子模块继承之后，提供作用：锁定版本+子模块(module)不用写groupId和version        dependencyManagement中的依赖，子模块如果使用了其中的依赖，依赖的版本号都是继承这里        XXX-dependencies中包含很多个依赖，所有只需要引入其整体就行。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--springCloud依赖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--springCloudAlibaba依赖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--mysql依赖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mysql.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--druid依赖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;druid.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--mybatis依赖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mybatis.spring.boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;junit.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;lombok&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;log4j.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>SpringBoot，SpringCloud，SpringCloudAlibaba三者之间版本的选择<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/boot-cloud-alibaba%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB.png" loading="lazy"></p></li><li><p>开发项目流程<br>这个与本篇博客的服务注册中心没关系，主要是想记录一下，下面配置名称都是中文名，<br>因为我使用了idea中文插件，如果你也想配置某个功能，请按照英文名找相应配置项</p><ul><li><p>选择maven中的<code>maven-archetype-site</code>创建项目<br>(可以选择其他的demo，反正最后src都删掉，只留pom.xml文件)</p></li><li><p>设置文件编码，打开项目设置，在设置 &gt;  编辑器  &gt;  File Encodings  之中<br>将Global Encoding，Project Encoding，及下面的属性文件的默认编码都改为UTF-8<br>并且将[属性文件的默认编码]旁边打上勾√</p></li><li><p>开启项目注解，打开项目设置，在设置  &gt;  构建，执行，部署  &gt;  编译器 &gt;  Annotation Processors中<br>将Default和maven default annotation processors profile中的启用注释处理打上勾√</p></li><li><p>设置项目版本，打开项目设置，在设置  &gt;  构建，执行，部署  &gt;  编译器  &gt;  java编译器中<br>将目标字节码版本改成8，然后打开项目结构，在模块中点击相应的模块，在右边选择语言级别为8</p></li><li><p>将项目中的<code>*.idea</code>目录或<code>*.iml</code>文件隐藏，打开设置 &gt;  编辑器  &gt;  文件类型(File types)<br>在忽略文件和文件夹输入框中加上：<code>*.idea;*.iml</code>即可，推荐！</p></li><li><p>以上就是父项目的创建，父项目创建完毕后，就是子项目/模块的创建</p><p>大体上就是：创建模块–&gt;改POM文件–&gt;写启动类–&gt;写yaml文件–&gt;写业务类<br>业务类流：建表–&gt;写实体类–&gt;controller–&gt;service–&gt;dao</p></li></ul></li></ul><blockquote><p><span id="b">eureka的基本使用</span></p></blockquote><p>eureka框架是实现服务注册中心的其中一种方式，服务注册中心基于CS架构，分为客户端和服务端，<br>所有微服务都是客户端，eureka作为服务端，下面是eureka注册中心架构图，其他注册中心基本如此：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/eureka.png" loading="lazy"></p><p>让我们再次捋一捋：服务消费者和服务提供者作为eureka客户端注册到eureka服务中心，当服务消费者发起<br>服务调用时，会被ribbon拦截到请求，ribbon会向eureka注册中心获取服务提供者的服务列表，因为该服务下<br>可能包含多个服务实例，然后使用负载均衡算法选择一个服务实例，向该实例发起请求。</p><p><strong>eureka服务端和客户端的配置</strong></p><ul><li><p>eureka服务端配置</p><ul><li><p>如上面项目结构图中一样，创建好MyEureka_Server7001子模块，然后引入eureka服务端依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup">//该依赖中包含ribbon的依赖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>eureka服务模块的application.xml</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001  <span class="token comment">#eureka服务端的实例名字</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#表示不向注册中心注册自己</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span>      <span class="token comment">#就是指定eureka服务注册中心的地址，下面配置的是其他eureka服务端，达到集群效果。</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7002<span class="token punctuation">:</span>7002/eureka/      <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#关闭eureka自我保护模式</span><span class="token comment">#    eviction-interval-timer-in-ms: 2000   #eureka内部定时任务调用频率，用于剔除过期的实例</span></code></pre></li><li><p>eureka服务模块的启动类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token comment">//开启eureka服务端注解，表示该模块作为eureka服务注册中心</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEurekaServer7001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyEurekaServer7001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>eureka客户端配置<br>我们要模拟订单模块的一个实例向支付模块的一个实例发起请求，首先需要配置订单实例和支付实例<br>两个微服务作为我们的eureka客户端，下面是配置信息</p><ul><li><p>订单实例，MyConsumer_Order80</p><pre class="language-markup" data-language="markup"><code class="language-markup">//eureka客户端依赖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml">//订单实例的application.yaml<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> MyConsumerOrder80<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#是否注册进服务注册中心</span>    <span class="token comment"># 是否从服务注册中心抓取已有的注册信息，默认为true，单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token comment"># 服务注册中心的地址</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka  <span class="token comment"># 单机版</span><span class="token comment">#      defaultZone: http://eureka7001:7001/eureka,http://eureka7002:7002/eureka  # 集群版</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//MyConsumer_Order80启动类</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConsumerOrder80</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyConsumerOrder80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>支付实例，MyProvider_Payment8001<br>eureka客户端依赖同上</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">//MyProvider_Payment8001的application.xml<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> MyProviderPayment  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mycloud<span class="token punctuation">?</span>serverTimezone=GMT<span class="token important">&amp;useSSL=false&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123765</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span><span class="token comment">#  type-aliases-package: world.keyi.entities   # 所有Entity别名类所在包，别名在MyAPI_Commons模块中</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#是否注册进服务注册中心</span>    <span class="token comment"># 是否从服务注册中心抓取已有的注册信息，默认为true，单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token comment"># 服务注册中心的地址</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka  <span class="token comment"># 单机版</span><span class="token comment">#      defaultZone: http://eureka7001:7001/eureka,http://eureka7002:7002/eureka  # 集群版</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> payment8001  <span class="token comment">#配置主机名，在eureka界面上status下就会显示该名称，而不是主机名称+服务名称+端口号</span>    <span class="token comment">#在eureka界面上，鼠标放到status下的链接上，左下角可以显示该服务的ip地址端口号等信息，表示点击后会跳转的地址</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment">#    lease-renewal-interval-in-seconds: 1    #每次间隔多长时间发送心跳，默认30秒</span>     <span class="token comment">#过了多长时间内不发送心跳，如果没有开启eureka保护模式，则会被剔除，默认90秒</span><span class="token comment">#    lease-expiration-duration-in-seconds: 2   </span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//MyProvider_Payment8001的启动类</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProviderPayment8001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyProviderPayment8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li></ul><p>本次实验eureka服务端和客户端的配置已经完成，当我们启动eureka服务模块后，再启动订单模块和支付模块后<br>输入eureka的网址：<code>http://localhost:7001</code>，我们就可以发现，订单服务和支付服务都注册到了eureka中了</p><p>让我们来看看订单服务如何调用支付服务呢？<br>在没学习服务调用框架之前，我们可以使用restTemplate库来调用其他微服务，下面是restTemplate的配置<br>以及订单服务的controller，支付服务的controller</p><ul><li><p>restTemplate的配置，当然是配置在订单模块中，因为是它发起请求嘛</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>订单模块的controller</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PAYMENT_URL<span class="token operator">=</span><span class="token string">"http://localhost:8001/payment/eureka/"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"正在获取订单数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span>  restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>PAYMENT_URL<span class="token operator">+</span>id<span class="token punctuation">,</span><span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Payment</span> payment<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"正在存入订单数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>PAYMENT_URL<span class="token punctuation">,</span>payment<span class="token punctuation">,</span><span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>支付模块的controller</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">world<span class="token punctuation">.</span>keyi<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/eureka"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">PaymentService</span> paymentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">></span></span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Payment</span> payment <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询结果是："</span><span class="token operator">+</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"查询成功，访问的port:"</span><span class="token operator">+</span>port<span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span><span class="token string">"查询失败"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Payment</span> payment<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"插入结果是："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"插入成功，访问的port:"</span><span class="token operator">+</span>port<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"插入失败"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>以上是最普通不过的服务之间的调用，虽然我们可以在eureka网址上查看的到订单模块和支付模块的信息，<br>表明这两个模块已经注册到了eureka服务端上，但是上面的调用，完全没有使用到eureka提供的信息，<br>并且，因为请求路径写死，表明订单模块只能访问到支付模块的固定一个支付实例，完全没有高可用，也没有所谓的负载均衡<br>那么，订单模块如何获取eureka上的支付模块数据呢？当支付模块下有多个支付实例时，又是如何实现负载均衡的呢？配置步骤如下：</p><ul><li><p>将订单模块的请求地址改成支付模块的服务名称</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PAYMENT_URL<span class="token operator">=</span><span class="token string">"http://MYPROVIDERPAYMENT/payment/eureka/"</span><span class="token punctuation">;</span></code></pre></li><li><p>在restTemplate的Bean上添加@LoadBalanced注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token comment">//使得请求可以被负载均衡，配置后请求的接口应该是服务端的项目名称，例如：MyProviderPayment，这就是Ribbon的负载均衡的功能</span>    <span class="token annotation punctuation">@LoadBalanced</span>       <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>OK，通过配置我们就可以实现，订单模块调用支付模块的数据了，你可能好奇，为什么请求地址要写成支付模块<br>的服务名称，这里的服务名称就是支付模块中配置的<code>spring.application.name</code>，底层是如何解析这个服务名称<br>负载均衡又是如何实现的呢？别急，在ribbon中我们会讲到。</p><p>上面实现的是单个订单实例访问单个支付实例，没有负载均衡的效果，因为只有一台实例嘛，并且eureka也不是<br>集群的配置，只有一台eureka服务，那么如何配置多个eureka，达到集群的效果的？<br>实际上我们只需要在eureka的application.yaml上配置其他eureka服务地址即可，所有eureka实例互相配置其他<br>eureka实例的地址，而客户端则配置所有的eureka服务实例</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">//MyEureka_Server7001，eureka服务端<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001  <span class="token comment">#eureka服务端的实例名字</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#表示不向注册中心注册自己</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7002<span class="token punctuation">:</span>7002/eureka/ <span class="token comment">#配置eureka集群中其他的地址</span>//MyEureka_Server7002，eureka服务端<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7002</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7002  <span class="token comment">#eureka服务端的实例名字</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#表示不向注册中心注册自己</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001<span class="token punctuation">:</span>7001/eureka/ <span class="token comment">#同上</span>//订单服务<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> MyConsumerOrder80<span class="token comment">#服务名称，服务名称可以相同，表示一个服务名称下有多个服务实例</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#是否注册进服务注册中心</span>    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token comment"># 服务注册中心的地址</span><span class="token comment">#      defaultZone: http://localhost:7001/eureka  # 单机版</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001<span class="token punctuation">:</span>7001/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002<span class="token punctuation">:</span>7002/eureka  <span class="token comment"># 集群版</span>//支付模块同样如此配置，只需要配置eureka.client.service<span class="token punctuation">-</span>url.defaultZone即可</code></pre><p>讲完eureka服务端和客户端的配置，讲完如何配置使得可以通过服务名称达到请求支付实例，<br>并且还具有负载均衡的效果，讲完如何配置eureka集群，接下来我们讲讲eureka的保护机制</p><p>eureka有一个保护机制，即当微服务注册到eureka上后，每30秒发送一次心跳给eureka服务注册中心，<br>如果90秒后，eureka发现微服务还没有发送心跳，eureka本来是要剔除该微服务的，但是如果eureka在短时间内<br>发现过多的微服务超过90秒没有发送心跳，就会认为当前网络不是很好，便会开启保护模式，不会剔除这些微服务<br>eureka的保护机制是默认开启的，那么如何关闭保护机制呢？通过修改eureka的application.yaml中的<br><code>eureka.server.enable-self-preservation=false</code>来关闭保护机制<br>eureka的保护机制强调的是可用性，即当网络不好的时候，首先保证用户的可用性，即属于CAP理论中的AP分支<br>CAP即数据一致性，数据可用性和数据容错分区，分为AP和CP分支，下面是一张CAP阵营的图片<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/CAP%E7%90%86%E8%AE%BA.png" loading="lazy"></p><p>以上就是关于eureka的介绍及基本使用</p><blockquote><p><span id="c">ribbon的基本使用</span></p></blockquote><p>还记得刚刚上面说的嘛？为什么我们订单模块中使用服务名称就可以请求到支付模块呢？<br>为什么加上@LoadBalanced注解，就可以实现请求负载均衡？全部都是ribbon的功劳<br>当我们发出请求后，ribbon会拦截我们的请求，拿到服务名称，根据服务名称获取eureka注册中心上相应的服务<br>这个服务可能有多个服务实例，ribbon会根据不同的负载均衡算法去选择一个服务实例，拿到该服务实例的URI<br>再去请求这个地址，这就是ribbon在请求时的作用。这里来一张ribbon的执行流程图片<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/Ribbon%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" loading="lazy"><br>下面是对上图的解释：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">)</span>拦截我们的<span class="token class-name">RestTemplate</span>请求http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>userservice<span class="token operator">/</span>user<span class="token operator">/</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name">RibbonLoadBalancerClient</span>会从请求url中获取服务名称，也就是user<span class="token operator">-</span>service<span class="token number">3</span><span class="token punctuation">)</span><span class="token class-name">DynamicServerListLoadBalancer</span>根据user<span class="token operator">-</span>service到eureka拉取服务列表<span class="token number">4</span><span class="token punctuation">)</span>eureka返回列表，localhost<span class="token operator">:</span><span class="token number">8081</span>、localhost<span class="token operator">:</span><span class="token number">8082</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token class-name">IRule</span>利用内置负载均衡规则，从列表中选择一个，例如localhost<span class="token operator">:</span><span class="token number">8081</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token class-name">RibbonLoadBalancerClient</span>修改请求地址，用localhost<span class="token operator">:</span><span class="token number">8081</span>替代userservice，得到http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8081</span><span class="token operator">/</span>user<span class="token operator">/</span><span class="token number">1</span>，发起真实请求</code></pre><p>其实呢，我们自己也可以根据服务名称，获取到该服务名称下所有的服务实例，这叫做服务发现，步骤如下：</p><ul><li><p> 程序主入口中加上@EnableDiscoveryClient注解</p></li><li><p>自动注入DiscoveryClient接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span></code></pre></li><li><p>使用DiscoveryClient可以获取eureka上所有的服务名称，或者根据服务名称，拿到注册中心的所有服务实例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"discovery"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">/*查看eureka上注册的所有服务名称*/</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> services <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> service <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/*根据服务名称，查看该服务名称下的所有服务实例*/</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"MYPROVIDERPAYMENT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span> instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>我们知道，一旦开启了@LoadBalanced注解就能实现请求负载均衡，默认情况下，ribbon负载均衡算法是轮询模式<br>来看看ribbon中有多少种负载均衡算法吧<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95.png" loading="lazy">那么怎么更改默认的负载均衡算法呢？更改默认的负载均衡算法有两种方式：</p><ul><li><p>全局生效，即更改后，不管是向那个服务名称发送请求，都是使用该模式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//直接在配置类上增加Bean</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">rule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>局部生效，向指定的服务名称发送请求使用更改的负载均衡算法，向其他服务名称还是使用轮询算法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//在模块的application.yaml中配置</span><span class="token class-name">MyProviderNacosPayment</span><span class="token operator">:</span> #指定某个服务名称，实现更改单个请求该服务时选择指定的负载均衡规则  ribbon<span class="token operator">:</span>    <span class="token class-name">NFLoadBalancerRuleClassName</span><span class="token operator">:</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span><span class="token class-name">RandomRule</span>    #随机算法</code></pre></li></ul><p>通过上面的配置，我们的默认负载均衡算法就可以更改了，那么，可不可以定义自己的负载均衡算法呢？<br>当然也是可以的，下面我们来实现一下ribbon的默认负载均衡算法，轮询算法</p><ul><li><p>首先创建一个LoadBalancer接口，并创建该接口的实现类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//LoadBalancer接口，该接口用于根据实现类的不同实现，找到合适的服务实例</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ServiceInstance</span> <span class="token function">selectInstance</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> instances<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果想实现轮询算法，则实现上面的接口，重写该方法即可，下面是MyLoadBalancer，重写轮询算法</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLoadBalancer</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*        自定义负载均衡算法，实现轮询算法，轮询算法根据:rest请求次数%可用服务集合总数等于index下标        根据该index下标，从而获取可用服务集合中某个微服务。        该算法要做两件事，一是rest请求次数需要在多线程的环境下每次都自增，二是通过取余拿到下标值，返回指定的服务实例        主要问题是rest请求需要在多线程环境下保持自增，我们通过CAS+自旋锁的方式使得rest请求数自增+1        当然使用AtomicInteger.getAndIncrement()就行，我们这是相当于实现这个方法。     */</span>    <span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> current<span class="token punctuation">,</span>next<span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">&#123;</span>     <span class="token comment">//通过do-while不断自旋</span>            current <span class="token operator">=</span> atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//根据内存地址拿到主内存中共同的值到本地内存中</span>            next <span class="token operator">=</span> current <span class="token operator">>=</span><span class="token number">2147483647</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span> current<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//如果current值不变，则将current对应的地址中的值改成next，有乐观锁感觉了</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServiceInstance</span> <span class="token function">selectInstance</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> instances<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>在controller中使用我们自定义的负载均衡算法吧</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token class-name">MyLoadBalancer</span> myLoadBalancer<span class="token punctuation">;</span><span class="token annotation punctuation">@Resource</span><span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span><span class="token comment">/*    测试自定义负载均衡算法*/</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/lb"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">myLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"正在使用自己的负载均衡算法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取该服务名称下所有的服务实例</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> myproviderpayment <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"MYPROVIDERPAYMENT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>myproviderpayment<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>myproviderpayment<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//根据自定义负载均衡算法找到合适的服务实例</span>  <span class="token class-name">ServiceInstance</span> serviceInstance <span class="token operator">=</span> myLoadBalancer<span class="token punctuation">.</span><span class="token function">selectInstance</span><span class="token punctuation">(</span>myproviderpayment<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">URI</span> uri <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//拿到服务实例信息，获取URI发送请求</span>  <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>uri<span class="token operator">+</span><span class="token string">"/payment/eureka/lb"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>OK，最后我们了解一下ribbon的饥饿加载<br>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalancedClient，请求时间会很长<br>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>   <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#开启饥饿加载</span>    <span class="token key atrule">clients</span><span class="token punctuation">:</span> MYPROVIDERPAYMENT <span class="token comment">#指定对该服务饥饿加载</span></code></pre><p>以上是ribbon的全部介绍和使用</p><blockquote><p><span id="d">consul的基本使用</span></p></blockquote><p>consul和eureka一样，也可以作为服务注册中心，我们可以去它官网下载consul应用，运行起来后consul服务端就开启了<br>接下来我们只需要在我们的微服务中配置consul客户端就行，下面是配置步骤</p><ul><li><p>导入consul依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在入口类中加上@EnableDiscoveryClient注解用于consul找到consul客户端服务</p><p>@EnableDiscoveryClient和@EnableEurekaClient异同：</p><ul><li>共同点就是：都是能够让注册中心能够发现，扫描到该服务。</li><li>不同点：@EnableEurekaClient只适用于Eureka作为注册中心，@EnableDiscoveryClient可以是其他注册中心。</li></ul></li><li><p>在模块的application.yaml中增加consul的配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8006</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> MyProviderConsulPayment   <span class="token comment"># 本模块，服务的名称</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token comment"># 注册中心的配置</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span>    <span class="token comment"># 向外暴露本服务，即注册到consul中</span></code></pre></li></ul><p>与eureka不同的是：consul，ZooKeeper都属于CAP中的CP分支，而eureka服务注册中心则是AP分支<br>CP分支强调数据的一致性，一旦发现微服务心跳不正常，立马将该服务信息剔除出注册中心。</p><blockquote><p><span id="e">nacos中关于注册中心的使用</span></p></blockquote><p>nacos是SpringCloudAlibaba中的组件，既能做服务注册中心，也能做服务配置中心，关于服务配置中心，<br>我会在之后的博客中有更细节的介绍使用，这里主要讲讲nacos作为注册中心的使用，下面是nacos关于注册中心的内容</p><ul><li><p>nacos客户端的配置<br>和consul一样，在官网下好nacos运行后，就启动了nacos服务端，端口号是8848，钛金手机~<br>下面是客户端的配置，直接三板斧：加依赖，加注解，加配置</p><ul><li><p>导入nacos依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup">//父工程中引入<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>//子模块中引入<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>增加@EnableDiscoveryClient注解在入口类上</p></li><li><p>增加nacos配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8840</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> MyProviderNacosPayment<span class="token comment">#本模块的服务名称</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>   <span class="token comment">#nacos注册中心地址</span></code></pre><p>配置完成后，访问nacos的地址就可以看到注册中心上已经有模块的信息了</p></li></ul></li><li><p>nacos服务分级存储模型<br>一个服务可能有多个服务实例，这些实例并不一定是在同一个地方，可能有的被部署在上海<br>有的服务实例部署在杭州，北京等等，部署在上海的就是上海机房，部署某地一般就叫某地机房<br>nacos将同一个地方的所有实例划分为一个集群，例如上海集群有2个订单实例，2个支付实例<br>杭州集群有3个订单实例，2个支付实例，当某个微服务访问的时候，首先会访问本集群中的实例，如果<br>本集群中没有这个实例，就会跨集群访问，这种容灾备份的方式非常不错，下面是这种服务分级存储模型<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springcloud/%E6%9C%8D%E5%8A%A1%E5%88%86%E7%BA%A7%E5%AD%98%E5%82%A81.png" loading="lazy"></p><p>要实现集群的效果，我们需要加上相应的配置：<code>spring.cloud.nacos.discovery.cluster-name=XXX</code>，表示该实例属于XXX集群<br>配置好集群后，通过请求，我们发现还是没有达到我们想要的效果：当本集群没有想要的服务实例时才去访问其他集群的实例<br>本集群有就只访问本集群中的服务实例。要达到本集群优先的负载均衡，我们需要增加一些配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">userservice</span><span class="token punctuation">:</span><span class="token comment">#指定某个服务名称，访问该服务时，先访问本地集群的服务实例</span>  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment"># 负载均衡规则 </span></code></pre></li><li><p>nacos权重配置<br>现实生活中，一定有这种情况：有些服务器性能好，我想让他处理更多请求，有些服务器性能差我想让他<br>少处理点请求，这种情况下，nacos的权重就非常有用了，服务实例的权重在nacos的服务注册中可以更改<br>不需要更改我们的代码，默认情况下，所有服务实例的权重都是1，即同集群下随机挑选实例。</p></li><li><p>nacos的环境隔离<br>环境隔离指的是将服务实例区分开来，例如开发环境，测试环境，生产环境等，不同的环境的实例不能相互访问<br>在地点上，我们可以把服务实例分为不同的集群，在项目上，我们把服务实例分为不同的环境<br>那么如何配置服务实例的环境呢？我们的nacos客户端默认的是public环境，如果想更改成其他环境，<br>首先需要在nacos网站上增加一个namespace命名空间，会生成一个命名空间ID，复制这个ID，<br>然后在我们的服务实例上配置命令空间，如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 492a7d5d<span class="token punctuation">-</span>237b<span class="token punctuation">-</span>46a1<span class="token punctuation">-</span>a99a<span class="token punctuation">-</span>fa8e98e4b0f9 <span class="token comment"># 命名空间，填ID</span></code></pre><p>配置好后，启动该服务实例，就可以看到该服务出现在新建的命名空间之下了。</p></li></ul><p>以上就是学习服务注册中心的全部内容，今后碰到新的内容，还会不断的更新，加油加油！</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue完结篇</title>
      <link href="2021/10/10/Vue%E5%AE%8C%E7%BB%93%E7%AF%87/"/>
      <url>2021/10/10/Vue%E5%AE%8C%E7%BB%93%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>完结篇</p></blockquote><p>花了2个月时间，终于把vue学习了一遍，学习的内容有es6各种知识点，webpack，vue2，vue3，包括vue-router，vuex等等<br><strong>现在技术栈</strong>：后端ssm，springboot，nginx，redis，前端js，vue，还是远远不够<br><strong>我的薄弱点</strong>：数据结构和算法，操作系统和计网得重新学一遍，linux，springCloud，多线程<br><strong>我的任务</strong>：</p><ul><li>从现在10月10号开始到12月份中旬搞定springCloud，分布式现在很多公司都用的很多，<br>学之前先把已学的后端技术回顾一下，大概花1星期时间。</li><li>12月中旬到22年3,4月份，学习数据结构和算法，多线程，着手毕业设计。</li></ul><p>下面贴上vue笔记，前两个自己记的，后面是网课资料</p><ul><li><a href="https://github.com/NicknamedCoco/cdn/raw/281850667dc94516be48dcc6ba0f0ffa53144c00/blog/vue/vue%E7%AC%94%E8%AE%B0.txt">vue笔记</a></li><li><a href="https://github.com/NicknamedCoco/cdn/raw/281850667dc94516be48dcc6ba0f0ffa53144c00/blog/vue/vue%E7%AC%94%E8%AE%B02.txt">vue笔记2</a></li><li><a href="https://github.com/NicknamedCoco/cdn/raw/master/blog/vue/vue%E7%BD%91%E8%AF%BE%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0.md">vue网课基础内容笔记</a></li><li><a href="https://github.com/NicknamedCoco/cdn/raw/master/blog/vue/vue3%E7%BD%91%E8%AF%BE%E7%AC%94%E8%AE%B0.md">vue3网课笔记</a></li><li><a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/%E5%B0%9A%E7%A1%85%E8%B0%B7Vue%E7%AC%94%E8%AE%B0.pdf">尚硅谷Vue笔记</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6学习的部分内容</title>
      <link href="2021/10/08/ES6%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9/"/>
      <url>2021/10/08/ES6%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>最后再整理一下es6中的部分知识点，坦白说，我没有专门看网课学习ES6内容，不过看一些廖雪峰博客<br>学习vue网课的时候学到了很多这部分内容，所以索性记录一下，之前我写过es6的promise，模块化，let和const<br>模板字符串，Proxy和Reflect，接下来写es6的一些内容包括一些js其他知识点：</p><ul><li>async和await关键字</li><li>generator函数</li><li>localStorage对象</li><li>this指向问题</li></ul><blockquote><p>async和await关键字</p></blockquote><p>async和await是es7的关键字，使用他们可以实现用同步方式，执行异步操作，<br>async关键字标注的函数是异步函数，函数返回值是promise对象，可以使用 then 方法添加回调函数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"helloAsync"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Promise &#123;&lt;resolved>: "helloAsync"&#125;</span> <span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// helloAsync</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，<br>等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。</p><p>await操作符用于等待一个 Promise 对象, 它只能在异步函数 async function 内部使用。<br>如果等待的不是一个Promise对象，则返回该值本身<br>如果一个 Promise 被传递给一个 await 操作符，<strong>await将等待Promise正常处理完成并返回其处理结果。</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">testAwait</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//x参数作为返回值返回</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">testAwait</span> <span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">helloAsync</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// hello world</span></code></pre><blockquote><p>generator函数</p></blockquote><p>本想好好写一写，但肚子里没货，看了别人写的博客，写的太好了，我再怎么也写不出来<br>索性直接将链接拿过来，省的再去花时间水一篇垃圾博客，看大佬用generate实现一个async/await<br>掘金作者：林三心<br>点击文章：<a href="https://juejin.cn/post/7007031572238958629">20分钟就能搞定的async/await原理！</a></p><blockquote><p>localStorage对象</p></blockquote><p>浏览器本地存储：localStorage,sessionStorage，这两个统称为webStorage<br>本地存储，指的是网站把一些数据存在了浏览器中，打开开发者选项，查看application即可看到数据<br>localStorage是window对象中的属性，所以可以直接使用localStorage对象</p><p>localStorage的操作</p><ul><li><p>存储数据</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*数据都是键值对形式，如果key重复存储，则值会替换，值只能是字符串，如果是数字，存到浏览器时也是字符串如果存对象，不能直接存，使用stringify将对象中数据转成json字符串，即&#123;"name": "万一","age": "20"&#125;，直接存，则存的是[Object Object]*/</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span><span class="token string">"wanyi"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'万一'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'wanyi'</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>读取数据</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*如果读取是对象，结果长这样：&#123;"name": "万一","age": "20"&#125;，那就需要JSON.parse(localStorage.getItem("key")),解析一下json字符串，转成js对象如果读取一个不存在的数据，则返回null*/</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span></code></pre></li><li><p>删除数据</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//删除localStorage上所有数据</span></code></pre></li></ul><p>与localStorage相似的是sessionStorage，上面的四个api，sessionStorage都是相同的使用<br>唯一的区别是：localStorage的数据，当浏览器关闭后，数据依然在，而如果是sessionStorage，浏览器关闭后，数据全部消失</p><blockquote><p>this指向问题</p></blockquote><p>this指向是当我们调用函数的时候确定的，调用方式的不同决定了this的指向不同，一般指向我们的调用者<br>下面是一张总结this指向图片：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98.png" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之基础原理下篇</title>
      <link href="2021/10/08/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E4%B8%8B%E7%AF%87/"/>
      <url>2021/10/08/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E4%B8%8B%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>简述</p></blockquote><p>最近把vue网课看完了，vue2，vue3大体过了一遍，目前准备这几天水两篇博客，整理笔记，然后学习cloud<br>不过学习cloud之前，我觉得还是应该过一下后端的内容，学vue学了两个月，很多东西忘记了，不过记了不少<br>笔记，回顾起来没有太大困难，下面介绍下本篇的具体内容：</p><ul><li><a href="#a">vue响应式原理</a></li><li><a href="#b">vue3中数据代理/数据劫持</a></li><li><a href="#c">vue3中生命周期函数</a></li><li><a href="#d">setup函数的学习</a></li><li><a href="#e">toRef函数</a></li></ul><blockquote><p><span id="a">vue响应式原理</span></p></blockquote><p>在基础原理上篇我们讲过，vue实现响应式原理，主要解决两个问题：</p><ul><li>如何拦截到数据的变化，即数据劫持的实现<br>在上篇中，我们知道vue2实现数据劫持就是通过Object.defineProperty方法实现</li><li>当数据发生改变时，如何让使用该数据的页面发生改变？<br>发布订阅者模式</li></ul><p>下面主要讲讲vue中发布订阅者模式，也就是说页面如何跟着数据改变而改变，以下是个人理解，不妥之处还望见谅</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//先来一个简单的案例，仅仅只展示姓名，年龄</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">'万一'</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">23</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>如上，当我们data中存在name，age数据时，vue2底层会使用Object.defineProperty方法，对这些数据进行<br>数据劫持，也就是说，当我们访问name，修改name，都能劫持到操作，进入到name的get，set方法中去<br>这些经过”加工”的数据被称为响应式数据，因为这些数据都有对应的get，set方法，vue底层将这些响应式数据<br>保存到一个Observer观察者对象中，然后根据每个响应式数据，生成对应的Dep对象，生成name的Dep对象和age的Dep对象，</p><p>当页面中使用到了name，例如<code>&#123;&#123;name&#125;&#125;</code>，就会执行name的get方法，进入get方法后<br>生成一个Watcher对象，每使用一个name就会生成一个Watcher对象，像上面例子中，name会生成3个name的Watcher对象<br>并且，这三个Watcher对象会被放到name对应的Dep对象的数组中保存起来，这是在name的get方法发生的事情，同理age也是如此。</p><p>而当我们修改数据时，例如修改name数据后，会进入到name的set方法中，会调用name对应的Dep对象<br>遍历其中每一个Watcher对象，调用watcher对象中的update方法，页面中使用到的name数据的地方就会发生改变。</p><p>以上就是发布订阅者模式：watcher对象就是订阅者，对应的Dep对象就是发布者，当数据更新，发布者通知所有<br>订阅该数据的watcher对象进行页面更新。</p><p>下面是来自网课中响应式原理的图片：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86.png" loading="lazy"></p><blockquote><p><span id="b">vue3中数据代理/数据劫持</span></p></blockquote><p>在vue3中，如果想让数据是响应式的，需要使用ref函数，reactive函数，ref函数可以将普通数据，对象数据包装成响应式的<br>而reactive函数则只能将对象数据包装成响应式，当然，其实ref函数对于对象数据的处理也是使用reactive函数。</p><p>vue3中，对于基本类型使用Object.defineProperty方法实现响应式数据，ref函数内部对于基本数据就是如此，<br>对于对象类型数据，使用ES6的Proxy对象实现</p><p>下面来看看ref函数和reactive的使用：</p><ul><li><p>ref函数的使用</p><ul><li><p>ref案例之处理基本类型</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  我的名字：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>  我的年纪：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeName"</span><span class="token operator">></span>更改姓名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"夜归风似雪"</span><span class="token punctuation">)</span>   <span class="token comment">//使用ref函数创建的对象是ref对象，这里的数据实现了响应式</span>    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      name<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"晚来天欲雪"</span><span class="token comment">//通过ref函数创建的响应式数据，使用时需要加上.value才是真正数据</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      name<span class="token punctuation">,</span>      age<span class="token punctuation">,</span>      changeName    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>ref案例之处理对象类型</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  person信息：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>person<span class="token punctuation">.</span>sex<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeName"</span><span class="token operator">></span>更改性别<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'boy'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">function</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        person<span class="token punctuation">.</span>value<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">'girl'</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        changeName<span class="token punctuation">,</span>        person      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>总结<br>经过ref函数调用，生成的name,age,person都是refImpl引用对象，数据都保存在refImpl对象的value属性中<br>如果是普通数据类型，value属性保存的就是定义时的数据，例如”夜归风似雪”,23等等，  这些数据使用<br>Object.defineProperty实现响应式的(有setter,getter方法)如果是对象类型，则value属性中保存的是proxy对象<br>如果想修改对象类型中的数据：<code>person.value.sex=&quot;girl&quot;</code>,  对象类型的数据，内部使用vue3中的reactive函数实现响应式</p></li></ul></li><li><p>reactive函数的使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  性别：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>person<span class="token punctuation">.</span>sex<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeSex"</span><span class="token operator">></span>更改性别<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>reactive<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'boy'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">changeSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      person<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">'girl'</span><span class="token comment">//访问，修改由reactive包装的响应式对象，不需要使用.value</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      changeSex<span class="token punctuation">,</span>      person    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>作用：定义一个对象类型的响应式数据(基本类型不要用它，要用ref函数)<br>语法：const 代理对象 = reactive(源对象),接收一个对象(或数组),返回一个代理对象(Proxy实例对象，简称proxy对象)<br>reactive定义的响应式数据是”深层次的”，reactive函数内部基于ES6的Proxy实现，通过代理对象操作源对象<br>内部数据进行操作，ref函数之所以能对对象类型数据进行响应式，底层也是通过reactive函数</p></li></ul><p>既然reactive函数内部基于ES6的Proxy实现，那么我们来看看proxy是如何使得数据是响应式的吧<br>通过Proxy(代理)，我们可以拦截对象中任意属性的变化，即对属性增删改查操作都能够拦截，还记得以前<br>通过Object.defineProperty方法只有get，set方法。<br>下面是一个使用Proxy实现数据响应式的案例</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*数据代理和数据拦截本质上差不多，非要区分的话，下面是个人理解：数据代理指的是，如果A代理B，对A的操作就会使得B更改，而响应式原理指的是，在A对B更改的过程中可以做点事，即劫持到对数据的更改操作*/</span><span class="token comment">//源对象</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'万一'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token comment">/*代理对象，通过对代理对象增删改查，已经实现了数据代理，但没实现响应式(数据劫持)，即我不能拦截到对数据的增删改查操作*/</span><span class="token comment">//let p = new Proxy(person,&#123;&#125;);</span><span class="token comment">/*做到数据劫持*/</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"已经成功劫持到对数据读取操作"</span><span class="token punctuation">)</span>    <span class="token comment">//return target[propName]</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span>   <span class="token comment">//vue3中使用Reflect对属性进行真正操作，好处是：使得框架不必写太多try，catch</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//target是源对象，propName是拦截到的属性，value是接收的新值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"已经成功劫持到对数据修改/添加操作"</span><span class="token punctuation">)</span>    <span class="token comment">//return target[propName]=value</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">,</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>propName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"已经成功劫持到对数据删除操作"</span><span class="token punctuation">)</span>    <span class="token comment">//return delete target[propName]</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><span id="c">vue3中生命周期函数</span></p></blockquote><p>vue3中的生命周期函数与vue2中的有一点小小的变化</p><ul><li><p>将vue2中的beforeDestroy，destroyed函数名改成beforeUnmount，unmounted</p></li><li><p>由通过配置属性的方式，改成composition API的方式，不过原来vue2通过属性配置生命周期函数的方式<br>在vue3中也能使用，Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">beforeCreate<span class="token operator">===</span><span class="token operator">></span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>created<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=></span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>beforeMount <span class="token operator">===</span><span class="token operator">></span>onBeforeMountmounted<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=></span>onMountedbeforeUpdate<span class="token operator">===</span><span class="token operator">></span>onBeforeUpdatepdated <span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=></span>onUpdatedbeforeUnmount <span class="token operator">==</span><span class="token operator">></span>onBeforeUnmountunmounted <span class="token operator">===</span><span class="token operator">==</span><span class="token operator">></span>onUnmounted注意：使用composition <span class="token constant">API</span>的方式没有beforeCreate，created这两个钩子如果你想要使用，你可以通过配置项方式使用，另外setup钩子比beforeCreate钩子更早执行。</code></pre><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/vue3生命周期函数.png"  / loading="lazy"></li></ul><blockquote><p><span id="d">setup函数的学习</span></p></blockquote><p>setup函数是所有Composition API(组合API)表演的舞台，我们可以在该函数中·，定义数据<br>创建函数<br>setup函数的两种返回值：</p><ul><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。</li><li>若返回一个渲染函数：则可以自定义渲染内容。</li></ul><p>注意点：</p><ul><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methods、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中不能访问到Vue2.x配置（data、methods、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象，而是promise，模板看不到return对象中的属性。<br>（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li><li>setup函数中this是undefined，因为setup函数在beforeCreate函数前面执行，此时组件中的data和methods还没有初始化。</li></ul><p>setup的参数：</p><ul><li>props：值为对象，包含：组件外部传递过来(组件标签上传递的数据)，且组件内部声明接收了的属性(使用配置项prop接收的属性)</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul><blockquote><p><span id="e">toRef函数</span></p></blockquote><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。简单点说就是创建一个响应式数据，指向某个对象中的属性。<br>语法：<code>const name = toRef(person,&#39;name&#39;)</code><br>应用:   要将响应式对象中的某个属性单独提供给外部使用时。<br>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code><br>toRefs专业定义： toRefs()函数可以将reactive()创建出来的响应式对象，转换为普通对象，<br>    只不过这个对象上的每个属性节点，都是ref()类型的响应式数据</p><p>toRef，toRefs的使用：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  person信息：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>sex<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'./components/HelloWorld.vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">,</span>reactive<span class="token punctuation">,</span>toRef<span class="token punctuation">,</span>toRefs<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    HelloWorld  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'boy'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toRef</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//ObjectRefImpl &#123;_object: Proxy, _key: 'color', __v_isRef: true&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toRefs</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&#123;color: ObjectRefImpl, sex: ObjectRefImpl&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>  <span class="token comment">//...是扩展运算符，将对象中的属性加到另一个对象中，解构赋值</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*不要对一个响应式数据进行解构，会破坏响应式，但上面...refs(person)中refs(person)返回的普通对象*/</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之基础原理上篇</title>
      <link href="2021/09/24/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E4%B8%8A%E7%AF%87/"/>
      <url>2021/09/24/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E4%B8%8A%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>本来打算10月份学cloud，但是找到特别好的vue网课总不能不学吧，比之前的网课新了很多，发现vue中有很多<br>内容还不懂，所以具体什么时间学完vue，开始去学cloud还不清楚，定个小目标，10月15号之前，学完那个网课<br>并且写几篇关于vue3的博客吧，学一个技术就应该扎稳脚步，不能急功近燥，下面是我了解的一些关于vue的<br>基本原理，就当个记录吧。</p><ul><li><a href="#a">v-for中key的原理</a></li><li><a href="#b">Vue监测数据的原理</a></li><li><a href="#c">生命周期函数</a></li><li><a href="#d">组件与Vue原型对象的关系</a></li><li><a href="#e">render函数</a></li></ul><blockquote><p><span id="a">v-for中key的原理</span></p></blockquote><p>我们都知道，使用v-for遍历元素时，在标签上应该加上key属性，并且key属性必须要是唯一的，这是为什么呢？<br>下面是一段代码关于v-for使用：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"addPerson"</span><span class="token operator">></span>点击增加老刘<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"p in arr"</span><span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      arr<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token string">'001'</span><span class="token punctuation">,</span>name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token string">'002'</span><span class="token punctuation">,</span>name<span class="token operator">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token string">'003'</span><span class="token punctuation">,</span>name<span class="token operator">:</span> <span class="token string">'王五'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">addPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token string">'004'</span><span class="token punctuation">,</span>name<span class="token operator">:</span> <span class="token string">'老刘'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>这里我没给li标签加上key属性，则Vue会自动给li标签加上key属性，且属性值是数组的index，如果单纯的展示<br>数组的数据没有问题，但是如果对数组进行了修改，并且打断了原来的index顺序，就会造成错误，什么意思呢？<br>你最开始遍历数组，张三，李四，王五，生成三个li标签，每个标签，Vue给你增加了一个key属性，属性值是index<br>所以张三这个标签key为0，李四是1，王五是2，后来你点击了按钮，为数组增加了新的元素，并且放在数组最前面<br>这就导致，新增的老刘是0，张三是1，李四是2，王五是3，这就叫做打乱了原有的index顺序，这种方式会产生一些错误！<br>下面有张图，可以看到具体的错误：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/v-for%E4%B8%ADkey%E7%9A%84%E5%8E%9F%E7%90%86.png" loading="lazy"></p><p>当我们点击新增数据之前，我们在每个标签的input中输入对应的值，但是当我们新增数据后，发现新增的老刘的<br>input框后有张三的数据，并且下面的数据都不正常了，这显然是不对的，我们希望新增老刘后的input是空的<br>所以为什么会存在这种错误呢？</p><p><strong>key的原理</strong>：key是用来给Vue做标识的，即给标签加上个唯一标识，可以认为是id，Vue拿到原来数据，<br>首先会根据数据生成一个虚拟DOM，页面上看到的标签是真实DOM，虚拟DOM是放在内存中，虚拟DOM中<br>就会使用到key，标识虚拟DOM的每一个标签，然后<strong>虚拟DOM会转成真实DOM</strong>，从而被我们看得到，<br>当我们遍历时没有指定key，或者key=index时，新增数据老刘后生成的新虚拟DOM中key值就会更改，<br><strong>key值的主要作用就是用于新虚拟DOM与旧虚拟DOM对比，决定是生成新真实DOM还是复用旧真实DOM</strong>，<br>例如老刘的key是0，会找到key为0的旧虚拟DOM即张三，对比虚拟DOM内部，老刘与张三不相等，生成新的真实DOM即老刘<br>而新虚拟DOM中存在input，此时旧虚拟DOM张三中也有input，则会复用旧虚拟DOM中input的旧真实DOM<br>因为旧虚拟DOM生成过一整套真实DOM，所以将张三后面的input对应的input旧真实DOM拿过去复用，<br>所以我们看到老刘-30后面是张三的input框，并且其中的数据还在，这里的数据是旧真实DOM中的，后面几个input框错用也是如此。</p><p>总结一下：</p><pre class="language-none"><code class="language-none">在本案例中，新虚拟DOM就是根据增加后的数据所生成的虚拟DOM，而根据新虚拟DOM生成的自然是新真实DOM旧虚拟DOM就是根据原来数据生成的虚拟DOM，而根据旧虚拟DOM生成的自然是旧真实DOMkey就是虚拟DOM的标识，或者说id，根据新虚拟DOM的key找到相同的旧虚拟DOM，然后对比其中的内容如果内容相同，则复用对应的旧真实DOM，如果内容不相同，则生成新真实DOM</code></pre><p>下面是一张图片总结：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/v-for%E4%B8%ADkey%E7%9A%84%E5%8E%9F%E7%90%862.png" loading="lazy"></p><blockquote><p><span id="b">Vue监测数据的原理</span></p></blockquote><p>Vue是如何做到响应式的，说的就是Vue响应式原理或者说v-model原理，这常常在面试中被问到，<br>Vue实现响应式得做到两点：</p><ul><li>Vue是如何知道数据被改变了？说的就是Vue是怎么监测数据的，即本小节所要讲的原理</li><li>Vue是怎么更新页面的，vue需要知道哪些DOM使用到了被修改的数据，并及时更新这些DOM<br>而没有被修改数据的DOM页面不需要更改，这说的是发布订阅原理，留在以后讲。</li></ul><p>Vue2监测数据通过<code>Object.definedProperty</code>方法，通过该方法我们可以监测到对其他对象的属性的读改操作<br>这被称为数据劫持，即，只要别人读取修改这个数据，我们能拦截到，当然数据劫持在另一个角度来看也像<br>数据代理，下面看看具体代码：</p><pre class="language-none"><code class="language-none">&lt;script&gt;  let data &#x3D; &#123;    name: &#39;万一&#39;,    age: 23  &#125;  let _data &#x3D; &#123;&#125;  Object.defineProperty(_data,&#39;name&#39;,&#123;    get()&#123;      return data.name    &#125;,    set(val)&#123;        data.name&#x3D;val    &#125;  &#125;)  console.log(_data)  &#x2F;*    输出结果如下：      name: （…）      get name: ƒ get()      set name: ƒ set(val)      [[Prototype]]: Object   *&#x2F;&lt;&#x2F;script&gt;&#x2F;*当我们通过Object.definedProperty给_data对象中新增name属性时，我们同样给这个name属性增加getter和setter方法，从打印_data对象就可以看到，确实有getter和setter方法，其次在getter中返回data的name数据，setter中将修改数据写到data对象的name中，这就使得_data中的name属性和data中的name属性存在了关联，这种通过修改_data中name的值达到修改data中name的值，就叫做数据代理我们获取data中name只需要通过_data.name实现，我们修改data中name只需要通过_data.name&#x3D;&quot;xxx&quot;这就是数据代理，数据代理也被叫做数据劫持，因为我们可以在_data中name的getter和setter方法中做一些其他的事，相当于劫持了对data的读改操作。*&#x2F;</code></pre><p>同理，Vue中也存在数据代理或者说数据劫持，我们的数据作为属性放在data对象中，而这里面的数据都会被<br>放到Vue实例的<code>_data</code>属性中，并且每一个属性都有getter和setter方法，不仅如此，为了方便我们使用<br>Vue将<code>_data</code>属性中的数据又做了一层代理，将<code>_data</code>中数据全部作为了Vue实例的属性，以后我们每次修改<br>Vue实例的数据就相当于修改<code>_data</code>属性中的数据，修改<code>_data</code>属性中的数据就相当于修改data的数据<br>下面有一张数据代理或者说数据劫持的图片：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/vue%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86.png" loading="lazy"></p><p>上图中省略了setter和getter方法，通过代理，我们直接在浏览器按f12，输入<code>vm.name=&quot;万一&quot;</code>，就能修改掉原来<br>data中的name数据，因为数据被最终代理到Vue的实例上，我们在模板中使用<code>&#123;&#123;name&#125;&#125;</code>，就能访问到data中的<br>值，不然只做一层代理的话，你需要<code>&#123;&#123;_data.name&#125;&#125;</code>才能访问得到data中的name值，显然简化了很多。<br>至此，Vue就是通过这种方式去监测data数据的，不管是访问还是修改data数据，都会调用到Vue中getter和<br>setter方法，在这两个方法里可以做一些发布和订阅的事，这个之后再讲，总之现在data中数据都是响应式的了<br>因为被代理后，都有了相应的getter和setter方法，但是有些时候，data中的数据并不是响应式的。</p><p>在某些情况下，data中数据不是响应式：</p><ul><li><p>当Vue实例创建完毕，你动态向data的属性中增加某个属性时，则该属性不是响应式的，例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//初始数据：</span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  message<span class="token operator">:</span><span class="token string">'加油!'</span><span class="token punctuation">,</span>  student<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'wanyi'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">23</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//你中途给school新增属性：</span><span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">'男'</span>你会发现你新增数据成功了，但打开_data中数据一看，sex属性并没有getter和setter方法这说明该属性并不是响应式，直接影响是虽然数据更新了，但页面<span class="token constant">DOM</span>中用到school<span class="token punctuation">.</span>sex的地方没有任何变化注意点：<span class="token number">1</span><span class="token punctuation">)</span>在模板中通过<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>time<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>访问data中的直接属性，如果没有time属性则程序直接报错如果通过<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>school<span class="token punctuation">.</span>sex<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>访问data属性的属性，即school的不存在的属性却并不报错。<span class="token number">2</span><span class="token punctuation">)</span>在Vue初始化完毕后，你不能中途向data中增加直接属性，你可以给data的属性增加属性  但是这个新增的属性如果是向上面的方式添加，则这个属性不是响应式的，即没有getter和setter方法</code></pre></li><li><p>直接修改data中数组中的元素，而不通过指定方法修改数组，会使用修改后的元素不是响应式的，例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"p in persons"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"p.id"</span><span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>sex<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      message<span class="token operator">:</span><span class="token string">'加油!'</span><span class="token punctuation">,</span>      persons<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'周杰伦'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>id<span class="token operator">:</span> <span class="token string">'001'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'马冬梅'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>id<span class="token operator">:</span> <span class="token string">'002'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'女'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'周冬雨'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>id<span class="token operator">:</span> <span class="token string">'003'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'女'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'胡歌'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>id<span class="token operator">:</span> <span class="token string">'004'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>当我们中途修改数组中元素时，则修改后的元素并不是响应式的，没有被数据代理，直接影响是，虽然你修改了数据<br>但是页面没有响应修改，下面是一张修改数据的过程：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/vue%E7%9B%91%E6%B5%8B%E6%95%B0%E6%8D%AE.png" loading="lazy"></p></li></ul><p>那么如何才能使得中途新增的属性(该新增的属性不能是data的直接属性)是响应式的呢？如何使得修改数组中元素是响应式的呢？<br><strong>对于中途新增属性</strong>，我们可以使用<code>Vue.set()</code>方法，或者<code>app.$set</code>，这两者是等同的，使用方法如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propertyName<span class="token operator">/</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span>app<span class="token punctuation">.</span>$<span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propertyName<span class="token operator">/</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span></code></pre><p>测试原始数据还是和上面新增对象属性的例子一样，下面是使用上面两个方法响应式增加属性：</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/vue%E7%9B%91%E6%B5%8B%E6%95%B0%E6%8D%AE2.png" loading="lazy"><br>注意：在浏览器控制台中直接使用<code>app.$set</code>，<code>app.student</code>使用，如果是在methods中，这里的app就是this。</p><p><strong>对于修改数据属性</strong>：我们可以通过调用这7个方法修改数组的元素，这样才能使得修改后的元素是响应式的<br>这七个方法分别是：<code>push(),pop(),shift(),unshift().splice(),sort(),reverse()</code><br>值得注意的是，这7个方法都是Vue包装后的方法，并不是原生数组方法，通过包装原生数组方法，增加getter，setter方法<br>除了使用这7个方法修改数组的元素，你也可以使用上面两个方法：<code>Vue.set()或app.$set()</code>修改数组元素。</p><p>最后有一个悲伤的事，在Vue3中Vue.set和app.$set都被弃用了，连上面监测属性使用的Object.definedProperty方法也被弃用了。</p><blockquote><p><span id="c">生命周期函数</span></p></blockquote><p>生命周期函数也叫钩子函数，顾名思义，我们写好钩子函数，等待vue去上钩，呸，等待vue去调用，<br>vue的生命周期分为创建，挂载，更新，销毁，四个阶段，分别对应8个钩子函数，下面是两张生命周期图片<br>我们在不同的钩子函数中可以做点不同的事情，当vue运行到了某个时期就去调用：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.jpg" loading="lazy"></p><p>Vue中Dom的异步渲染</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"a in arr"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>sum<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../node_modules/vue/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            data<span class="token operator">:</span><span class="token punctuation">&#123;</span>                 arr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 如果在created改变数据，那么模板编译进行一次，如果在mounted中改数据，会再次编译模板 </span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/*在beforeMount之前编译模板，编译原有数据的3个li,存在内存中(形成虚拟DOM)当数据在beforeMount更新时，立即将内存中的模板(虚拟DOM)编译成4li最后挂载到真实的DOM上，不会引发beforeUpdate函数的调用*/</span>              <span class="token comment">//this.arr=[1,2,3,4];</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">// 在挂载的过程中,执行的这个函数</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token comment">/*          在mounted之前改数据，不会调用beforeUpdate这个函数进入mounted函数表示DOM已经挂载完毕如果在mounted函数中修改数据，则立即将内存中的模板编译成4li，再次把最新虚拟DOM挂载到真实的DOM上会引发beforeUpdate函数的调用            */</span>             <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">/*                VUE中DOM的更新是异步的                如何在mounted中操作最新的真实DOM呢？$nextTick需要传入一个回调函数，会当真实的DOM再次更新完成，会立即调用这个回调函数                */</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                    <span class="token keyword">let</span> oLis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oLis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeUpdate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>还有另外三个钩子函数：activated，deactivated，errorCaptured，<br>讲这三个钩子函数就不得不讲vue中两个内置组件，component组件，keep-alive组件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">component内置组件<span class="token operator">:</span> 每次能动态显示一个组件，当切换下一个组件时，当前组件要销毁<span class="token function">也就是说，当组件被激活时</span><span class="token punctuation">(</span>被我们点击看到<span class="token punctuation">)</span><span class="token punctuation">,</span>组件执行Created函数，当组件失活时，调用destroy函数等使用方式：<span class="token operator">&lt;</span>component is<span class="token operator">=</span>“组件名”<span class="token operator">></span>keep<span class="token operator">-</span>alive<span class="token operator">:</span>用于缓存组件，如果该组件还会再启用，那么可以使用keep<span class="token operator">-</span>alive进行组件缓存和优化，提高性能缓存的组件不需要销毁，也不需要再创建使用方式：<span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span>“组件名”<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span class="token comment">//如果是动态属性，那么会去data中取值</span>当然你也可以在路由中使用：<span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span></code></pre><p>activated和deactivated两个钩子函数在路由篇讲过，组件被缓存后，这两个钩子函数就代替了created和destroy<br>而errorCaptured则是当子孙组件出错时，会调用这个钩子函数，这个函数能接收三个参数：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">errorCaptured</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/*当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回false，以阻止该错误继续向上传播。  */</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>“子组件报错”<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>生命周期具体笔记：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>，生命周期函数中的<span class="token keyword">this</span>都是vue实例或者组件实例对象<span class="token number">2</span>，除了更新阶段的钩子函数，其他钩子函数只执行一次<span class="token number">3</span>，执行<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法销毁vue实例，直接执行beforeDestroy函数，再是destroyed函数在beforeDestroy函数中虽然可以操作数据，但不会触发更新操作了，没有回头路了<span class="token number">4</span>，在mounted函数中通常用来发送ajax请求，启动定时器，绑定自定义事件，订阅消息等初始化操作<span class="token number">5</span>，在beforeDestroy函数中通常用来清除定时器，解绑自定义事件，取消订阅消息等收尾工作<span class="token number">6</span><span class="token function">，调用destroy销毁vue后，自定义事件会失效</span><span class="token punctuation">(</span>子组件向父组件通信<span class="token punctuation">)</span>，但原生<span class="token constant">DOM</span><span class="token function">事件依然有效</span><span class="token punctuation">(</span>click等自带的事件<span class="token punctuation">)</span></code></pre><blockquote><p><span id="d">组件与Vue原型对象的关系</span></p></blockquote><p>还记得我们是怎么创建一个组件的嘛？</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式1</span><span class="token keyword">let</span> mycon <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      &lt;div>      &lt;h3>万一爱野马&lt;/h3>      &lt;/div>    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*拿到mycon组件，你可能会放到别的组件的component属性中，局部组件或者通过Vue.component('mycon',mycon);，注册全局组件*/</span><span class="token comment">//方式2，或者你直接导入组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span></code></pre><p>以上我们拿到的mycon，App，都是组件，或者说都是VueComponent构造函数，但这两个VueComponent并不相等<br>当我们在模板中使用组件标签时，会根据VueComponent构造函数创建相应的组件实例对象，所以我们在组件中的this都是组件实例对象<br>说回来，标题中，组件与Vue原型对象有什么关系呢？下面看张图片：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%85%B3%E7%B3%BB.png" loading="lazy"></p><p>这也就解释了，为什么我们通过<code>Vue.prototype.$xxx = xxx</code>后，我们在所有组件中都可以能拿到<code>this.$xxx</code><br>这里VueComponent原型对象相当于一个Vue实例，所以组件实例能拿到VueComponent原型对象中的数据<br>也能拿到Vue原型对象中的数据，解释完毕，华丽退场！</p><blockquote><p><span id="e">render函数</span></p></blockquote><p>我们在使用vue脚手架创建vue项目的时候，可能让你选择runtimeCompiler与runtimeOnly两种构建项目方式，<br>runtimeCompiler方法构建的vue项目允许你在app.vue中使用template属性，这种方式构建的项目。项目中引用<br>的vue内部包括了vue核心+模板解析器，模板解析器就是专门用来解析app.vue中的template属性的，<br>包含模板解析器的vue被称为完整版的vue，当我们输入<code>import Vue from &#39;vue&#39;</code>时，它引入<code>node_modules/vue/dist/vue.js</code>，<br>这个文件就是完整版的vue文件，当使用webpack打包vue项目时，自然是把vue包含的模板解析器打包了</p><p>而如果使用runtimeOnly方式构建项目，则使用render函数代替template属性项目中使用的vue，<br>它引入的vue文件是<code>node_modules/vue/dist/vue.runtime.esm.js</code>，这个vue文件不包含模板解析器，<br>所以当这个项目被webpack打包后，要比runtimeCompiler方法构建的vue项目打包后，小大概10KB，<br>render函数本质就是用来创建app标签元素的，作用和template一样。</p><p>总结：如果你的项目app.vue中需要使用template属性，使用runtimeCompiler方式构建项目<br>如果你的项目app.vue中使用render函数，则使用runtimeOnly方式构建项目</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之项目配置</title>
      <link href="2021/09/19/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
      <url>2021/09/19/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>之前本想做vue网课的项目的，但是心静不下来，css太差，把时间花在调整样式做页面上，感觉很难受，<br>所以没有继续下去了，上周整体没有学习新的知识，只是看看博客，感觉混了一周，现在是中秋节，放了三天假<br>在B站上看到一个新的vue网课，发现很多知识点是之前网课没有的，所以决定9月份剩余的时间用来看这个网课<br>讲到了很多vue3的内容，还是有必要学的，继续加油吧！</p><p>这篇博客主要是对之前vue2中一些项目配置做个总结，下面是具体内容：</p><ul><li><a href="#a">Vue创建项目及目录配置</a></li><li><a href="#b">Vue使用vue-awesome-swiper的轮播图</a></li><li><a href="#c">Vue使用elementUI的轮播图</a></li><li><a href="#d">Vue使用echarts可视化库</a></li><li><a href="#e">Vue使用vue-image-lazyload实现图片懒加载</a></li><li><a href="#f">Vue配置路径别名和跨域</a></li></ul><blockquote><p><span id="a">Vue创建项目及目录配置</span></p></blockquote><p>现在前端都是使用npm管理项目了，所以我们首先需要node环境，npm会随之一起安装，你可能需要配置一下<br>npm的镜像，配置npm镜像，百度一堆我就不在这说了，进入正题，npm创建vue项目一般使用vue脚手架</p><ul><li><p>安装vue脚手架：<code>npm install @vue/cli -g</code><br>这样没有指定脚手架版本安装，安装的是vue脚手架3，脚手架3和2在使用时命令上有些差异，现在大多用的<br>vue-cli3吧，如果你用的脚手架3但是却希望输入脚手架2的命令时也能成功执行，那么你需要全局安装一个依赖<br><code>npm install -g @vue/cli-init</code>，安装好后，使用脚手架2的命令也能成功被执行</p></li><li><p>使用脚手架创建vue项目<br>vue-cli2初始化项目：<code>vue init webpack study-vue-cli  //项目名小写</code><br>vue-cli3初始化项目：<code>vue create study-vue-cli</code><br>执行命令后需要的配置以及两者创建的项目差异在webpack那篇博客中已讲到，这里不再细说</p></li><li><p>前端项目中目录结构的划分<br>我使用vue-cli3创建vue2项目，下面是我看网课上配置的项目目录结构：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/vue%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" loading="lazy"></p></li><li><p>将vue项目同步到github上<br>因为我老是忘记git操作，索性在这里记录一下，下面是关于如何将本地项目同步到github上</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;之前写过博客关于如何在idea上使用git，有需要可以去找找1，在github上创建好仓库2，vue-cli3创建的项目都是自带git的，所以我们直接打开项目根目录配置远程仓库地址先拷贝远程仓库地址，再输入命令：git remote add origin 远程仓库地址注意：ssh地址比https地址好点，后续在推送时，不需要输入github账号密码。3，git add .git commit -m &quot;xxx&quot;git push -u origin master&#x2F;&#x2F;password中输入tokenId，而不是github的密码</code></pre></li></ul><blockquote><p><span id="b">Vue使用vue-awesome-swiper的轮播图</span></p></blockquote><p>swiper库是专门做轮播图的第三方库，而vue-awesome-swiper是基于swiper的Vue组件。<br>是swiper推荐的在vue中使用swiper的方式，下面是关于如何在vue项目中使用该库</p><ul><li><p>安装依赖：<code>npm i swiper vue-awesome-swiper --save</code><br>注意：该命令只能在vue2项目中被执行，将会安装<code>vue-awesome-swiper@4.1.1</code>和<code>swiper@5.4.5</code><br>安装vue-awesome-swiper4以上，必须安装swiper，总之按照我的版本安装就行。</p></li><li><p>创建轮播图组件，然后挂载到其他组件中使用即可，下面是轮播图组件：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>swiper <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper"</span> <span class="token operator">:</span>options<span class="token operator">=</span><span class="token string">"swiperOption"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>swiper<span class="token operator">-</span>slide <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper-slide"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"banner.acm"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"banner in banners"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a <span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"banner.link"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"banner.image"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>swiper<span class="token operator">-</span>slide<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper-scrollbar"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token comment">//滚动条--></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper-pagination"</span> slot<span class="token operator">=</span><span class="token string">"pagination"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper-button-prev"</span> slot<span class="token operator">=</span><span class="token string">"button-prev"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper-button-next"</span> slot<span class="token operator">=</span><span class="token string">"button-next"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>swiper<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Swiper<span class="token punctuation">,</span> SwiperSlide <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-awesome-swiper'</span><span class="token keyword">import</span> <span class="token string">'swiper/css/swiper.css'</span><span class="token comment">//版本不同，样式路径不同，自己去node_modules中看</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'MySwiper'</span><span class="token punctuation">,</span>  title<span class="token operator">:</span> <span class="token string">'swiper循环'</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//父组件传递数据给子组件</span>    banners<span class="token operator">:</span> Array  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    Swiper<span class="token punctuation">,</span>    SwiperSlide  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      swiperOption<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//轮播图的配置</span>        <span class="token comment">// 一个屏幕展示的数量</span>        slidesPerView<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token comment">// 间距</span>        spaceBetween<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token comment">// autoplay: true,</span>        <span class="token comment">// 环状轮播</span>        loop<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment">// 分页器配置</span>        pagination<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          el<span class="token operator">:</span> <span class="token string">'.swiper-pagination'</span><span class="token punctuation">,</span>          clickable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 箭头配置</span>        navigation<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          nextEl<span class="token operator">:</span> <span class="token string">'.swiper-button-next'</span><span class="token punctuation">,</span>          prevEl<span class="token operator">:</span> <span class="token string">'.swiper-button-prev'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token punctuation">.</span>swiper <span class="token punctuation">&#123;</span>  width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>swiper<span class="token operator">-</span>slide <span class="token punctuation">&#123;</span>  display<span class="token operator">:</span> flex<span class="token punctuation">;</span>  justify<span class="token operator">-</span>content<span class="token operator">:</span> center<span class="token punctuation">;</span>  align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>  text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>  font<span class="token operator">-</span>weight<span class="token operator">:</span> bold<span class="token punctuation">;</span>  font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token operator">:</span>#ffffff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>swiper img<span class="token punctuation">&#123;</span>  width<span class="token operator">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li></ul><blockquote><p><span id="c">Vue使用elementUI的轮播图</span></p></blockquote><p>elementUI中把轮播图叫做Carousel走马灯，然后我们看下配置步骤</p><ul><li><p>安装element-ui依赖：<code>npm i element-ui -S</code></p></li><li><p>在main.js中注册插件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span></code></pre></li><li><p>创建轮播图组件，案例这里使用了父子组件传值，使用props接收图片</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token comment">//设置图片自适应，动态绑定高度</span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>carousel indicator<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"outside"</span> <span class="token operator">:</span>height<span class="token operator">=</span><span class="token string">"bannerH +'px'"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>carousel<span class="token operator">-</span>item v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"banner in banners"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"banner.acm"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"banner.image"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>carousel<span class="token operator">-</span>item<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>carousel<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"MySwiper2"</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    banners<span class="token operator">:</span> Array<span class="token comment">//接收父组件传递过来的图片数组</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      bannerH<span class="token operator">:</span><span class="token number">200</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">setBannerH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bannerH <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">1.95</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBannerH</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBannerH</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token punctuation">.</span>el<span class="token operator">-</span>carousel__item img<span class="token punctuation">&#123;</span>  width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>el<span class="token operator">-</span>carousel__item<span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">2n</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">99</span>a9bf<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>el<span class="token operator">-</span>carousel__item<span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">2n</span><span class="token operator">+</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  background<span class="token operator">-</span>color<span class="token operator">:</span> #d3dce6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li></ul><blockquote><p><span id="d">Vue使用echarts可视化库</span></p></blockquote><p>echarts，一个基于 JavaScript 的开源可视化图表库，下面看看在vue中是如何使用的：</p><ul><li><p>安装echarts依赖：<code>npm install echarts -S</code></p></li><li><p>在main.js中配置全局引用</p><pre class="language-none"><code class="language-none">如果你多个组件都用到了echarts，你需要配置一下全局引用，在main.js中配置import * as echarts from &#39;echarts&#39;&#x2F;&#x2F;echart中所有组件全部引入，你可以查下怎么引入部分组件Vue.prototype.$echarts &#x3D; echarts</code></pre></li><li><p>创建自己的echarts组件，然后挂载到其他组件中就可以使用了，下面是创建的echarts组件：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token function">为ECharts准备一个具备大小</span><span class="token punctuation">(</span>宽高<span class="token punctuation">)</span>的Dom <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"wanyi"</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123;width: '500px', height: '500px'&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//import * as echarts from 'echarts';//如果你只在一个组件中使用echarts，你可以使用局部引用</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'MyEcharts'</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//mounted中是第三方库最早使用时机</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 基于准备好的dom，初始化echarts实例</span>      <span class="token keyword">var</span> chartDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'wanyi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> myChart <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>chartDom<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> option<span class="token punctuation">;</span>      <span class="token comment">//样式</span>      <span class="token keyword">var</span> itemStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        opacity<span class="token operator">:</span> <span class="token number">0.7</span><span class="token punctuation">,</span>        borderWidth<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        borderColor<span class="token operator">:</span> <span class="token string">'#235894'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">// 指定图表的配置项和数据</span>      option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>          name<span class="token operator">:</span> <span class="token string">'pie'</span><span class="token punctuation">,</span>          type<span class="token operator">:</span> <span class="token string">'pie'</span><span class="token punctuation">,</span>          selectedMode<span class="token operator">:</span> <span class="token string">'single'</span><span class="token punctuation">,</span>          selectedOffset<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>          clockwise<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          label<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            fontSize<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            color<span class="token operator">:</span> <span class="token string">'#235894'</span><span class="token punctuation">,</span>            position<span class="token operator">:</span> <span class="token string">'inside'</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token comment">/*labelLine: &#123;            lineStyle: &#123;              color: '#235894',              length: '2px'            &#125;          &#125;,*/</span>          data<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token number">1048</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'搜索引擎'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token number">735</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'直接访问'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token number">580</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'邮件营销'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token number">484</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'联盟广告'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token number">450</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'视频广告'</span><span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          itemStyle<span class="token operator">:</span> itemStyle        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">// 使用刚指定的配置项和数据显示图表。</span>      option <span class="token operator">&amp;&amp;</span> myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><p>echarts是专门做图表的库，更多配置操作请访问，<a href="https://echarts.apache.org/zh/option.html#title">echarts配置项</a></p></li></ul><blockquote><p><span id="e">Vue使用vue-image-lazyload实现图片懒加载</span></p></blockquote><p>图片懒加载指的是，之前我们请求图片都是一次性全部请求下来，响应给用户，但我们看淘宝之类的购物平台<br>商品图片都是只加载一部分，你不断往下划才会加载下面的部分，图片需要在屏幕上显示时，才加载这张图片<br>这就是图片懒加载，下面是使用该第三方库的步骤：</p><ul><li><p>安装依赖：<code>npm i vue-lazyload -S    //i是install简写</code></p></li><li><p>在入口函数main.js中注册插件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> VueLazyload <span class="token keyword">from</span> <span class="token string">'vue-lazyload'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueLazyload<span class="token punctuation">)</span><span class="token comment">/*  // 配置项  const loadimage = require('assets/img/common/loading.gif')  // const errorimage = require('assets/img/common/error.gif')  Vue.use(VueLazyload, &#123;    preLoad: 1.3, //预加载的宽高比    loading: loadimage, //图片加载状态下显示的图片    // error: errorimage, //图片加载失败时显示的图片    attempt: 1, // 加载错误后最大尝试次数  &#125;)*/</span><span class="token operator">...</span>略</code></pre></li><li><p>只是单纯的注册插件：<code>Vue.use(VueLazyload)</code>，那么你需要在图片被加载的时候使用<code>v-lazy</code>代替<code>:src</code>，见下面代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>swiper<span class="token operator">-</span>slide <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"swiper-slide"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"banner.acm"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"banner in banners"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>a <span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"banner.link"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>img v<span class="token operator">-</span>lazy<span class="token operator">=</span><span class="token string">"banner.image"</span><span class="token operator">></span><span class="token comment">//:src="banner.image" 改成 v-lazy="banner.image"</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>swiper<span class="token operator">-</span>slide<span class="token operator">></span></code></pre></li></ul><blockquote><p><span id="f">Vue配置路径别名和跨域</span></p></blockquote><p>之前的博客中讲到过配置项目的路径别名，有了路径别名，我们可以很容易的引用项目中的文件<br>而跨域则是解决浏览器的同源策略问题，我们只需在vue.config.js中进行如下配置：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/*配置项目路径别名*/</span>      alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'assets'</span><span class="token operator">:</span> <span class="token string">'@/assets'</span><span class="token punctuation">,</span>        <span class="token string">'common'</span><span class="token operator">:</span> <span class="token string">'@/common'</span><span class="token punctuation">,</span>        <span class="token string">'components'</span><span class="token operator">:</span> <span class="token string">'@/components'</span><span class="token punctuation">,</span>        <span class="token string">'network'</span><span class="token operator">:</span> <span class="token string">'@/network'</span><span class="token punctuation">,</span>        <span class="token string">'views'</span><span class="token operator">:</span> <span class="token string">'@/views'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">'/api'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 请求的代称，写在Axios里的BaseUrl</span>        target<span class="token operator">:</span> <span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span> <span class="token comment">// 真实请求URl</span>        ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许跨域</span>        pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">//替换，通配/api的替换成对应字符</span>          <span class="token string">'^/api'</span><span class="token operator">:</span> <span class="token string">''</span> <span class="token comment">//当你的接口中没有/api字眼时，采用这种，直接替换成空即可</span>          <span class="token comment">// '^/api': '/api'   //当你的接口中刚好有/api 时，采用这种方式</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">/*'/api2': &#123;        target: 'https://act.mogujie.com',        ws: true,        changeOrigin: true,        pathRewrite: &#123;          '^/api': ''        &#125;      &#125;*/</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>2021年10月8日更新一下内容：<br>配置代理分为下面两种方式：</p><ul><li><p>简单的配置</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    proxy<span class="token operator">:</span> <span class="token string">"http://localhost:5000"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>优点：hexo 配置简单，请求资源时直接发给前端(8080)即可<br>缺点：不能配置多个代理，不能灵活的控制请求是否走代理<br>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器(优先匹配前端资源)<br>换句话说，如果代理地址是：<code>http://localhost:8080/test.txt</code>，这个test.txt文件存在前端项目的public目录中，<br>则该请求不会被代理，后端接收不到这个请求。而是直接将该public目录中文件交给浏览器。</p></li><li><p>复杂点配置</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">'/home'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        target<span class="token operator">:</span> <span class="token string">'http://api.qingyunke.com'</span><span class="token punctuation">,</span>        <span class="token comment">//是否支持websocket，默认为true</span>        ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment">// 用于控制请求头中的host值,true则表示不暴露自己的host字段，host字段与目标服务器字段一致。默认为true</span>        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">'^/home'</span><span class="token operator">:</span> <span class="token string">''</span>          <span class="token comment">// '^/home': '/home'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>“/home”是路径前缀，使用在请求地址的端口号后面，表示请求是代理请求，请求本地服务器将请求转发给代理的地址中，<br>即上面的<code>http://api.qingyunke.com</code>，而当我们发送请求:<code>http://localhost:8080/home/getAllUser</code>时，<br>虽然本地服务器代理了，但是发送到目标地址的真正请求是：<code>/home/getAllUser</code>而我们接收的请求是：<code>/getAllUser</code>，<br>所以我们需要配置pathRewrite，将请求中”/home”改成””</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之axios篇</title>
      <link href="2021/09/12/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8Baxios%E7%AF%87/"/>
      <url>2021/09/12/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8Baxios%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>简述</p></blockquote><p>欢迎来到新的一篇，axios篇，axios是一个基于Promise的网络请求库，它并不是vue中的插件，所以在使用时<br>并不需要<code>Vue.use(axios)</code>，讲axios之前说一下promise是什么，下面是本篇的主要内容：</p><ul><li><a href="#a">Promise的基本使用</a></li><li><a href="#b">发出网络请求方式有哪些</a></li><li><a href="#c">axios的基本使用</a></li><li><a href="#d">axios发出并发请求</a></li><li><a href="#e">axios全局配置</a></li><li><a href="#f">axios的实例</a></li><li><a href="#g">根据代码规范对axios进行封装</a></li><li><a href="#h">axios的拦截器</a></li></ul><blockquote><p><span id="a">Promise的基本使用</span></p></blockquote><p>在JavaScript的世界中，所有代码都是单线程执行的。由于这个“缺陷”，导致JavaScript的所有网络操作，<br>浏览器事件，都必须是异步执行。因为网络请求这些操作需要时间，如果同步执行，用户不得不等待网络请求完毕才能得到响应。<br>像ajax，定时器等等，就是异步操作，这些异步操作会在将来调用我们提供的回调函数，但是Ajax这种异步操作<br>写起来太难看了，如果网络请求多了起来，后一个网络请求需要前一个网络请求的结果，那么代码就会形成回调地狱<br>所以Promise就出现了，它是ES6提供的对象，能更优雅的写异步请求，避免掉回调地狱这种情况。<br>下面是Promise的具体写法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> flag<span class="token operator">=</span><span class="token boolean">true</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行定时任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"异步操作执行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"异步操作执行失败"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//箭头函数，只有一个参数时，()可以省略</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*promise对象有两个参数，resolve，reject，参数名随意啊，我想说的是，这两个参数都是函数并且是then，catch方法中的回调函数，我们提供的，当执行resolve方法时，就会执行then中的方法当执行reject方法时，就会执行catch中的方法。*/</span></code></pre><p>上面的案例还是挺简单的，下面看看复杂一点的，在基本使用上做了一些简化操作</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//如果只用resolve方法，则reject参数可以省略</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//res就是Hello</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第零次的处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//返回一个promise对象后，继续使用then处理</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token operator">+</span><span class="token string">" Wo"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//res就是HelloWo</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一次的处理'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token operator">+</span><span class="token string">" World"</span><span class="token punctuation">)</span>  <span class="token comment">//对上面进行简化,直接调用resolve方法</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//res接收到HelloWoWorld</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二次的处理'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token operator">+</span><span class="token string">" giao"</span><span class="token comment">//直接返回字符串，对上面再一次简化，相当于 return Promise.resolve(res+" Giao")</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出HelloWoWorldGiao</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//上面代码没有执行reject，这里不执行</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*提示下，只要一个函数返回promise对象，那么我在调用这个函数后，就可以紧跟着调用then方法或catch方法并不一定说then，catch方法和promise对象放在一起，比如在axios中就有相应的用法，vuex篇我们也使用过。*/</span></code></pre><blockquote><p><span id="b">发出网络请求方式有哪些</span></p></blockquote><ul><li><p>传统的ajax是基于XMLHttpRequest(XHR),但是在开发中并不使用，太繁琐</p></li><li><p>Jquery中的ajax代替传统的ajax，这是以前的情况，但是vue项目中，vue本身1W+行，Jquery也是1w+行<br>所有完全没必要为了用网络请求就引用这个重量级库，目前三大框架都有自己的网络请求模块，所以都不使用这种方式</p></li><li><p>vue-resource,是vue1.0时vue官方推出的网络请求框架，但在vue2.0时被淘汰了，官方选择了axios</p></li><li><p>还有一种，应该说是一种请求方式，而不是网络请求框架，jsonp<br>使用jsonp最主要的原因往往是为了解决跨域访问的问题，不过只能解决get方式的跨域访问<br>ajax因为浏览器的同源策略，不能进行跨域请求，而jsonp是通过<code>&lt;script&gt;</code>标签的src来帮助我们请求数据<br>jsonp的方式是请求时url后跟上一个callback参数，该参数值是一个回调函数的函数名，我们指定服务器返回的JS函数名称<br>函数的参数就是后端响应的数据，前端通过script标签的src发送请求，请求完成后，就可以使用这个数据。<br>下面是个伪代码：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;前端&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;www.keyi.world&#x2F;getUser?callback&#x3D;&quot;getUserInfo&quot;&quot;&gt;&lt;&#x2F;script&gt;&#x2F;&#x2F;回调函数getUserInfo(res)&#123;&#x2F;&#x2F;该函数被回调，res接收到服务器传递的数据，即&quot;真实数据&quot;&#x2F;&#x2F;对res进行处理&#125;&#x2F;&#x2F;后端，后端返回的数据是一个函数，并在函数的参数中返回真实数据，相当于调用return &quot;getUserInfo(&quot;真实数据&quot;)&quot;&#x2F;&#x2F;这也就解释了为什么jsonp只能处理get请求</code></pre></li><li><p>axios，内部基于promise对ajax进行了封装，不仅可以在浏览器中发出ajax，还可以在node.js中发送http请求<br>你还可以拦截请求和响应，在发出请求前后做一些处理。</p></li></ul><blockquote><p><span id="c">axios的基本使用</span></p></blockquote><ul><li><p>安装axios，运行时依赖：<code>npm install axios -S</code></p></li><li><p>配置跨域<br>网络请求不可避免的会产生跨域问题，在项目根目录下创建vue.config.js文件，配置跨域如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token string">'/home'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">//请求的代称，写在Axios里的BaseUrl</span>                  target<span class="token operator">:</span> <span class="token string">'http://api.qingyunke.com'</span><span class="token punctuation">,</span>                  ws<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                   pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                      <span class="token string">'^/home'</span><span class="token operator">:</span> <span class="token string">''</span>                       <span class="token comment">// '^/home': '/home'</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/*  "/home"，就是配置一个url前缀，当在请求url中的端口号后加上这个/home，  就表示该请求是跨域请求就会将请求发给target指定的url中  如果发送请求时不加上这个url前缀，则会去找前端项目的public目录下的资源，即该请求不被本地服务器代理  ws属性表示，是否支持webSocket,默认为true    changeOrigin属性表示，是否暴露请求头的host字段，如果为false，则请求后端时，后端获取的host值是真实的  如果为true，则表示隐藏自己的host字段，后端接收的host值是自己的服务器host值，默认值为true  pathRewrite属性表示，当我们通过代理访问请求后，因为设置了url前缀，我们的访问路径变成了：/home/api.php，    但是我们实际的api.php页面使用/api.php请求才能被访问到，所以通过pathRewrite路径重写，将请求前缀去除  */</span></code></pre></li><li><p>在main.js中使用axios</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token comment">//将url前缀设置为默认路径，这里的配置会将所有请求都会加上url前缀，即所有请求都被代理</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span><span class="token string">'/home'</span><span class="token punctuation">;</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    url<span class="token operator">:</span> <span class="token string">"/api.php"</span><span class="token punctuation">,</span>  <span class="token comment">//如果没有指定method属性，则默认使用get请求，这里直接跟baseURL后面的地址即可</span>    params<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//param就是url中?后跟的参数</span>        key<span class="token operator">:</span> <span class="token string">'free'</span><span class="token punctuation">,</span>        appid<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        msg<span class="token operator">:</span> <span class="token string">'你好吗'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token comment">//axios内部返回了promise，所以这里调用then方法，能拿到返回结果</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*axios请求方式还有很多，下面是具体方式：1)axios(config)，默认情况下，如果只有url，则请求方式是get，设置method可以设置请求方式        2)axios.request(config)        3)axios.get(url[,config])[]表示可选        4)axios.delete(url[,config])        5)axios.head(url[,config])        4)axios.post(url[,data[,config]])        4)axios.put(url[,data[,config]])        4)axios.patch(url[,data[,config]])*/</span></code></pre></li></ul><blockquote><p><span id="d">axios发出并发请求</span></p></blockquote><p>发送两个请求，两个请求都拿到结果再去做其他事情，案例如下，估计内部也是使用了promise的all方法</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//baseURL,跨域等配置同上</span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        url<span class="token operator">:</span> <span class="token string">"/api.php"</span><span class="token punctuation">,</span>        params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            key<span class="token operator">:</span> <span class="token string">'free'</span><span class="token punctuation">,</span>            appid<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            msg<span class="token operator">:</span> <span class="token string">'你叫什么名字'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        url<span class="token operator">:</span> <span class="token string">"/api.php"</span><span class="token punctuation">,</span>        params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            key<span class="token operator">:</span> <span class="token string">'free'</span><span class="token punctuation">,</span>            appid<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            msg<span class="token operator">:</span> <span class="token string">'杭州天气怎么样'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回结果是数组，数组元素就是两个请求的结果</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><blockquote><p><span id="e">axios全局配置</span></p></blockquote><p>全局配置指的是，抽离请求中的一些固定部分，例如，请求前缀(协议+域名+端口号),请求头设置一些固定值等等</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">原始配置：    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        url<span class="token operator">:</span> <span class="token string">"http://api.qingyunke.com/api.php"</span><span class="token punctuation">,</span>        timeout<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>  <span class="token comment">//超时时间</span>        params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//请求参数</span>            key<span class="token operator">:</span> <span class="token string">'free'</span><span class="token punctuation">,</span>            appid<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            msg<span class="token operator">:</span> <span class="token string">'你好吗'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>配置抽离：<span class="token comment">//这里配置的是全局，你也可以在axios内部配置baseURL，跟上面例子中/home是一样的</span>    axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span><span class="token string">'http://api.qingyunke.com'</span>      axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout<span class="token operator">=</span><span class="token number">5000</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token comment">//baseURL: ''</span>        url<span class="token operator">:</span> <span class="token string">"/api.php"</span><span class="token punctuation">,</span>        params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//请求参数</span>            key<span class="token operator">:</span> <span class="token string">'free'</span><span class="token punctuation">,</span>            appid<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            msg<span class="token operator">:</span> <span class="token string">'你好吗'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*那么，axios中传入的config对象中除了以上url,param,baseURL,timeout属性外，还可以有哪些属性？请求地址：url: '/user'    请求类型：method: 'get'    请求根路径：baseURL: 'http://www.keyi.world'    请求前的数据处理：transformRequest: [function(data)&#123;&#125;]   //可以传入多个函数    请求后的数据处理：transformResponse: [function(data)&#123;&#125;]    自定义的请求头：headers:&#123;'x-Request-With':'XMLHttpRequest'&#125;    URL查询对象：params:&#123;id:12&#125;      //就是url携带的参数    查询对象序列化函数：paramsSerializer: function(params)&#123;&#125;    request body：data:&#123;key:'aa'&#125;    超时设置：timeout:1000    跨域是否带token：withCredentials:false    自定义请求处理：adapter:function(resolve,reject,config)&#123;&#125;    身份验证信息：auth:&#123;uname:'',pwd:'12'&#125;    响应式的数据格式：responseType:'json'   //有json/raw/document/arraybuffer/text/stream  */</span></code></pre><blockquote><p><span id="f">axios的实例</span></p></blockquote><p>我们从axios模块中导入对象后，使用的实例是默认的实例，当给该实例设置一些默认配置时，这些配置就被固定下来了<br>但是后续开发中，某些配置可能会不太一样，比如某些请求需要使用特定的baseURL或者timeout或者content-type等<br>这个时候，我们就可以创建新的实例，并且传入属于该实例的配置信息<br>简而言之，不同的请求需要不同的配置，我们之前使用的都是默认的axios实例，所以现在我们需要创建新的axios实例<br>创建axios实例去发送请求，每个axios对应不同的配置，下面是一个简单的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//这里的/home配置同上，配置了跨域。</span><span class="token keyword">let</span> axiosInstance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">//这里的axiosInstance是一个axios实例，保存配置的</span>    baseURL<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>    timeout<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axiosInstance</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         <span class="token comment">//使用对应的配置实例来发送网络请求，做到请求配置和实际请求的分离</span>    url<span class="token operator">:</span> <span class="token string">"/api.php"</span><span class="token punctuation">,</span>    params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        key<span class="token operator">:</span> <span class="token string">'free'</span><span class="token punctuation">,</span>        appid<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        msg<span class="token operator">:</span> <span class="token string">'江西省九江市彭泽县'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><blockquote><p><span id="g">根据代码规范对axios进行封装</span></p></blockquote><p>如果我们的组件依赖某个第三方框架，我们最好在main.js入口函数中全局注册一下，例如组件使用axios，<br>最好不要每个组件都import导入axios模块，而是在main.js中，<code>Vue.prototype.$axios=axios</code>，来全局注册<br>这样我们其他组件可以通过<code>this.$axios</code>得到axios的对象，因为组件都是Vue构造函数的实例，<br>也就继承了Vue原型对象的变量和方法。</p><p>另外，需要说明的是上面这种做法其实组件还是没有和axios框架分离，因为组件内还是使用了<code>this.$axios</code>，<br>所以一般开发中都会再对axios做一层封装，让我们的组件依赖我们自己的封装后的对象，<br>这样，当我们将axios换成其他框架时，我们只需要更改自己封装的内容而不需要修改组件！</p><p>按照代码规范，对axios进行封装：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//src下创建network目录，其中再创建request.js文件，该文件内容如下：</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建一个axios实例</span>    <span class="token keyword">let</span> axiosInstance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">//这个对象感觉可以抽离，让使用者配置，但是也可以在本js文件中创建多个函数</span>        baseURL<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        timeout<span class="token operator">:</span> <span class="token number">5000</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//发送网络请求</span>    <span class="token keyword">return</span> <span class="token function">axiosInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token comment">//本身返回的就是promise,所以使用者调用request方法后可直接跟then函数</span><span class="token punctuation">&#125;</span><span class="token comment">//之所以不用默认导出，因为可能你会有多个函数，每个函数有不同的axios实例去使用，如果默认导出，则只能导出一个</span><span class="token comment">//使用者使用时：</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>request<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./network/request'</span><span class="token punctuation">;</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  url<span class="token operator">:</span> <span class="token string">"/api.php"</span><span class="token punctuation">,</span>  params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    key<span class="token operator">:</span> <span class="token string">'free'</span><span class="token punctuation">,</span>    appid<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    msg<span class="token operator">:</span> <span class="token string">'我爱你'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//直接可以拿到网络请求的响应结果</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//如果网络请求出错，也可以拿到失败结果</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><blockquote><p><span id="h">axios的拦截器</span></p></blockquote><p>axios提供了拦截器，用于我们在每次发送请求之前或者得到响应后，进行相应的处理<br>下面是拦截器案例，也一并放到封装的axios中去了</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1，创建一个axios实例</span>    <span class="token keyword">let</span> axiosInstance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        baseURL<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        timeout<span class="token operator">:</span> <span class="token number">5000</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2，配置拦截器</span>    <span class="token comment">//请求拦截，有两个回调函数，请求成功函数，请求失败回调函数</span>    axiosInstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发送请求之前执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*          请求拦截器使用场景：              * 比如config中的一些信息不符合服务器的要求              * 比如每次发送网络请求时，都希望在界面中显示一个请求图标              * 某些网络请求需要token，必须携带一些特殊的信息，在这里可以添加到请求头中         */</span>        <span class="token keyword">return</span> config<span class="token punctuation">;</span>      <span class="token comment">//拦截器放行，不然响应就会失败(不放行代表请求失败)，这个函数会在请求之前执行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">//这里一般只要不是网络原因，都很少来到这里，这里指的是发送请求发布出去，如果是错误url,还是可以发送的出去的   </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//如果请求失败，则打印错误信息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//响应拦截，响应成功回调函数，响应失败回调函数</span>    axiosInstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>   <span class="token comment">//响应成功后不放行的话，使用者的then方法将拿不到响应的数据，所以需要将响应数据放行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果响应失败，则打印错误信息，也可能是请求不放行导致的</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//3，发送网络请求</span>    <span class="token keyword">return</span> <span class="token function">axiosInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token comment">//本身返回的就是promise</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之Vuex篇</title>
      <link href="2021/09/11/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8BVuex%E7%AF%87/"/>
      <url>2021/09/11/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8BVuex%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>简述</p></blockquote><p>欢迎来到新的篇章，Vuex，Vuex是一个专为vue应用程序开发的状态管理工具，和vue-router一样是vue的插件<br>看到状态管理，你可能会想到vue-router篇中的keep-alive，好像也是用来状态管理。<br>这里解释一下两者的区别：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">keep<span class="token operator">-</span>alive是组件对象本身的状态管理，是当我点击按钮，路径跳转，切换组件时，原有的组件对象仍然存在我切换回去的时候，vue不会去重新创建新的组件对象，而是使用原来的那个组件对象，这就是为什么当我使用了keep<span class="token operator">-</span>alive包裹住router<span class="token operator">-</span>view后，组件的created和destroy钩子函数失效，因为这两个钩子函数就表示vue组件创建和销毁，使用了keep<span class="token operator">-</span>alive后，切换组件执行的是activated和deactivated钩子函数。而Vuex的状态管理，我们可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面，然后将这个对象放在顶层的vue实例中，让其他组件可以使用，那么多个组件就可以共享这个对象中的所有变量方法了。你可能想到了vue的原型对象，但是vue的原型对象虽然能做到组件间变量方法共享，但是我们还需要这些变量和方法是响应式的，当某个组件修改了共享变量或方法时，其他组件引用的共享变量或方法及时更新，但是使用vue原型对象却不能做到响应式，所以vuex就出现了，解决多个组件之间共享变量和方法，并且这些变量和方法是响应式的。</code></pre><p>那么，有什么状态需要我们在多个组件间共享的呢？</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">比如用户的登录状态，用户名称，头像，地理位置信息等等，比如商品的收藏，购物车中的物品等等，这些状态信息，我们都可以放在统一的地方<span class="token punctuation">,</span>对它进行保存和管理，而且它们还是响应式的</code></pre><p>下面看看Vuex具体需要学习哪些内容：</p><ul><li><a href="#a">Vuex基本使用</a></li><li><a href="#b">Vuex核心概念</a></li><li><a href="#c">Vuex的文件组织</a></li><li><a href="#d">mapState,mapGetter等的使用</a></li></ul><blockquote><p><span id="a">Vuex基本使用</span></p></blockquote><ul><li><p>安装Vuex，和router一样，安装好插件后，在项目的src目录下创建store目录，并在其中创建index.js作为<br>Vuex的配置文件，下面是该配置文件的具体内容：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm install vuex <span class="token operator">-</span><span class="token constant">S</span><span class="token comment">//-S就等于--save,表示运行依赖，简写而已，同样的-D是--save-dev的简写</span><span class="token comment">//store/index.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">//注册插件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li><li><p>然后在入口函数main.js中的vue实例中挂载即可，下面是main.js具体内容</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token comment">/*    阻止启动生产消息,没有这句，如果是开发时打包启动程序，会打印大量消息，    所以开发时关闭该选项，生成模式时再打开*/</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">/*把router，store传递到vue实例中，    则相当于Vue.prototype.$store=store    Vue.prototype.$router=router*/</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    router<span class="token punctuation">,</span>    store<span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment">/*上面相当于：createApp(App).use(store).use(router).$mount('#app')*/</span></code></pre></li><li><p>上面是Vuex的基本框架，我们把组件中共同的变量方法抽取到一个对象中，那么在Vuex中，<br>这个对象就是在index.js配置文件中导出Vuex实例的参数，这个参数是就是存放共同变量和方法的对象<br>这个对象中，有很多属性，state，mutations，modules，getters等等，其中state属性就是存放共享变量的<br>下面就举个栗子：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//假设现在，我的app.vue和helloVuex.vue有相同的变量，我们可以把共享变量放在store的state中</span><span class="token comment">//只需要在state中增加变量即可</span>state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>count<span class="token operator">:</span> <span class="token number">999</span><span class="token punctuation">&#125;</span><span class="token comment">/*那么在app.vue和helloVuex.vue中通过&#123;&#123;$store.state.count&#125;&#125;就可以访问到这个变量如果是组件对象的方法访问，则需要加上this，发现是不是跟vue-router取值$router方式很像？可以肯定，当Vuex挂载到vue实例中后，会有一句Vue.prototype.$store=store，所以我们在其他组件就能使用$store获取共享变量*/</span></code></pre></li></ul><blockquote><p><span id="b">Vuex核心概念</span></p></blockquote><p>Vuex核心概念主要就是讲讲存放共享变量和方法的对象属性的，state，mutations，modules，getters这些属性<br>有哪些作用及其使用，让我们开始吧：</p><ul><li><p>state<br>上面简单的案例中使用过，state就是存放共享变量的，除此之外，Vuex提出单一状态树的概念<br>意思是在Vuex配置文件store/index.js中，只创建一个Vuex实例，例如下面的代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*推荐只创建一个Vuex对象(store)，项目中所有共享变量都放在这个对象的state，而不是创建多个Vuex实例，把共享变量分开存放到不同的state，这样做的好处是方便项目的管理和维护。*/</span></code></pre></li><li><p>mutations<br>mutations用于修改state中的变量的，我们在app.vue和helloVuex.vue中通过<code>$store.state.count</code>可以<br>访问的到共享变量count，你可能会通过<code>$store.state.count++</code>的方式使得共享变量+1，但是这种修改共享<br>变量的方式并不推荐，mutations是唯一能够修改state变量的方式，如果想要修改共享变量，你需要在<br>mutations中定义方法，然后在组件中去调用mutations中的方法，达到修改共享变量的目的，下面是具体代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//store/index.js，vuex配置文件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      count<span class="token operator">:</span> <span class="token number">999</span><span class="token comment">//共享变量</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          state<span class="token punctuation">.</span>count<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">become100</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//data接收组件传递过来的数据</span>          state<span class="token punctuation">.</span>count<span class="token operator">=</span>data<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//在HelloVuex组件中使用mutatios的方法</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"jian"</span><span class="token operator">></span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"become100"</span><span class="token operator">></span>将共享变量变成<span class="token number">100</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"HelloVuex"</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">become100</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'become100'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">//调用mutations中become100方法并传递数据100</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用mutations中的increment方法</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">jian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"decrement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*在mutations中定义好修改state的方法，在组件中通过$store的commit方法调用mutations中的方法如果你想在组件中传递数据到mutations中的方法，可以在mutations方法中增加一个data参数用于接收组件传递过来的数据，这个参数被称为mutations的载荷(payLoad)，参数名随意而参数state就是state属性值，可以拿到所有的共享变量。*/</span></code></pre><p>mutations中有几处需要说明的地方</p><ul><li><p>mutations的提交方式<br>除了使用<code>this.$store.commit(&#39;become100&#39;,100)</code>方式调用mutations中的方法传递数据，<br>你还可以传递一个对象来调用mutations中的方法和传递数据，例如：<br><code>this.$store.commit(&#123;type: &#39;become100&#39;,count: 100&#125;)</code>，两种提交方式的区别是：<br>如果是第一种方式，则mutations方法的data参数是实际的数据，即100<br>如果是传递对象的方式提交，则mutations方法的data参数是你传递的对象，你想获取count数据<br>需要<code>data.count</code>才能拿到，例如下面这样：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">become100</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//这个data就代表你传递的对象,即&#123;type: 'become100',count: 100&#125;</span>    state<span class="token punctuation">.</span>count<span class="token operator">=</span>data<span class="token punctuation">.</span>count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>mutations响应规则<br>响应规则你需要遵守一定规则，才能使得数据state中共享变量数据被更改后，界面上也跟着更改，<br>即，遵守一定规则才能使得数据是响应式的：</p><pre class="language-jav" data-language="jav"><code class="language-jav">1)提前在store中初始化好所需的属性，如果在mutations方法中新增共享变量，则也不是响应式的2)当给state中的对象(状态)添加新属性时，使用下面的方式方式一：使用Vue.set(obj,&#39;newProp&#39;,123)，(如果是后来新添加的属性使用该方法，不然数据不会被响应到界面中)obj.newProp&#x3D;123,这种方式，不是响应式的！！！即数据改变了，但是界面上不能响应方式二：用新对象给旧对象重新赋值3)如果是删除对象属性，不能使用delete obj.oldProp，这种也不是响应式的删除对象属性的方法你需要使用：Vue.delete(obj,&#39;oldProp&#39;)</code></pre><p>之前提到，修改数组不能直接通过<code>arr[0]=100</code>这种方式修改数组中数据，这种方式不是响应式的，<br>其实这里的规则同样是vue中修改数据的规则</p></li><li><p>mutations常量类型<br>mutations可以被分为两部分：字符串的事件类型(type),一个回调函数，该回调函数的第一个参数就是state，如下所示：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//increment是事件类型(跟我们熟悉的事件没关系)，后面的部分就是回调函数了</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在mutations中，我们定义了很多事件类型(也就是mutations的方法名)，当mutations中方法越来越多时，<br>使用者需要花费大量的精力去记住这些方法，并且还可能敲错，我们可以将这些事件类型定义为常量，放到一个文件中<br>然后再在Vuex配置文件中引用这个常量，如下所示：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>变成<span class="token keyword">import</span> <span class="token punctuation">&#123;</span><span class="token constant">INCREMENT</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./xxx/xxx.js'</span><span class="token punctuation">[</span><span class="token constant">INCREMENT</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//不过我感觉更加麻烦了，不知道实际开发中有没有用</span></code></pre></li></ul><p>最后说下，为什么一定要调用mutations方法才能更改state属性，而不直接引用state中变量进行修改<br>这里有一张Vuex状态管理图片，有时候我们需要查看是哪个组件修改了共享变量，如果直接修改state中共享<br>变量，则我们根本不知道哪个组件修改了，而如果我们使用mutations方法修改共享变量，那么通过浏览器<br>的devtools插件就能查看到是哪个组件修改了共享变量。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/vuex.png" loading="lazy"></p></li><li><p>getters<br>类似计算属性,如果数据是组件自己的数据，并且这个数据要经过一些处理才能输出到页面，则要使用计算属性<br>当这个数据是共享变量时，就使用getters,对了，计算属性有缓存，这个getters大概率也是有缓存的<br>来看下具体使用代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//index.js,vuex配置文件中</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    count<span class="token operator">:</span> <span class="token number">999</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">become100</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>count<span class="token operator">=</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//将count相乘</span>    <span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count<span class="token operator">*</span>state<span class="token punctuation">.</span>count    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//将相乘的数再加100</span>    <span class="token function">toDoubleAnd100</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//通过getter参数可以调用其他getter方法</span>      <span class="token keyword">return</span> getter<span class="token punctuation">.</span>toDouble<span class="token operator">+</span><span class="token number">520</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//拿到state中的count的值，将该值与调用的值相加，即创建个闭包</span>    <span class="token function">addYouValue</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span>count<span class="token operator">+</span>value      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//HelloVuex.vue中使用</span><span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>toDouble<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>toDoubleAnd100<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span><span class="token function">addYouValue</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></code></pre><p>在使用getters有两个需要注意的地方：</p><ul><li>上面例子中，getters方法可以有两个参数，第一个state参数，拿到共享变量，第二个getters则是getters<br>属性值，通过这个getters参数可以使用其他getter方法</li><li>getters方法可以返回函数，即闭包，而返回的函数的参数，则可以由外界控制，就像上面例子的addYouValue方法一样，<br>通过<code>$store.getters.addYouValue</code>拿到闭包，然后使用(-5)，去调用这个闭包。<br>可以想象，既然store的getters可以使用闭包，那么计算属性可以创建闭包，<br>利用了计算属性的调用不需要括号的特性，此时如果带上括号，则就是闭包的使用</li></ul></li><li><p>actions<br>通常情况下，vuex要求我们mutations中的方法必须是同步方法，主要原因是当我们使用devtools时，<br>devtools可以帮助我们捕捉mutations的快照，但是如果是异步操作，那么devtools将不能很好的追踪<br>这个操作什么时候会被完成，actions就是专门处理异步请求的地方。<br>actions方法与mutations方法，一个是执行异步操作的地方，一个是执行同步操作的地方，<br>在使用上还有很多差别，让我们来看看具体有哪些不同：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">)</span>action方法中的方法参数是context，而mutations中方法参数是state，context指的是store对象，同样的，action的方法参数也可以有两个，用于接收使用者传递的参数，这和mutations类似<span class="token number">2</span><span class="token punctuation">)</span>action方法中不能修改state中的共享变量，只能通过调用mutations中的方法修改变量，context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'mutations中的方法'</span><span class="token punctuation">)</span><span class="token comment">//就像$store.commit()一样</span><span class="token number">3</span><span class="token punctuation">)</span>使用者在调用action中方法时：<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'action中方法名'</span><span class="token punctuation">,</span><span class="token string">'携带的信息'</span><span class="token punctuation">)</span>，而mutations使用的是$store<span class="token punctuation">.</span>commit方法调用<span class="token number">4</span><span class="token punctuation">)</span>action方法中的异步操作可以返回Promise对象，如果使用了promise，使用者在调用action方法时可以跟上<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，这个then方法可以用来判断异步操作是否成功。</code></pre><p>下面是一个使用actions的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// store/index.js，Vuex配置文件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    count<span class="token operator">:</span> <span class="token number">999</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">asyncTest</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>message</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">//创建一个Promise，这个对象会在下一篇axios重点讲</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//定时器，模拟异步操作</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>          context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span><span class="token comment">//调用mutations的increment方法</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"异步操作完成"</span><span class="token punctuation">)</span> <span class="token comment">//调用resolve会去执行promise的then方法</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//组件内，使用action中方法</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"asyncTest"</span><span class="token operator">></span>测试异步<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">asyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store        <span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'asyncTest'</span><span class="token punctuation">,</span><span class="token string">"正在执行异步操作"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*点击按钮，执行asyncTest方法，其中使用$store.dispatch执行actions中的asyncTest方法并向该方法中传递参数，这个方法返回一个promise对象，执行定时器后，调用mutations中increment方法接着执行resolve并传递参数，这个方法实际上执行的是组件中then方法;*/</span></code></pre></li><li><p>modules<br>当应用变得非常复杂时，store对象就有可能变得相当臃肿，为了解决这个问题，vuex允许我们将store分割成模块<br>而每个模块拥有自己的state,mutations，actions，getters，但是呢，模块中定义的state，使用者在使用时还是有些区别的</p><pre class="language-java" data-language="java"><code class="language-java">没有使用模块，取值时：$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name使用了模块<span class="token operator">:</span><span class="token comment">//index.js，vuex配置，在store实例的module中定义a模块</span>    modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        a<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'万一'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//使用者取值时,需要选择哪个模块</span><span class="token generics"><span class="token punctuation">&lt;</span>h2<span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>，</code></pre><p>另外模块中的getters，actions和外部的getters，actions方法还是有些区别的：</p><pre class="language-none"><code class="language-none">1)模块中的getters还可以接收第三个参数，这个参数是外部的state，你可以给这个参数取名为rootState，表示模块中能拿到store实例的state中的共享变量2)模块中actions的context参数调用commit方法只能调用模块内的mutations，而不能调用外部的mutations中的方法，但是模块中actions的context中可以拿到RootGetters,RootState表示可以调用外部的state的共享变量和getters中的方法。</code></pre></li></ul><blockquote><p><span id="c">Vuex的文件组织</span></p></blockquote><p>目前我们的配置全是放在store中的index.js中，我们可以将store实例中的getter，actions，modules，mutations全部抽离出来<br>放在src/store目录下，除了state不抽取成js文件外，其他配置全部抽取成js文件，使用es6的导入导出配置，<br>需要注意的是抽取的modules可能会有很多个，所以抽取的modules最好放在<code>store/modules/moduleA.js</code><br>创建个modules目录放在其中最好。</p><p>2021年10月3日更新，看了尚硅谷的vue网课，感觉天禹老师讲的太好了，<br>关于vuex的模块化，请点击链接：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH">尚硅谷vue网课</a>，P115，P116两节。</p><blockquote><p><span id="d">mapState,mapGetter等的使用</span></p></blockquote><p>vuex提供了四个函数可以帮我们简化代码的编写，分别是mapState,mapGetters,mapMutations,mapActions<br>通过练习，我感觉使用这些函数的作用相当于将共享对象中的state，getters等方法，数据都导入组件中，<br>实际上是根据共享变量中的state，getters等属性生成新的函数绑定到组件上，简化了代码编写，不使用vuex<br>提供的函数依然可以实现功能，这个在接下来的案例中你可以感受一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//App.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wan<span class="token operator">-</span>yi<span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">import</span> WanYi <span class="token keyword">from</span> <span class="token string">'./components/WanYi'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>      components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        WanYi<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//axios/index.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">/*共享对象中的数据*/</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    msg<span class="token operator">:</span> <span class="token string">'万一梦想实现了呢？'</span><span class="token punctuation">,</span>    school<span class="token operator">:</span> <span class="token string">'湖北师范大学'</span><span class="token punctuation">,</span>    address<span class="token operator">:</span> <span class="token string">'湖北黄石'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/*共享对象中更改数据*/</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">changeMsg</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>msg<span class="token operator">=</span>data    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">changeSchool</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>school<span class="token operator">=</span>data    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">changeAddress</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>address<span class="token operator">=</span>data    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/*共享对象中的计算属性*/</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">getter1</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"中国-"</span><span class="token operator">+</span>state<span class="token punctuation">.</span>address    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">getter2</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"地球-"</span><span class="token operator">+</span>getter<span class="token punctuation">.</span>getter1    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">getter3</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"银河系-"</span><span class="token operator">+</span>getter<span class="token punctuation">.</span>getter2    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">action1</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行异步更改msg任务。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"changeMsg"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"异步任务已完成"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">action2</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行异步更改school任务。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"changeSchool"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"异步任务已完成"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">action3</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行异步更改address任务。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"changeAddress"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"异步任务已完成"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//WanYi.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    WanYi组件内：<span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>测试mapState<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>传统方式拿到共享对象state中的数据<span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>school<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>address<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>使用mapState拿到共享对象中state数据，并生成相应的对象形式，对象写法<span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg2<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>school2<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>address2<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mapState的数组写法使用<span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>school<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>address<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>测试mapMutations<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>传统方式调用mutations中的异步方法<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"mutationsTest1"</span><span class="token operator">></span>传统方式调用mutations中的异步方法<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>使用mapMutations<span class="token punctuation">,</span>对象写法<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"mutationsTest2"</span><span class="token operator">></span>mapMutations方式使用mutations<span class="token punctuation">,</span>对象形式<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mapMutations数组写法使用<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"mutationsTest3"</span><span class="token operator">></span>mapMutations方式使用mutations<span class="token punctuation">,</span>数组形式<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>测试mapGetters<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>传统方式使用getters<span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>getter2<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>getter3<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mapGetter对象形式<span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>two<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>three<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mapGetter数组形式<span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>getter2<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>getter3<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>测试mapActions<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>传统方式调用actions中的异步方法<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"actionsTest1"</span><span class="token operator">></span>传统方式调用actions中的异步方法<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mapActions使用actions中的异步方法，对象形式<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"actionsTest2"</span><span class="token operator">></span>mapActions使用actions中的异步方法，对象形式<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mapActions使用actions中的异步方法，数组形式<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"actionsTest3"</span><span class="token operator">></span>mapActions使用actions中的异步方法，数组形式<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>mapState<span class="token punctuation">,</span>mapGetters<span class="token punctuation">,</span>mapActions<span class="token punctuation">,</span>mapMutations<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"WanYi"</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*传统方式使用mutations更改数据*/</span>    <span class="token function">mutationsTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'changeMsg'</span><span class="token punctuation">,</span><span class="token string">'我的梦想在哪里？'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'changeSchool'</span><span class="token punctuation">,</span><span class="token string">'苏州大学'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'changeAddress'</span><span class="token punctuation">,</span><span class="token string">'浙江省'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">/*mapMutations对象写法*/</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>changeMsg2<span class="token operator">:</span> <span class="token string">'changeMsg'</span><span class="token punctuation">,</span>changeSchool2<span class="token operator">:</span> <span class="token string">'changeSchool'</span><span class="token punctuation">,</span>changeAddress2<span class="token operator">:</span> <span class="token string">'changeAddress'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">mutationsTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">/*        这里是直接在methods中执行导入的函数，你可以在DOM中设置一个点击按钮，回调这些函数，        例如：&lt;button @click="changeMsg2()">&lt;/button>        注意：就算没有参数要传，你还是要写上(),不然会出错，因为mapMutations等函数在帮我们创建方法的时候是下面这样的          changeMsg2(value)&#123;            this.$store.commit('changeMsg',value)          &#125;        如果你使用changeMsg2的时候，没有写上(),则就会传递一个event对象作为参数，        所以在DOM中调用这些函数就算没有参数传递，也必须写上()      */</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeMsg2</span><span class="token punctuation">(</span><span class="token string">"我的梦想在哪里？"</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeSchool2</span><span class="token punctuation">(</span><span class="token string">"苏州大学"</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeAddress2</span><span class="token punctuation">(</span><span class="token string">"浙江省"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">/*mapMutations数组写法，要求是：生成的方法要与共享对象中的mutations中方法名相同*/</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'changeMsg'</span><span class="token punctuation">,</span><span class="token string">'changeSchool'</span><span class="token punctuation">,</span><span class="token string">'changeAddress'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">mutationsTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeMsg</span><span class="token punctuation">(</span><span class="token string">"学习？学个屁"</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeSchool</span><span class="token punctuation">(</span><span class="token string">"家里蹲大学"</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeAddress</span><span class="token punctuation">(</span><span class="token string">"银河系第三宇宙"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">/*传统方式调用actions中的异步方法*/</span>    <span class="token function">actionsTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'action1'</span><span class="token punctuation">,</span><span class="token string">'光在哪里？'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">/*mapActions方式使用actions中方法*/</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>updateSchool<span class="token operator">:</span><span class="token string">'action2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">actionsTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateSchool</span><span class="token punctuation">(</span><span class="token string">"中国科学院大学"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">/*mapActions方式使用actions中方法*/</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'action3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">actionsTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">action3</span><span class="token punctuation">(</span><span class="token string">"彭泽县南阳村"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*从共享变量的state中读取数据，并生成响应的计算属性，这是对象写法*/</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>msg2<span class="token operator">:</span><span class="token string">'msg'</span><span class="token punctuation">,</span>school2<span class="token operator">:</span> <span class="token string">'school'</span><span class="token punctuation">,</span>address2<span class="token operator">:</span> <span class="token string">'address'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">/*同上，不过是数组写法，这种写法要求生成的计算属性名与state中共享变量名相同*/</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">/*mapGetter的对象形式*/</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>two<span class="token operator">:</span><span class="token string">'getter2'</span><span class="token punctuation">,</span>three<span class="token operator">:</span><span class="token string">'getter3'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">/*mapGetter的数组形式，数组形式要求生成的计算属性名和getters中的函数名要相同*/</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'getter2'</span><span class="token punctuation">,</span><span class="token string">'getter3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*小提示：...是es6中的扩展运算符，可以将对象中的属性和方法赋值给另一个对象，例如：let obj = &#123;a:1,b:2&#125;let obj2=&#123;c: 3,d: 4,...(obj)&#125;console.log(obj2) //&#123;a:1,b:2,c:3,d:4&#125;上面的案例就是将新生成的函数赋值到computed，methods对象中*/</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之VueRouter篇</title>
      <link href="2021/09/09/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8BVueRouter%E7%AF%87/"/>
      <url>2021/09/09/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8BVueRouter%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>简述</p></blockquote><p>vue-router路由管理也是vue中特别重要的一篇，下面来看看在本篇中主要学习哪些内容</p><ul><li><a href="#a">学习路由管理的前置知识</a></li><li><a href="#b">vue-router的基本使用</a></li><li><a href="#c">vue-router的详解</a></li><li><a href="#d">vue-router嵌套路由</a></li><li><a href="#e">vue-router参数传递</a></li><li><a href="#f">vue-router导航守卫</a></li><li><a href="#g">keep-alive的使用</a></li></ul><blockquote><p><span id="a">学习路由管理的前置知识</span></p></blockquote><p>本节中主要讲网站架构发展过程，以及前后端路由，前后端渲染的概念<br>最后介绍当更改浏览器URL却不向服务器再申请资源的方法，下面来看具体详情：</p><ul><li><p>网站架构发展过程</p><ul><li>前后端不分离阶段<br>以前学习JSP的时候，或者使用thymeleaf的时候，就是前后端不分离的时候，没有用ajax<br>直接拿到数据在页面中嵌入java代码等，并且也是后端根据用户的请求，将页面响应给用户。</li><li>前后端分离阶段<br>再之后，就是学习了ajax，通过Jquery发送ajax请求，从后端获取到数据，再通过JS遍历数据展示<br>在页面中，但是注意，这个时候依然是后端根据用户请求，选择将某个页面发送给用户。</li><li>单页面富应用阶段<br>到现在，整个项目只有一个页面了，其他页面都是一个个前端人员编写的组件通过Vue渲染出来的<br>富应用说的就是多个组件，在这个阶段中，用户只在最开始进入网站的时候发送请求给后端，接收到<br>后端数据之后，便把所有静态数据全部渲染了，当用户点击页面某个按钮，其实是跳转到了相应的组件中<br>这个阶段在前后端分离阶段的基础之上增加了一点，就是页面的跳转由前端主导，而不是后端。</li></ul></li><li><p>前后端路由和前后端渲染的概念<br>通过上面的解释，我们很容易知道，后端路由指的是，后端处理URL和页面之间的映射关系，即跳转页面后端来做<br>前端路由则是跳转页面由前端进行处理，这不，vue-router就是干这事的。<br>后端渲染指的是，数据在后端就已经渲染到页面中，直接给用户发送HTML页面就完事<br>前端渲染则是，数据由前端渲染，你后端只是提供数据而已，好处是，以后IOS端，桌面软件都可以共用一个后端即可。</p></li><li><p>更改浏览器URL却不向服务器再申请资源的方法<br>上面说过，在单页面富应用阶段，只有在用户进入网站的时候才会向服务器申请唯一一套资源，之后用户每次<br>点击按钮，会发生url改变，但是并不向后端请求数据，而是通过切换组件达到跳转页面的效果<br>这种改变浏览器url，却不向服务器发出请求是怎么做的呢？下面是两种方式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1,通过改变浏览器的hash值，使得改变浏览器url，但不向服务器发出请求使用这种方式改变url，被称为hash模式，hash模式也是vue路由中默认使用的模式，hash模式有个特点，就是url路径中会带有#*/</span><span class="token comment">/*2,使用html5的history对象使得改变url，但不请求服务器，使用history对象方式被称为history模式history的pushState方法，相当于入栈操作，使用这个方法，会将这个url对应的组件放进一个栈结构中，页面始终显示栈顶url对应的组件页面history的back方法，相当于出栈操作，就是浏览器返回上一个页面，不过在vue中称为返回上一个组件history的replaceState方法，这个方法相当于替换了栈顶的url，这个意思是，浏览器不能返回上一个页面history的go方法，history.back()等价于history.go(-1)，history.forward()等价于history.go(1)，指定跳转到某个页面*/</span><span class="token comment">/*2021年10月3日更新：hash模式和history模式，区别不仅仅是浏览器路径中的#，当项目被打包部署到服务器上时如果刷新页面，hash模式的#后面的路径不会发送到后端服务器中，不会产生问题，而如果是history模式，则一旦页面刷新，浏览器错把路由跳转的路径当成后端服务器接口请求，结果服务器没这接口，直接404，项目上线时要想使用history模式，需要后端的配合，进行相应的处理或者配置nginx*/</span></code></pre></li></ul><blockquote><p><span id="b">vue-router的基本使用</span></p></blockquote><p>目前三大框架都有自己的路由实现，vue就是vue-router,路由用于设定访问路径，将路径和组件映射起来<br>在vue-router的单页面应用中，页面路径的改变就是组件的切换，下面是vue路由使用步骤：</p><ul><li><p>安装vue-router</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm install vue<span class="token operator">-</span>router <span class="token operator">--</span>save<span class="token comment">//运行时依赖</span></code></pre></li><li><p>如果没有自动在src目录下创建router目录的话，我们需要在src下创建一个router目录并在其中创建index.js文件<br>该JS文件是vue-router的配置文件，我们需要在其中导入vue和vue-router，并且将vue-router注册进Vue中<br>准确来说，vue-router是vue的插件，只要是插件都需要注册到vue中，插件主要是用来为vue添加全局功能的<br>下面是<code>router/index.js</code>初始配置：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token comment">//注册插件</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">//具体的映射关系，配置url对应某些组件的</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">//创建router实例，并导出该实例</span>    mode<span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span><span class="token comment">//使用history模式更改url，路径中就不会有#</span>    base<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">,</span>    routes<span class="token comment">//将映射关系装载到router中，es6属性的增强写法，等同于routers:routers</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre></li><li><p>最后在main.js中，将router装载到vue实例中，下面是main.js中内容</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token comment">//当不写后面具体文件时，默认找该路径下的index.js文件</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    router<span class="token punctuation">,</span><span class="token comment">//装载路由对象</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token comment">//组件篇讲过，代替template+components，就是生成一个&lt;App/>标签</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment">//绑定页面中id为app的div标签</span></code></pre></li></ul><p>总结下来，不过是安装插件，注册插件，在路由配置文件index.js中配置路由映射信息，再在main.js中导入router<br>上面这些是基本配置，下面我们创建一个HelloVueRouter组件，并为其配置路由映射关系</p><ul><li><p>首先在src/components目录下创建一个HelloVueRouter.vue文件，具体内容如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//组件中就显示Hello VueRouter</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  Hello VueRouter<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token comment">//导出组件对象</span>name<span class="token operator">:</span> <span class="token string">"HelloVueRouter"</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><p>在router/index.js中配置路由信息</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//只需要在这里添加映射信息，其余不变</span><span class="token keyword">import</span> helloVueRouter <span class="token keyword">from</span> <span class="token string">'../components/HelloVueRouter.vue'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/helloVueRouter'</span><span class="token punctuation">,</span>        name <span class="token operator">:</span> <span class="token string">'helloVueRouter'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> helloVueRouter  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre></li><li><p>在App.vue中的template中使用vue-router的组件标签，router-link标签和router-view标签，这两个标签<br>都是vue-router中的组件，其中router-link标签用于跳转组件，router-view标签用于将组件展示到哪里<br>下面是app.vue中具体详情：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/helloVueRouter"</span><span class="token operator">></span>helloVueRouter<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment">/*结合上面的部分我们知道，当我们打开浏览器时，app.vue中的template会替换页面原来的id为app的div标签在app.vue的template中，使用router-link标签的to属性，去找到到该路径下对应的组件，也就是helloVueRouter组件这在router/index.js路由配置文件中配置好的，找到该组件后，将组件加载到router-view所在的地方从而可以在页面中显示helloVueRouter组件的template中的内容*/</span></code></pre></li></ul><blockquote><p><span id="c">vue-router的详解</span></p></blockquote><p>这节主要讲一些路由的细节信息，包括默认路由，router-link标签的补充，通过代码跳转路由，动态路由，路由的懒加载</p><ul><li><p>配置默认路由<br>默认路由指的是，最先加载哪个组件，当app.vue的template中有多个router-link标签时<br>但是因为router-view标签表示一次只能显示一个组件，所以默认路由就是配置哪个组件最先展示。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//通过在router/index.js的routes中配置默认路由</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        redirect<span class="token operator">:</span> <span class="token string">'/helloVueRouter'</span><span class="token comment">//重定向</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/helloVueRouter'</span><span class="token punctuation">,</span>        name <span class="token operator">:</span> <span class="token string">'helloVueRouter'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> helloVueRouter  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">/*一般默认路由都是配置path为/，这样表示，页面一打开，最先展示哪个组件，上面的例子使用重定向方式你也可以直接将某个组件的path改成/，表示这是最先加载&#123;            path: '/',            name : 'helloVueRouter',            component: helloVueRouter        &#125;    小提示：app.vue组件并不需要配置路由映射，因为该组件的作用就是使用组件内的template代替页面的div标签*/</span></code></pre></li><li><p>router-link标签的补充<br>该标签是一个vue-router中已经内置的组件，它会被渲染成一个a标签，下面是该标签的一些属性：</p><ul><li><p>to属性：指定跳转的url路径，该路径对应路由表中某个组件</p></li><li><p>tag属性：tag可以指定<code>&lt;router-link&gt;</code>之后渲染成什么标签，比如渲染成li标签，而不是a标签</p></li><li><p>replace属性：该属性不需要任何值，仅仅只是标记这个组件，指定replace的情况下，<br>浏览器后退键按钮不能返回到上一个页面中，底层应该用的是history对象的replaceState方法更改浏览器url的</p></li><li><p>active-class属性，这个属性的作用是，当组件被展示的时候代表这个组件被激活了，我们的router-link标签<br>本质上是一个a标签，点击a标签后，组件被激活，此时a标签的class属性值中会有一个<code>router-link-active</code>样式<br>我们可以通过该样式，对这个a标签做一些处理，比如菜单栏，你点击某一栏，对应的组件被展示出来，<br>而你点击后的这一栏会更改颜色，就是使用router-link-active样式做的。<br>而我们的active-class属性则可以设置成其他样式名，改掉router-link-active为其他样式名，<br>改这个样式名有几种方式，下面总结一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1,通过router-link标签的active-class属性更改router-link-active样式名</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/wanyi"</span> active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"wanyi"</span><span class="token operator">></span>科一<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token comment">//2,通过在路由文件中增加linkActiveClass属性，使用该属性，当组件被点击后，会增加对应的样式名</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//设置history模式，有很多方式</span>        routes<span class="token punctuation">,</span><span class="token comment">//路由表</span>        linkActiveClass<span class="token operator">:</span> <span class="token string">'wanyi'</span><span class="token comment">//将router-link-active样式名改成wanyi</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>通过代码跳转路由<br>上面例子都是通过to属性，使得我们的url跳转其他地址，从而替换组件，我们也可以通过代码实现同样的效果<br>下面让我们来看看如何通过代码方式改变url路径吧</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/wanyi"</span> active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"yiwan"</span><span class="token operator">></span>科一<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span> <span class="token comment">//原来的</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"toWanyi()"</span><span class="token operator">></span>科一<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">toWanyi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/wanyi'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*简单来说就是使用button+点击事件方式替换了router-link，通过$router.push方法跳转路径push方法就相当于history对象的pushState方法，浏览器是可以回退到上一个url的，如果是replace方法，浏览器就不可回退了。这个$router就是我们在router/index.js中创建的路由实例router这里之所以能使用$router是因为在注册进vue实例时，使用Vue.prototype.$router=router又因为我们组件都是继承自Vue的原型对象，是Vue构造函数的实例，所以我们组件中可以获取到$router另外之后你还会见到$route,它指的是当前路由，也就是路由映射关系中那个对象，之后会详细说明*/</span></code></pre></li><li><p>动态路由<br>动态路由指的是，我的url路径某一段是不确定的，类似后端的路径变量，我们可以获取路径上这个变量的值<br>这也算是一种路由传递数据的方式，数据从一个组件，传递到另一个组件。下面是一个简单的例子：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">原来的：    <span class="token comment">//路由配置文件中,router/index.js</span>    <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/wanyi'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'Wanyi'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> Wanyi    <span class="token punctuation">&#125;</span>    <span class="token comment">//App.vue</span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/wanyi"</span><span class="token operator">></span>科一<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token comment">//当我点击跳转时，路径变成/wanyi，会匹配到对应的path，找到Wanyi组件进行渲染</span><span class="token comment">//我想实现，点击跳转时，/wanyi/[id],后面跟上一个变量，这个id变量将来从数据库中获取</span>现在的：<span class="token comment">//路由配置文件中</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/wanyi/:id'</span><span class="token punctuation">,</span><span class="token comment">//这里的:id是变量，接收传递的id值，本例中id=keyi</span>    name<span class="token operator">:</span> <span class="token string">'Wanyi'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Wanyi<span class="token comment">//只要路径匹配，就加载Wanyi组件，我们还可以在Wanyi组件中拿到id值</span><span class="token punctuation">&#125;</span><span class="token comment">//App.vue</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"'/wanyi/'+id"</span> active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"yiwan"</span><span class="token operator">></span>科一<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                id<span class="token operator">:</span> <span class="token string">'keyi'</span>    <span class="token comment">//到时候去数据库查出来的数据</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>那么，如何在组件中，拿到路径中携带的参数呢？就是上面的例子，Wanyi组件中如何拿到id值？</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//修改Wanyi.vue</span><span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>userId<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>     <span class="token comment">//你也可以直接&#123;&#123;$route.params.id&#125;&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"Wanyi"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            message<span class="token operator">:</span> <span class="token string">'万一'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"测试vue-router"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算属性</span>        <span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token comment">//关键</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*这个$route和$router类似，能在组件中使用，因为在vue-router中，将对象赋值给了Vue原型对象$router代表我们创建的router路由实例，在方法中使用this.$router.push方法不仅可以跳转某个url还可以携带参数到被激活的组件，而我们这$route则是获取当前路由的数据的，当前路由就是当点击标签后会根据标签to属性匹配路由表中对应的路径，匹配成功的路径所在的对象就是当前路由对象。*/</span></code></pre></li><li><p>路由的懒加载<br>当打包构建应用时，javascript包会变得非常大，影响页面加载，如果我们能把不同路由对应的组件分割成不同的代码块(JS文件)<br>然后当路由被访问的时候才加载对应组件JS文件，这样就会更加高效<br>路由中通常有很多组件，这些组件通常会被打包成一个js文件，如果组件太多，这个js就会非常大，当用户进入网站时，<br>会花费很长时间，甚至出现短暂空白，如何避免呢？使用懒加载，等到激活该组件时，才去加载组件<br>路由懒加载：主要作用就是将路由对应的组件打包成一个个js代码块，只有在这个路由被访问到的时候才加载对应的组件</p><pre class="language-none"><code class="language-none">以前我们写路由配置，总是先导入组件，然后配置到映射对象中，如下：import Home from &#39;..&#x2F;views&#x2F;Home.vue&#39;const routes &#x3D; [&#123;            path: &#39;&#x2F;home&#39;,            name: &#39;Home&#39;,            component: Home         &#125;    ]而懒加载的方式是：&#123;        path: &#39;&#x2F;about&#39;,        name: &#39;About&#39;,        &#x2F;&#x2F;懒加载        component: () &#x3D;&gt; import(&#39;..&#x2F;views&#x2F;About.vue&#39;)     &#125;当需要的时候才去导入相应的组件，在打包过程中，这种方式会将组件文件独立成JS文件，等需要的时候再加载。</code></pre></li></ul><blockquote><p><span id="d">vue-router嵌套路由</span></p></blockquote><p>嵌套路由指的是，在路由映射时，一个路径下有多个组件，例如，有两个组件都要在/my路径下，<br>当我访问/my/news时加载news组件，当我访问/my/message时加载message组件，如果像以前我们得<br>配置两个路径，通过嵌套路由可以将这两个组件都配置在同一路径下，下面是简单的案例：</p><pre class="language-java" data-language="java"><code class="language-java">使用嵌套路由的步骤<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>创建对应的子组件，并且在路由映射中配置对应的子路由        <span class="token comment">//创建MyNews.vue,创建MyMessages.vue</span>        <span class="token comment">//1.1MyNews.vue，主要看看template</span>        <span class="token generics"><span class="token punctuation">&lt;</span>template<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>div<span class="token punctuation">></span></span>                <span class="token generics"><span class="token punctuation">&lt;</span>ul<span class="token punctuation">></span></span>                    <span class="token generics"><span class="token punctuation">&lt;</span>li<span class="token punctuation">></span></span>新闻<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token generics"><span class="token punctuation">&lt;</span>li<span class="token punctuation">></span></span>新闻<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token generics"><span class="token punctuation">&lt;</span>li<span class="token punctuation">></span></span>新闻<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token generics"><span class="token punctuation">&lt;</span>li<span class="token punctuation">></span></span>新闻<span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>        <span class="token comment">//1.2MyMessages.vue，主要看看template</span>        <span class="token generics"><span class="token punctuation">&lt;</span>template<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>div<span class="token punctuation">></span></span>                <span class="token generics"><span class="token punctuation">&lt;</span>ul<span class="token punctuation">></span></span>                    <span class="token generics"><span class="token punctuation">&lt;</span>li<span class="token punctuation">></span></span>消息<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token generics"><span class="token punctuation">&lt;</span>li<span class="token punctuation">></span></span>消息<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token generics"><span class="token punctuation">&lt;</span>li<span class="token punctuation">></span></span>消息<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token generics"><span class="token punctuation">&lt;</span>li<span class="token punctuation">></span></span>消息<span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>        <span class="token comment">//1.3在路由表中的父组件中配置子路由</span>        <span class="token punctuation">&#123;</span>            path<span class="token operator">:</span> <span class="token string">'/my'</span><span class="token punctuation">,</span>            name<span class="token operator">:</span> <span class="token string">'My'</span><span class="token punctuation">,</span>            component<span class="token operator">:</span> <span class="token class-name">My</span><span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>   <span class="token comment">//默认路由,这里不需要</span>                    component<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/MyNews.vue'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    path<span class="token operator">:</span> <span class="token string">'news'</span><span class="token punctuation">,</span>                    component<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/MyNews.vue'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    path<span class="token operator">:</span> <span class="token string">'messages'</span><span class="token punctuation">,</span>                    component<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/MyMessages.vue'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token number">2</span><span class="token punctuation">)</span>在组件内部使用<span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span>标签        <span class="token comment">//在父组件中使用标签，My.vue</span>        <span class="token generics"><span class="token punctuation">&lt;</span>template<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>div<span class="token punctuation">></span></span>                <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/my/news"</span><span class="token operator">></span>新闻<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>                <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token keyword">to</span><span class="token operator">=</span><span class="token string">"/my/messages"</span><span class="token operator">></span>消息<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>                <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><blockquote><p><span id="e">vue-router参数传递</span></p></blockquote><p>参数传递指的是，在路由跳转的时候如何传递参数，传递参数主要有两种类型：params和query</p><ul><li><p>params方式<br>使用params方式进行参数传递，其router-link中to属性值的对象中必须为name属性不能使用path属性，<br>不然在目标组件中拿不到params的值，案例如下：</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;router-link :to&#x3D;&quot;&#123;name: &#39;Article&#39;,params:&#123;id:&#39;123456&#39;,name:&#39;万一&#39;&#125;,query:&#123;id:&#39;123456&#39;,name:&#39;万一&#39;&#125;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;这个Article值就是路由表中目标组件的name属性值请求形成的路径取决于有没有使用query属性进行传参，如果router-link中使用了query属性进行传参则请求的路径是&#x2F;xxx&#x2F;xxx?id&#x3D;&#39;123456&#39;....，如果没有使用query属性传参，则请求路径就是name指定组件路径或者path属性指定的路径。我们可以在跳转后的组件中通过this.$route.params.id或this.$route.query.id拿到传递的数据params属性用来传递数据，就像post请求传递数据，而query将数据拼接到url上，就像get方式传递数据注意：params方式只能使用name属性进行参数，不能使用path属性</code></pre></li><li><p>query方式<br>上面已经有使用query属性进行传参，query属性传参不管是使用name属性还是path属性都可以<br>通过<code>this.$route.query.xxx</code>拿到数据，个人感觉query是最好的传参方式，当然router-link使用name属性效果也是一样的<br>当然，除了使用router-link方式传递数据，你也可以使用代码的方式，例如下面方式</p><pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F;在my.vue中&lt;template&gt;  &lt;div&gt;    &lt;button @click&#x3D;&quot;toNews&quot;&gt;新闻&lt;&#x2F;button&gt;    &lt;router-link :to&#x3D;&quot;&#123;path: &#39;&#x2F;my&#x2F;messages&#39;,query: &#123;name: &#39;消息&#39;,id: 2&#125;&#125;&quot;&gt;消息&lt;&#x2F;router-link&gt;  &lt;&#x2F;div&gt;  &lt;router-view&#x2F;&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;My&quot;,  methods: &#123;    toNews()&#123;      this.$router.push(&#123;path: &#39;&#x2F;my&#x2F;news&#39;,query: &#123;name: &#39;我的新闻&#39;,id: 1&#125;&#125;)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&#x2F;*使用query类型在路由传递参数时，有两种方式，通过router-link标签或者通过代码方式传递参数这里$router的push方法可以传递对象，对象中有路径和参数，之前只传了路径所以总结$router用于传递数据，跳转数据，而$route用于接收数据值得注意的是：通过router-link标签传递数据时，to属性需要加上:引号，不然报错*&#x2F;</code></pre></li><li><p>还有一种传递数据的方式，动态路由<br>动态路由是在路由表的路径中使用:xxx，进行路径的占位，形成xxx/xxx/123<br>这种方式就像rest风格传递数据，上面已经有动态路由的方式，这种方式和params，query并没有关系。<br>使用动态路由的方式，我们也可以在目标组件中获取传递的参数，通过<code>this.$route.params.xxx</code>.</p></li></ul><blockquote><p><span id="f">vue-router导航守卫</span></p></blockquote><p>导航守卫指的是：当发生路由跳转时，可以拦截跳转的过程，像拦截器一样的概念，在跳转路由前后做点事<br>案例：例如我们实现一个需求，当我们点击按钮，切换组件时，将页面的title变成相应的组件名<br>这里有两种方式实现，第一种使用钩子函数，第二种使用导航守卫</p><ul><li><p>钩子函数<br>在组件中使用created属性，该属性值是一个钩子函数，当我们点击切换组件时，被切换的组件被创建，并调用created函数<br>在该函数中改变页面的title，从而实现我们的需求,所有组件实现created函数，在其中设置document.title属性即可实现需求</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"home"</span><span class="token punctuation">&#125;</span><span class="token comment">//小提示，钩子函数指的是，我们编写的函数等着vue去调用</span></code></pre></li><li><p>导航守卫，我们可以利用路由跳转，组件切换时，必须经过拦截函数，才能切换组件这一特性，<br>从而改变title值，代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//路由表index.js</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> Home    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>        <span class="token comment">//懒加载</span>        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/About.vue'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/wanyi/:id'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'Wanyi'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> Wanyi    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/my'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'My'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> My<span class="token punctuation">,</span>        children<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/MyNews.vue'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                path<span class="token operator">:</span> <span class="token string">'/my/news'</span><span class="token punctuation">,</span><span class="token comment">//嵌套路径中，这两种子路径写法都可以</span>                <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/MyNews.vue'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                path<span class="token operator">:</span> <span class="token string">'messages'</span><span class="token punctuation">,</span>                <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/MyMessages.vue'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    routes<span class="token punctuation">,</span>    history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// linkActiveClass: 'wanyi'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//在路由跳转之前，执行该函数</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>     <span class="token comment">//这个to,和from都是一个个route对象，即路由表中的对象</span>    document<span class="token punctuation">.</span>title<span class="token operator">=</span>to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token comment">//使用matched解决路由嵌套问题</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token comment">/*上面使用导航守卫调用的方法beforeEach，也叫作前置钩子或者前置守卫，就是说在跳转组件之前被调用还有一个后置钩子afterEach，这个函数是在跳转组件之后被调用，而且并不需要next方法，因为已经跳转完毕了上面这两个函数都是全局守卫，还有路由独享的守卫(路由的beforeEnter等属性)，组件内的守卫(在组件中beforeRouteEnter等属性)全局守卫，顾名思义，全局的路由表中只要发生跳转，就会执行拦截函数，而组件内的守卫则时，切换到这个组件前后才会执行拦截函数，路由独享守卫则是只在该路由中，对该路由下的组件有用。*/</span></code></pre></li></ul><blockquote><p><span id="g">keep-alive的使用</span></p></blockquote><p>keep-alive主要做组件状态保存的，当我们从一个组件切换到另一个组件，如果我们不进行状态保存，<br>那么当我们回退到上一个组件时，会重新加载该组件，而如果我们进行状态保存后，当我们回退上一个组件时，会回到原来的状态。</p><p>例如我们点外卖，在店铺按钮中点击进入一个店铺，然后我们切换到我的信息，此时再点击店铺按钮时，<br>还处于之前的店铺，就说明，之前的状态已经被缓存起来了。</p><p>keep-alive是vue内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染<br>router-view也是一个组件，是vue-router内置的组件，如果直接被包在keep-alive里面，所有路径匹配到的视图组件都会被缓存</p><p>组件中有两个钩子函数，activated和deactivated函数，当组件被激活时，activated被调用，当切换到其他组件时deactivated被调用<br>前提是，router-view被keep-alive包裹住了，即，使用了缓存，如果不使用缓存，这两个钩子函数不会被调用，<br>不使用缓存，切换组件时，调用的是组件的created和destroyed钩子函数</p><p>我们使用keep-alive标签包裹router-view标签后，所有与router-view关联的组件都会被缓存起来<br>但是我就想这些被缓存起来的组件中，有几个组件不能被缓存起来这个时候，就需要使用到keep-alive的属性</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//keep-alive标签属性</span>include<span class="token punctuation">,</span>字符串或正则表达式，只有匹配的组件会被缓存exclude<span class="token punctuation">,</span>字符串或正则表达式，任何匹配的组件都不会被缓存起来<span class="token comment">//属性值可以写多个，用逗号隔开，配置好后，则匹配的组件不会被缓存起来</span>例如：<span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive exclude<span class="token operator">=</span><span class="token string">"组件的name属性,组件的name属性"</span><span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span> </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之脚手架篇</title>
      <link href="2021/09/09/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%84%9A%E6%89%8B%E6%9E%B6%E7%AF%87/"/>
      <url>2021/09/09/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%84%9A%E6%89%8B%E6%9E%B6%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>最近十分焦虑，vue还没学完，工作上还需要赶紧学SpringCloud，计划这周把vue博客笔记写完，<br>下周开始写vue实战项目，总之，尽快结束vue，然后10月份学习SpringCloud，在过年之前，学完Cloud！</p><blockquote><p>Vue-Cli</p></blockquote><p>vue-cli是vue的脚手架，Cli指的是Command-line interface,翻译为命令行界面，但是俗称脚手架<br>当我们使用vue开发大型应用时，脚手架能帮我们配置代码目录结构，项目结构和部署，热加载，代码单元测试等事情<br>使用vue-cli可以快速搭建vue开发环境以及对应的webpack配置，下面是使用步骤：</p><ul><li>全局安装vue脚手架命令：<code>npm install @vue/cli -g</code></li><li>安装脚手架2(vue-cli2)模板<br>当我们vue-cli版本是3时，和2的版本在使用命令上有些区别，所以如果你用的脚手架3但是却希望<br>输入脚手架2的命令时也能成功执行，那么你需要全局安装一个依赖，<code>npm install -g @vue/cli-init</code><br>安装好后，使用脚手架2的命令也能成功被执行</li><li>创建vue项目<br>vue-cli2初始化项目：<code>vue init webpack studyvuecli2  //项目名小写</code><br>vue-cli3初始化项目：<code>vue create studyvuecli3</code><br>执行命令后，你可能需要配置一些vue项目中模块，按照操作配置即可。</li></ul><p>下面是使用脚手架2命令创建项目的目录结构<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/vue-cli2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" loading="lazy"><br>通过脚手架2创建的项目，项目中有很多配置文件，下面来说说这些配置文件的含义：</p><ul><li>build和config目录是webpack的配置文件，脚手架将webpack配置文件分离了，都放在这里</li><li>node_modules目录npm的本地安装位置，或者说局部安装</li><li>src中assets目录，主要放一部分图片，放在这里的图片，webpack会根据配置判断，<br>图片是否会转成base64格式，如果图片小于我们的配置，则会被转成base64格式发送给浏览器<br>如果图片大于我们的配置，则是浏览器请求url的方式获取图片。</li><li>src中components目录放我们的组件文件，以.vue结尾的文件，该文件是将以前写的组件抽出来成独立的JS文件<br>src目录下还可以放更多其他目录，比如vue-router，vuex，axios的目录等等</li><li>static目录，放在该目录中的文件，会原封不动拷贝到dist目录中</li><li><code>.babelrc</code>文件是es6转es5的配置文件</li><li><code>.editorconfig</code>文件是项目文本相关的配置，规定项目文件的规则，例如代码缩进几个空格之类的</li><li><code>.postcssrc.js</code>文件是css转化时的配置</li><li>package.json文件是npm用来管理项目的文件，记录着项目的一些依赖信息，这里的记录的依赖版本<br>并不准确，如果想查看当前项目依赖的准确版本，可以查看package-lock.json文件</li></ul><p>下面是使用脚手架3命令创建项目的目录结构<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/vue-cli3%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" loading="lazy"><br>我们可以看到，Vue-cli3创建的项目没有了很多配置文件，解释一下其中配置文件的含义：</p><ul><li>这里的public目录对应着就是vue-cli2中的static目录，该目录的东西会原封不动拷贝到dist目录中<br>webpack以生产模式启动项目就会生成dist目录，并将打包进该目录中。</li><li><code>.browserslistrc</code>文件主要是当我们使用babel-loader时，将es6转成es5，而这个文件是配置<br>哪些适配哪些浏览器，占市场多大的份额的浏览器，一般不动它</li><li><code>babel.config.js</code>文件就是babel-loader的配置文件</li></ul><p>我们可以发现，vue-cli3创建的项目的配置目录没有了，其实是脚手架给藏起来了，如果你想查看这些配置文件<br>你可以查看项目的以下目录找到它：<code>node_modules/@vue/cli-service/lib/Service.js文件</code><br>或者你可以通过vue-cli3提供的图形化界面查看项目配置：<code>vue ui</code>，该命令会打开一个浏览器页面，可以查看安装依赖，<br>如果你想有一些自己的配置文件，你可以在项目根目录中创建vue.config.js文件，文件名是固定的<br>在其中导出自己的配置(和之前webpack.config.js一样写法)，之后在启动服务后，vue-cli会自动将vue.config.js与默认的配置进行合并</p><p>小提示：vue-cli3是基于webpack4打造的，vue-cli2是基于webpack3</p><blockquote><p>runtimeCompiler与runtimeOnly的区别</p></blockquote><p>我们在使用脚手架创建项目的时候，可能会有一个选择，让你选择是使用runtimeCompiler还是runtimeOnly方式构建我们的项目<br>首先来看看不同版本脚手架生成的src/main.js中有什么不同</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//vue-cli2版本创建的项目中main.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span> App <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*在组件篇中，我们很少看到根组件中同时存在el和template属性，然而其实根组件是可以有template属性的根组件的template会在项目启动时替换掉el管理的div标签。*/</span><span class="token comment">//vue-cli3版本创建的项目中main.js</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment">/*可以看到非常的简便了，其实这里是通过不断的演化来的，来看看这里的配置如何演进的最开始：new Vue(&#123;          el: '#app',          components: &#123; App &#125;,          template: '&lt;App/>'        &#125;)    然后：    new vue(&#123;            el: '#app',            render: h=>&#123;//render函数相当于template+components              return h(App);            &#125;        &#125;)    再然后：    new vue(&#123;            render: h=>&#123;              return h(App);            &#125;        &#125;).$mount('#app')//$mount取代了el属性     最后：     createApp(App).mount('#app')//createApp函数封装了vue实例*/</span></code></pre><p>在使用vue-cli2创建的项目中的main.js，我们template代码，会被ast(abstract syntax tree抽象语法书)，然后再转成render函数<br>render函数再转成虚拟DOM(VDOM),最后转成真实DOM(UI)。这就是使用runtimeCompiler方式构建的项目解释template的方式，<br>而使用runtimeOnly方式构建的项目则直接从render函数开始，相比runtimeCompiler方式，节省了很多环节<br>所以使用runtimeOnly方式构建的项目比runtimeCompiler方式构建的项目要小大概10KB<br>使用runtimeOnly方式构建的项目，在main.js中的vue实例中，使用render函数代替了template，这个函数其实<br>是一个钩子函数，它接收一个对象，并根据我们的APP组件去调用函数，其实内部创建了一个<code>&lt;APP/&gt;</code>标签</p><p>总结：</p><ul><li>如果在之后的开发中，依然使用template，就选择runtime-Compiler方式构建项目</li><li>如果在之后的开发中，使用.vue文件开发组件，那么可以选择runtime-only</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之组件篇</title>
      <link href="2021/09/07/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%AF%87/"/>
      <url>2021/09/07/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>简述</p></blockquote><p>今天来到新的一篇，组件篇，从webpack那篇博客我们知道，现在前端开发的页面都是单页面富应用，即SPA页面<br>单页面富应用指的是：前端只需要写一个页面，使用vue去动态生成Dom元素，并更新到页面中，从而达到动态交互的效果。<br>vue生成的Dom元素，就是生成一个个组件，当页面需要跳转到其他页面时，其实就是将对应的组件，渲染到这个页面的相应位置。<br>下面画了一张图，表明组件的含义<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/%E7%BB%84%E4%BB%B6%E6%A6%82%E5%BF%B5.png" loading="lazy"></p><p>说完组件概念，下面来看看组件篇中，具体应该学习哪些内容。</p><ul><li><a href="#%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4">组件的使用步骤</a></li><li><a href="#%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6%E5%92%8C%E5%B1%80%E9%83%A8%E7%BB%84%E4%BB%B6">全局组件和局部组件</a></li><li><a href="#%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6">父子组件</a></li><li><a href="#%E7%BB%84%E4%BB%B6%E6%A8%A1%E6%9D%BF%E5%88%86%E7%A6%BB%E6%96%B9%E6%B3%95">组件模板分离方法</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84data%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0">为什么组件中的data是一个函数</a></li><li><a href="#%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1">父子组件之间的通信</a></li><li><a href="#%E4%BB%BB%E6%84%8F%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE">任意组件间传递数据</a></li><li><a href="#%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%BB%93%E5%90%88%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E6%A1%88%E4%BE%8B">父子组件通信结合双向绑定案例</a></li><li><a href="#%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%AE%BF%E9%97%AE">父子组件之间的访问</a></li><li><a href="#%E7%BB%84%E4%BB%B6%E4%B8%AD%E6%8F%92%E6%A7%BD%E7%9A%84%E4%BD%BF%E7%94%A8">组件中插槽的使用</a></li></ul><blockquote><p><span id="组件的使用步骤">组件的使用步骤</span></p></blockquote><p>分为创建组件，注册组件，使用组件，下面是个简单的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token comment">//3，vue实例(根组件)管理的div中使用组件</span>    <span class="token operator">&lt;</span>mycon<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mycon<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">//1，创建组件mycon</span>    <span class="token keyword">let</span> mycon <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            &lt;div>            &lt;h3>万一爱明月&lt;/h3>            &lt;/div></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2,注册组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'mycon'</span><span class="token punctuation">,</span>mycon<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//全局组件的创建和注册必须在vue实例之前</span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            message<span class="token operator">:</span><span class="token string">'加油!'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*注意：上面创建组件和注册组件可以简写成下面的方式*/</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"mycon"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div>        &lt;h3>万二爱明月&lt;/h3>        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><span id="全局组件和局部组件">全局组件和局部组件</span></p></blockquote><p>像上面案例中，使用<code>Vue.component</code>方法注册的组件就是全局组件，全局组件可以在多个vue实例中使用<br>需要注意的是，全局组件的创建和注册必须在vue实例之前，不然会报错。<br>而局部组件指的是，将组件挂载到其他组件之下，使用组件时，只能在被挂载组件的模板中使用<br>所以可知，全局组件既然能在所有vue实例中使用，说明全局组件被挂载到了每个vue实例之中。<br>下面来看看局部组件：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token comment">//使用组件 </span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment">//1，创建组件mycon</span><span class="token keyword">let</span> mycon <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div>        &lt;h3>万一爱明月&lt;/h3>        &lt;/div>    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        message<span class="token operator">:</span><span class="token string">'加油!'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//2，注册组件</span>        <span class="token comment">//wanyi是组件标签名，mycon是创建的组件名</span>        wanyi<span class="token operator">:</span> mycon    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*上面就是局部组件的创建，注册，使用，mycon组件被挂载到指定的vue实例的components中，只能在该vue实例中使用组件，即wanyi标签，下面是局部组件的另一种写法，效果是一样的*/</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        message<span class="token operator">:</span><span class="token string">'加油!'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//wanyi是组件标签名，使用时也是直接使用wanyi标签，该组件没有组件名，匿名组件</span>        wanyi<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                &lt;div>                &lt;h3>万一爱明月&lt;/h3>                &lt;/div>            </span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*使用组件有三点需要注意的是：    1，注册组件时的组件标签名，除了第一个字母可以大写外，其他必须小写，如果组件名有大写那么组件标签名推荐使用-插入到其中，并把大写改成小写，例如，如果组件名为HelloWorld那么组件标签名应为：hello-world，使用时&lt;hello-world>&lt;/hello-world>2，在创建组件时，指定template时，模板的值是字符串，字符串中需要有个div标签包裹住。3，全局组件的创建和注册，必须在vue实例创建之前*/</span></code></pre><blockquote><p><span id="父子组件">父子组件</span></p></blockquote><p>当一个组件在另一个组件中挂载后，就会形成父子关系，被挂载的组件为父组件，挂载的组件为子组件<br>子组件只能在父组件的template模板中使用，下面是一个父子组件的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>mycon2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mycon2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">//组件1，子组件</span>    <span class="token keyword">let</span> mycon1 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">//模板字符串，多行字符串            &lt;div>            &lt;h3>万一爱明月&lt;/h3>            &lt;/div></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//组件2，父组件</span>    <span class="token keyword">let</span> mycon2 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            &lt;div>                &lt;h3>万二爱明月&lt;/h3>                &lt;mycon1>&lt;/mycon1>            &lt;/div>            </span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            mycon1<span class="token operator">:</span>mycon1        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//vue实例，根组件</span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            message<span class="token operator">:</span><span class="token string">'加油!'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            mycon2<span class="token operator">:</span>mycon2        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p><span id="组件模板分离方法">组件模板分离方法</span></p></blockquote><p>上面组件中的template模板中都是html代码，在js中写html代码显然不太好看，下面就是两种抽离模板中的html代码的方式</p><ul><li><p>script标签方式，类型为text/x-template</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token comment">//使用全局组件</span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment">//将wanyi组件中模板抽离出来</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/x-template"</span> id<span class="token operator">=</span><span class="token string">"wanyi"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>万一爱明月<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>mycon1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mycon1<span class="token operator">></span><span class="token comment">//父组件的template中使用子组件</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//创建组件，通过id，关联组件和script标签</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'wanyi'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    template<span class="token operator">:</span><span class="token string">"#wanyi"</span><span class="token punctuation">,</span><span class="token comment">//绑定js，wanyi的template被抽离</span>    components<span class="token operator">:</span><span class="token punctuation">&#123;</span>        mycon1<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//mycon1的模板没有被抽离</span>            template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                &lt;div>                    &lt;h3>万二爱明月&lt;/h3>                &lt;/div></span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>template标签的方式</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"wanyi"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span>万一爱明月<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>mycon1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mycon1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token comment">//绑定方式和上面一样的，不过是用template标签代替了script标签</span></code></pre></li></ul><blockquote><p><span id="为什么组件中的data是一个函数">为什么组件中的data是一个函数</span></p></blockquote><p>组件如何动态获取数据？我们的vue实例可以看做一个root根组件，在vue实例中，data属性是一个对象，<br>我们可以在页面通过<code>&#123;&#123;&#125;&#125;</code>来获取data中的数据，但是在组件中，data属性是一个函数，这个函数返回一个对象，<br>在返回的对象中定义属性，我们的组件模板中才可以使用动态的值。这是组件与vue实例或者说根组件的差别。<br>下面是关于组件中动态获取数据的案例</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*这个被vue实例管理的div可以看做是vue的template模板，全局组件wanyi既然能在这里使用说明wanyi组件在注册的时候，已经挂载到了vue实例下，被作为子组件，既然全局组件能在每个vue实例下使用说明只要是全局组件，就会注册到所有vue实例中，是所有vue实例的子组件，不过通常项目中只有一个vue实例。*/</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"wanyi"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span>万一爱<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token comment">//组件中只能动态获取本组件的data数据</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'wanyi'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token string">"#wanyi"</span><span class="token punctuation">,</span>        <span class="token comment">//组件中的data是个函数，这是es6方法增强写法</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//在该函数返回值(一个对象)中定义属性，才能在组件模板中使用变量</span>            <span class="token keyword">return</span><span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">"明月"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            message<span class="token operator">:</span><span class="token string">'加油!'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>重点来啦，看完上面的代码，想想为什么vue实例中data是一个对象，而组件中的data却是一个函数，在函数中返回一个对象呢？<br>因为我们使用组件的时候，可能会使用多个组件实例(组件标签)，多个组件实例复用一个组件，到时候如果组件的data是一个对象，<br>则所有组件实例共用一个data对象就会发生数据紊乱，而通过data函数创建的对象，每次调用data函数的时候都会创建一个新的对象，<br>使得每个组件实例都有自己的data数据就不会发生数据紊乱，下面是一个简单的例子</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token comment">//创建多个组件实例(组件标签)，每个组件实例都有自己的name</span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token comment">//这些组件实例的数据是隔离的</span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"wanyi"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"wanyi"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        template<span class="token operator">:</span> <span class="token string">'#wanyi'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token comment">//每个组件实例都有独立的对象，数据相互隔离</span>                name<span class="token operator">:</span> <span class="token string">'万一的编码时光'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            message<span class="token operator">:</span><span class="token string">'加油!'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p><span id="父子组件之间的通信">父子组件之间的通信</span></p></blockquote><ul><li><p>父向子传递数据</p><ul><li><p>通过props，父组件向子组件传递数据<br>  在子组件中，使用选项props来声明需要从父级接收到的数据。props的值可以有两种方式接收数据：</p>  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：字符串数组，数组中的字符串就是传递时子组件标签的属性，例如下面案例的wo和ni</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi <span class="token operator">:</span>wo<span class="token operator">=</span><span class="token string">"me"</span> <span class="token operator">:</span>ni<span class="token operator">=</span><span class="token string">"you"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token comment">//子组件标签中绑定父组件data中数据</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"yue"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>wo<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>爱<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>ni<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//和data数据一样直接使用</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> wanyi <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token string">"#yue"</span><span class="token punctuation">,</span>        props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'wo'</span><span class="token punctuation">,</span><span class="token string">'ni'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//props中wo和ni，就拿到了父组件中传递过来的数据</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            me<span class="token operator">:</span><span class="token string">'万一'</span><span class="token punctuation">,</span>            you<span class="token operator">:</span><span class="token string">'明月'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            wanyi<span class="token comment">//es6属性的增强写法，相当于wanyi: wanyi</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式二：对象形式接收数据，对象可以设置传递时的类型，也可以设置默认值等。</span><span class="token comment">//除了props接收属性不同，其他都相同</span>props<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">// wo:String</span>    wo<span class="token operator">:</span><span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token comment">//表示数据的类型</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"我"</span><span class="token punctuation">,</span>  <span class="token comment">//默认值</span>        required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//表示该数据是否必须传入</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    ni<span class="token operator">:</span><span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"明月"</span><span class="token punctuation">,</span>        required<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    shuiguo<span class="token operator">:</span><span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> Array<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//如果传递的是数组或者对象，default属性必须是一个函数</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'我'</span><span class="token punctuation">,</span><span class="token string">"喜欢"</span><span class="token punctuation">,</span><span class="token string">'的'</span><span class="token punctuation">,</span><span class="token string">'人'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        me<span class="token operator">:</span><span class="token string">'万一'</span><span class="token punctuation">,</span>        you<span class="token operator">:</span><span class="token string">'明月'</span><span class="token punctuation">,</span>        fruit<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span><span class="token string">'橘子'</span><span class="token punctuation">,</span><span class="token string">'桃子'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        wanyi    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*注意：props中的变量，如wo,ni,shuiguo，都必须是小写，因为html标签解析不了大写，会将大写转成小写如果你想要你的变量名有大写，你需要在子组件标签绑定属性时将大写字母变成小写字母并加上-分隔例如：&lt;wanyi :shui-guo="fruit">&lt;/wanyi>，这样你的props的变量可以为shuiGuo*/</span></code></pre></li><li><p>通过在子组件标签上标记ref属性，拿到子组件实例，应该可以传递数据，仅仅猜测，尚未求证</p></li></ul></li><li><p>子向父传递数据</p><ul><li><p>通过props，子向父传递数据<br>  父组件先传递回调函数给子组件，然后子组件调用该函数，将数据作为参数，传递到父组件中。</p></li><li><p>通过自定义事件，子组件向父组件传递数据，这里有两种方式，<br>  其一是在子组件标签上绑定自定义事件，并指定自己的回调函数，然后在子组件中通过$emit方法<br>  触发自定义函数并传递参数，从而回调父组件中的事件函数。下面是这种方式的案例：</p>  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//这个vue管理的div也可以看做是根组件的模板template</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        以前如果是@click事件，不传参数的话，会默认传一个event对象        现在子组件发射一个自定义事件，此时监听该事件不传参数，会默认将发射时带的参数传递给父组件中。    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi @get<span class="token operator">-</span>count<span class="token operator">=</span><span class="token string">"getCount"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment">//子组件的模板</span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"yue"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>遍历子组件中的数据，并监听点击事件<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3 v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in fruit"</span> @click<span class="token operator">=</span><span class="token string">"getClick(item)"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建子组件</span><span class="token keyword">const</span> wanyi <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    template<span class="token operator">:</span><span class="token string">"#yue"</span><span class="token punctuation">,</span>    <span class="token comment">//子组件中的data必须是一个函数，在函数返回的对象中定义组件的变量</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            count<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            fruit<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span><span class="token string">'橘子'</span><span class="token punctuation">,</span><span class="token string">'桃子'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">getClick</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//自定义事件的名字，自定义事件的参数，该参数会传递到父组件的方法参数中</span>            <span class="token comment">//这里写驼峰在脚手架(vue-cli)中可以使用，这里使用vue原生的东西，所以不能有大写。</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"get-count"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//父组件</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        message<span class="token operator">:</span><span class="token string">'加油!'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//注册子组件，ES6增强属性的方式</span>    components<span class="token operator">:</span><span class="token punctuation">&#123;</span>        wanyi    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//当触发子组件的事件后，执行父组件中的方法</span>        <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"被点击："</span><span class="token operator">+</span>count<span class="token operator">+</span><span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>  其二是通过在子组件标签上标记ref属性，拿到子组件实例，通过$on为子组件实例上绑定自定义事件<br>  并指定相应的回调函数，然后子组件依然通过$emit触发自定义事件，从而回调父组件中方法，达到传递数据</p>  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//父组件app.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>HelloWorld ref<span class="token operator">=</span><span class="token string">"helloWorld"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      msg<span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    HelloWorld  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*      注意：$on用来绑定自定义事件，该方法第二个参数务必要使用箭头函数，或者指定methods中的方法，      如果是普通函数，则内部的this是子组件。     */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>helloWorld<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'wanyi'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">=</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//子组件HelloWorld</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sendMsg"</span><span class="token operator">></span>点击给父组件发送数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'wanyi'</span><span class="token punctuation">,</span><span class="token string">'肖武聪大傻叉'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*scoped样式的作用：让样式在局部生效，防止冲突另外app.vue中最好不要写scoped，因为如果在app.vue中配置样式，肯定是用于各个组件的，使用了scoped反而限制只能自己使用*/</span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment">/*补充一下这个$on    $on,绑定事件，$once绑定一次性事件    解绑一个自定义事件：this.$off("自定义事件名")    解绑多个自定义事件：this.$off(['自定义事件1','自定义事件2'],'..3')    解绑所有自定义事件：this.$off()    另外，也可以在子组件绑定原生事件，不过需要在事件名上加上.native修饰符    &lt;Student @click.native="show"/>，如果不使用.native会被子组件当做自定义事件最后，只要在子组件标签上绑定任何属性，事件，都是直接绑定到子组件实例上，本身子组件标签就是子组件实例。*/</span></code></pre></li></ul></li></ul><blockquote><p><span id="任意组件间传递数据">任意组件间传递数据</span></p></blockquote><p>2021年9月30日，新增一栏，将组件间任意通信，就随便放在这里写吧，目前有哪些方法可以实现任意组件间的通信呢？(不需要父子条件)</p><ul><li><p>全局事件总线<br>  全局事件总线方式可以做到只使用自定义事件达到任意两个组件间通信，英文名globalEventBus<br>  全局事件总线可以认为是一种设计模式，方便组件之间传递数据，当我们将vue实例放到Vue原型对象上后<br>  每个组件都能拿到vue实例对象，我们在vue实例对象上绑定自定义事件后，其他组件通过$emit方法触发自定义事件，<br>  这样就能实现多个组件间通信，而不需要这些组件是父子关系。<br>  案例如下，app.vue下HelloWorld组件与Home组件通信，这两个组件并不是父子</p>  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//main.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus<span class="token operator">=</span><span class="token keyword">this</span><span class="token comment">//入口函数中，将vue实例绑定到Vue的原型对象上</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment">//app.vue，仅用于显示各个组件</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>HelloWorld<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>about<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>home<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./views/Home'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'./views/About'</span>  <span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'./components/HelloWorld'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      Home<span class="token punctuation">,</span>      About<span class="token punctuation">,</span>      HelloWorld    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//Home.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld.vue'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        msg<span class="token operator">:</span> <span class="token string">''</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/*      给vue实例上绑定自定义事件，务必是箭头函数或methods中函数，      如果是普通函数，则函数内的this是vue实例，因为是vue实例身上的回调函数，      vue实例去调用它，和上面自定义事件案例类似。      */</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'wanyi'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//自定义事件被触发后，回调该函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">=</span>value<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">/*       将vue实例上的自定义事件清除    */</span>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//HelloWorld.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sendMsg"</span><span class="token operator">></span>点击给父组件发送数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'wanyi'</span><span class="token punctuation">,</span><span class="token string">'一二三四五'</span><span class="token punctuation">)</span><span class="token comment">//触发vue实例身上的wanyi事件并传递数据</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>消息订阅与发布<br>  同全局事件总线一样，消息订阅与发布内部也是使用了自定义事件实现任意组件通信，我们借助第三方库实现：pubsub-js<br>  使用步骤如下：</p><ul><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入：<code>import pubsub from &#39;pubsub-js&#39;</code><br>  下面案例使用局部引入，如果想任意组件使用，还是需要在main.js中引入依赖，然后将pubsub对象绑定到Vue原型对象上。</p></li><li><p>接收数据：A组件想接收数据，则在A中订阅消息，订阅的回调函数使用A组件中方法或者箭头函数，<br>  使用普通函数则this是undefined，这个和上面例子类似</p></li><li><p>提供数据：B组件中通过<code>pubsub.publish(&#39;消息名&#39;,数据)</code>，发布数据到订阅了这个消息的组件中，<br>  会调用订阅该消息的组件的回调函数</p></li><li><p>组件销毁时，最好在A组件中取消订阅，在A组件beforeDestroy中：<code>pubsub.unsubscribe(消息的id)</code></p><p>  总体看来，和自定义事件方式类似，发布方发布消息后，回调接收数据方的回调函数。</p><p>本次案例类似上面，main.js中不需要将Vue实例放到Vue原型对象上了，App.vue一样，HelloWorld组件向Home组件传递数据</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Home.vue，接收数据方</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> pubsub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        msg<span class="token operator">:</span> <span class="token string">''</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//接收数据方订阅一个消息，消息名随意，例如"waner"</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>msgId <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'waner'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">=</span>data      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//组件销毁时，清除消息</span>      pubsub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msgId<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//HelloWorld.vue，发送数据方</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sendMsg"</span><span class="token operator">></span>点击给父组件发送数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">import</span> pubsub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//发布消息，参数一是消息名，参数二是数据，表示向订阅这些消息的组件发送数据</span>        pubsub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'waner'</span><span class="token punctuation">,</span><span class="token string">"万二"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul></li><li><p>Vuex，略，请看Vuex篇</p></li><li><p>vue-router，略，请看路由篇</p></li></ul><blockquote><p><span id="父子组件通信结合双向绑定案例">父子组件通信结合双向绑定案例</span></p></blockquote><p>这里主要说的是，在父子组件通信时，子组件最好不要修改props中的变量(属性)，即v-model不能绑定props中的值<br>而是绑定data中的变量，我们可以将props中的值赋值给data中的变量，props的值始终只能是父组件进行修改的。<br>下面是一个简单的案例，同时有父向子，子向父通信，案例的功能是，当上面的input值更改时，下面的值乘100</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi <span class="token operator">:</span>cnum1<span class="token operator">=</span><span class="token string">"num1"</span> <span class="token operator">:</span>cnum2<span class="token operator">=</span><span class="token string">"num2"</span> @change<span class="token operator">-</span>num1<span class="token operator">=</span><span class="token string">"changeNum1"</span> @change<span class="token operator">-</span>num2<span class="token operator">=</span><span class="token string">"changeNum2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"yue"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>    props<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cnum1<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>number1<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"number1"</span> @input<span class="token operator">=</span><span class="token string">"change1"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>                props<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cnum2<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>number2<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"number2"</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>    <span class="token comment">//这里不使用v-model双向绑定是因为需要执行其他任务。所以代替了</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"number2"</span> @input<span class="token operator">=</span><span class="token string">"change2"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            num1<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>            num2<span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">changeNum1</span><span class="token punctuation">(</span><span class="token parameter">num1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//子组件向父组件传递值时，数据是字符串，需要转成整数类型</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token operator">=</span>num1<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">changeNum2</span><span class="token punctuation">(</span><span class="token parameter">num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//子组件向父组件传递值时，数据是字符串，需要转成整数类型</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num2<span class="token operator">=</span>num2<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            wanyi<span class="token operator">:</span><span class="token punctuation">&#123;</span>                template<span class="token operator">:</span><span class="token string">"#yue"</span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                        number1<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>cnum1<span class="token punctuation">,</span>                        number2<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>cnum2                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                props<span class="token operator">:</span><span class="token punctuation">&#123;</span>                    cnum1<span class="token operator">:</span><span class="token punctuation">&#123;</span>                        type<span class="token operator">:</span>Number<span class="token punctuation">,</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    cnum2<span class="token operator">:</span>Number                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token function">change1</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>number1<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>number2<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>number1<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change-num1'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>number1<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change-num2'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token function">change2</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>number2<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>number1<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>number2<span class="token operator">/</span><span class="token number">100</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change-num2'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change-num1'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>number1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*我们使用&lt;input type="text" :value="number2" @input="change2">代替了&lt;input type="text" v-model="number2">    是因为我们不仅需要双向绑定更改number2的值，还需要相应的修改number1的值，所以在事件函数中修改number1的值，    你还可以使用v-model和watch属性的方式做到上面的效果，当v-model绑定的值发生改变的时候，watch属性中的函数会发生回调，    可以在该函数中修改numebr1的值,也就是说不监听input事件了。例如下面的更改：*/</span><span class="token comment">//使用v-model和watch同样能做到当绑定的变量发生改变的时候，也能更改其他变量的值并且向父组件通信。</span><span class="token comment">//watch中监听的就是data数据中的变量，变量名为函数，当变量发生修改后，执行该函数。</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"number2"</span><span class="token operator">></span>watch<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">number1</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number2<span class="token operator">=</span>newValue<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change-num1'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>number1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change-num2'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">number2</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number1<span class="token operator">=</span>newValue<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change-num2'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change-num1'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>number1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><span id="父子组件之间的访问">父子组件之间的访问</span></p></blockquote><p>之前说的是父子组件之间的通信，指的是，父子组件相互获取对方的属性值，<br>而父子组件之间的访问指的是，拿到对方的对象，使用对象的属性和方法<br>网课定义：有时候我们需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件直接访问根组件</p><ul><li><p>父组件访问子组件：使用<code>$children</code>或<code>$refs</code><br><code>$children</code>与<code>$refs</code>不同的是，<code>$children</code>获取的是全部的子组件，是一个数组，数组的元素是该组件下的所有子组件<br>所以取出某个子组件需要遍历，一般很少用，当需要全部的子组件的时候才会使用<code>$children</code>，而<code>$refs</code>可以指定获取某个子组件<br>只需要在子组件标签上使用ref属性标记该子组件，就可以在父组件中获取到该子组件，你也可以标记多个子组件<br>到时候this.$refs是一个对象，对象的属性是子组件标签的ref属性，通过<code>this.$refs.ref</code>属性就可以获取子组件对象<br>使用<code>this.$refs.ref属性.子组件属性/子组件方法</code>，即可获取子组件属性和方法。下面是一个简单的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi ref<span class="token operator">=</span><span class="token string">"yueyue"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span>    <span class="token comment">//加上ref属性，则该子组件会被加到$refs对象之中</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"getChild"</span><span class="token operator">></span>点击获取<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"yue"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            message<span class="token operator">:</span><span class="token string">'加油!'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//[VueComponent],该对象是数组，数组中的元素就是子组件对象</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//&#123;yueyue: VueComponent&#125;，它是一个对象，子组件对象以属性的方式存储在该对象中</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>yueyue<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>yueyue<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            wanyi<span class="token operator">:</span><span class="token punctuation">&#123;</span>                template<span class="token operator">:</span> <span class="token string">'#yue'</span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>                        name<span class="token operator">:</span> <span class="token string">'子组件'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"子组件中的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>子组件访问父组件：使用$parent，以及$root<br>this.$parent访问父组件实例，不常用，this.$root访问根组件实例，也就是vue中的属性和方法<br>用法和上面的差不多，就不举例子了。</p></li></ul><blockquote><p><span id="组件中插槽的使用">组件中插槽的使用</span></p></blockquote><ul><li><p>组件的插槽slot基本使用<br>组件的插槽是为了让我们封装的组件更加具有扩展性，让使用者可以决定组件内部的一些内容到底展示什么<br>简单案例如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>向插槽中添加万二标签，会替换模板中的slot标签，当插入多个标签时，同样会全部替换<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>万二<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>如果没有插入标签，不会显示slot标签，所以slot插槽很形象，预留给使用者一个接口<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"yue"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>万一<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>预留的插槽，使用者可以使用自己的定制的东西，插槽还可以使用默认值，即在slot标签中配置默认值标签<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置好默认值后，如果使用者没有定制化插槽，则会使用插槽中的默认值显示出来<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            message<span class="token operator">:</span><span class="token string">'加油!'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            wanyi<span class="token operator">:</span><span class="token punctuation">&#123;</span>                template<span class="token operator">:</span> <span class="token string">'#yue'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>具名插槽<br>指的是当模板中存在多个插槽的时候，需要给插槽取个名字，这样使用者在替换插槽的时候，就能替换指定的插槽，案例如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span>button slot<span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>返回<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"yue"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>万一<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>左边<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>        <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>中间<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>        <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>右边<span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token comment">//使用的时候，使用slot指定覆盖(替换)哪一个插槽，如果没有指定slot名称，则只会替换没有名称的插槽。</span></code></pre></li><li><p>作用域插槽</p><ul><li><p>作用域的概念<br>作用域又称编译作用域，指的是，组件中的变量只会在自己的模板中有效<br>例如，在父子组件中存在同名变量，在使用该变量时，如果使用在父模板中，则使用的变量是父组件中的变量，<br>如果使用在子模板中，则使用的变量是子组件中的变量，下面是一个简单的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isShow"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"yue"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span>万一<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            isShow<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            message<span class="token operator">:</span><span class="token string">'加油!'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            wanyi<span class="token operator">:</span><span class="token punctuation">&#123;</span>                template<span class="token operator">:</span> <span class="token string">'#yue'</span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                        isShow<span class="token operator">:</span> <span class="token boolean">false</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//上面这个例子，isShow变量是在父组件中使用，也就是vue实例的模板中使用，所以引用的变量是vue实例中的变量。</span></code></pre></li><li><p>作用域插槽旧语法<br>作用域插槽，用一句话对其总结，父组件替换插槽的标签，但是内容由子组件来提供，下面是一个简单的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span>wanyi<span class="token operator">></span>        <span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"slot"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>slot<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' - '</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"yue"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>slot <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"fruit"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>h4 v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in fruit"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            wanyi<span class="token operator">:</span><span class="token punctuation">&#123;</span>                template<span class="token operator">:</span> <span class="token string">'#yue'</span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                        fruit<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'芒果'</span><span class="token punctuation">,</span><span class="token string">'火龙果'</span><span class="token punctuation">,</span><span class="token string">'草莓'</span><span class="token punctuation">,</span><span class="token string">'桃子'</span><span class="token punctuation">,</span><span class="token string">'樱桃'</span><span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*结果如下：    芒果    火龙果    草莓    桃子    樱桃    芒果 - 火龙果 - 草莓 - 桃子 - 樱桃可以看到，我们使用子组件中的数据，而样式使用的是父组件的样式，父组件中可以对子组件的数据有不同的展示值得注意的是：这种方式好像已经过时*/</span></code></pre></li><li><p>作用域插槽新语法<br>上面这种作用域插槽在vue2.6之后就不使用了<br>普通插槽或者具名插槽作用:父组件传递数据/元素/组件给子组件，而子组件定义slot标签接收<br>作用域插槽：为子组件<code>&lt;slot&gt;</code>绑定属性，传递数据给父组件，父组件通过<code>v-slot:xxx=&quot;props&quot;</code>接收子组件传递的属性<br>感觉作用域插槽就是父组件拿出子组件数据，对数据进行一些重新展示。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span>    <span class="token operator">&lt;</span>wanyi v<span class="token operator">-</span>slot<span class="token operator">:</span>cslot<span class="token operator">=</span><span class="token string">"param"</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>param<span class="token punctuation">.</span>fruit<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' - '</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>param<span class="token punctuation">.</span>cname<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"yue"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"cslot"</span> <span class="token operator">:</span>fruit<span class="token operator">=</span><span class="token string">"fruit"</span> <span class="token operator">:</span>cname<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>h4 v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in fruit"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            wanyi<span class="token operator">:</span><span class="token punctuation">&#123;</span>                template<span class="token operator">:</span> <span class="token string">'#yue'</span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                        fruit<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'芒果'</span><span class="token punctuation">,</span><span class="token string">'火龙果'</span><span class="token punctuation">,</span><span class="token string">'草莓'</span><span class="token punctuation">,</span><span class="token string">'桃子'</span><span class="token punctuation">,</span><span class="token string">'樱桃'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        name<span class="token operator">:</span> <span class="token string">'科一'</span><span class="token punctuation">,</span>                        age<span class="token operator">:</span> <span class="token number">20</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*新语法在子组件中使用name属性表示该插槽的名字，即具名插槽，绑定数据还是和旧语法一样父组件在使用的时候不是必须使用template标签，你可以直接使用在子组件标签上，当然，如果有多个插槽，还是建议使用template标签v-slot:子组件插槽名="xxx"，该对象和旧语法中的对象一致，取值也是一样的*/</span></code></pre></li></ul></li><li><p>更新<br>21年9月14号，对插槽进行更新，在vue3之后，之前的插槽语法不再适用，而是使用v-slot语法<br>不管是普通插槽，具名插槽，作用域插槽都需要使用v-slot，并且这个属性只能使用在组件标签上或者<br>template标签上，下面是一段代码，表示新版本具名插槽的使用：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//父组件插入数据</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>tab<span class="token operator">-</span>bar<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        这里是父子组件传递，tab<span class="token operator">-</span>bar<span class="token operator">-</span>item是子组件，mainTabBar是父组件，这里是传固定值        如果是<span class="token operator">:</span>path，则是绑定mainTabBar组件中data的变量      <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>tab<span class="token operator">-</span>bar<span class="token operator">-</span>item path<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>item<span class="token operator">-</span>icon<span class="token operator">></span><span class="token comment">//v-slot需要放在template标签上</span>          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"~assets/img/tabbar/home.png"</span><span class="token operator">></span><span class="token comment">//定义了别名，在标签上使用时需加上~</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>        <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>item<span class="token operator">-</span>icon<span class="token operator">-</span>active<span class="token operator">></span>          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"~assets/img/tabbar/home-active.png"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>        <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>item<span class="token operator">-</span>text<span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>tab<span class="token operator">-</span>bar<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tab<span class="token operator">-</span>bar<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> TabBar <span class="token keyword">from</span> <span class="token string">'../../common/tabbar/TabBar.vue'</span><span class="token keyword">import</span> TabBarItem <span class="token keyword">from</span> <span class="token string">'../../common/tabbar/TabBarItem.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"MainTabBar"</span><span class="token punctuation">,</span>  components<span class="token operator">:</span><span class="token punctuation">&#123;</span>    TabBar<span class="token punctuation">,</span>TabBarItem  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment">//子组件定义具名插槽，还是原来的定义方式</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tab-bar-item"</span> @click<span class="token operator">=</span><span class="token string">"itemClick"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div  v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"!isActive"</span><span class="token operator">></span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div  v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-icon-active"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"activeStyle"</span><span class="token operator">></span><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"item-text"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习之基础指令篇</title>
      <link href="2021/09/06/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%E7%AF%87/"/>
      <url>2021/09/06/Vue%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>最近把vue网课快看完了，还差最后的实训项目部分，总之所有vue所有知识点都学完了，<br>想着先不着急跟着敲项目，把之前学习的内容都整理整理，写几篇vue博客再去学写项目，<br>本篇就是关于vue学习的第一篇，vue的基础指令，看看都有哪些内容吧。</p><ul><li><a href="#%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D">基础介绍</a></li><li><a href="#%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9C">插值操作</a></li><li><a href="#%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7">绑定属性</a></li><li><a href="#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7">计算属性</a></li><li><a href="#%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7">监视属性</a></li><li><a href="#%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8">过滤器的使用</a></li><li><a href="#%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC">事件监听</a></li><li><a href="#%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86">条件判断和循环遍历</a></li><li><a href="#%E6%95%B0%E7%BB%84%E5%93%8D%E5%BA%94%E9%97%AE%E9%A2%98">数组响应问题</a></li><li><a href="#%E9%98%B6%E6%AE%B5%E6%A1%88%E4%BE%8B">阶段案例</a></li><li><a href="#%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A">双向绑定</a></li><li><a href="#%E6%B7%B7%E5%85%A5mixin">混入mixin</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4">自定义指令</a></li><li><a href="#%E6%8F%92%E4%BB%B6">插件</a></li><li><a href="#%E8%BF%87%E5%BA%A6%E4%B8%8E%E5%8A%A8%E7%94%BB">过度与动画</a></li></ul><blockquote><p><span id="基础介绍">基础介绍</span></p></blockquote><p>vue是一个响应式的JS框架，要说什么是响应式，我还是先说说一个叫mvvm的概念，<br>mvvm指的是Model，View，ViewModel，前端把项目分成这三块，Model指的是数据，前端从后端获取的数据<br>View指的是Dom元素，就是用户看到的网页，Html标签，ViewModel你可以理解为一个助手，或者说是vue<br>它的作用是将Model数据及时刷新到Dom元素中，让页面展示数据，或者当用户点击了按钮，对页面发生了改变<br>ViewModel可以及时的将数据保存起来，总之，ViewModel在View和Model中起到中间桥梁的作用。</p><p>vue就是实现了mvvm架构的框架，vue将数据传递到页面，让页面及时刷新数据，vue也可以根据页面的更改，<br>动态更新数据，vue就是做了ViewModel的事情，而响应式说的就是，当数据发生改变时，页面能立即发生变化。</p><p>还有一个双向绑定的概念，其实上面已经说了，当页面发生改变，或者数据发生改变，ViewModel都能动态<br>更新双方，这就是双向绑定，你可能会好奇，既然这就是双向绑定，那有没有单向绑定的概念呢？不急接着看下去</p><p>说完mvvm，响应式的概念，你可能还是不太理解具体内容，下面举个栗子。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">></span></span>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//页面中直接导入vue依赖</span>  <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">></span></span>vue<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token generics"><span class="token punctuation">&lt;</span>span<span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token comment">//vue将data中数据渲染到页面中，&#123;&#123;&#125;&#125;操作就是从data中获取数据</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>script<span class="token punctuation">></span></span>      let app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token comment">//el绑定id为app的div标签</span>          data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              message<span class="token operator">:</span><span class="token string">'加油!'</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>上面示例中，引入vue的依赖，打开浏览器就能看到message的信息，View指的就是body中标签元素，整个页面<br>Model指的是data中的数据，当然不止data，只要是数据都属于Model，ViewModel指的是Vue实例，它内部做<br>的就是将data中数据及时响应到Dom中，每当数据发生变化，都会及时更新Dom，这就是响应式。</p><blockquote><p><span id="插值操作">插值操作</span></p></blockquote><p>插值操作说的是，vue通过什么指令将数据响应到Dom元素中，看本文目录还会讲绑定属性，绑定属性和插值操作<br>不同的是：插值操作指将数据插入到DOM元素之中，可以展示给用户看，而绑定属性则是将数据插入到DOM元素<br>的属性中。下面关于插值操作的几个指令：</p><ul><li><p>Mustache语法</p><pre class="language-none"><code class="language-none">mustache语法指的是标签中的&#123;&#123;&#125;&#125;，在Dom元素标签内使用双括号，就能取到vue实例的data中的数据。例如：&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;span&gt;，当然你还可以写简单的表达式：&#123;&#123;message+&quot;万一&quot;&#125;&#125;，这里就当是在JS中写语句。</code></pre></li><li><p>v-once指令<br>表示该DOM只会更改一次，之后并不会随着data数据改变而改变DOM中的数据。<br>如果没有该指令，则只要data中数据改变后，对应的DOM会响应该数据，从而DOM中数据发生改变。<br>使用方式：<code>&lt;span v-once&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</code>，该数据只会渲染一次。</p></li><li><p>v-html指令<br>解析数据中的标签属性，如果data对象中的变量值本身就是一个标签，则使用该指令可以对其进行解析<br>使用如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>span v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token comment">//dom页面，将在span标签中生成a标签，点击跳转页面</span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//vue实例中data对象</span>    message<span class="token operator">:</span><span class="token string">'&lt;a href="http://www.keyi.world">个人网站&lt;/a>'</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>v-text指令<br>与Mustache语法类似，将数据插入到DOM中，相对而言，没有Mustache语法好<br>使用如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>span v<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    message<span class="token operator">:</span><span class="token string">'你好啊'</span><span class="token punctuation">&#125;</span><span class="token comment">//该指令和mustache作用一样，不过双括号的方式更加简单易懂。</span></code></pre></li><li><p>v-pre指令<br>表示该DOM不进行DOM数据绑定，将该DOM中的数据原封不动的展示出来<br>使用：<code>&lt;span v-pre&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</code>，将会在页面显示<code>&#123;&#123;message&#125;&#125;</code>，说白了，不对双括号进行解析。</p></li><li><p>v-cloak指令<br>解决插值闪烁问题，插值闪烁指的是当js代码还未被加载时，页面显示，当vue.js加载后，<br>才会显示实际数据，就会存在这种画面：<code>&#123;&#123;message&#125;&#125;</code>，过了一段时间变成<code>你好啊</code>，这就是插值闪烁。<br>而当DOM标签使用v-cloak标签后，配合css的使用，即可解决插值闪烁。案例如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token punctuation">[</span>v<span class="token operator">-</span>cloak<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>        display<span class="token operator">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span v<span class="token operator">-</span>cloak<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token comment">//vue.js还没被加载时，存在该属性，加载后，vue删除该属性</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//模拟延迟加载vue.js</span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token comment">//绑定id为app的div标签，该div内归vue管理</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            message<span class="token operator">:</span><span class="token string">'你好啊'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*当js代码未被加载时，DOM标签因为存在v-cloak属性，被css限制展示，隐藏起来了当js代码加载后，vue会删除v-cloak属性，使得DOM标签再次被展示，同时数据也被渲染出来。不过听说这个指令已经不用了，都用的是虚拟DOM，继续学习吧.*/</span></code></pre></li></ul><blockquote><p><span id="绑定属性">绑定属性</span></p></blockquote><p>插值操作是把数据绑定到文本中，用于展示数据，而绑定属性是将数据绑定到DOM标签的属性中<br>绑定属性就一个重要指令：<code>v-bind</code></p><ul><li><p>v-bind的基本使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img v<span class="token operator">-</span>bind<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"imgUrl"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    imgUrl<span class="token operator">:</span><span class="token string">'http://图片地址'</span><span class="token punctuation">&#125;</span><span class="token comment">//v-bind还可以使用简写方式，即去掉v-bind，只保留:属性方式，就是从data中获取数据，是个语法糖</span><span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"imgUrl"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span></code></pre></li><li><p>v-bind绑定class属性<br>v-bind绑定属性有对象语法和数组语法两种</p><ul><li><p>对象语法<br>使用对象语法则class属性值是一个对象，对象的属性表示class名称，对象的属性值是一个boolean值<br>当boolean值为true时，则BOM标签的class值就会应用对象的对应属性名，否则不应用，下面是简单的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token punctuation">.</span>a<span class="token punctuation">&#123;</span>    color<span class="token operator">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>b<span class="token punctuation">&#123;</span>        color<span class="token operator">:</span> aqua<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>h2 <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"&#123;a:isA,b:isB&#125;"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  message <span class="token operator">:</span> <span class="token string">'你好，李银河'</span><span class="token punctuation">,</span>  isA<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  isB<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token comment">//isB为false，则h2标签的class属性只有a样式生效，&lt;h2 class="a">&#123;&#123;message&#125;&#125;&lt;/h2></span></code></pre><p>你还可以添加一个固定的class值，这个值经过vue解析后，会和动态的class值进行合并，<br>编译后，class属性值为title,a,b(如果a,b都为true的话)，例如下面这样：<br><code>&lt;h2 class=&quot;title&quot; :class=&quot;&#123;a:isA,b:isB&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</code></p><p>另外，值得注意的是，如果对象语法方式要添加的字段太长，你也可以写成methods的形式或者computed(计算属性)的形式，<br>下面同样是一个案例，不过把对象抽离到methods中了</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//vue解析时，调用该getClasses方法，会返回一个对象，和上面案例一样的。</span><span class="token operator">&lt;</span>h2 <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"getClasses()"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        message <span class="token operator">:</span> <span class="token string">'你好，李银河'</span><span class="token punctuation">,</span>        isA<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        isB<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function-variable function">getClasses</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            methos中获取data中的数据，需要this            this指的是vue实例，因为是vue调用这个方法            */</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>isA<span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>isB<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>数组语法<br>除了在class属性值使用对象，你还可以使用数组，例如：<code>&lt;h2 :class=&quot;[&#39;a&#39;,&#39;b&#39;]&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</code>，<br>  这种方式class的a,b是固定的死值，字符串，如果去掉单引号，则表示一个变量，引用data中的实际数据了。<br>  同样的，数组语法的方式也可以使用methods或者computed的形式。<br>  值得注意的是：千万不要忘记v-bind最初的使用方式，仅仅使用固定值和变量即可，v-bind初始方法适用于所有属性绑定。</p></li></ul></li><li><p>v-bind绑定style属性<br>绑定style当然也可以使用对象语法或数组语法</p><ul><li><p>对象语法<br>值得注意的是,我们在写key的时候，可以写font-size或者FontSize，另外对象的值可以是固定值<code>&#39;50px&#39;</code>，也可以是data中的变量如果是固定值，就是字符串，一定要用单引号包含，变量才不用单引号包含，这个规则同样适用于绑定class。<br>最后，就像绑定class属性一样，你也可以写成函数的形式去调用，自定义函数写在methods中。<br>案例：<code>&lt;h2 :style=&quot;&#123;fontSize:&#39;50px&#39;&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</code>，这种固定值一般很少写，可能用引用变量方式多点。</p></li><li><p>数组语法<br>与绑定class属性一致，值得说明的是，class属性绑定的是单个值，而style属性要绑定一个对象，<br>因为style样式必须有key和value又是怎么实现的呢？下面是示例代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"[baseStyle]"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token comment">//数组中可以有更多的元素，该元素是一个引用data中的对象</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                message<span class="token operator">:</span><span class="token string">'加油!'</span><span class="token punctuation">,</span>                baseStyle<span class="token operator">:</span><span class="token punctuation">&#123;</span>                    fontSize<span class="token operator">:</span><span class="token string">'100px'</span><span class="token punctuation">,</span>                    color<span class="token operator">:</span> <span class="token string">'red'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul></li><li><p>2021年9月24日更新</p><ul><li><p>绑定class样式的三种方式</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">)</span>字符串写法，适用于：样式的类名不确定，需要动态指定<span class="token number">2</span><span class="token punctuation">)</span>数组写法，适用于：要绑定的样式个数不确定，名字也不确定<span class="token number">3</span><span class="token punctuation">)</span>对象写法，适用于：要绑定的样式个数确定，名字也确定，但要动态决定用不用下面是一个案例对应上面的<span class="token number">3</span>种方式：<span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token punctuation">.</span>a<span class="token punctuation">&#123;</span>  width<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">0e90</span>d2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>b<span class="token punctuation">&#123;</span>  width<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">3</span>ca1ff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>c<span class="token punctuation">&#123;</span>  width<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  height<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">9</span>acfea<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bgColor"</span> @click<span class="token operator">=</span><span class="token string">"changeColor1"</span><span class="token operator">></span>字符串方式<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"colorArr"</span> @click<span class="token operator">=</span><span class="token string">"changeColor2"</span><span class="token operator">></span>数组方式<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"colorObj"</span> @click<span class="token operator">=</span><span class="token string">"changeColor3"</span><span class="token operator">></span>对象方式<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      bgColor<span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>      colorArr<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      colorObj<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        a<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        b<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        c<span class="token operator">:</span><span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//字符串方式</span>      <span class="token function">changeColor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> colors <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//随机取数组中样式</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bgColor<span class="token operator">=</span>colors<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//数组方式</span>      <span class="token function">changeColor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colorArr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//对象方式</span>      <span class="token function">changeColor3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colorObj<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token boolean">true</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colorObj<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token boolean">true</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colorObj<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre></li><li><p>绑定style的两种方式</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">对象方式，数组方式，下面是一个案例：<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>span <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"styleObj"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span>span <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"styleArr"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      message<span class="token operator">:</span><span class="token string">'加油!'</span><span class="token punctuation">,</span>      <span class="token comment">//对象语法</span>      styleObj<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        color<span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>        fontSize<span class="token operator">:</span> <span class="token string">'30px'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//数组语法</span>      styleArr<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          color<span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span>          fontSize<span class="token operator">:</span> <span class="token string">'50px'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>          backgroundColor<span class="token operator">:</span> <span class="token string">'orange'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul></li></ul><blockquote><p><span id="计算属性">计算属性</span></p></blockquote><p>计算属性指的是在插值的过程中，为了方便，将值重新设置成一个新值，插入到DOM结点中。<br>如果你从后端拿到数据，需要先处理一下数据，才能在DOM页面中展示出来，那么你可能就需要使用计算属性。</p><ul><li><p>计算属性的基本使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>firstName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>lastName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>lastName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>fullName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>   <span class="token comment">//计算属性是不需要使用fullName()方式调用</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            firstName<span class="token operator">:</span><span class="token string">'万'</span><span class="token punctuation">,</span>            lastName<span class="token operator">:</span><span class="token string">'一'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">//fullName是计算后的属性，所以虽然是函数类型，但命名时变量名应该写成属性方式</span>            <span class="token function-variable function">fullName</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*小提示：对象中的方法书写在es6中可以简化computed:&#123;       fullName:function () &#123;           return this.firstName+" "+this.lastName;       &#125;      &#125;    可以简化成下面这种，和上面是等效的，是es6方法的增强写法    computed:&#123;       fullName()&#123;           return this.firstName+" "+this.lastName;       &#125;      &#125;*/</span></code></pre></li><li><p>计算属性setter和getter<br>上个案例中，你可能会很好奇，为什么fullName明明是个函数的形式定义，却在使用的时候当做属性的方式使用<br>其实计算属性本身是个对象，这个对象有set方法和get方法，而我们定义的方法是简写的get方法，<br>set方法被我们省略掉了，一般很少使用完整版的计算属性是下面这种形式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>fullName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token function">计算属性是不需要使用fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方式调用<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            firstName<span class="token operator">:</span><span class="token string">'万'</span><span class="token punctuation">,</span>            lastName<span class="token operator">:</span><span class="token string">'一'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>            fullName<span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">let</span> names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">=</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token operator">=</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>因为我们大多时候并不使用set方式，所以使用省略的方式写计算属性，以下是省略版本，省略了set方法，并简写get方法</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">fullName</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>计算属性computed与方法methods有什么区别？<br>原因：计算属性会进行缓存，如果多次使用时，计算属性只会调用一次，而函数多次执行，就会多次调用函数<br>另外，计算属性在vue内部中确实是一个属性，而我们编写的函数其实是重写了这个属性的get方法。</p></li></ul><blockquote><p><span id="监视属性">监视属性</span></p></blockquote><ul><li><p>监视属性的基本使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      message<span class="token operator">:</span><span class="token string">'加油!'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//监视属性第一种写法</span>    watch<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      message<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化时让handler调用一下，此时oldvalue是undefined</span>        immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment">//newValue:message改变后的值，oldValue:改变之前的值</span>        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//监视属性第二种写法</span>app<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token comment">//immediate: true,</span>  <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>深度监视</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"number.a++"</span><span class="token operator">></span>增加a<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"number.b++"</span><span class="token operator">></span>增加b<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            message<span class="token operator">:</span><span class="token string">'加油!'</span><span class="token punctuation">,</span>            number<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                b<span class="token operator">:</span> <span class="token number">2</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        watch<span class="token operator">:</span><span class="token punctuation">&#123;</span>            number<span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token comment">/*            开启深度监视配置项，如果没有，则监视整个number对象改变，有了deep则监视number中所有属性的变化            监视整个number对象改变指的是，整个对象换了才监听的到，而其中某个属性发生改变，检测不到            */</span>                deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"number中任一属性发生了变化"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>监视的简写形式</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">当监视属性时不需要其他配置项，比如deep，immediate等等，则你可以使用简写方式，简写有两种方式：<span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      message<span class="token operator">:</span><span class="token string">'加油!'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    watch<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token comment">//简写的第一种方式</span>      <span class="token function">message</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"message改变了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//简写的第二种方式，直接使用handler函数，不需要像之前一样给个对象</span>app<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"message改变了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>注意：事件函数，计算属性方法，监视的方法，都不能写成箭头函数，这些函数都属于vue管理，如果写成箭头函数则其中的<span class="token keyword">this</span>是window对象，而不是vue实例对象<span class="token punctuation">,</span>因为箭头函数的<span class="token keyword">this</span>取自vue的上下文环境而vue是window的属性，所以箭头函数中的<span class="token keyword">this</span>是Window对象</code></pre></li><li><p>watch和computed的区别</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">)</span>computed能完成的功能，watch都可以完成<span class="token number">2</span><span class="token punctuation">)</span>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作两个重要的小原则：<span class="token number">1</span><span class="token punctuation">)</span>所被vue管理的函数，最好写成普通函数，这样<span class="token keyword">this</span><span class="token function">指向才是vm</span><span class="token punctuation">(</span>vue实例<span class="token punctuation">)</span><span class="token punctuation">,</span>或组件实例对象<span class="token number">2</span><span class="token punctuation">)</span><span class="token function">所有不被vue所管理的函数</span><span class="token punctuation">(</span>定时器的回调函数，ajax的回调函数，Promise的回调函数，这些都是浏览器异步组件调用，不归vue管理<span class="token punctuation">)</span>最好写成箭头函数，这样<span class="token keyword">this</span>的指向才是vm或组件实例对象。</code></pre></li></ul><blockquote><p><span id="过滤器的使用">过滤器的使用</span></p></blockquote><p>定义：对要显示的数据进行特定格式化后再显示(适用于一些简单逻辑处理)<br>语法：</p><ul><li>注册过滤器：<code>Vue.filter(name,callback)或new Vue(&#123;filters:&#123;&#125;&#125;)</code> </li><li>使用过滤器：<code>&#123;&#123;xxx | 过滤器名&#125;&#125; 或 v-bind属性=&quot;xxx | 过滤器名&quot;</code></li><li>备注：<ul><li>过滤器也可以接收额外参数，多个过滤器也可以串联</li><li>过滤器并没有改变原本的数据，而是产生新的对应的数据</li></ul></li></ul><p>下面是过滤器的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*本次案例演示了，全局过滤器(可多个组件使用)，局部过滤器，过滤器传递参数，过滤器串联使用*/</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span>当前时间戳：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>nowTime<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span>当前时间，格式<span class="token number">1</span>：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>nowTime <span class="token operator">|</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span>当前时间，格式<span class="token number">2</span>：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>nowTime <span class="token operator">|</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token string">"YYYY/MM/DD hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span>当前时间，格式<span class="token number">3</span>：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>nowTime <span class="token operator">|</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token string">"YYYY/MM/DD hh:mm:ss"</span><span class="token punctuation">)</span> <span class="token operator">|</span> change2<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span>h3<span class="token operator">></span>当前时间，格式<span class="token number">4</span>：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>nowTime <span class="token operator">|</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token string">"YYYY/MM/DD hh:mm:ss"</span><span class="token punctuation">)</span> <span class="token operator">|</span> change2 <span class="token operator">|</span> change3<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//全局过滤器</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'change3'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> t3<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    nowTime<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//局部过滤器</span>  filters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*       value指的是管道符传递过来的参数，str是过滤器调用时传递的参数，如果没传，则使用默认值格式化时间戳     */</span>    <span class="token function">change</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>str<span class="token operator">=</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//多个过滤器串联使用</span>    <span class="token function">change2</span><span class="token punctuation">(</span><span class="token parameter">t2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> t2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*本次案例中使用到了第三方库:dayjs,Day.js是一个轻量的处理时间和日期的JavaScript库安装：npm install dayjs --save*/</span><span class="token comment">//值得注意的是:Vue3中过滤器已经被遗弃了，推荐用计算属性或者方法实现。</span></code></pre><blockquote><p><span id="事件监听">事件监听</span></p></blockquote><p>事件监听使用的是v-on指令，为BOM元素绑定事件函数，可以使用语法糖写成@</p><ul><li><p>v-on参数<br>事件监听函数的参数问题值得我们注意，下面是几种参数情况：</p><ul><li><p>如果事件函数不需要额外的参数，则DOM中@click=”函数名”不需要添加()</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button <span class="token annotation punctuation">@click</span><span class="token operator">=</span><span class="token string">"ceshi"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token comment">//点击按钮，调用ceshi函数，不需要()</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>script<span class="token punctuation">></span></span>    let app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            num<span class="token operator">:</span><span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">ceshi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//在data对象外访问data中的变量，都需要使用this,Dom中除外</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>当然我们也可以给事件函数一个参数，当点击时，传递一个参数到事件函数中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>button <span class="token annotation punctuation">@click</span><span class="token operator">=</span><span class="token string">"ceshi(50)"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>   <span class="token function">ceshi</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">=</span>param<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>值得注意的是，如果你的事件函数有参数接收，但是DOM元素中写成<code>@click=&quot;ceshi&quot;</code>，并没有指定参数，甚至没有括号。<br>vue还是会传递一个对象到事件函数参数中，事件函数会接收一个event对象，这个对象是浏览器生成的,<br>如果想传入event事件对象进事件函数，则Dom元素中要么只写事件函数名(就是上面所说的)，要么使用$event传递参数</p></li><li><p>最后，如果需要我们的事件函数同时需要某个参数和event对象，那么传递参数的时候应该使用$event传递参数<br>如果参数直接使用event传递，则vue会以为该event参数是变量，就去data对象中找对应的属性，最后报错找不到。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>button <span class="token annotation punctuation">@click</span><span class="token operator">=</span><span class="token string">"ceshi('万①',$event)"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">ceshi</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param1<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>v-on的修饰符<br>修饰符指的是在v-on指令的基础上加上一些命令，使得可以改变事件的触发规则，例如下面这些：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@click</span><span class="token punctuation">.</span>stop，解决事件冒泡的问题<span class="token annotation punctuation">@click</span><span class="token punctuation">.</span>prevent，移除默认的事件，例如表单提交，点击submit按钮时会自动提交，    现在我手动为该按钮绑定事件函数，等我检查完毕，我再提交，不需要这个按钮默认的事件提交了，    使用v<span class="token operator">-</span>on<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"事件函数名"</span>，表示移除该DOM元素默认的事件，转而执行我绑定的事件函数。<span class="token annotation punctuation">@click</span><span class="token punctuation">.</span>enter，监听键盘的确认键，也可以<span class="token annotation punctuation">@click</span><span class="token punctuation">.</span>键盘上键帽对应的编码<span class="token operator">/</span>别名，来监听某个键<span class="token annotation punctuation">@click</span><span class="token punctuation">.</span><span class="token keyword">native</span>，监听组件根元素的原生事件<span class="token annotation punctuation">@click</span><span class="token punctuation">.</span>once，只触发一次回调<span class="token punctuation">,</span>只能点击一次才有用，值得说明的是，并不是只有点击事件才有修饰符，所有事件可以使用修饰符，另外，修饰符可以多个连用，<span class="token annotation punctuation">@click</span><span class="token punctuation">.</span>stop<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"xxx"</span>    </code></pre></li></ul><blockquote><p><span id="条件判断和循环遍历">条件判断和循环遍历</span></p></blockquote><ul><li><p>条件判断<br>条件判断主要使用：v-if，v-else-if，v-else，v-show，v-if=”true”,显示DOM元素，反之不显示，案例如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h3 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"score>=90"</span><span class="token operator">></span>优秀<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>h3 v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"score>=70"</span><span class="token operator">></span>挺好<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>h3 v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"score>=60"</span><span class="token operator">></span>平庸<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>h3 v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">=</span><span class="token string">"score&lt;60"</span><span class="token operator">></span>不行哦<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    score<span class="token operator">:</span><span class="token number">95</span><span class="token punctuation">&#125;</span><span class="token comment">//不过这种计算方式不太好，可以使用计算属性代替。</span></code></pre><p>注意：在使用v-if等条件判断指令时，可能会出现控件复用问题，因为vue底层处于性能考虑，会尽量复用之前存在的控件<br>下面是一个关于控件复用的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"byUsername"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>用户账号<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"username"</span> placeholder<span class="token operator">=</span><span class="token string">"用户账号"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>            <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">></span>用户邮箱<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"email"</span> placeholder<span class="token operator">=</span><span class="token string">"用户邮箱"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"byUsername =! byUsername"</span><span class="token operator">></span>切换登陆方式<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            byUsername<span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*本案例中，当用户在id为username的input控件中输入用户账户，输入到一半，点击按钮切换到邮箱登录时因为vue控件复用问题，用户会看到id为email的input控件上仍然存在之前的账号值，为了解决这个问题就需要在这些控件上加上key属性，并填写不同的key属性值。*/</span></code></pre><p>最后还有一个与v-if类似的指令：v-show，它与v-if的区别是，如果判断为false，v-if中根本不会有DOM元素，<br>而v-show则只是将DOM元素的display属性设置为none而已，浏览器页面按f12，还是可以看到DOM元素的。</p></li><li><p>循环遍历<br>v-for指令用于遍历数组和对象，遍历数组很简单，不仅可以拿到数组的元素，还可以拿到数组的下标/索引</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in books"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    books<span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token string">'大主宰'</span><span class="token punctuation">,</span>        <span class="token string">'斗破苍穹'</span><span class="token punctuation">,</span>        <span class="token string">'莽荒纪'</span><span class="token punctuation">,</span>        <span class="token string">'星辰变'</span><span class="token punctuation">,</span>        <span class="token string">'完美世界'</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>如果遍历的是对象，则也可以获取到对象的key和value，如下所示：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(value,key) in book"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    book<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        bookName<span class="token operator">:</span><span class="token string">'大主宰'</span><span class="token punctuation">,</span>price<span class="token operator">:</span><span class="token number">20</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意：括号内中第一个参数永远是数组元素或者对象value，第二个参数永远是数组下标或者对象的key，跟参数名没关系<br>当然了，如果遍历的是对象，还可以有第三个参数，是对象的下标，第一个属性的下标是0，以此类推，不过对象下标很少使用。</p><p>最后，vue官方建议，在使用v-for时，推荐在DOM元素中绑定一个key元素,绑定key元素可以提高DOM渲染效率，涉及到虚拟DOM<br>并且这个key属性值必须是唯一的，并且不能是数组下标或对象下标，最好是数组元素值或者对象value。<br>下面来解释一下原因：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">就拿上面遍历数组的例子来看，为什么需要绑定key属性，如果没有绑定key底层是怎么操作的？首先如果我们没有绑定key，则输出如下<span class="token number">0</span> 大主宰    <span class="token number">1</span> 斗破苍穹    <span class="token number">2</span> 莽荒纪    <span class="token number">3</span> 星辰变    <span class="token number">4</span> 完美世界如果此时我们想插入一个<span class="token constant">DOM</span>元素在<span class="token string">"斗破苍穹"</span>和<span class="token string">"莽荒纪"</span>之间，我们在控制台输入app<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'武动乾坤'</span><span class="token punctuation">)</span>，结果正常显示出来<span class="token number">0</span> 大主宰    <span class="token number">1</span> 斗破苍穹    <span class="token number">2</span> 武动乾坤    <span class="token number">3</span> 莽荒纪    <span class="token number">4</span> 星辰变    <span class="token number">5</span> 完美世界但是底层是如何操作的呢？实际上是将<span class="token string">"莽荒纪"</span><span class="token constant">DOM</span>元素的值改成<span class="token string">"武动乾坤"</span>，然后将<span class="token string">"星辰变"</span>改成<span class="token string">"莽荒纪"</span>，依次改下去，最后生成新的<span class="token constant">DOM</span>元素，它的值为<span class="token string">"完美世界"</span>。和java数组中间新增一个元素，其后所有元素往后推一位一样，这样做的效率非常的低，我们想要的是，直接新增一个<span class="token constant">DOM</span>元素插入到<span class="token string">"斗破苍穹"</span>和<span class="token string">"莽荒纪"</span>之间不需要改变其他<span class="token constant">DOM</span>元素的位置，就和java中链表一样，这个时候就需要为这些<span class="token constant">DOM</span>元素绑定一个唯一的key，这个key不能是数组的索引。因为索引是会变的，如果你的属性key是索引，那插入新增<span class="token constant">DOM</span>元素后，其后<span class="token constant">DOM</span>元素的索引值就会发生改变，触发vue的diff算法后，也会更新后面的<span class="token constant">DOM</span><span class="token function">元素。所以属性key值要为数组元素值</span><span class="token punctuation">(</span>元素要唯一<span class="token punctuation">)</span>，使得每一个key于自身<span class="token constant">DOM</span>元素绑定，才能实现和链表一样的效果。key的作用主要是为了高效更新虚拟<span class="token constant">BOM</span>。</code></pre></li></ul><blockquote><p><span id="数组响应问题">数组响应问题</span></p></blockquote><p>我们知道，通过修改data中的数据就可以使得界面中元素数据实时发生改变，这被称为响应式，但并不是所以方法都能够使得DOM元素及时更新。也就是说并不是一定修改data数据，DOM元素就能立即响应更改，有些方法是响应式的，有些方法并不是响应式的<br>数组中响应式的方法：<code>push()，pop()，shift()，unshift()，splice()，sort()，reverse()</code><br>如果通过下标直接修改方法，则这种方式并不是响应式的，也就是说DOM元素并不立即发生改变，虽然实际上数据已经被改变了。<br>例如下面这个案例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(value,key) in books"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>li<span class="token punctuation">></span></span><span class="token operator">&lt;</span>button <span class="token annotation punctuation">@click</span><span class="token operator">=</span><span class="token string">"update"</span><span class="token operator">></span>点击修改<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>   <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'武动乾坤'</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面这种方式修改数组元素，数据确实被修改了，但是DOM元素并没有实时更新，如果想实时更新，<br>可以使用上面的响应式的数组方法去更新数组的元素。<br>另外vue也提供了方法去实时更新数据：vue.set(要修改的对象，索引值，修改后的值)，或者this.$set(要修改的对象，索引值，修改后的值)</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'武动乾坤'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'武动乾坤'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*其实学到后面才发现，这两个是一样的，如果你需要某个方法，模块在每个组件内都能访问到，你只需要，Vue.prototype.$名称=方法或者某个模块，例如Vue.prototype.$set=Vue.set因为组件都是Vue构造函数的实例，所以自然继承了Vue原型对象中的属性和方法，所以我们在其他组件可以直接使用this.$set方法，组件内容会在下一篇博客中讲解，这里暂做了解。*/</span></code></pre><blockquote><p><span id="阶段案例">阶段案例</span></p></blockquote><p>实现购物车案例</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books.length<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>书籍名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>出版日期<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>价格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>购买数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(book,index) in books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123;book.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123;book.time&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;&#123;book.price | showPrice&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub(index)<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book.count&lt;=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                        &#123;&#123;book.count&#125;&#125;                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>移除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>总价&#123;&#123;allPrice&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>购物车为空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">     <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>         data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>             books<span class="token operator">:</span><span class="token punctuation">[</span>                 <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'大主宰'</span><span class="token punctuation">,</span>price<span class="token operator">:</span><span class="token number">20.00</span><span class="token punctuation">,</span>count<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>time<span class="token operator">:</span> <span class="token string">'1998-8'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                 <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'斗破苍穹'</span><span class="token punctuation">,</span>price<span class="token operator">:</span><span class="token number">30.00</span><span class="token punctuation">,</span>count<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>time<span class="token operator">:</span> <span class="token string">'1998-8'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                 <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'莽荒纪'</span><span class="token punctuation">,</span>price<span class="token operator">:</span><span class="token number">50.00</span><span class="token punctuation">,</span>count<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>time<span class="token operator">:</span> <span class="token string">'1998-8'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                 <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'星辰变'</span><span class="token punctuation">,</span>price<span class="token operator">:</span><span class="token number">20.00</span><span class="token punctuation">,</span>count<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>time<span class="token operator">:</span> <span class="token string">'1998-8'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                 <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'完美世界'</span><span class="token punctuation">,</span>price<span class="token operator">:</span><span class="token number">30.00</span><span class="token punctuation">,</span>count<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>time<span class="token operator">:</span> <span class="token string">'1998-8'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         computed<span class="token operator">:</span><span class="token punctuation">&#123;</span>             <span class="token function">allPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token comment">//页面解析可能是先解析计算属性，然后再渲染数据</span>                 <span class="token keyword">let</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     sum<span class="token operator">+=</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>price<span class="token operator">*</span>value<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> sum<span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         filters<span class="token operator">:</span><span class="token punctuation">&#123;</span>       <span class="token comment">//设置过滤器</span>             <span class="token function">showPrice</span><span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token keyword">return</span> <span class="token string">'$'</span><span class="token operator">+</span>price<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//保留两位小数</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>             <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token comment">//方式1</span>                 <span class="token comment">/*let newBooks = this.books.filter(function(book,index2) &#123;                        return !(index===index2);                    &#125;);                    this.books=newBooks;                 */</span>                 <span class="token comment">//方式2</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p><span id="双向绑定">双向绑定</span></p></blockquote><p>用于绑定控件，被绑定的控件与data中的数据实现双向绑定，准确的说，被绑定控件的value值和data中的数据<br>实现双向绑定，当我们修改控件的值时，data中的数据也会被修改，这是v-bind实现不了的，v-bind绑定value值<br>只是将data中的数据取出来显示，当我们修改控件的value值时，data中数据并不会被更改，而v-model却可以。</p><ul><li><p>v-model的基本使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    message<span class="token operator">:</span><span class="token string">'加油!'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//当我们手动修改文本框中的数据时，data中数据也会被更改，而v-bind绑定控件的value可做不到这一点，这就是双向绑定</span></code></pre></li><li><p>v-model原理<br>实际上v-model可以通过v-bind绑定value属性加上事件监听可以实现，当每次修改控件文本框时，<br>会触发input事件(input控件有input事件)，然后执行我们的事件函数，最后将输入的值写到data数据中。<br>下面就是模拟v-model</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"message"</span> @input<span class="token operator">=</span><span class="token string">"changeValue"</span><span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    message<span class="token operator">:</span><span class="token string">'加油!'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//或者input事件并不执行事件函数，直接使用表达式即可：</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"message"</span> @input<span class="token operator">=</span><span class="token string">"message=$event.target.value"</span><span class="token operator">></span></code></pre></li><li><p>v-model在radio中的使用，单选框</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>label<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> id<span class="token operator">=</span><span class="token string">"male"</span> value<span class="token operator">=</span><span class="token string">"男"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"sex"</span><span class="token operator">></span>男    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>laber<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> id<span class="token operator">=</span><span class="token string">"female"</span> value<span class="token operator">=</span><span class="token string">"女"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"sex"</span><span class="token operator">></span>女    <span class="token operator">&lt;</span><span class="token operator">/</span>laber<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    sex<span class="token operator">:</span><span class="token string">'男'</span>    <span class="token comment">//默认男</span><span class="token punctuation">&#125;</span><span class="token comment">/*小提示，当使用v-model在单选框时，name的属性可以去掉，name的本意是将两个选项绑定在一起，            而v-model的值相同，已经表示为这两个控件被绑定在一起。*/</span></code></pre></li><li><p>v-model在checkbox中的使用<br>checkbox分为单选框和多选框，单选框表示要么选中，要么不选择，多选框则是同时选中多个</p><ul><li><p>单选框</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"agree"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> id<span class="token operator">=</span><span class="token string">"agree"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"isAgree"</span><span class="token operator">></span>同意协议<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    isAgree<span class="token operator">:</span> <span class="token boolean">false</span><span class="token comment">//当用户点击单选框，则isAgree的值为true</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>多选框</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"篮球"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"hobbies"</span><span class="token operator">></span>篮球<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"足球"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"hobbies"</span><span class="token operator">></span>足球<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"兵乓球"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"hobbies"</span><span class="token operator">></span>兵乓球<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> value<span class="token operator">=</span><span class="token string">"羽毛球"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"hobbies"</span><span class="token operator">></span>羽毛球data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    hobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">//v-model有多个值时，使用数组进行接收</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>上面例子使用checkbox出现的问题<br>上面v-model使用在checkbox的问题是，我们的input写死在页面中，实际上应该动态的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>label v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"ball in originHobbies"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"ball"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"hobbies"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>ball<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>hobbies<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    hobbies<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    originHobbies<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'足球'</span><span class="token punctuation">,</span><span class="token string">'羽毛球'</span><span class="token punctuation">,</span><span class="token string">'兵乓球'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>v-model在select中的使用<br>select也有单选和多选之分</p><ul><li><p>单选</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"fruit"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"芒果"</span><span class="token operator">></span>芒果<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"火龙果"</span><span class="token operator">></span>火龙果<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"草莓"</span><span class="token operator">></span>草莓<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"葡萄"</span><span class="token operator">></span>葡萄<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     fruit<span class="token operator">:</span><span class="token string">'草莓'</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>多选<br>只需要在select上加上multiple属性即可，<code>&lt;select v-model=&quot;fruit&quot; multiple&gt;</code></p></li></ul></li><li><p>v-model的修饰符<br>之前讲过事件有它的修饰符，而v-model也有自己的修饰符，修饰符主要是用来帮助我们处理一些数据的，类似语法糖的概念</p><ul><li>lazy修饰符<br>默认情况下，v-model默认是在input事件中同步输入框的数据的，也就是说，一旦有数据发生改变，<br>对应的data数据就会自动发生改变，lazy修饰符可以让数据在失去焦点或者回车时才会更新<br><code>&lt;input type=&quot;text&quot; v-model.lazy=&quot;message&quot;&gt;</code></li><li>number修饰符<br>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串进行处理，但是如果我们希望处理的是数字类型，<br>那么最好将内容直接当做数字进行处理，number修饰符可以让在输入框输入的内容自动转成数字类型<br><code>&lt;input type=&quot;number&quot; v-model.number=&quot;message&quot;&gt;</code><br>该文本框只能输入数字，并且绑定在data数据中时，message类型也为数字，<br>如果没有number修饰符，则message会是字符串类型</li><li>trim修饰符<br>如果输入的内容首尾有很多空格通常我们希望将其去除，trim修饰符可以过滤内容左右两边的空格<br><code>&lt;input type=&quot;text&quot; v-model.trim=&quot;message&quot;&gt;</code>，绑定到data数据时，会去除用户输入的两边的空格</li></ul></li></ul><blockquote><p><span id="混入mixin">混入mixin</span></p></blockquote><p>混入mixin是用于复用组件的配置，可以把多个组件共用的配置提取成一个混入对象，下面是一个简单的案例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//app.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>test1<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>hr<span class="token operator">></span>    <span class="token operator">&lt;</span>test2<span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Test1 <span class="token keyword">from</span> <span class="token string">'./components/Test1'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Test2 <span class="token keyword">from</span> <span class="token string">'./components/Test2'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    Test1<span class="token punctuation">,</span>Test2  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//CommonConfig，多个组件共同的配置抽离成一个js文件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      msg<span class="token operator">:</span> <span class="token string">'测试混入mixin'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Test1.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    Test1组件：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> comConfig <span class="token keyword">from</span> <span class="token string">'./CommonConfig'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"Test1"</span><span class="token punctuation">,</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>comConfig<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//Test2.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    Test2组件：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> comConfig <span class="token keyword">from</span> <span class="token string">'./CommonConfig'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"Test2"</span><span class="token punctuation">,</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>comConfig<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*如果在复用的文件中，你的data中数据或者方法与复用js文件中的配置冲突以你的为主，但是如果是钩子函数冲突了，则复用的钩子函数和你的钩子函数都起作用，并且复用的钩子函数先执行上面的混合方式是局部混合，即每个组件中都需要导入复用文件，并配置mixin属性使用而全局混合指的是，在main.js中导入复用js文件，然后Vue.mixin(导入的复用对象)，则整个应用所有组件都可以使用复用配置如果是全局的混合，则不需要配置mixin属性，所有组件都有了复用文件的配置*</span></code></pre><blockquote><p><span id="自定义指令">自定义指令</span></p></blockquote><p>vue中的指令指的是DOM元素标签中标注的v-xxx，只要在标签中标注vue的指令，就能够完成一些事情，本质上<br>是vue做了一些DOM操作，例如：v-text指令，就是vue拿到data数据，将数据交给标签的innerText属性，<br>那么自定义指令就是我们自己去做一些DOM操作，自定义指令有两种实现方式，函数式和对象式，下面来看看函数式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//实现一个指令，只要标注在标签上，就能够显示一些我们想要的内容</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>span v<span class="token operator">-</span>wanyi<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      directives<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        指令何时会被调用?        1，指令与元素成功绑定时(一上来，第一次时)          2，指令所在的模板被重新解析时(data数据发生改变时)          */</span>        <span class="token function">wanyi</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>banding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          element<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">'万一的秃头时光'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>以上是函数式实现一个指令，下面是对象式实现自定义指令：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用对象式定义自定义指令v-waner，使用在input标签上，并可以获取到value，并且一上来就可以获取input的焦点focus</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>span v<span class="token operator">-</span>wanyi<span class="token operator">=</span><span class="token string">"n"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span>hr<span class="token operator">></span>  <span class="token operator">&lt;</span>input v<span class="token operator">-</span>waner<span class="token operator">=</span><span class="token string">"n"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>hr<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"n++"</span><span class="token operator">></span>点击n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      n<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    directives<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">wanyi</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>banding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//函数式实现自定义指令时，这个函数相当于bind+update</span>        element<span class="token punctuation">.</span>innerText<span class="token operator">=</span>banding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      waner<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//指令与元素成功绑定时(一上来，第一次时)</span>        <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>banding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          element<span class="token punctuation">.</span>value<span class="token operator">=</span>banding<span class="token punctuation">.</span>value        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">//指令所在元素被插入页面时，mounted的时间差不多</span>        <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>banding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          element<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//focus方法必须在DOM被挂载之后才能执行，所以只能用对象方式实现这个功能</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">//指令所在的模板被重新解析时(data数据发生改变)</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>banding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//update逻辑与bind逻辑一样</span>          element<span class="token punctuation">.</span>value<span class="token operator">=</span>banding<span class="token punctuation">.</span>value        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">/*函数式和对象式实现自定义指令的区别在于：对象式实现自定义指令多了一个钩子函数，可以在页面加载完毕时做一些操作*/</span></code></pre><p>自定义指令上的一些坑：</p><ul><li><p>因为html模板不支持大小写，所以你的指令名不能有大写，使用-表示驼峰，并且在自定义指令函数名上使用字符串包裹函数名<br>比如在上面的例子上，将wanyi，如果写成wanYi,肯定会报错的，你可以写成下面这种形式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用：</span><span class="token operator">&lt;</span>span v<span class="token operator">-</span>wan<span class="token operator">-</span>yi<span class="token operator">=</span><span class="token string">"n"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token comment">//定义自定义函数，因为有-，所以用''包裹，因为对象的key都是字符串</span><span class="token string">'wan-yi'</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>banding<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  element<span class="token punctuation">.</span>innerText<span class="token operator">=</span>banding<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>指令中函数，里面的this都是window，不是vue，所以想访问vue中的data数据，只能通过banding参数</p></li></ul><p>全局指令：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'指令名'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//函数式</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'指令名'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//对象式</span>全局指令的创建和全局过滤器的创建类似，在多个vue实例中可以使用</code></pre><p>下面是关于自定义指令的总结：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/vue/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4.png" loading="lazy"></p><blockquote><p><span id="插件">插件</span></p></blockquote><p>之前都是直接导入插件依赖，然后Vue.use(插件对象),就可以直接使用了，原来当我们调用Vue.use()时，<br>vue会调用插件中的install方法并且install方法可以接收两个参数，第一个参数是Vue,第二个参数及以后，<br>就是插件使用者传递的数据，交给插件作者使用在插件的install方法，我们可以定义一些全局的东西放到Vue中，<br>就是一直说的全局注册，注册到Vue中，然后，我们使用插件就可以使用一些功能了</p><blockquote><p><span id="过度与动画">过度与动画</span></p></blockquote><p>Vue封装的过度和动画，作用是：在插入，更新或移除DOM元素时，在合适的时候给元素添加样式类名</p><ul><li><p>原生css实现动画</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button  @click<span class="token operator">=</span><span class="token string">"isShow=!isShow"</span><span class="token operator">></span>点击显示或隐藏<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isShow"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"come"</span> <span class="token operator">></span>万一<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      isShow<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>h1<span class="token punctuation">&#123;</span>  background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">1</span>da1f2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>come<span class="token punctuation">&#123;</span>  animation<span class="token operator">:</span> wanyi <span class="token number">1</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>go<span class="token punctuation">&#123;</span>  animation<span class="token operator">:</span> wanyi <span class="token number">1</span>s reverse<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@keyframes wanyi <span class="token punctuation">&#123;</span>  <span class="token keyword">from</span><span class="token punctuation">&#123;</span>    transform<span class="token operator">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">&#125;</span>  to<span class="token punctuation">&#123;</span>    transform<span class="token operator">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment">//通过点击事件指定对应的回调函数，在回调函数中改变class属性，从而达到动画的效果</span></code></pre></li><li><p>使用vue中对动画的支持，使得我们无需再去手动更改class属性，vue会在合适的时候加上动画<br>要求是class样式名不能随意写，不能写成上面come或者go</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button  @click<span class="token operator">=</span><span class="token string">"isShow=!isShow"</span><span class="token operator">></span>点击显示或隐藏<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>transition name<span class="token operator">=</span><span class="token string">"wan"</span> appear<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>appear表示刷新页面立马执行enter样式<span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isShow"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"come"</span> <span class="token operator">></span>万一<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      isShow<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>h1<span class="token punctuation">&#123;</span>  background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">1</span>da1f2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*默认样式名*/</span><span class="token comment">/*.v-enter-active&#123;animation: wanyi 1s;&#125;.v-leave-active&#123;  animation: wanyi 1s reverse;&#125;*/</span><span class="token comment">/*如果给transition指定了name，则样式名改成：name-enter/leace-active*/</span><span class="token punctuation">.</span>wan<span class="token operator">-</span>enter<span class="token operator">-</span>active<span class="token punctuation">&#123;</span>  animation<span class="token operator">:</span> wanyi <span class="token number">1</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>wan<span class="token operator">-</span>leave<span class="token operator">-</span>active<span class="token punctuation">&#123;</span>  animation<span class="token operator">:</span> wanyi <span class="token number">1</span>s reverse<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*动画*/</span>@keyframes wanyi <span class="token punctuation">&#123;</span>  <span class="token keyword">from</span><span class="token punctuation">&#123;</span>    transform<span class="token operator">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">&#125;</span>  to<span class="token punctuation">&#123;</span>    transform<span class="token operator">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><p>使用过度效果实现上面的案例</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>    h1<span class="token punctuation">&#123;</span>      background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">1</span>da1f2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*      .wan-enter，表示进入的起点，      .wan-enter-to，表示进入的终点      .wan-leave，表示离开的起点      .wan-leave-to，表示离开的终点      .wan-enter-active，表示进入的过程中      .wan-leave-active，表示离开的过程中    */</span>    <span class="token comment">/*进入的起点，离开的终点*/</span>    <span class="token punctuation">.</span>wan<span class="token operator">-</span>enter<span class="token punctuation">,</span><span class="token punctuation">.</span>wan<span class="token operator">-</span>leave<span class="token operator">-</span>to<span class="token punctuation">&#123;</span>      transform<span class="token operator">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*进入的终点，离开的起点*/</span>    <span class="token punctuation">.</span>wan<span class="token operator">-</span>leave<span class="token punctuation">,</span><span class="token punctuation">.</span>wan<span class="token operator">-</span>enter<span class="token operator">-</span>to<span class="token punctuation">&#123;</span>      transform<span class="token operator">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">/*进入的过程中，离开的过程中，在其中增加效果*/</span>    <span class="token punctuation">.</span>wan<span class="token operator">-</span>enter<span class="token operator">-</span>active <span class="token punctuation">,</span><span class="token punctuation">.</span>wan<span class="token operator">-</span>leave<span class="token operator">-</span>active<span class="token punctuation">&#123;</span>      transition<span class="token operator">:</span> <span class="token number">0.5</span>s linear<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token comment">/*提示：如果有多个标签都需要使用相同的动画，则使用&lt;transform-group>标签包裹，并且给其中每个元素加上key值，值为不同的数字即可*/</span></code></pre></li><li><p>第三方库，animate.css,千万不要下载错了，4版本的！下面是简单的使用：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>button  @click<span class="token operator">=</span><span class="token string">"isShow=!isShow"</span><span class="token operator">></span>点击显示或隐藏<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>transition      name<span class="token operator">=</span><span class="token string">"animate__animated animate__bounce"</span>      appear      enter<span class="token operator">-</span>active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"animate__backInDown"</span>      leave<span class="token operator">-</span>active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"animate__backOutDown"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isShow"</span><span class="token operator">></span>万一<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token string">'animate.css'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        isShow<span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>  h1<span class="token punctuation">&#123;</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">1</span>da1f2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm报错之gypERR</title>
      <link href="2021/08/30/npm%E6%8A%A5%E9%94%99%E4%B9%8BgypERR/"/>
      <url>2021/08/30/npm%E6%8A%A5%E9%94%99%E4%B9%8BgypERR/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>报错案例</p></blockquote><p>在安装webpack的webpack-dev-server的时候，会爆gypERR的错误，当时因为是在自己的项目的局部安装(本地安装)<br>所以，我通过在项目的package.json的devDependencies中增加<code>&quot;webpack-dev-server&quot;: &quot;^4.0.0&quot;</code><br>再在命令行执行：<code>npm install</code>，从而解决了安装不了的问题。<br>但是最近在全局安装vue-cli的时候，又爆这个错误！下面是这个错误的样子，这个错误可能让你安装python<br>或者让你安装Visual Studio，下面是这个报错的样子：</p><pre class="language-none"><code class="language-none">D:\webStorm\Project\vue_test&gt;npm install @vue&#x2F;cli -g...不重要的省略npm ERR! code 1npm ERR! path D:\nodeJs\node_global\node_modules\@vue\cli\node_modules\bufferutilnpm ERR! command failednpm ERR! command C:\WINDOWS\system32\cmd.exe &#x2F;d &#x2F;s &#x2F;c node-gyp rebuildnpm ERR! gyp info it worked if it ends with oknpm ERR! gyp info using node-gyp@7.1.2npm ERR! gyp info using node@12.13.1 | win32 | x64&#x2F;&#x2F;是的，我屈服了，我安装了python，结果安装完又报错，让我安装Visual Studionpm ERR! gyp info find Python using Python version 3.9.6 found at &quot;D:\python\python.exe&quot;npm ERR! gyp ERR! find VSnpm ERR! gyp ERR! find VS msvs_version was set from command line or npm config&#x2F;&#x2F;你可能需要设置一下：npm config set msvs_version 2019，不然找不到你安装的VS，是的，你可能也要安装下VS2019版本npm ERR! gyp ERR! find VS - looking for Visual Studio version 2019npm ERR! gyp ERR! find VS VCINSTALLDIR not set, not running in VS Command Promptnpm ERR! gyp ERR! find VS could not use PowerShell to find Visual Studio 2017 or newer, try re-running with &#39;--loglevel silly&#39; for more detailsnpm ERR! gyp ERR! find VS looking for Visual Studio 2015npm ERR! gyp ERR! find VS - not foundnpm ERR! gyp ERR! find VS not looking for VS2013 as it is only supported up to Node.js 8npm ERR! gyp ERR! find VSnpm ERR! gyp ERR! find VS valid versions for msvs_version:npm ERR! gyp ERR! find VSnpm ERR! gyp ERR! find VS **************************************************************npm ERR! gyp ERR! find VS You need to install the latest version of Visual Studionpm ERR! gyp ERR! find VS including the &quot;Desktop development with C++&quot; workload.npm ERR! gyp ERR! find VS For more information consult the documentation at:npm ERR! gyp ERR! find VS https:&#x2F;&#x2F;github.com&#x2F;nodejs&#x2F;node-gyp#on-windowsnpm ERR! gyp ERR! find VS **************************************************************npm ERR! gyp ERR! find VSnpm ERR! gyp ERR! configure errornpm ERR! gyp ERR! stack Error: Could not find any Visual Studio installation to usenpm ERR! gyp ERR! stack     at VisualStudioFinder.fail (D:\nodeJs\node_global\node_modules\npm\node_modules\node-gyp\lib\find-visualstudio.js:121:47)npm ERR! gyp ERR! stack     at D:\nodeJs\node_global\node_modules\npm\node_modules\node-gyp\lib\find-visualstudio.js:74:16npm ERR! gyp ERR! stack     at VisualStudioFinder.findVisualStudio2013 (D:\nodeJs\node_global\node_modules\npm\node_modules\node-gyp\lib\find-visualstudio.js:351:14)npm ERR! gyp ERR! stack     at D:\nodeJs\node_global\node_modules\npm\node_modules\node-gyp\lib\find-visualstudio.js:70:14npm ERR! gyp ERR! stack     at D:\nodeJs\node_global\node_modules\npm\node_modules\node-gyp\lib\find-visualstudio.js:372:16npm ERR! gyp ERR! stack     at D:\nodeJs\node_global\node_modules\npm\node_modules\node-gyp\lib\util.js:54:7npm ERR! gyp ERR! stack     at D:\nodeJs\node_global\node_modules\npm\node_modules\node-gyp\lib\util.js:33:16npm ERR! gyp ERR! stack     at ChildProcess.exithandler (child_process.js:302:5)npm ERR! gyp ERR! stack     at ChildProcess.emit (events.js:210:5)npm ERR! gyp ERR! stack     at maybeClose (internal&#x2F;child_process.js:1021:16)npm ERR! gyp ERR! System Windows_NT 10.0.19042npm ERR! gyp ERR! command &quot;D:\\nodeJs\\node.exe&quot; &quot;D:\\nodeJs\\node_global\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&quot; &quot;rebuild&quot;npm ERR! gyp ERR! cwd D:\nodeJs\node_global\node_modules\@vue\cli\node_modules\bufferutilnpm ERR! gyp ERR! node -v v12.13.1npm ERR! gyp ERR! node-gyp -v v7.1.2npm ERR! gyp ERR! not ok</code></pre><p>具体解决办法：</p><ul><li><p>如果你安装的依赖是安装在项目中，即局部安装(本地安装)，你可以通过修改项目的package.json来安装</p></li><li><p>如果你安装的依赖是全局安装，没有办法，bug是爸爸</p><ul><li><p>先设置一下msvs_version</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;查看当前的msvs_versionnpm config get msvs_version&#x2F;&#x2F;修改成你安装的VS版本npm config set msvs_version 2019</code></pre></li><li><p>然后安装python和Visual Studio，安装VS的时候你可能需要勾选<strong>Desktop development with C++</strong><br>我也不知道勾选有没有用，反正不放过任何一处，安装完毕后，重新下载依赖就能成功了。</p></li></ul></li></ul><blockquote><p>关于此问题解决文章</p></blockquote><ul><li><a href="https://www.e-learn.cn/topic/3783091">文章1</a></li><li><a href="https://stdworkflow.com/556/npm-err-gyp-err-stack-error-could-not-find-any-visual-studio-installation-to-use">文章2</a></li><li><a href="https://blog.csdn.net/qq_34707272/article/details/118015209">文章3</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack的基本使用</title>
      <link href="2021/08/24/Webpack%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>2021/08/24/Webpack%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>最近主要学习vue，在网课中使用到了webpack，在实操过程中深受webpack配置的折磨，太痛苦了<br>想着，如果不记录下来，写一篇webpack博客，对不起我吐血找bug。</p><p>本篇主要讲如下内容：</p><ul><li><a href="#a">模块化</a></li><li><a href="#b">模块化之ES6语法及CommonJS语法</a></li><li><a href="#c">webpack概念</a></li><li><a href="#d">安装webpack</a></li><li><a href="#e">webpack的基础使用</a></li><li><a href="#f">loader的使用</a></li><li><a href="#g">webpack配置vue</a></li><li><a href="#h">vue配置项目别名</a></li><li><a href="#i">vue中el与template的关系</a></li><li><a href="#j">vue的终极方案</a></li><li><a href="#k">plugin的使用</a></li><li><a href="#l">搭建本地服务器(WDS)</a></li><li><a href="#m">配置文件的分离</a></li><li><a href="#n">完结</a></li></ul><blockquote><p><span id="a">模块化</span></p></blockquote><p>在讲webpack之前，我想先说说什么是模块化，因为webpack是一个前端模块化打包工具，如果不知道什么是<br>模块化，那就不要说什么webpack了。ok，下面进入正题</p><p>模块化指的是将一个js文件看成一个模块，实际上，不止是js文件，你可以把css样式，图片都看成是一个个模块<br>通过组织这些模块从而构建我们的项目。那我们来看看怎么组织这些模块(js,css,图片等等)。</p><p>组织模块说的是：在js文件中，使用一些别人提供的js语法，使得我们可以使用其他模块，做到模块间的数据共享<br>请看下面代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建hello.js，main.js,index.html，代码如下：</span><span class="token comment">//hello.js</span><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token template-punctuation string">`</span></span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>say<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//main.js</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>say<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./hello.js'</span><span class="token punctuation">;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'万一'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//index.html</span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"main.js"</span> type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    这里是<span class="token keyword">default</span><span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token comment">/*以上代码，当我们在浏览器打开index.html页面的时候，按f12，控制台会输出“hello 万一”上面的代码其实讲的就是模块之间的组织，下面来分析一下上面的代码在上面的代码中，hello.js文件(模块)中有一个say函数，然后使用export &#123;say&#125;，将该函数暴露出去了以后谁导入该hello模块，谁就可以使用这个say函数，可以看到，在main.js文件(main模块)中，使用import &#123;say&#125; from './hello.js';导入了hello模块，拿到的say变量，其实就是say函数然后直接就可以使用，最后在index.html页面中，引入main.js，并且type="module"，当我们打开index.html后，就可以看到控制台输出hello 万一。以上这种export,import语法是es6语法，浏览器提供支持的，是模块之间相互联系的语法。当然还有其他语法也是类似的，例如node.js中使用的CommonJS语法和ES6也是类似的。*/</span></code></pre><p>模块化不仅可以实现模块之间数据的共享，还可以实现模块之间变量作用域隔离，什么意思呢？<br>在以前，我们在一个页面引用两个js文件，这两个js文件之间的变量是不允许有重名的，<br>因为这些变量属于全局变量。而在模块中可以定义同名的变量，相互不影响，因为模块中的代码都被一个函数<br>包裹住(立即执行函数)，所以在模块中定义的变量都是局部变量，自然不影响其他模块。</p><blockquote><p><span id="b">模块化之ES6语法及CommonJS语法</span></p></blockquote><ul><li><p>ES6模块化<br>上面的例子中是一个简单的ES6模块化语法，下面是一些细节</p><ul><li><p>export导出</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//第1种导出方式就和上面案例一样，导出不仅可以导出变量，还可以导出函数，对象，类</span><span class="token keyword">let</span> name<span class="token operator">=</span><span class="token string">'万一'</span><span class="token punctuation">;</span><span class="token keyword">let</span> you<span class="token operator">=</span><span class="token string">"明月"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">万一爱明月</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>say<span class="token punctuation">,</span>name<span class="token punctuation">,</span>you<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//第2种导出方式,直接在export后定义变量</span><span class="token keyword">export</span> <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'万一'</span><span class="token comment">//第3种导出方式,默认导出</span><span class="token keyword">let</span> you<span class="token operator">=</span><span class="token string">"明月"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> you<span class="token punctuation">;</span><span class="token comment">/*注意：默认导出这种方式可以在导入时自定义变量名，其他方式导入时只能使用导出时的变量名并且一个模块只能有一个默认导出*/</span></code></pre></li><li><p>import导入</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*第1种导入方式，和上面案例一样，注意需要有&#123;&#125;包裹变量名，对应导出的第1,2种方式注意，这里的路径是相对路径，变量名不可随意取，导出时什么名字，导入时就是什么名字*/</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>say<span class="token punctuation">,</span>xxx<span class="token punctuation">,</span>xxx<span class="token punctuation">,</span>xxx<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./a.js'</span><span class="token punctuation">;</span><span class="token comment">/*第2种导入方式，通配符导入，当需要导入的功能太多的时候，我们可以使用*表示导入该模块全部的导出的内容，并可以使用as取一个别名该命令表示将a.js中导出的内容，全部导入到本模块中，并存到xxx对象之中，当需要某个功能时，    直接xxx.变量名，即可取出a.js中导出的变量名。*/</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> xxx <span class="token keyword">from</span> <span class="token string">'./a.js'</span><span class="token comment">/*第3种导入方式，默认导入，和默认导出一起使用的。与其他导入方式不同的是，这里导入的变量并不需要大括号&#123;&#125;包裹，并且变量名随意取*/</span><span class="token keyword">import</span> yang <span class="token keyword">from</span> <span class="token string">'./a.js'</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>CommonJS<br>CommonJS的导入导出需要node环境的支持，下面是导入导出语法</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">导出：module<span class="token punctuation">.</span>exports<span class="token operator">=</span> <span class="token punctuation">&#123;</span>    flag<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>导入：<span class="token comment">//解构赋值</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>test<span class="token punctuation">,</span>demo<span class="token punctuation">,</span>flag<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./moduleA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等同于</span><span class="token keyword">let</span> mA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moduleA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> test <span class="token operator">=</span> mA<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">let</span> demo <span class="token operator">=</span> mA<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">let</span> flag <span class="token operator">=</span> mA<span class="token punctuation">.</span>flag<span class="token punctuation">;</span><span class="token comment">/*注意：与ES6不同的是，导入模块时，模块的后缀名可以省略，而在es6中不可以，require('./moduleA');*/</span></code></pre></li></ul><blockquote><p><span id="c">webpack概念</span></p></blockquote><p>webpack是一个前端模块化打包工具，模块化我们知道了，打包又是个什么东西呢？<br>我们可以想象，在一个页面之中导入非常多的js文件，并且js文件之间又有逻辑关系，不能随意导入<br>而打包是将我们编写的js文件都打包成一个js文件，然后在页面只需要引用这一个js文件就行。<br>webpack还可以对图片进行压缩，将scss,less转成javascript，将es6语法转成es5语法，<br>将typeScript转成javascript等等很多的功能，所以它就是一个前端开发工具。</p><blockquote><p><span id="d">安装webpack</span></p></blockquote><ul><li><p>node和npm的概念<br>webpack的安装需要node环境，需要npm进行安装，node.js并不是一门开发语言，它定义了一套规则，<br>语法使得js可以运行在后端服务器上，所以可以做之前不能做的事情，例如可以使用js操作文件，数据库，网络等<br>这是node赋予js的能力，而npm，则是node包管理器，node package manage，帮助我们下载各种依赖包</p></li><li><p>npm的一些小概念和命令<br>在官网下载好node之后，配置好环境变量(自动配置)，npm是随着node一同下载的<br>**npm安装依赖分为全局安装和局部安装(本地安装)**指的是把依赖放在哪里，或者说依赖的作用范围。</p><ul><li>全局安装指的是将依赖包安装在node根目录的node_globalnode_module中，这个路径可以设置<br>使用命令：<code>npm config ls</code>查看npm配置信息，查看npm全局安装的路径：<code>npm get prefix</code><br>当我们使用npm命令安装依赖时加上-g，就为全局安装，否则为局部安装。</li><li>而局部安装指的是，当我们对一个文件夹进行初始化后，该文件夹就被npm管理起来了，被当做一个项目<br>对文件夹初始化的命令是：<code>npm init</code>，执行命令之后会在该文件夹中生成一个node_module文件<br>和一个package.json文件，新生成的node_module文件夹存放局部安装的依赖包，<br>package.json文件则是该项目的一些依赖信息等等。</li></ul><p><strong>依赖又分为开发时依赖(又叫编译期依赖)，运行时依赖</strong></p><ul><li>开发时依赖：只需要在开发时使用的依赖，例如图片压缩，es6转es5等等，项目打包后，<br>运行时并不需要这些依赖，安装开发时依赖在npm命令上加上–save-dev就可以把依赖信息<br>写到package.json中的devDependencies中，表示这是开发时依赖</li><li>运行时依赖：在程序运行时需要的依赖，例如vue等，安装运行时依赖在npm命令加上–save<br>就可以把依赖信息写到package.json中的dependencies中，表示这是运行时依赖。</li></ul><p><strong>npm安装依赖的两种方式</strong></p><ul><li>通过编辑项目中的package.json文件，编辑dependencies，devDependencies，<br>再执行<code>npm install</code>命令。就会使得所依赖的module加载到项目的node_modules文件夹中。</li><li>不用package.json，而是直接通过npm install moduleName的方式，逐个添加依赖。</li></ul><p><strong>npm的一些常用命令</strong></p><ul><li>安装依赖：<code>npm install 依赖包名@版本号</code>，加上<code>-g</code>则表示全局安装，<br>加上<code>--save-dev</code>表示这是开发时依赖，会把依赖信息写到项目中的package.json的devDependencies中<br>如果不指定版本号，则安装最新版的依赖</li><li>卸载依赖：<code>npm uninstall 依赖包名@版本号 依赖包名@版本号</code>，可以安装卸载多个依赖</li><li>查看npm管理的依赖：在项目根目录中执行<code>npm list</code>，查看的是项目的局部安装依赖(或者叫本地安装)<br>查看全局安装的依赖：<code>npm list -g --depth 0</code>，–depth 0：只显示第一层，不展开依赖项</li><li>重新安装项目依赖：在项目根目录中使用<code>npm install</code>，则会根据项目的package.json<br>重新安装所有依赖，在修改package.json文件后，都需要执行一下该命令。</li><li>查看全局安装存储的路径：<code>npm get prefix</code><br>查看npm配置信息：<code>npm config ls</code></li></ul></li><li><p>安装webpack和其脚手架<br>webpack当然也是npm中的软件包，npm几乎管理着大多数的依赖，工具等等，安装命令如下：<br><code>npm install webpack@5.38.0 webpack-cli@4.7.0 --save-dev</code>，直接局部安装，作为开发时依赖。</p></li></ul><blockquote><p><span id="e">webpack的基础使用</span></p></blockquote><p>上面已经介绍了什么是webpack，以及如何安装webpack，接下来我们来看下如何使用webpack</p><ul><li><p>首先使用webStorm或者其他开发工具创建一个空项目，再创建两个目录，一个dist目录<br>一个src目录，dist目录存放的是打包后的文件，src目录存放项目的文件，包括js，css，图片<br>上面说过，webpack可以将所有js，css等等打包成一个js文件，然后html页面引入这个文件即可使用<br>说的就是将src中所有内容都打包进dist目录中，当然，图片不被打包成js文件而是拷贝到dist目录中。</p><p>另外再创建一个index.html页面，index.html页面不放在src中，而是放在项目的根目录中<br>因为我们只需要把js，css等等模块打包成一个js文件，然后html引入即可使用。</p><p>值得说明的是，我们需要改变一个思想，一个使用vue开发的项目一般只有一个html页面，<br>这被叫做单页面富应用，即SPA页面，利用JavaScript根据后端数据动态的变换 HTML，<br>从而实现UI与用户的交互。下图是传统web和单页面应用区别：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/webpack/1.png" loading="lazy"></p></li><li><p>在上面，我们在项目根目录中创建好了dist目录，src目录，index.html，我们还是来实现讲模块化时候的例子<br>在main.js文件中引入其它js文件的函数，然后在main函数中调用该函数，之前是将该main.js引入html页面<br>然后打开浏览器查看控制台输出，而现在是使用webpack对main.js进行打包成dist目录的js文件，<br>再在html引入打包后的js文件，虽然相比之前多了一个打包的动作，但是main.js作为入口文件，<br>其他js文件只要在main.js中被导入了，都可以打包成一个js文件，而不像以前将很多js文件引入到html中。<br>具体做法：在src目录中创建js目录，在js目录中创建将被导入的mathUtil.js，在src根目录中创建main.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//mathUtil.js</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">cheng</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>add<span class="token punctuation">,</span>cheng<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//main.js,作为入口文件,导入mathUtil组件中函数并调用</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>add<span class="token punctuation">,</span>cheng<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./js/mathUtil.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cheng</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>请注意，目前为止还没有使用webpack，首先，进入该项目根目录，npm初始化该项目，<br>会在项目根路径下生成node_modules目录和package.json文件，当我们局部安装(本地安装)依赖后，<br>npm就会将依赖下载到node_modules中，package.json则是npm管理我们项目的文件，<br>其中有一些项目的依赖的信息，以及可以配置一些script脚本，简化依赖的使用。<br>初始化完毕后，安装webpack依赖。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token comment">//进入项目根目录，初始化项目</span>  npm init<span class="token comment">/*  安装webpack及其脚手架依赖，没有-g表示本地安装，@指定依赖版本号--sace-dev则会将依赖信息写到项目的package.json中  */</span>  npm install webpack@<span class="token number">5.38</span><span class="token number">.0</span> webpack<span class="token operator">-</span>cli@<span class="token number">4.8</span><span class="token number">.0</span> <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre></li><li><p>然后我们还需要在项目根目录中创建一个webpack的配置文件，<br>webpack.config.js，在这个配置文件中可以配置一些webpack的扩展功能，行为。<br>我们需要在webpack配置文件中配置出口入口路径，入口路径指的是入口文件的位置，<br>就是我们的main.js的路径，出口路径指的是，打包后的js文件放在哪个目录，<br>webpack会根据出口入口路径，找到main.js，任何在该文件被导入的模块，都会被打包<br>打包成我们指定的js文件，然后我们在html页面中引入该文件即可，下面是我的webpack.config.js配置信息</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//因为全局安装中存在vue，所以可以直接导入vue的path模块</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//CommonJs语法导出</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment">//打包入口，相对于webpack.config.js，main.js所在的位置</span>  output<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*      path是出口路径，指要把打包后的文件放在哪里，__dirname是path模块的变量，表示当前文件的绝对路径      该变量表示当前webpack.config.js的绝对路径，resolve函数表示将两个路径进行自动拼接      所以整体意思就是打包后文件放在webpack.config.js同级的dist目录中     */</span>    path<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    <span class="token comment">//打包后的文件名</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>配置完毕后，在根目录下执行命令：<code>webpack --mode development</code>进行打包操作，<br><code>--mode development</code>，该参数是webpack新版本需要指定的，表示使用开发模式进行打包，<br>开发模式打包，打包后的文件不会被压缩，如果是production，生产模式打包，则打包后的文件会被压缩<br>打包后会在dist目录下生成bundle.js文件，然后在我们的index.html页面中引入该js文件即可</p><p>下图是我的目录结构，总体思路很简单，webpack帮我们将入口文件main.js，打包成dist中的bundle.js文件<br>我们通过npm命令即可打包，只要模块在main.js中使用到，就可以被打包成bundle.js，往后只需要在html<br>中引入打包后的js文件，而不需要在html页面中多个js文件。<br>下图引用bundle.js时，不需要增加<code>type=&quot;module&quot;</code><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/webpack/2.png" loading="lazy"></p></li><li><p>案例并没有结束，我们知道，配置完webpack的配置文件，webpack.config.js文件，<br>使用命令<code>webpack --mode development</code>，即可让webpack进行打包，但是这种打包命令并不好<br>因为后面我们的webpack命令会加很多参数，这就使得打包的命令变得很长，不方便，<br>所以我们可以在package.json中配置一个script，小脚本的意思，配置好后，使用npm运行小脚本<br>即可执行相应的webpack命令。下面是我的package.json配置</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"studywebpack"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"study for webpack"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack --mode development"</span><span class="token punctuation">,</span>    <span class="token property">"prod"</span><span class="token operator">:</span> <span class="token string">"webpack --mode production"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.38.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.8.0"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看到scripts属性中，配置了dev和prod，dev表示开发模式打包，prod表示生产模式打包，<br>dev，prod这些属性名随便写，当我们在根目录下执行<code>npm run dev</code>时，就会执行dev后面的命令.</p></li><li><p>上面我们学习了webpack的基本使用，我们知道，webpack就是将多个JS文件，打包成一个JS文件，<br>在webpack处理的模块中(JS文件)，可以随意使用各种模块化语法进行导入导出，因为webpack会处理解析JS<br>的模块化导入导出，但是webpack.config.js中的导出只能使用CommonJS语法，因为webpack依赖node环境</p></li></ul><blockquote><p><span id="f">loader的使用</span></p></blockquote><p>webpack可以做的是：打包和处理JS模块化<br>随便你在项目中用什么模块化语法，webpack帮你解析，不需要考虑环境问题，但是webpack也有很多不能做的<br>webpack只能处理JS代码，并不能处理css，图片，loader就是一些别人开发的依赖，可以帮助webpack处理这些<br>例如将less转成css，将es6语法转成es5，解析图片等等。</p><p>loader的使用过程：通过npm安装需要使用的loader，再在webpack.config.js中的module关键字下进行相应的配置</p><p>好，那么我们开始配置几个常见的loader，webpack地狱配置开启！</p><ul><li><p>配置css的loader<br>配置css的loader指的就是在webpack管理的项目中使用css文件</p><ul><li><p>创建一个normal.css文件，<code>body&#123;background-color: aqua;&#125;</code></p></li><li><p>去官网的loaders中寻找css的loader，使用npm安装这两个loader，css-loader，style-loader<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/webpack/3.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/webpack/4.png" loading="lazy"></p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;我的webpack版本是5.38.0，webpack-cli版本是4.8.0，最好保持一致吧npm install --save-dev css-loader@6.2.0 style-loader@3.2.1</code></pre></li><li><p>安装好两个loader之后，配置webpack.config.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>   output<span class="token operator">:</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span> <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//注意：use数组中，style-loader和css-loader顺序不能反，webpack加载配置从数组右到左加载</span></code></pre></li><li><p>配置完毕后，此时webpack能处理css文件了，但是我们需要在入口文件中引用css模块，<br>只有在入口文件中导入模块，才能被webpack进行打包处理，所以我的main.js如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//测试模块化</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>add<span class="token punctuation">,</span>cheng<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./js/mathUtil.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cheng</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试css文件</span><span class="token keyword">import</span> css <span class="token keyword">from</span> <span class="token string">'./css/normal.css'</span></code></pre></li><li><p>最后执行打包命令，<code>npm run dev</code>，查看index.html即可查看到页面背景颜色产生变化了</p></li></ul></li><li><p>配置less的loader<br>less文件是css的预加载文件，配置less的loader的意思是，让webpack认识less文件，并使用相应的loader<br>将less文件转成css文件，具体步骤与配置css一样，与less相同的还有scss文件。</p><ul><li><p>在css目录中创建special.less文件，该文件内容如下：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token variable">@fontSize<span class="token punctuation">:</span></span> 50px<span class="token punctuation">;</span><span class="token variable">@fontColor<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token selector">body</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">@fontSize</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@fontColor</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>然后安装less的loader，使用less-loader还需要less依赖，一起进行安装</p><pre class="language-none"><code class="language-none">npm install --save-dev less-loader@7.3.0 less@4.1.1</code></pre></li><li><p>配置webpack.config.js文件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>            use<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span> <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>            use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                loader<span class="token operator">:</span> <span class="token string">"style-loader"</span> <span class="token comment">// creates style nodes from JS strings</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                loader<span class="token operator">:</span> <span class="token string">"css-loader"</span> <span class="token comment">// translates CSS into CommonJS</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                loader<span class="token operator">:</span> <span class="token string">"less-loader"</span> <span class="token comment">// compiles Less to CSS</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>配置完毕后，需要在入口文件中引入special模块,因为样式是字体样式，所以使用JS输出一个标签</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//测试less</span><span class="token keyword">import</span> less <span class="token keyword">from</span> <span class="token string">'./css/special.less'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;h3>我giao&lt;/h3>"</span><span class="token punctuation">)</span></code></pre></li><li><p>最后打包运行：<code>npm run dev</code>，查看页面即可</p></li></ul></li><li><p>配置图片的loader配置图片的loader，就是让webpack能够识别图片模块，对图片进行处理。<br><strong>webpack处理图片有两种方式</strong>，可以在webpack.config.js中配置一个图片大小(limit属性)，<br>超过这个大小的图片会被拷贝进dist目录，然后浏览器会通过url请求方式得到这张图片，<br>而小于这个大小的图片，则会解析成base64字符串发给浏览器，让浏览器自行解析。</p><ul><li><p>第一步，先在src中创建img目录，放上两张图片，然后npm安装图片相关的依赖</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev url<span class="token operator">-</span>loader@<span class="token number">4.1</span><span class="token number">.1</span> file<span class="token operator">-</span>loader@<span class="token number">6.2</span><span class="token number">.0</span><span class="token comment">//不同版本的webpack安装不同版本的各种loader。</span></code></pre></li><li><p>然后在webpack.config.js中配置相关loader<br>注意：如果你是webpack5版本以上，你可以使用asset方式配置，这种方式我没太懂，没去研究<br>你也可以仍然使用loader的方式配置，但需要设置一些属性，下面是两种方式的配置<br>asset的配置</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  type<span class="token operator">:</span><span class="token string">"asset"</span><span class="token punctuation">,</span>  <span class="token comment">//解析</span>  parser<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//转base64的条件</span>    dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      maxSize<span class="token operator">:</span> <span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 25kb</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   generator<span class="token operator">:</span><span class="token punctuation">&#123;</span>     <span class="token comment">//与output.assetModuleFilename是相同的,这个写法引入的时候也会添加好这个路径</span>     filename<span class="token operator">:</span> <span class="token string">'img/[name][hash:6].[ext]'</span><span class="token punctuation">,</span>     <span class="token comment">//打包后对资源的引入，文件命名已经有/img了</span>     publicPath<span class="token operator">:</span><span class="token string">'./'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>webpack5以上，使用file-loader时的配置:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|gif|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  use<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          limit<span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>          <span class="token comment">/*          name是文件名，也可以加个路径(img目录)，另外[name],则是图片原文件名[hash:8]则是生成一个随机8位hash数，防止图片重名，[ext]是原文件名的后缀          */</span>          name<span class="token operator">:</span><span class="token string">'img/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>          <span class="token comment">//输出路径，这里路径是：path(上面配置的dist目录)+outputPath+name路径</span>          <span class="token comment">// outputPath: './',  </span>          <span class="token comment">// publicPath: 'dist/'</span>          <span class="token comment">/*             在url-loader内部封装了file-loader而file-loader在新版本中esModule属性默认为 true,即默认使用ES模块语法导致了引用图片文件的方式和以前的版本不一样,引入路径改变了，自然找不到图片。           */</span>            esModule<span class="token operator">:</span> <span class="token boolean">false</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">/*      当在webpack 5中使用旧的assets loader(如file-loader/url-loader/raw-loader等)  和asset模块时，这可能会导致asset重复，所以你可能想阻止webpack5内置的asset模块的处理，      你可以通过将asset模块的类型设置为‘javascript/auto’来解决。   */</span>   type<span class="token operator">:</span> <span class="token string">'javascript/auto'</span><span class="token punctuation">&#125;</span></code></pre><p>如果你是webpack4或以下，你可以去除上面的esModule和type两个属性。</p></li><li><p>配置完毕后，要想让webpack认识这个图片是模块，就需要与入口函数联系起来，<br>当我们在css的属性中引用这张图片时，入口文件中只要引入css模块，则这张图片也会被当做模块。<br>下面，我们更改normal.css文件，背景换成这张图片</p><pre class="language-java" data-language="java"><code class="language-java">body<span class="token punctuation">&#123;</span>    <span class="token comment">/*background-color: aqua;*/</span>    background<span class="token operator">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"../img/2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>安装完loader，配置好webpack.config.js，引入完图片后，使用命令打包，<br>打包完毕后查看页面背景是否成功显示图片。</p></li></ul></li><li><p>配置es6转es5的loader<br>有些老版本浏览器可能不支持es6，所以，webpack可以通过配置loader，将es6转成es5，适配老版本浏览器</p><ul><li><p>使用npm安装babel-loader等依赖<br><code>npm install babel-loader@8.2.2 @babel/core@7.15.0 @babel/preset-env@7.15.0 --save-dev</code></p></li><li><p>配置webpack.config.js文件，配置完毕后，webpack在打包的过程中会将bundle.js文件中es6的语法换成es5的语法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>js$<span class="token operator">/</span><span class="token punctuation">,</span>    exclude<span class="token operator">:</span> <span class="token operator">/</span><span class="token punctuation">(</span>node_modules<span class="token operator">|</span>bower_components<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">,</span>    use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li></ul><blockquote><p><span id="g">webpack配置vue</span></p></blockquote><p>我们使用webpack工具，就是为了能够解决模块之间的依赖问题和使用打包功能，<br>来看看，如何使用webpack去管理vue吧</p><ul><li><p>npm安装vue依赖，并且配置webpack.config.js</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//安装vue依赖,vue依赖在项目打包后仍需要使用，所以是运行时依赖，没有-g则是本地安装</span>npm install vue<span class="token annotation punctuation">@2</span><span class="token number">.6</span><span class="token number">.14</span> <span class="token operator">--</span>save<span class="token comment">//配置webpack.config.js，在exports的对象上，加上resolve属性，具体如下</span>resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'vue$'</span><span class="token operator">:</span><span class="token string">'vue/dist/vue.esm.js'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>在入口文件(main.js)中，创建vue实例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//导入vue模块</span><span class="token keyword">import</span> <span class="token class-name">Vue</span> from <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> app  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>        message<span class="token operator">:</span><span class="token string">'万一'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在index.html页面中代码如下，打包完成后，打开浏览器就可以看到数据了。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>      <span class="token generics"><span class="token punctuation">&lt;</span>h3<span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"dist/bundle.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//一定要放在最后</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre></li></ul><blockquote><p><span id="h">vue配置项目别名</span></p></blockquote><p>当使用命令<code>vue create 项目名</code>或者<code>vue init webpack 项目名</code>创建项目名后，你可能需要给项目的目录配置<br>一些别名，这样在项目中使用路径时就不需要使用<code>../../../</code>这种方式，而是直接使用配置好的<code>views/xxx</code><br>或者<code>components/xxx</code>，如果在template中img的src中使用路径，需要加上<code>~</code>，例如：<code>~assets/xxx/xxx</code><br>别名配置，你需要在项目目录下创建vue.config.js，并在其中配置如下设置：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  configureWebpack<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/*配置项目路径别名*/</span>      alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'assets'</span><span class="token operator">:</span> <span class="token string">'@/assets'</span><span class="token punctuation">,</span>        <span class="token string">'common'</span><span class="token operator">:</span> <span class="token string">'@/common'</span><span class="token punctuation">,</span>        <span class="token string">'components'</span><span class="token operator">:</span> <span class="token string">'@/components'</span><span class="token punctuation">,</span>        <span class="token string">'network'</span><span class="token operator">:</span> <span class="token string">'@/network'</span><span class="token punctuation">,</span>        <span class="token string">'views'</span><span class="token operator">:</span> <span class="token string">'@/views'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><span id="i">vue中el与template的关系</span></p></blockquote><p>上面那种方式开发中并不会使用，例如并不会在index.html中的div中写任何代码,SPA页面，或者说单页面富应用<br>说的就是，一旦index.html页面确定下来了，就不会再更改，而是通过JS动态更换DOM元素的方式与用户交互<br>所以像上面例子div标签中的<code>&#123;&#123;message&#125;&#125;</code>，不会这样直接写，会写在组件的template中</p><p>当一个组件同时存在el属性和template属性时，template中的内容将会在页面渲染的时候替换el管理的div标签</p><pre class="language-markup" data-language="markup"><code class="language-markup">//例如：index.html如下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>//一定要放在最后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>//main.jsnew Vue(&#123;  el:'#app',  template:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>',  data:&#123;          message:'万一'      &#125;&#125;);当页面在渲染的时候，会将template的内容替换index.html中的div，所以实际显示下面这样<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>//一定要放在最后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>这部分内容属于vue的知识点，所以单独写出来。</p><blockquote><p><span id="j">vue的终极方案</span></p></blockquote><p>说了最初的在webpack中使用vue的方式，又说了el和template的关系，都是为了vue终极方案做铺垫<br>我们在这里将会对结合上面两种方式，看看实际开发中是怎么使用vue的。</p><ul><li><p>首先我们得有一个简单的index.html页面</p><pre class="language-markup" data-language="markup"><code class="language-markup">//根据上面例子，不难想象在main中肯定有vue实例的template替换掉这个div标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></li><li><p>在我们的main.js入口文件中，代码如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//vue终极方案</span><span class="token keyword">import</span> <span class="token class-name">Vue</span> from <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">wanyi</span> from <span class="token string">'./vue/wanyi'</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>  template<span class="token operator">:</span><span class="token string">'&lt;wanyi/>'</span><span class="token punctuation">,</span>      <span class="token comment">//template中的内容会替换html页面中的div</span>  components<span class="token operator">:</span><span class="token punctuation">&#123;</span>              <span class="token comment">//这里是根组件的子组件，相当于wanyi:wanyi，使用es6的变量增强写法</span>    wanyi  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>上面代码中，我们引入了<code>wanyi</code>组件，这是我们自定义的.vue文件，这个.vue文件可以包含template块<br>样式块，和script块，我们以后写组件都是这样写，html代码，样式，js代码都写在一个.vue文件中</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;button @click&#x3D;&quot;show&quot; class&#x3D;&quot;bt&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;&#x2F;&#x2F;默认导出对象，该对象是一个组件  name: &#39;wanyi&#39;,  data()&#123;    return&#123;      message:&#39;万一&#39;,    &#125;  &#125;,  methods:&#123;    show()&#123;      console.log(&#39;万一挑一，我是唯一&#39;);    &#125;  &#125;&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;.bt&#123;  color: blue;&#125;&lt;&#x2F;style&gt;</code></pre></li><li><p>.vue文件写完后，在main.js被作为模块导入，组件被挂载到vue实例中(根组件)，然后在template中使用组件标签，<br>最后会替换index.html页面中vue实例管理的div标签。现在我们还不能使用.vue作为模块，<br>因为webpack不认识这个文件，也不知道怎么解析该文件，所以我们还需要安装一些loader，<br>让webpack能够处理该.vue文件，就像不认识css文件，就安装相应的loader一样。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*安装vue-loader等依赖，注意vue-template-compiler版本要和vue版本一致并且vue-loader版本如果高了会需要你配置插件，如果低了打包的时候会报错(Cannot read property 'vue' of undefined)    报错的解决方法：如果项目中webpack升级到4^ 的话 升级下vue-loader到14^ 然后问题就没有了*/</span>npm install vue<span class="token operator">-</span>loader<span class="token annotation punctuation">@14</span><span class="token number">.2</span><span class="token number">.4</span> vue<span class="token operator">-</span>template<span class="token operator">-</span>compiler<span class="token annotation punctuation">@2</span><span class="token number">.6</span><span class="token number">.14</span> <span class="token operator">--</span>save<span class="token operator">-</span>dev<span class="token comment">//安装完loader，配置webpack.config.js</span><span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>vue$<span class="token operator">/</span><span class="token punctuation">,</span>    use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-loader'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>配置完毕后，打包后，在浏览器就可以看到效果。</p></li></ul><blockquote><p><span id="k">plugin的使用</span></p></blockquote><p>plugin，插件，通常是用于对某个现有的架构进行扩展webpack中的插件，<br>就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等<br><strong>loader和plugin区别</strong>：</p><ul><li>loader主要用于转换某些类型的模块，它是一个转换器，它操作的是文件，将文件A通过loader转换成文件B<br>是一个单纯的文件转换过程，例如less转css等</li><li>plugin是对webpack本身的扩展，是一个扩展器，丰富webpack本身，增强功能，针对的是在loader结束<br>之后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，监听webpack打包过程<br>中的某些节点，执行广泛的任务。</li></ul><p>plugin的使用过程    </p><ul><li>1)通过npm安装需要使用的plugin(某些webpack已经内置的插件不需要安装) </li><li>2)在webpack.config.js中的plugins中配置插件</li></ul><p><strong>几种常见的插件配置</strong></p><ul><li><p>配置添加版权的plugin，BannerPlugin<br>该插件作用是在打包后的bundle.js文件中第一行生成指定的版本信息<br>因为该插件是webpack内置的模块，所以在webpack.config.js中导入webpack模块<br>再配置默认导出对象，增加plugin属性，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">//plugin是导出对象的属性</span>    <span class="token keyword">new</span> webpack<span class="token punctuation">.</span><span class="token class-name">BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'最终版权归万一所有'</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>配置完毕后，重新打包文件，然后打开bundle.js，查看第一行，就会显示我们的版权</p></li><li><p>配置打包html的插件，html-webpack-plugin<br>目前我们的项目的index.html文件是在项目的根目录的，而实际上，我们的dist文件会放到服务器上运行，<br>但是打包后的dist中并没有我们的index.html文件，所以该插件可以根据指定模板(就是我们的项目根目录的index.html)<br>自动生成一个index.html文件，还可以将打包的js文件，自动通过script标签插入到新生成的body中。使用步骤如下：</p><ul><li><p>安装插件，<code>npm install html-webpack-plugin@5.3.2 --save-dev</code></p></li><li><p>配置webpack.config.js文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token function">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*        用于生成dist/index.html的模板，模板中并不需要写script标签引入bundle.js，        插件会自动引用,另外这里是模板路径，相对webpack.config.js路径.        我这里index.html和webpack.config.js在同一目录中，所以直接写文件名        */</span>        template<span class="token operator">:</span> <span class="token string">'index.html'</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">//有了该插件，我们的index.html中就不需要引入bundle.js，index.html如下,只有一个div</span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><p>配置好后，执行打包命令后，会根据根目录的index.html模板在dist中生成新的index.html    </p></li></ul></li><li><p>配置压缩JS文件的插件<br>通过配置可以在打包过程中压缩bundle.js，不过新版本webpack有个production模式，<br>以production模式运行webpack，会自动对bundle.js进行压缩。在package.json中配置</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token string">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack --mode development"</span><span class="token punctuation">,</span><span class="token string">"prod"</span><span class="token operator">:</span> <span class="token string">"webpack --mode production"</span></code></pre><p>如果是使用插件的方式进行压缩，使用步骤如下：</p><ul><li><p>安装插件：<code>npm install uglifyjs-webpack-plugin --save-dev</code></p></li><li><p>配置webpack.config.js</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">const</span> uglifyjsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span>plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">UglifyjsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//压缩bundle.js文件会导致你的版权插件失效，被删除掉。</span><span class="token punctuation">]</span></code></pre></li></ul></li></ul><blockquote><p><span id="l">搭建本地服务器(WDS)</span></p></blockquote><p>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，<br>可以实现我们想要的：让浏览器自动刷新显示我们修改之后的结果，这个功能，可以通过在webpack.config.js<br>返回的对象中配置一个watch属性实现，watch属性值为true时，当我们修改文件后，会自动打包我们的文件。</p><p>通过插件的方式配置本地服务器，步骤如下</p><ul><li><p>安装本地服务器依赖，webpack，webpack-cli，webpack-dev-server三个依赖之间版本有影响，不能随便安装<br><code>npm install --save-dev webpack-dev-server@4.0.0</code><br><strong>注意</strong>：如果安装失败，webpack5.0很可能安装失败，你就需要换种方式安装该依赖<br>打开项目的package.json，在devDependencies中增加<code>&quot;webpack-dev-server&quot;: &quot;^4.0.0&quot;</code><br>再在命令行执行：<code>npm install</code>，或者<code>npm install devDependencies</code>.</p></li><li><p>配置webpack.config.js，在导出对象中增加devServer属性</p><pre class="language-java" data-language="java"><code class="language-java">devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//表示为哪个文件夹提供本地服务，默认是根文件夹，相对webpack.config.js的路径</span>    contentBase<span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>      inline<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">//是否实时监听文件改动</span><span class="token punctuation">&#125;</span><span class="token comment">//webpack新版本可能是下面这种</span>devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//表示为哪个文件夹提供本地服务，默认是根文件夹，相对webpack.config.js的路径</span>    watchFiles<span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>    liveReload<span class="token operator">:</span><span class="token boolean">true</span>   <span class="token comment">//是否实时监听文件改动</span>  <span class="token punctuation">&#125;</span></code></pre></li><li><p>我们还需要配置package.json中的script，因为如果我们在项目根目录中执行启动本地服务器命令<code>webpack-dev-server</code><br>则实际上寻找的是全局安装的依赖，所以我们需要将命令配置在package.json中的script中，这样就会去<br>本项目的node_modules中寻找依赖。package.json中script配置如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack --mode development"</span><span class="token punctuation">,</span>    <span class="token string">"prod"</span><span class="token operator">:</span> <span class="token string">"webpack --mode development"</span><span class="token punctuation">,</span>    <span class="token string">"server"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --mode development --open"</span><span class="token comment">//--open表示本地服务器启动后，自动打开dits目录下的index.html页面</span><span class="token punctuation">&#125;</span></code></pre><p>配置好后，启动本地服务器：<code>npm run server</code>，当修改源文件后，不需要打包即可快速刷新结果<br>其并不更新dist文件，而是将修改的代码放在内存中，当多次修改完成后，关闭本地服务器，再打包即可。</p></li></ul><blockquote><p><span id="m">配置文件的分离</span></p></blockquote><p>配置文件的分离指的是，将原来webpack.config.js中的配置分开，开发的配置和生产的配置分开放。<br>本案例中，我们将webpack.config.js文件，分成三个文件，base.config.js，dev.config，prod.config.js<br>base.config.js文件内存放开发和生产模式中都需要的配置，而dev.config.js文件存放开发模式时需要的配置<br>prod.config.js存放生产模式时需要的配置，当开发的时候，我们使用base.config.js+dev.config.js文件，反之亦然<br>下面是配置文件分离步骤：</p><ul><li><p>首先在项目根目录创建config，并创建好这三个配置文件，在将各个配置写到分开写到这些配置文件之前<br>我们需要一个依赖，这个依赖帮助我们，将base.config.js与另外两个文件之间产生关联，也就是说，<br>当我们使用dev.config.js配置文件进行打包时，使用依赖，将base.config.js与dev.config.js中的配置进行合并<br>安装合并依赖：<code>npm install webpack-merge@5.8.0 --save-dev</code></p></li><li><p>安装好依赖后，我们需要在dev.config.js和prod.config.js中使用依赖，使得他们与base.config.js产生关联<br>下面是拆分后的三个配置文件的代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//base.config.js</span><span class="token comment">//因为全局安装中存在vue，所以可以直接导入vue的path模块</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Common.js语法导出</span><span class="token keyword">module</span><span class="token punctuation">.</span><span class="token keyword">exports</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment">//打包入口，相对于webpack.config.js，main.js所在的位置</span>  output<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*      path是出口路径，指要把打包后的文件放在哪里，__dirname是path模块的变量，表示当前文件的绝对路径      该变量表示当前webpack.config.js的绝对路径，resolve函数表示将两个路径进行自动拼接      所以整体意思就是打包后文件放在webpack.config.js同级的dist目录中     */</span>    path<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    <span class="token comment">//打包后的文件名</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">//css的loader</span>        test<span class="token operator">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>css$<span class="token operator">/</span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span> <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token comment">//less的loader</span>        test<span class="token operator">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>less$<span class="token operator">/</span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>          loader<span class="token operator">:</span> <span class="token string">"style-loader"</span> <span class="token comment">// creates style nodes from JS strings</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>          loader<span class="token operator">:</span> <span class="token string">"css-loader"</span> <span class="token comment">// translates CSS into CommonJS</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>          loader<span class="token operator">:</span> <span class="token string">"less-loader"</span> <span class="token comment">// compiles Less to CSS</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token comment">//文件上传的loader</span>        test<span class="token operator">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>png<span class="token operator">|</span>jpg<span class="token operator">|</span>gif<span class="token operator">|</span>jpeg<span class="token punctuation">)</span>$<span class="token operator">/</span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            loader<span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              limit<span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>              name<span class="token operator">:</span><span class="token string">'img/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span>              <span class="token comment">// outputPath: './', //输出路径，这里路径是：path(上面的)+outputPath+name路径</span>              <span class="token comment">// publicPath: 'dist/'</span>              <span class="token comment">/*                在url-loader内部封装了file-loader而file-loader在新版本中esModule属性默认为true            即默认使用ES模块语法导致了引用图片文件的方式和以前的版本不一样,引入路径改变了，自然找不到图片。              */</span>              esModule<span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">/*          当在webpack 5中使用旧的assets loader（如 file-loader/url-loader/raw-loader等）  和asset模块时，这可能会导致asset重复，所以你可能想阻止webpack 5内置的asset模块的处理，  你可以通过将asset模块的类型设置为‘javascript/auto’来解决。         */</span>        type<span class="token operator">:</span> <span class="token string">'javascript/auto'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token comment">//es6转es5的loader</span>        test<span class="token operator">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>js$<span class="token operator">/</span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span> <span class="token operator">/</span><span class="token punctuation">(</span>node_modules<span class="token operator">|</span>bower_components<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>          options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token comment">//vue-loader</span>        test<span class="token operator">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>vue$<span class="token operator">/</span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//vue配置</span>    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">'vue$'</span><span class="token operator">:</span><span class="token string">'vue/dist/vue.esm.js'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token function">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">/*        用于生成dist/index.html的模板，模板中并不需要写script标签引入bundle.js，        插件会自动引用      */</span>      template<span class="token operator">:</span> <span class="token string">'index.html'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// mode: 'development', //设置webpack模式</span>  <span class="token comment">// watch: true  // 监听文件改动并自动打包</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//dev.config.js</span>let webpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>let base <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./base.config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">module</span><span class="token punctuation">.</span><span class="token keyword">exports</span> <span class="token operator">=</span> webpackMerge<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token comment">//本地服务器的配置</span>  devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    watchFiles<span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>  <span class="token comment">//表示为哪个文件夹提供本地服务，默认是根文件夹，相对webpack.config.js的路径</span>    liveReload<span class="token operator">:</span><span class="token boolean">true</span>   <span class="token comment">//是否实时监听文件改动</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//prod.config.js</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>let webpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>let base <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./base.config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">module</span><span class="token punctuation">.</span><span class="token keyword">exports</span> <span class="token operator">=</span> webpackMerge<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> webpack<span class="token punctuation">.</span><span class="token class-name">BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'最终版权归万一所有'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将原来的webpack.config.js文件区分开后，我们需要更改base.config.js文件中的出口路径，<br>将原来出口路径中的<code>./dist</code>改成<code>../dist</code>，因为我们此时的配置文件在项目根路径下的config目录中，而dist目录在外层目录。</p><pre class="language-java" data-language="java"><code class="language-java">output<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*      path是出口路径，指要把打包后的文件放在哪里，__dirname是path模块的变量，表示当前文件的绝对路径      该变量表示当前webpack.config.js的绝对路径，resolve函数表示将两个路径进行自动拼接      所以整体意思就是打包后文件放在webpack.config.js同级的dist目录中     */</span>    path<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    <span class="token comment">//打包后的文件名</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>最后，我们需要修改package.json文件中的script，因为如果是原来的配置，则webpack会寻找webpack.config.js文件<br>这个文件是webpack的默认配置文件名，而我们现在已经不使用这个配置文件了，我们需要在执行打包命令上<br>使用自己的配置文件名，下面是更改后的package.json中的script，更改后，执行打包命令即可看到效果。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack --mode development --config ./config/dev.config.js"</span><span class="token punctuation">,</span>    <span class="token property">"prod"</span><span class="token operator">:</span> <span class="token string">"webpack --mode development --config ./config/prod.config.js"</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --mode development --open --config ./config/dev.config.js"</span><span class="token punctuation">&#125;</span></code></pre></li></ul><blockquote><p><span id="n">完结</span></p></blockquote><p>上面是目前学习的webpack的全部内容，本次实验的代码，已经上传至github，有需要可以查看，<a href="https://github.com/NicknamedCoco/Practice/tree/main/Practice9">查看案例代码</a><br>写完这篇，下一步就是继续看vue视频了，10月份之前一定看完vue网课！<br>下面是一些大佬文章：</p><ul><li><a href="http://www.woc12138.com/article/45">Webpack入门-学习总结</a></li><li><a href="https://blog.csdn.net/lin_fightin/article/details/115048424">webpack系列教程</a></li><li><a href="https://blog.csdn.net/wu_xianqiang/article/details/117171900">webpack5不要再用url-loader了</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之RestTemplate</title>
      <link href="2021/08/09/SpringBoot%E4%B9%8BRestTemplate/"/>
      <url>2021/08/09/SpringBoot%E4%B9%8BRestTemplate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>访问外部接口的几种方式</p></blockquote><p>访问外部接口指的是：使用代码发出Http请求，访问外部资源。</p><ul><li>使用SpringBoot的RestTemplate</li><li>使用SpringCloud的Feign</li><li>使用Spring WebFlux的WebClient</li></ul><p>由于本人菜鸟一个，这三种方式的联系与差别并未深究，只知道RestTemplate是同步阻塞式模型<br>WebClient是异步回调式模型，同步阻塞意味着程序会一直等待请求响应，可能会对运行速度有影响。<br>本篇博客只介绍RestTemplate，其他两个方式的学习留作以后摸索。</p><blockquote><p>RestTemplate的使用</p></blockquote><p>RestTemplate依赖在Web场景启动器中，所以无需导入maven依赖</p><ul><li><p><strong>RestTemplate的构建方式</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*      使用RestTemplateBuilder构建RestTemplate，可以定制化一些内容，拦截器，消息转换器等      .setConnectTimeout()，指的是http建立连接阶段，即允许的最大握手时间      .setReadTimeout()，指的是设置读超时时间      .rootUri()，指的是如果发送的请求不是以http开头，则请求地址会自动带上rootUri根路径      最后build()返回RestTemplate，记得好像是使用了建造者模式。    */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token class-name">RestTemplateBuilder</span> builder<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span>             builder<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">rootUri</span><span class="token punctuation">(</span><span class="token string">"http://api.example.com/"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*      第二种方式是直接使用RestTemplate对象，使用默认设置。      两种方式任选一种。    */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>RestTemplate中的方法使用</strong><br>因为RestTemplate类是为调用REST服务而设计的，所以它的主要方法与REST的请求方式紧密相连<br>下图是rest请求方式对应的RestTemplate中方法<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/restTemplate/restTemplate.png" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java">这次主要讲<span class="token class-name">Get</span>，<span class="token class-name">Post</span>请求方式对应的<span class="token class-name">RestTemplate</span>中的方法，再加上exchange方法<span class="token class-name">Get</span>请求  <span class="token number">1</span><span class="token punctuation">)</span>getForEntity方法<span class="token punctuation">,</span>三个重载方法，之后的每个方法都有三个重载方法 <span class="token comment">/* 参数1：String类型或URI类型的请求地址        参数2：指定返回的实体类型，class对象        参数3：uri参数，可以是变长数组或map     返回值：ResponseEntity&lt;T>是Spring对HTTP响应的封装，包括了几个重要的元素，如响应码、contentType、contentLength、response header信息，response body信息等 */</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> getForEntity<span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> getForEntity<span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> uriVariables<span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token class-name">URI</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">)</span>     案例：    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> responseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span>getForEntity<span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/getbook?bookname=&#123;1&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//响应体转换为Book类型</span>        <span class="token class-name">Book</span> book <span class="token operator">=</span> responseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取响应状态码</span>        <span class="token keyword">int</span> statusCodeValue <span class="token operator">=</span> responseEntity<span class="token punctuation">.</span><span class="token function">getStatusCodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取响应头信息</span>        <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> responseEntity<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">2</span><span class="token punctuation">)</span>getForObject方法     <span class="token comment">/*     参数1：String类型或URI类型的请求地址        参数2：指定返回的实体类型，class对象        参数3：uri参数，可以是变长数组或map        返回值：responseType指定的Object类型     */</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> getForObject<span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> getForObject<span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> uriVariables<span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token class-name">URI</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">)</span> 案例：        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bookname"</span><span class="token punctuation">,</span> <span class="token string">"大主宰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Book</span> book <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/getbook?bookname=&#123;bookname&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Post</span>请求  <span class="token number">1</span><span class="token punctuation">)</span>postForEntity方法     <span class="token comment">/*     参数1：同getForEntity方法        参数2：请求body，可以是HttpEntity类型(可设置request header)，或其它Object类型        参数3：同getForEntity方法        参数4：同getForEntity方法        返回值：同getForEntity方法     */</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> postForEntity<span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Object</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> postForEntity<span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Object</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> uriVariables<span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">postForEntity</span><span class="token punctuation">(</span><span class="token class-name">URI</span> url<span class="token punctuation">,</span> <span class="token class-name">Object</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">)</span>     案例：    <span class="token comment">//参数是Book类型，返回值是ResponseEntity&lt;Book>类型</span><span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> responseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span>postForEntity<span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/updateBook"</span><span class="token punctuation">,</span> book<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> book <span class="token operator">=</span> responseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> statusCodeValue <span class="token operator">=</span> responseEntity<span class="token punctuation">.</span><span class="token function">getStatusCodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> responseEntity<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  案例<span class="token number">2</span>：        <span class="token comment">//post方法获取List数据</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductTypeVO</span><span class="token punctuation">></span></span> voList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ProductTypeVO</span><span class="token punctuation">[</span><span class="token punctuation">]</span> responseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span>postForObject        <span class="token punctuation">(</span>url<span class="token punctuation">,</span>entity<span class="token punctuation">,</span><span class="token class-name">ProductTypeVO</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> responseEntity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            voList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>responseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token number">2</span><span class="token punctuation">)</span>postForObject方法     <span class="token comment">/*     参数1：同getForObject方法     参数2：请求body，可以是HttpEntity类型(可设置request header)，或其它Object类型     参数3：同getForObject方法        参数4：同getForObject方法        返回值：同getForObject方法     */</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> postForObject<span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Object</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> postForObject<span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Object</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> uriVariables<span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token class-name">URI</span> url<span class="token punctuation">,</span> <span class="token class-name">Object</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">)</span> 案例：      <span class="token comment">//参数是Book类型，返回值也是Book类型</span><span class="token class-name">Book</span> book <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/updatebook"</span><span class="token punctuation">,</span> book<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Exchange</span>方法  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> requestEntity<span class="token punctuation">,</span> <span class="token class-name">ParameterizedTypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> requestEntity<span class="token punctuation">,</span> <span class="token class-name">ParameterizedTypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> uriVariables<span class="token punctuation">)</span>  <span class="token number">1</span><span class="token punctuation">)</span>可以支持多种<span class="token class-name">Http</span>方法，只需要在参数中指定即可  <span class="token number">2</span><span class="token punctuation">)</span>可以在请求中增加header和body信息，返回类型是<span class="token class-name">ResponseEntity</span>，可以从中获取响应的状态码，header和body等信息    案例：    <span class="token class-name">HttpHeaders</span> requestHeaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    requestHeaders<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"MyRequestHeader"</span><span class="token punctuation">,</span> <span class="token string">"MyValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理可以设置请求头，还可以设置请求体body,HttpEntity中类型为MultiValueMap&lt;String, String></span>    <span class="token class-name">HttpEntity</span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token punctuation">(</span>requestHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>       <span class="token string">"http://example.com/hotels/&#123;hotel&#125;"</span><span class="token punctuation">,</span>        <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span>             requestEntity<span class="token punctuation">,</span>         <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"42"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//响应头信息</span>    <span class="token class-name">String</span> responseHeader <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"MyResponseHeader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取响应体数据</span><span class="token class-name">String</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>Execute方法说明</strong><br>这个方法要单独拿出来讲，我们可以看restTemplate类发现，get，post，exchange等方法内部都会调用<br>execute方法，而在该方法内部仅仅将String类型的URI转为java.net.URI类型后就调用了doExecute方法<br>所以doExecute方法才是关键所在，下图是发出http请求的大概过程。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/restTemplate/restTemplate2.png" loading="lazy"></p><p>然后在该方法中需要关注RequestCallback 和 ResponseExtractor两个类，这两个类作用有点复杂，<br>我也不太懂就不瞎写了，以后有需要再去了解。</p></li><li><p><strong>ClientHttpRequestFactory接口</strong><br>它是个函数式接口，用于根据<code>URI</code>和<code>HttpMethod</code>创建出一个<code>ClientHttpRequest</code>来发送请求ClientHttpRequest它代表请求的客户端，该接口继承自HttpRequest、HttpOutputMessage，只有一个<code>public ClientHttpResponse execute() throws IOException</code>方法。<br>其中Netty、HttpComponents、OkHttp3，HttpUrlConnection对它都有实现<br>只要调用该接口实现类的execute()就能发送rest请求了。<br>默认情况下，我们使用的是SimpleClientHttpRequestFactory，使用的是JDK内置的<code>java.net.URLConnection</code>作为client客户端。<br>这部分对我来说还是太晦涩，暂时先不看，知道有这个接口就行，如果想指定某个该接口的实现类<br>可以使用相应的构造函数创建RestTemplate，或者通过RestTemplateBuilder设置指定的工厂。</p></li><li><p><strong>配置RestTemplate的自定义拦截器</strong></p><ul><li><p>注册拦截器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token class-name">RestTemplateBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> builder            <span class="token punctuation">.</span><span class="token function">additionalInterceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestResponseLoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>创建自定义拦截器，需要实现ClientHttpRequestInterceptor接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestResponseLoggingInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ClientHttpRequestInterceptor</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ClientHttpResponse</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">,</span> <span class="token class-name">ClientHttpRequestExecution</span> execution<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token function">logRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClientHttpResponse</span> response <span class="token operator">=</span> execution<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">logResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Add optional additional headers</span>        response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"headerName"</span><span class="token punctuation">,</span> <span class="token string">"VALUE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">logRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"=========request begin========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"URI         : &#123;&#125;"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Method      : &#123;&#125;"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Headers     : &#123;&#125;"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Request body: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"=========request end========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">logResponse</span><span class="token punctuation">(</span><span class="token class-name">ClientHttpResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"=========response begin========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Status code  : &#123;&#125;"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Status text  : &#123;&#125;"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getStatusText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Headers      : &#123;&#125;"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Response body: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span>copyToString<span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"=========response end========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p><strong>参考链接</strong></p><ul><li><a href="https://www.jianshu.com/p/0fd5f3f64137">https://www.jianshu.com/p/0fd5f3f64137</a></li><li><a href="https://www.cnblogs.com/f-anything/p/10084215.html">https://www.cnblogs.com/f-anything/p/10084215.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/31681913">https://zhuanlan.zhihu.com/p/31681913</a></li><li><a href="https://www.jianshu.com/p/35aca2e31f06">https://www.jianshu.com/p/35aca2e31f06</a></li><li><a href="https://blog.csdn.net/f641385712/article/details/100713622">https://blog.csdn.net/f641385712/article/details/100713622</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之配置定时任务</title>
      <link href="2021/08/06/SpringBoot%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>2021/08/06/SpringBoot%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>定时任务：指的是应用程序在指定的时间执行预先定义好的程序片段</p></blockquote><p>使用SpringBoot创建定时任务，有以下三种创建方式</p><ul><li>基于注解(@Scheduled)</li><li>基于接口(SchedulingConfigurer)<br>基于接口创建的定时器可以动态的从数据库中读取指定时间来动态执行定时任务</li><li>基于注解创建多线程定时任务</li></ul><blockquote><p>静态：基于注解</p></blockquote><p>只需要创建定时任务配置类即可</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>      <span class="token comment">//1.主要用于标记配置类，兼备Component的效果。</span><span class="token annotation punctuation">@EnableScheduling</span>   <span class="token comment">//2.开启定时任务</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//指定定时任务在哪个包或者哪个类有效</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticScheduleTaskConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//3.添加定时任务</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span>    <span class="token comment">//或直接指定时间间隔，例如：5秒</span>    <span class="token comment">//@Scheduled(fixedRate=5000)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行静态定时任务时间: "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>@Scheduled注解标注的方法，表示该方法是定时任务方法，该注解中可以填：<br><strong>Cron表达式</strong>，该表达式表示按照什么规则去执行定时任务，例如以下规则</p><pre class="language-none"><code class="language-none">&quot;*&#x2F;5 * * * * ?&quot;，表示每5秒执行一次任务&quot;0 *&#x2F;1 * * * ?&quot;，表示每隔1分钟执行一次&quot;0 0 23 * * ?&quot;，表示每天23点执行一次&quot;0 0 1 * * ?&quot;，表示每天凌晨1点执行一次&quot;0 0 1 1 * ?&quot;，表示每月1号凌晨1点执行一次&quot;0 0 23 L * ?&quot;，表示每月最后一天23点执行一次&quot;0 0 1 ? * L&quot;，表示每周星期天凌晨1点实行一次&quot;0 26,29,33 * * * ?&quot;，表示在26分、29分、33分执行一次&quot;0 0 0,13,18,21 * * ?&quot;，表示每天的0点、13点、18点、21点都执行一次规则是：每个*分别表示：秒(0-59),分(0-59),时(0-23),日(0-31)的某天,月(0-11),周几(1-7)每个*的位置可以填具体值，或者以下符号：*：所有值都匹配    ?：无所谓，不关心，通常放在“周几”里    ,：或者    &#x2F;：增量值    -：区间值得注意的是，&#x2F;表示增量值，例如：&quot;*&#x2F;10 * * * * *&quot;，表示每10秒&quot;0 5&#x2F;15 * * * *&quot;，表示每小时的5分、20分、35分、50分</code></pre><p>@Scheduled注解除了可以填Corn表达式，还可以使用<strong>fixedRate</strong>和<strong>fixedDelay</strong>两个属性</p><ul><li>fixedDelay设置的是：上一个任务结束后多久执行下一个任务</li><li>fixedRate设置的是：上一个任务的开始到下一个任务开始时间的间隔</li></ul><p><strong>注意</strong>：如果是强调任务间隔的定时任务，建议使用fixedRate和fixedDelay，<br>如果是强调任务在某时某分某刻执行的定时任务，建议使用Cron表达式。</p><p>另外，基于注解@Scheduled默认为单线程，开启多个任务时，任务的执行时机会受上一个任务执行时间的影响。<br>什么意思呢？让我们来看个例子。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>      <span class="token annotation punctuation">@EnableScheduling</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticScheduleTaskConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0/1 * * * * ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test1---执行静态定时任务时间: "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0/1 * * * * ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test2---执行静态定时任务时间: "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*理论上应该每2秒同时执行test1和test2方法，两个定时任务同步执行，应该输出下面这种：Test1---执行静态定时任务时间: 2021-08-06T16:51:46.013    Test2---执行静态定时任务时间: 2021-08-06T16:51:46.026    Test1---执行静态定时任务时间: 2021-08-06T16:51:48.038    Test2---执行静态定时任务时间: 2021-08-06T16:51:48.052    而实际上是输出下面：    Test1---执行静态定时任务时间: 2021-08-06T16:51:46.013    Test2---执行静态定时任务时间: 2021-08-06T16:51:48.026    Test1---执行静态定时任务时间: 2021-08-06T16:51:50.038    Test2---执行静态定时任务时间: 2021-08-06T16:51:52.052    Test1---执行静态定时任务时间: 2021-08-06T16:51:54.065        可以看到，定时任务是交替执行的，因为是单线程，同一时间只会执行一个定时任务。    那么如果实现多个定时任务同时执行呢？请看第三种方式创建的定时任务。*/</span></code></pre><blockquote><p>动态：基于接口</p></blockquote><p>动态指的是执行时间不是写死的，而是从数据库中读取到的，当我们修改数据库的时间时，<br>我们的定时任务不需要重启便可更改定时时间。</p><ul><li><p>导入mysql，mybatis依赖</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>parent<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.0</span><span class="token number">.4</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>添加<span class="token class-name">Web</span>依赖 <span class="token operator">--</span><span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>添加<span class="token class-name">MySql</span>依赖 <span class="token operator">--</span><span class="token operator">></span>         <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>添加<span class="token class-name">Mybatis</span>依赖 配置mybatis的一些初始化的东西<span class="token operator">--</span><span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>mybatis<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.3</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加mybatis依赖 <span class="token operator">--</span><span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">3.4</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">></span></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre></li><li><p>创建数据库，表</p><pre class="language-none"><code class="language-none">DROP DATABASE IF EXISTS &#96;socks&#96;;CREATE DATABASE &#96;socks&#96;;USE &#96;SOCKS&#96;;DROP TABLE IF EXISTS &#96;cron&#96;;CREATE TABLE &#96;cron&#96;  (  &#96;cron_id&#96; varchar(30) NOT NULL PRIMARY KEY,  &#96;cron&#96; varchar(30) NOT NULL  );INSERT INTO &#96;cron&#96; VALUES (&#39;1&#39;, &#39;0&#x2F;5 * * * * ?&#39;);</code></pre></li><li><p>配置数据源之类的就不写了，创建定时任务配置类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>      <span class="token comment">//1.主要用于标记配置类，兼备Component的效果。</span><span class="token annotation punctuation">@EnableScheduling</span>   <span class="token comment">// 2.开启定时任务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicScheduleTask</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulingConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Mapper</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CronMapper</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select cron from cron limit 1"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token comment">//注入mapper</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>    <span class="token class-name">CronMapper</span> cronMapper<span class="token punctuation">;</span>    <span class="token comment">/**     * 执行定时任务.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span><span class="token class-name">ScheduledTaskRegistrar</span> taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        taskRegistrar<span class="token punctuation">.</span><span class="token function">addTriggerTask</span><span class="token punctuation">(</span>                <span class="token comment">//1.添加任务内容(Runnable)</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行动态定时任务: "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">//2.设置执行周期(Trigger)</span>                triggerContext <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//2.1 从数据库获取执行周期</span>                    <span class="token class-name">String</span> cron <span class="token operator">=</span> cronMapper<span class="token punctuation">.</span><span class="token function">getCron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//2.2 合法性校验.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// Omitted Code ..</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">//2.3 返回执行周期(Date)</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextExecutionTime</span><span class="token punctuation">(</span>triggerContext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>写好定时任务配置类后，启动程序运行即可触发定时任务。</p></li></ul><blockquote><p>多线程定时任务</p></blockquote><p>基于注解设定多线程定时任务</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>      <span class="token comment">//1.主要用于标记配置类，兼备Component的效果。</span><span class="token annotation punctuation">@EnableScheduling</span>   <span class="token comment">//2.开启定时任务</span><span class="token annotation punctuation">@EnableAsync</span><span class="token annotation punctuation">@Async</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//指定定时任务在哪个包或者哪个类有效</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticScheduleTaskConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//3.添加定时任务</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0/1 * * * * ?"</span><span class="token punctuation">)</span>    <span class="token comment">//或直接指定时间间隔，例如：5秒</span>    <span class="token comment">//@Scheduled(fixedRate=5000)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test1---执行静态定时任务时间: "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0/1 * * * * ?"</span><span class="token punctuation">)</span>    <span class="token comment">//或直接指定时间间隔，例如：5秒</span>    <span class="token comment">//@Scheduled(fixedRate=5000)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test2---执行静态定时任务时间: "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>可以看到只需添加<span class="token annotation punctuation">@EnableAsync</span>和<span class="token annotation punctuation">@Async</span>注解即可实现多线程运行定时任务，当然<span class="token annotation punctuation">@Async</span>注解也可以标注在方法上，标注在类上表示类中所有定时任务都是多线程运行。上面的案例，运行结果如下：    <span class="token class-name">Test1</span><span class="token operator">--</span><span class="token operator">-</span>执行静态定时任务时间<span class="token operator">:</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">06</span>T17<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">11.001</span>    <span class="token class-name">Test2</span><span class="token operator">--</span><span class="token operator">-</span>执行静态定时任务时间<span class="token operator">:</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">06</span>T17<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">11.002</span>    <span class="token class-name">Test2</span><span class="token operator">--</span><span class="token operator">-</span>执行静态定时任务时间<span class="token operator">:</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">06</span>T17<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">12.001</span>    <span class="token class-name">Test1</span><span class="token operator">--</span><span class="token operator">-</span>执行静态定时任务时间<span class="token operator">:</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">06</span>T17<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">12.001</span>    <span class="token class-name">Test2</span><span class="token operator">--</span><span class="token operator">-</span>执行静态定时任务时间<span class="token operator">:</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">06</span>T17<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">13.016</span>    <span class="token class-name">Test1</span><span class="token operator">--</span><span class="token operator">-</span>执行静态定时任务时间<span class="token operator">:</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">06</span>T17<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">13.016</span>可以看到，第一个定时任务和第二个定时任务互不影响。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的原型继承</title>
      <link href="2021/08/04/JS%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/"/>
      <url>2021/08/04/JS%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>概况</p></blockquote><p>我觉得学JS没看过廖雪峰的网站教程就不算入门，嘿嘿</p><p>这篇博客主要写关于JS中原型继承注意点，怕以后忘记，哦不，以后肯定要忘记~</p><blockquote><p> 原型继承</p></blockquote><p>JS中的原型继承直接看廖雪峰老师的这篇教程，<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023021997355072">原型继承</a>，顺便看看Class继承。</p><p>然后要说的是原型继承的两种方式(只会这2种)</p><ul><li>第一种就是廖雪峰老师的例子，使用空函数F来实现原型继承</li><li>第二种是<code>child.prototype=Object.create(parents.prototype)</code></li></ul><blockquote><p>注意点</p></blockquote><ul><li><p>在廖雪峰老师的案例中，注意一下这两行代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:</span><span class="token class-name">PrimaryStudent</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把PrimaryStudent原型的构造函数修复为PrimaryStudent:</span><span class="token class-name">PrimaryStudent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> PrimaryStudent<span class="token punctuation">;</span><span class="token class-name">第一行代码含义好理解，PrimaryStudent</span><span class="token punctuation">.</span>prototype原型对象指向<span class="token constant">F</span>构造函数的一个实例<span class="token class-name">这行代码会导致PrimaryStudent</span><span class="token punctuation">.</span>prototype原型对象的constructor属性指向<span class="token constant">F</span>构造函数。又因为PrimaryStudent构造函数的实例对象的constructor属性是指向该实例对象的原型对象的constructor属性即如果 <span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrimaryStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>在执行完第一行代码后，则，xiaoming<span class="token punctuation">.</span>constructor<span class="token operator">===</span><span class="token class-name">PrimaryStudent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span><span class="token constant">F</span><span class="token punctuation">,</span>这显然不合常理因为xiaoming是PrimaryStudent构造函数创建的实例，并不是<span class="token constant">F</span>构造函数创建的实例所以第二行代码就使得xiaoming实例对象的constructor属性重新指向了PrimaryStudent。</code></pre></li><li><p>其次需要注意的是为什么要使用F这个空函数，而不直接<code>PrimaryStudent.prototype=new Student()</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">PrimaryStudent</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这条语句看起来，使得原型链为，xiaoming<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>PrimaryStudent<span class="token punctuation">.</span>protorype<span class="token operator">===</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype等等但是会有一些问题，该代码会使得PrimaryStudent的实例对象继承到Student的实例对象的属性或方法。例如：<span class="token class-name">假设PrimaryStudent</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrimaryStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>则xiaoming就会有Student实例的name属性值，但我们并不需要该属性值，我们希望我们继承的属性或方法    <span class="token class-name">来自Student</span><span class="token punctuation">.</span>prototype原型对象的，而不是Student的实例对象。</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的原型链</title>
      <link href="2021/08/03/JS%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>2021/08/03/JS%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>JS中的原型链</p></blockquote><p>在java中，子类继承父类，可以共享父类中的各种属性和方法，又像一个类中的静态变量和静态方法一样<br>共享给类的所有实例使用，在JS中就是通过原型链的方式使得对象之间共享同一个属性和方法。</p><blockquote><p>什么是原型对象</p></blockquote><p>原型对象是原型链的组成部分，多个原型对象之间链接在一起就像一条链条一样，所以叫原型链，<br>我们都知道，一个对象都是由其上层的构造函数创建出来的，构造函数与普通函数没什么不同，<br>只不过使用new关键字调用，即可返回该构造函数的实例对象，一个构造函数当然可以创建多个实例对象<br>这些对象之间就是通过他们的原型对象实现属性和方法共享的，当然，这些对象的原型对象是同一个对象才<br>能实现共享，所以原型对象就是使得所有由构造函数创建出来的实例对象可以实现属性和方法共享的对象。<br>所有实例对象都可以通过<code>__proto__</code>属性访问到它们自身的原型对象。这个属性每一个对象都有，<br>都说函数也是对象，所有函数中也有该属性。</p><blockquote><p>prototype属性</p></blockquote><p>原型链中搞懂三个属性及其之间的关系，就能搞懂原型链，<code>__proto__</code>属性，<code>prototype</code>属性，<br><code>constractor</code>属性，现在说说prototype属性，这个属性是构造函数独有的，其他两个属性，对象和构造函数都有<br>构造函数的prototype属性是一个对象，该对象就是原型对象，这个对象中的属性和方法共享给由该构造函数<br>所创建出来的所有实例对象使用。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Person <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    name<span class="token operator">=</span><span class="token string">"万一"</span><span class="token punctuation">;</span>    age<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这段代码中，我们知道Person是构造函数，也是一个对象，它有prototype属性，也有__proto__，constructor属性，它的prototype属性是一个原型对象，我们在该原型对象中添加了say方法，所以a<span class="token punctuation">,</span>b这些由构造函数创建出来的实例对象共享该say方法。<span class="token class-name">其次，函数是对象，但对象并不一定是函数，所以Person</span><span class="token punctuation">.</span>prototype原型对象，a<span class="token punctuation">,</span>b实例对象只有__proto__，constructor属性，没有prototype属性。</code></pre><p>从上面例子，我们知道a，b这些实例对象的原型对象是<code>Person.prototype</code>，那<code>Person.prototype</code>原型对象<br>有没有可能是别人的实例对象呢？当然有！<code>Person.prototype</code>对象是Object构造函数所创建的，<br>所以<code>Person.prototype</code>的原型对象是<code>Object.prototype</code>，再进一步，<code>Object.prototype</code>原型对象是谁呢？<br>JavaScript创始人说，你还来劲了是吧，所以规定，<code>Object.prototype</code>的原型对象是null.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ok，我们总结一下，当我们的实例对象获取一个属性或方法时，它会先从自身的构造函数中寻找，看看自己有没有定义该属性和方法，如果有直接返回，如果没有则去该实例对象的原型对象中寻找，看看原型对象中有没有该属性，如果有则返回，如果没有则继续往上寻找，这样一层层寻找，是不是像一条链条一样？这就是原型链的概念，为什么我们没有定义toString方法，实例对象还是有呢<span class="token operator">?</span>就是我们上面的原型对象定义好了。</code></pre><p>最后的最后，看看prototype的样例图吧<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/javascript/prototype图.png" alt="prototype" style="zoom:80%;" / loading="lazy"></p><p>可以看到，prototype是函数独有的属性，Parent构造函数的属性就是<code>Parent.prototype</code>原型对象<br>从上文我们知道，如果查找需要的属性，实例对象先查看自己构造函数中有没有对应的属性和方法<br>如果找不到就去该实例的原型对象中找，问题来了，实例对象是怎么跟它的原型对象有联系的呢？</p><blockquote><p><code>__proto__</code>属性</p></blockquote><p>上文提到过，每个对象都有<code>__proto__</code>属性，函数也是对象，所以函数中也有该属性，通过这个属性<br>我们的实例对象可以访问到它的原型对象，即按照上图例子，我们可以得到以下结论</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">p1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token comment">//true</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token comment">//true</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token keyword">null</span><span class="token comment">//true</span><span class="token comment">//因为函数也是对象，任何一个函数或者说对象，都是Function构造函数创建出来的，</span><span class="token comment">//所以任何函数的原型对象都是Function.prototype</span>Parent<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token comment">//true</span>Object<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token comment">//true</span></code></pre><p>通过<code>__proto__</code>属性，我们的实例对象就可以找到它的原型对象，就是这么简单。下面再看一张图片吧<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/javascript/proto图.png" alt="prototype" style="zoom:80%;" / loading="lazy"></p><p>从图中可以看到，<code>Parent.prototype</code>和<code>Function.prototype</code>是同一级别，所以，<code>Parent.prototype</code>，<br><code>Function.prototype</code>这些对象由Object()创建，也就是Object实例对象<br>所以这些对象的原型对象就是<code>Object.prototype</code>，即这些对象可以通过<code>__proto__</code>属性访问到<br><code>Object.prototype</code>。</p><blockquote><p>constructor属性</p></blockquote><p>任何对象都有该属性，函数也有，这个属性指向该对象的构造函数，所以我们有以下结论</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">p1<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Parent<span class="token comment">//true</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Parent<span class="token comment">//true</span><span class="token comment">//函数也是对象</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>constructor<span class="token operator">===</span>Function<span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">Object</span><span class="token punctuation">.</span>constructor<span class="token operator">===</span>Function<span class="token punctuation">;</span><span class="token comment">//true</span></code></pre><p>Function构造函数也是一个对象，它的constructor属性指向的是它自己，如下图所示<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/javascript/constructor图.png" alt="prototype" style="zoom:80%;" / loading="lazy"></p><blockquote><p>总结</p></blockquote><p>prototype属性，由函数指向原型对象，该属性函数独有<br><code>__proto__</code>属性，由实例对象指向自己的原型对象，函数和对象都有<br>constructor属性，由对象指向自己的构造函数，函数和对象都有</p><p>原型链复杂在于，什么时候区分函数和对象，一个对象，可以是构造函数，可以是别人的原型对象<br>也可以是另一个人的实例对象，一个人是你的爸爸，也可以是别人的儿子。大道至简呐，战术后仰~</p><p>最后看两张图，好好揣摩一下吧。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/javascript/原型链图.png" alt="prototype" style="zoom:80%;" / loading="lazy"></p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/javascript/原型链图2.png" alt="prototype" style="zoom:80%;" / loading="lazy">]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解IDEA记录</title>
      <link href="2021/07/26/%E7%A0%B4%E8%A7%A3IDEA%E8%AE%B0%E5%BD%95/"/>
      <url>2021/07/26/%E7%A0%B4%E8%A7%A3IDEA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>记录下破解IDEA系列产品，防止以后忘记</p></blockquote><p>一直都是破解IDEA，但之前都是破解一段时间后又要重新破解，而这次破解准确的说是不限享受30天免费服务，<br>我个人用的非常稳定，今晚把WebStrom破解了一下，也成功了，所以写个博客，给以后的自己看。</p><p>这个方法可以破解JetBrains全系列产品，包括 Pycharm、IDEA、WebStorm、Phpstorm、Datagrip、CLion、AppCode等。</p><ul><li>首先去关注搜云库技术团队，回复idea，可以获取最新的破解插件及详细的方法，如果我写的不够清楚<br>可以去看看别人写的破解过程。我把我用的插件上传到github上了，点击<a href="https://github.com/NicknamedCoco/cdn/raw/master/blog/pojie/pojie.zip">下载破解插件</a></li><li>得到这几个破解插件，其中zip文件是主要的破解插件，另外两个文件是在IDEA等工具安装时，如果没有弹出<br>注册框时执行，也就是说，如果IDEA等工具安装时，没让你选择免费试用30天，你就可以先执行这两个文件<br>如果弹出了注册框，选择了免费试用30天，进入了IDEA等软件内，则不用执行这两个文件。<br>注意：如果你是window用户，则执行.vbs文件，如果你是MAC/linux用户，则执行.sh文件<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/pojie/pojie1.png" alt="破解1" loading="lazy"></li><li>进入IDEA后，随便创建个工程项目，然后将zip文件拖到待破解软件中，之后重启IDEA等软件<br>如果不能拖动安装，则你可以在插件中心，File -&gt; Settings -&gt; Plugins -&gt; Install Plugin From Disk，通过磁盘<br>文件安装插件，如下图：安装好后记得重启IDEA等软件<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/pojie/pojie2.png" alt="破解2" loading="lazy"></li><li>重启软件后，点击插件中心的已安装插件，查看是否安装了”IDE Eval Reset”插件</li><li>安装好插件后，点击help -&gt; Eval Reset，来到破解插件的界面，在这里可以看到30天以后的日期<br>点击”Auto reset before per restart”，然后点击”Reset”，最后点击YES，然后重启IDEA等软件就行了</li><li>以上就是破解JetBrains系列软件的全部过程，会无限30天免费试用。<br>注意，破解后就不要升级IDEA等软件了，不然要重新破解。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger笔记</title>
      <link href="2021/07/25/Swagger%E7%AC%94%E8%AE%B0/"/>
      <url>2021/07/25/Swagger%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>今天把狂神的Swagger视频看完了，整体来看Swagger框架还是比较简单的，<br>Swagger主要作用就是生成接口文档，供前后端开发协调使用，但在代码中插入过多的注释和注解<br>是否真的好，我感觉有利也有弊，并且Swagger框架在运行的时候还是降低了项目启动速度.</p><p>点击查看<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/swagger/swagger.txt">Swagger笔记</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA上使用Git</title>
      <link href="2021/07/24/IDEA%E4%B8%8A%E4%BD%BF%E7%94%A8Git/"/>
      <url>2021/07/24/IDEA%E4%B8%8A%E4%BD%BF%E7%94%A8Git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>一直不太了解IDEA上使用Git，今天趁着星期六没别的事，看看网课了解了一下，<br>马上下星期就开始真正写项目了，期待期待，还有很多不会的东西，要靠自己去慢慢学！<br>现阶段前端太差，linux太差，后端只会点基础，什么dubbo，Zookeeper，SpringCloud都没学<br>更不要说数据结构算法了，先学学基础内容，实习期间，必把VUE学完，再学学后端一些框架。</p><p>点击查看<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/git/idea%E4%B8%8A%E4%BD%BF%E7%94%A8git.txt">IDEA上使用Git</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven笔记</title>
      <link href="2021/07/22/Maven%E7%AC%94%E8%AE%B0/"/>
      <url>2021/07/22/Maven%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>人是前天到的杭州，房是昨天租的，一切都很顺利，运气太好了，马上开始实习生活了<br>实习期之内，我要打通前后端，vue一定要学完，后端还有一些其他框架需要学习，加油吧<br>最近把maven网课看完了，一直以来都是只会用，没彻底了解，现在已经没有问题了，<br>先从简单入手，再去学难的，查漏补缺。</p><p>点击查看<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/maven/maven%E7%AC%94%E8%AE%B0.txt">maven笔记</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础一些需要注意的点</title>
      <link href="2021/07/13/Java%E5%9F%BA%E7%A1%80%E4%B8%80%E4%BA%9B%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/"/>
      <url>2021/07/13/Java%E5%9F%BA%E7%A1%80%E4%B8%80%E4%BA%9B%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>Java基础中一些需要注意的问题</p></blockquote><ul><li><h5 id="Integer的比较问题"><a href="#Integer的比较问题" class="headerlink" title="Integer的比较问题"></a>Integer的比较问题</h5><pre class="language-java" data-language="java"><code class="language-java">以下输出结果为<span class="token boolean">false</span>的是？<span class="token class-name">Integer</span> i01<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">;</span><span class="token keyword">int</span> i02<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i03<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i04<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">A</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i01<span class="token operator">==</span>i02<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">B</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i01<span class="token operator">==</span>i03<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">C</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i03<span class="token operator">==</span>i04<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">D</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i02<span class="token operator">==</span>i04<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这题的答案是C，为什么呢？<br><strong>解答</strong>：</p><ul><li>Java中基本类型的包装类大部分都实现了常量池技术，这些类包括Byte,Short,Integer,Long,Character<br>本题中的Integer内部有一个IntegerCache类 ，该类的作用是将数值等于-128-127区间的Integer实例<br>缓存到cache数组中。当使用valueOf方法创建Integer实例时，会直接复用缓存中的实例<br>即，<code>Integer i03=Integer.valueOf(59);</code>这种方式并不会创建对象，而是直接从缓存中拿值是59的<br>实例，跟<code>Integer i01=59;</code>一样，i01是装箱操作，其本质也是调用valueOf方法，从缓存中拿59的实例<br>所以他们的对象地址是一样的，即是获取的同一个对象，如果获取的值并不在-128到127范围内，<br>那就会在堆中创建对象了。</li><li>我们很好判断A，B是对的，那为什么D也是对的呢？因为在i02与i04对比的时候，会将i04进行拆箱操作<br>再去比较，即不管i04是不是new出来的，在与基本类型比较时，都会拆箱后再去比较。</li><li>C是错误的，因为在比较时，两者都是Integer类型，并不会进行拆箱操作，所以比较对象地址，为false</li></ul><p><strong>总结</strong></p><ul><li>无论如何，Integer与new Integer不会相等。不会经历拆箱过程</li><li>两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false<br>java在编译Integer i2 = 128的时候,被翻译成-&gt; Integer i2 = Integer.valueOf(128);<br>而valueOf()函数会对-128到127之间的数进行缓存</li><li>两个都是new出来的,都为false</li><li>int和integer(无论new否)比，都为true，因为会把Integer自动拆箱为int再去比</li></ul><p><strong>看大佬做的图</strong><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/java/Integer%E9%97%AE%E9%A2%98.png" alt="Integer问题" loading="lazy"><br><strong>练习</strong></p><pre class="language-none"><code class="language-none">Integer a &#x3D; 1;Integer b &#x3D; 1;Integer c &#x3D; 500;Integer d &#x3D; 500;System.out.print(a &#x3D;&#x3D; b);System.out.print(c &#x3D;&#x3D; d);答案是true,false，原理就是上面的解析。</code></pre></li><li><h5 id="BigDecimal的使用"><a href="#BigDecimal的使用" class="headerlink" title="BigDecimal的使用"></a>BigDecimal的使用</h5><ul><li><p>BigDecimal作用<br>BigDecimal主要用来操作(大)浮点数，BigInteger 主要用来操作大整数(超过long类型)。<br>BigDecimal可以防止出现浮点数精度丢失问题。例如以下代码就会因为精度丢失而产生问题</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">-</span> <span class="token number">0.9f</span><span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">0.9f</span> <span class="token operator">-</span> <span class="token number">0.8f</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.100000024</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.099999964</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span></code></pre></li><li><p>BigDecimal的大小比较<br><code>a.compareTo(b)</code> : 返回 -1 表示 <code>a</code> 小于 <code>b</code>，0 表示 <code>a</code> 等于 <code>b</code> ， 1表示 <code>a</code> 大于 <code>b</code>。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span></code></pre></li><li><p>BigDecimal保留几位小数<br>通过 <code>setScale</code>方法设置保留几位小数以及保留规则。保留规则一般是向上向下取整</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.255433"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> n <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_HALF_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1.255</span></code></pre></li><li><p>BigDecimal的使用注意事项<br>我们在使用BigDecimal时，为了防止精度丢失，推荐使用它的BigDecimal(String)构造方法来创建对象。<br>而不是使用BigDecimal(double)，因为会存在精度损失的风险。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> bigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//推荐</span><span class="token class-name">BigDecimal</span> bigDecimal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不推荐</span></code></pre></li></ul></li><li><h5 id="Arrays-asList-的使用"><a href="#Arrays-asList-的使用" class="headerlink" title="Arrays.asList()的使用"></a>Arrays.asList()的使用</h5><ul><li><p>Arrays.asList()将一个数组转换为一个List集合。但我们并不能使用该集合的，add/remove/clear方法，不然会抛出<code>UnsupportedOperationException</code>，通过这个方式获得的集合是Arrays的一个内部类，<br>并没有实现集合的修改方法，而且当我们对原数组修改时，集合中的元素也会被修改</p></li><li><p>第二个需要注意的点是：我们使用该方法传递的数组必须是对象数组，而不是基本类型。<br>Arrays.asList()是泛型方法，传入的对象必须是对象数组。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myArray <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">List</span> myList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组地址值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错：ArrayIndexOutOfBoundsException</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> myList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span></code></pre><p>当传入一个原生数据类型数组时，Arrays.asList()的真正得到的参数就不是数组中的元素，<br>而是数组对象本身！此时List 的唯一元素就是这个数组，这也就解释了上面的代码。<br>使用包装类型数组就可以解决这个问题</p><pre class="language-none"><code class="language-none">Integer[] myArray &#x3D; &#123;1, 2, 3&#125;;</code></pre></li><li><p>怎么正确的将数组转换成ArrayList</p><pre class="language-none"><code class="language-none">List list &#x3D; new ArrayList&lt;&gt;(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</code></pre></li></ul></li><li><h5 id="foreach循环中修改元素的问题"><a href="#foreach循环中修改元素的问题" class="headerlink" title="foreach循环中修改元素的问题"></a>foreach循环中修改元素的问题</h5><p>不能在foreach中进行元素的add/remove操作，不然会抛出ConcurrentModificationException，<br>如果要进行修改操作，可以通过迭代器的修改方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//下面这段代码就是问题代码，</span><span class="token comment">//经过测试，新版jdk中，foreach循环中可以调用集合remove方法不会报错，而add方法仍然报错</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span>strings<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"wanYi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用iterator方式</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//更简单的方式，使用集合的removeIf方法</span>strings<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><h5 id="异常需要注意的地方"><a href="#异常需要注意的地方" class="headerlink" title="异常需要注意的地方"></a>异常需要注意的地方</h5><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/java/异常.jpg" alt="异常"  / loading="lazy"><ul><li>如果try块中抛出了一个在catch子句中说明的异常类，那么程序将跳过try语句的其余代码，<br>执行catch子句中的处理器代码。</li><li>无论是否抛出异常finally语句块最终都会执行。原因是：编译器会将finally块中的代码复制两份<br>并分别添加在try和catch的后面</li><li>当try块中包含return语句时，在执行return语句前会先执行finally块，如果finally块中也有return语句，这个return语句的返回值会将try块中return语句的返回值覆盖掉。</li><li>如果try块中抛出异常，finally中也抛出相同类型异常，那么原始异常将会丢失，转而抛出finally中的异常</li></ul><p><strong>示例1</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//try 语句块中有 return 语句时的整体执行顺序</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try block, i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"catch block i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally block i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果如下：</span><span class="token keyword">try</span> block<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">finally</span> block i <span class="token operator">=</span> <span class="token number">10</span><span class="token number">2</span>    <span class="token comment">/*当try块中有return语句时，仍然会执行finally块的代码，并且返回值是try块中的i值*/</span></code></pre><p><strong>示例2</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//finally 语句块中有 return 语句</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try block, i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"catch block i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally block i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果如下：</span><span class="token keyword">try</span> block<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">finally</span> block i <span class="token operator">=</span> <span class="token number">3</span><span class="token number">3</span><span class="token comment">/*当try块和finally块中都有return时，返回的是finally中的i*/</span></code></pre><p><strong>处理异常时的建议</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">retrieveObjectById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//..some code that throws SQLException</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>"<span class="token class-name">Exception</span> in retieveObjectById”<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//clean up resultset, statement, connection etc</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*当有异常时就进行处理，抛出，如果只是ex.printStacktrace();会使得异常并没有中断程序进而调用代码继续执行，导致更多的异常。*/</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>医院预约后台管理系统上线啦！</title>
      <link href="2021/07/11/%E5%8C%BB%E9%99%A2%E9%A2%84%E7%BA%A6%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%BA%BF%E5%95%A6%EF%BC%81/"/>
      <url>2021/07/11/%E5%8C%BB%E9%99%A2%E9%A2%84%E7%BA%A6%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%BA%BF%E5%95%A6%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>近况</p></blockquote><p>终于把这个项目写完了，虽然前端并不是自己写的，而且项目也很小，但好歹走过了一个完整的流程<br>项目已经部署到了个人的服务器上，写完这个项目，开始准备投简历，边投简历边学习面试题，<br>回顾之前的知识点，争取在8月份之前找到实习工作，这个本人新立的小目标，嘿嘿~~</p><blockquote><p>项目概述</p></blockquote><p><a href="http://47.98.138.53/">医院预约后台管理系统</a>，点击即可访问本项目<br>项目前后端分离，前端Vue，后端Springboot+MybatisPlus，用户分管理员，医生，病人三种角色<br>学习了跨域，token认证，自定义注解，自定义拦截器，七牛云配置图床，提升了mybatisPlus的使用熟练度。<br>管理员：账号：admin，密码：123456<br>医生：账号：d-keyi，密码·：123765<br>病人：账号：p-keliu，密码：123456</p><blockquote><p>项目搭建过程</p></blockquote><p>记录一下搭建过程，方便以后查看</p><ul><li><p>既然是前后端分离项目，那么在linux中就要同时启动前端和后端，首先将前端vue打包成zip格式，<br>将后端项目打包成jar包形式，将数据库mysql数据提取成xxx.sql形式，最后将三个文件使用ftp工具<br>发送到linux系统上。</p></li><li><p>首先配置mysql数据库，登录mysql数据库，使用命令<code>source  xxx.sql文件位置</code>引入项目数据库<br>使用命令后，项目需要的数据库就创建好了</p></li><li><p>其次启动前端vue项目</p><ul><li><p>因为我们传入的文件是zip格式，所以需要进行解压，可以使用unzip对文件进行解压</p><pre class="language-none"><code class="language-none">安装unzipapt install unzip解压文件unzip 前端项目路径</code></pre></li><li><p>第二步，因为vue项目需要node环境，我们需要安装node，npm，webpack</p><pre class="language-none"><code class="language-none">查看node，npm版本nodejs -vnpm -version安装webpack及其servernpm install webpack -gnpm install webpack-dev-server -g</code></pre></li><li><p>解压vue项目，安装完以上vue需要的环境后，进入vue项目目录中，使用命令重新绑定linux环境</p><pre class="language-none"><code class="language-none">npm rebuild node-sass然后在vue项目目录中使用npm run dev启动项目如果想保持vue项目一直在后台启动，使用如下命令，该命令将产生一个日志文件，记录vue日志nohup  npm run dev &gt;&gt; .&#x2F;vue.log &amp;查看当前项目是否正在启动运行: ps -ef | grep node杀死指定进程kill -9 uid(进程id号)注意：vue前端使用的端口号一定要开放，如果是云服务器，需要在服务器管理上的安全组中将端口暴露出来，前后端需要的端口都需要暴露出来查看防护墙和已经添加开放的端口号，linux这里的防火墙的端口号和云服务器安全组的端口号都需要配置firewall-cmd --list-all添加http服务firewall-cmd --add-service&#x3D;http --permanent添加80端口号firewall-cmd --add-port&#x3D;8080&#x2F;tcp --permanent重新加载防火墙firewall-cmd --reload删除8080端口号firewall-cmd --permanent --zone&#x3D;public --remove-port&#x3D;8080&#x2F;tcp</code></pre></li></ul></li><li><p>通过以上的配置就完成了vue前端项目的启动，当然了vue项目文件内部的地址，应该改成linux的ip地址<br>不然vue项目发出的请求地址不正确，最后需要配置启动后端项目</p><pre class="language-none"><code class="language-none">后端项目启动需要安装java环境，查看java环境，java -version启动springboot项目，并在后台一直运行,将生成的日志文件写到当前目录的springboot.log中nohup java -jar xx.jar &gt;&gt; .&#x2F;springboot.log &amp;启动成功后，在linux中，使用如下命令检查后端项目是否成功运行并返回数据,就像postman请求数据一样curl -v &quot;127.0.0.1:8081&#x2F;xxx项目路径的任意一个接口&quot;</code></pre></li><li><p>前后端都配置并启动后，可以配置nginx反向代理到前端vue项目，使得我们直接在浏览器中输入<br>云服务器的ip地址，即可访问到项目。</p></li><li><p>以上就是配置前后端分离项目的全部内容，感谢大家的收看，我们下一期再见。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片上传功能及资源映射规则</title>
      <link href="2021/07/05/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E5%8F%8A%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/"/>
      <url>2021/07/05/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E5%8F%8A%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="图片上传-头像上传"><a href="#图片上传-头像上传" class="headerlink" title="图片上传-头像上传"></a>图片上传-头像上传</h5></blockquote><p>之前写过文件上传功能，现在看来太过稚嫩，所以重新写下图片上传功能，跟文件上传其实是类似的<br>或许以后再看本篇博客，又会有新的想法。</p><ul><li><p>在springboot.yaml配置路径信息</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#文件上传设置</span><span class="token key atrule">file</span><span class="token punctuation">:</span>  <span class="token key atrule">localPath</span><span class="token punctuation">:</span> C<span class="token punctuation">:</span>/Users/OneForAll/Desktop/img  <span class="token key atrule">requestPath</span><span class="token punctuation">:</span> /image/avatar  <span class="token key atrule">imagePath</span><span class="token punctuation">:</span> file<span class="token punctuation">:</span>C<span class="token punctuation">:</span>/Users/OneForAll/Desktop/img/</code></pre></li><li><p>通过FileProperties资源类，对配置信息进行绑定</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileProperties</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 文件保存的本地前缀，完整本地(真实)路径=本地前缀+时间目录+随机文件名+文件类型后缀，     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> localPath<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求路径前缀，完整请求路径=请求前缀+时间目录+随机文件名+文件类型后缀，     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> requestPath<span class="token punctuation">;</span>    <span class="token comment">/**     * 映射路径，在web资源映射处使用     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> imagePath<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>UserController接收请求，对请求进行处理后，返回数据给前端</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*    用户头像上传,给参数*/</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/profile/avatar"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">uploadAvatar</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"avatarfile"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> userId <span class="token operator">=</span> <span class="token class-name">TokenUtil</span><span class="token punctuation">.</span><span class="token function">getAdminUserId</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token class-name">UploadFileUtil</span><span class="token punctuation">.</span><span class="token function">uploadImage</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">200</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"isImage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"requestUrl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResultGenerator</span><span class="token punctuation">.</span><span class="token function">genSuccessResult</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"requestUrl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ResultGenerator</span><span class="token punctuation">.</span><span class="token function">genFailResult</span><span class="token punctuation">(</span><span class="token string">"图片上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>UploadFileUtil工具类，真正实现图片上传功能</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadFileUtil</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     *  这里并不能使用自动注入，因为该工具类并不在容器中。 *  所以使用SpringContextUtil工具类，该类实现ApplicationContextAware接口 *  获取IOC容器，即从容器中获取组件。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">FileProperties</span> fileProperties <span class="token operator">=</span> <span class="token class-name">SpringContextUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">FileProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取上传的文件类型     * @param filename file.getOriginalFilename();     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getFileType</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> filename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*if (filename.contains("."))&#123;        &#125;else&#123;            return null;        &#125;*/</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取时间路径     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getDatePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取随机文件名     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRandomName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断是否是图片     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isImage</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> uploadFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uploadFile<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">BufferedImage</span> image <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            image <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>uploadFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>image <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> image<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> image<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断图片后缀是否符合要求     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isImageType</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>fileType<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"^.+\\.(jpg|jpge|png|gif)$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取文件的大小，以kb为单位     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getFileSize</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> uploadFile<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> size <span class="token operator">=</span> uploadFile<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>size<span class="token operator">/</span><span class="token number">1024.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 如果本地目录不存在，则创建该文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createMkdir</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *  上传图片     *      1，获取时间路径     *      2，获取随机文件名     *      3，获取图片后缀     *      4，获取图片大小，以kb为单元     *      5，生成本地目录(本地前缀+时间目录，如果为空，则创建文件夹)，     *          生成完整本地路径(本地目录+随机文件名+文件类型后缀)，     *          生成完整请求路径(用于前端访问)     *      6，判断文件是否是图片文件，判断文件后缀是否符合图片类型     *      7，如果是图片文件，则创建目录，再使用完整本地路径，保存文件     *     *  图片实际保存地：完整本地(真实)路径=本地目录(本地前缀+时间目录)+随机文件名+文件类型后缀     *  前端访问路径：完整请求路径=请求前缀+时间目录+随机文件名+文件类型后缀     *     *  datePath：时间目录     *  randomName：随机文件名     *  fileType：文件类型后缀     *  fileSize：文件大小，kb为单位     *  newFileDir：本地目录=本地前缀+时间目录，没有则创建该文件夹     *  newFile：完整本地路径=本地目录+随机文件名+文件类型后缀     *  requestUrl：完整请求路径=请求前缀+时间目录+随机文件名+文件类型后缀     *     *  本案例中因为前端传递过来的MultipartFile数据，获取文件后缀后， *并没有任何后缀，可能是被设置过的,所以方法中直接声明文件后缀是.jpg，     *  实际上应该由uploadFile.getOriginalFilename()获取     */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">uploadImage</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> uploadFile<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> datePath <span class="token operator">=</span> <span class="token function">getDatePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> randomName <span class="token operator">=</span> <span class="token function">getRandomName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> fileType <span class="token operator">=</span> <span class="token string">".jpg"</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> fileSize <span class="token operator">=</span> <span class="token function">getFileSize</span><span class="token punctuation">(</span>uploadFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newFileDir<span class="token operator">=</span>fileProperties<span class="token punctuation">.</span><span class="token function">getLocalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>datePath<span class="token punctuation">;</span>        <span class="token class-name">String</span> newFile <span class="token operator">=</span>         fileProperties<span class="token punctuation">.</span><span class="token function">getLocalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>datePath<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>randomName<span class="token operator">+</span>fileType<span class="token punctuation">;</span>        <span class="token class-name">String</span> requestUrl <span class="token operator">=</span>         fileProperties<span class="token punctuation">.</span><span class="token function">getRequestPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>datePath<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>randomName<span class="token operator">+</span>fileType<span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fileSize"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>fileSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fileType"</span><span class="token punctuation">,</span>fileType<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"generateFolder"</span><span class="token punctuation">,</span>datePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"generateFileName"</span><span class="token punctuation">,</span>randomName<span class="token operator">+</span>fileType<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"oldName"</span><span class="token punctuation">,</span>uploadFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文件后缀"</span><span class="token operator">+</span>fileType<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"文件大小"</span><span class="token operator">+</span>fileSize<span class="token operator">+</span><span class="token string">"kb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"完整文件路径"</span><span class="token operator">+</span>newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"完整请求路径"</span><span class="token operator">+</span>requestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isImage</span><span class="token punctuation">(</span>uploadFile<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isImageType</span><span class="token punctuation">(</span>fileType<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"isImage"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">createMkdir</span><span class="token punctuation">(</span>newFileDir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                uploadFile<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"requestUrl"</span><span class="token punctuation">,</span> requestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"图片上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"图片上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"isImage"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"图片上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>顺便看看SpringContextUtil工具类，用于获取容器中组件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringContextUtil</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringContextUtil</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>最后配置资源映射信息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ARSystemWebMvcConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">FileProperties</span> fileProperties<span class="token punctuation">;</span>    <span class="token comment">/*        配置资源处理映射     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> imagePath <span class="token operator">=</span> fileProperties<span class="token punctuation">.</span><span class="token function">getImagePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/adminApi/image/avatar/**"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>imagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>上传图片的请求路径</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://localhost:8081/adminApi/user/profile/avatarpost请求，携带图片数据，avatarfile属性，使用MultipartFile file接收</code></pre></li><li><p>前端发出的图片请求路径</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://localhost:8081/adminApi/image/avatar/2021/07/05/8c2fffe9-52e4-4bc6-af93-21beefa139e0.jpgget请求，该请求被资源映射器处理，将该请求转换成以下路径：file:C:/Users/OneForAll/Desktop/img/2021/07/05/8c2fffe9-52e4-4bc6-af93-21beefa139e0.jpg</code></pre></li><li><p>以上就是图片上传功能的全部，下面讲讲资源映射的默认规则</p></li></ul><blockquote><h5 id="SpringBoot静态资源映射的默认规则"><a href="#SpringBoot静态资源映射的默认规则" class="headerlink" title="SpringBoot静态资源映射的默认规则"></a>SpringBoot静态资源映射的默认规则</h5></blockquote><p>静态资源映射指的是当用户发出请求的时候，服务器端应该按照哪些规则查找静态资源返回给用户。<br>以下是springboot默认的资源映射规则</p><ul><li><p>webjars：以jar包的方式引入外部静态资源<br>当发起所有/webjars/**请求时，springboot会去<code>classpath:/META-INF/resources/webjars/</code>下找资源。</p><pre class="language-none"><code class="language-none">例如：springboot中引入jquery的maven依赖    &lt;dependency&gt;        &lt;groupId&gt;org.webjars&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;jquery&lt;&#x2F;artifactId&gt;        &lt;version&gt;3.4.1&lt;&#x2F;version&gt;    &lt;&#x2F;dependency&gt;    当我们访问http:&#x2F;&#x2F;localhost:8081&#x2F;webjars&#x2F;jquery&#x2F;3.4.1&#x2F;jquery.js请求时我们就需要在classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;下找我们导入的jquery资源我们需要在WebMvcConfigurer实现类中配置资源映射信息@Overridepublic void addResourceHandlers(ResourceHandlerRegistry registry) &#123;registry.addResourceHandler(&quot;&#x2F;webjars&#x2F;**&quot;).addResourceLocations(&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;&quot;);&#125;</code></pre></li><li><p>如果访问的是自己项目的一些静态资源，不是访问以jar形式导入的静态资源</p><pre class="language-none"><code class="language-none">springboot默认按照以下路径，按顺序查找资源文件&quot;classpath:&#x2F;META‐INF&#x2F;resources&#x2F;&quot;, &quot;classpath:&#x2F;resources&#x2F;&quot;,&quot;classpath:&#x2F;static&#x2F;&quot;,&quot;classpath:&#x2F;public&#x2F;&quot;&quot;&#x2F;&quot;:当前项目的根路径其中classpath表示的是类路径，springboot项目的java和resources目录都是类路径，都是classpath下，例如：&quot;classpath:&#x2F;static&#x2F;&quot;指的是在java目录下和resources目录下，即&quot;&#x2F;&quot;下查找static文件夹，该文件夹作为静态资源文件，&#x2F;表示的是根目录，即以java目录下和resources目录开始查找默认情况下，resources目录下的public文件夹，resources文件夹，static文件夹都是静态资源文件夹如果想自定义静态资源路径，可以在springboot.properties中配置：    # 自定义静态资源访问路径，可以指定多个，之间用逗号隔开    spring.resources.static-locations&#x3D;classpath:&#x2F;myabc&#x2F;,classpath:&#x2F;myhhh当指定了静态资源访问路径后，默认的资源资源路径就不起作用了</code></pre></li><li><p>首页index.html，被/**映射<br>指的是当首页index.html文件放置在静态文件目录中，即resources目录下的static，resources，public下<br>springboot便会自动映射到该首页文件，例如发出<code>http://localhost:8080</code>请求时，springboot自动映射<br>在静态资源目录中查找index.html文件。</p></li><li><p>自定义图标<br>跟index.html映射类似，只要将网站图标放置在默认的静态资源文件下，即static,resources,public下<br>便会自动映射该图标文件，前提是该图标命名是favicon.ico</p></li><li><p>以上是springboot默认的映射规则，我们还可以配置一些自己的映射规则，只需要实现WebMvcConfigurer<br>接口，并重写addResourceHandlers即可，另外如果是项目中资源，映射规则都是以”classpath”开头<br>如果是映射绝对路径，本机的某个地址，例如文件上传映射到电脑某个盘，则需要以”file”开头。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 图片上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近小项目上学习的总结</title>
      <link href="2021/06/29/%E6%9C%80%E8%BF%91%E5%B0%8F%E9%A1%B9%E7%9B%AE%E4%B8%8A%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>2021/06/29/%E6%9C%80%E8%BF%91%E5%B0%8F%E9%A1%B9%E7%9B%AE%E4%B8%8A%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h4></blockquote><p>最近一直在忙专业课，各种课程交作业，考试，隔了半个月没写博客了，最近在看网上找的项目，<br>感觉大佬写的代码好帅啊，好优雅，我主要学学后端这块，前端VUE不太会，看不懂，后端的话<br>还是学了一点点，包括跨域问题的解决，自定义注解的应用，Token的使用，自定义异常类，<br>后端统一数据Result工具类，另外再把一些工具类上传到github存起来，以后用的时候就方便了。</p><blockquote><h4 id="跨域的基本知识点"><a href="#跨域的基本知识点" class="headerlink" title="跨域的基本知识点"></a>跨域的基本知识点</h4></blockquote><ul><li><p><strong>跨域的概念</strong><br>跨域指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器施加的安全限制<br>举个例子：</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;www.123.com&#x2F;index.html调用http:&#x2F;&#x2F;www.123.com&#x2F;server.php(非跨域，即不能访问对方资源)http:&#x2F;&#x2F;www.123.com:8080&#x2F;index.html 调用 http:&#x2F;&#x2F;www.123.com:8081&#x2F;server.php(端口不同:8080&#x2F;8081，跨域，即访问不了对方的资源)当请求协议，域名，端口号三者有任意一个不同时，则该请求就是跨域请求同源策略，很简单就是默认当以上三者都相同时，才能获取到返回的数据，这是浏览器默认设置的策略当发出跨域请求，如果没有进行相应的处理，则我们可以看到，后端能正常处理请求并返回数据，但前端浏览器接收不了数据。</code></pre><p>以上个人见解，感觉不准确，看下图关于跨域的概念<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/cors/%E8%B7%A8%E5%9F%9F.jpg" alt="跨域" loading="lazy"></p></li><li><p><strong>浏览器如何判断一个请求是不是跨域请求？</strong><br>浏览器会根据同源策略来判断一个请求是不是跨域请求。</p><ul><li><strong>非跨域请求</strong>，在请求头中会只包含请求的主机名。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/cors/%E9%9D%9E%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82.png" alt="非跨域请求" loading="lazy"></li><li><strong>跨域请求</strong>，在请求头中会既包含要请求的主机名还包括当前的源主机名，<br>如果这两者不一致，那就是跨域请求了。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/cors/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82.png" alt="跨域请求" loading="lazy"></li></ul></li></ul><ul><li><p><strong>浏览器对请求的分类</strong><br>在HTTP1.1 协议中的，请求方法分为GET、POST、PUT、DELETE、HEAD、TRACE、OPTIONS、CONNECT<br>八种。浏览器根据这些请求方法和请求类型将请求划分为简单请求和非简单请求。</p><ul><li><p><strong>简单请求</strong>：浏览器先发送（执行）请求然后再判断是否跨域。<br>请求方法为 GET、POST、HEAD，请求头header中无自定义的请求头信息，请求类型Content-Type<br>为 text/plain、multipart/form-data、application/x-www-form-urlencoded的请求都是简单请求。</p></li><li><p><strong>非简单请求</strong>：浏览器先发送预检命令（OPTIONS方法），检查通过后才发送真正的数据请求。<br>预检命令会发送自定义头为Access-Control-Request-Headers: content-type的请求到服务器，<br>根据响应头的中的 “Access-Control-Allow-Headers”: “Content-Type” 判断服务器是否允许跨域访问。<br>预检命令是可以缓存，服务器端设置 “Access-Control-Max-Age”: “3600”，这样后面发送同样的<br>跨域请求就不需要先发送预检命令了。</p><p>请求方法为 PUT、DELETE 的 AJAX 请求、发送 JSON 格式的 AJAX 请求、带自定义头的 AJAX 请求<br>都是非简单请求。</p></li><li><p>谈谈CORS，CORS是一个W3C标准，全称跨域资源共享，CORS允许浏览器向跨域服务器发出<br>XMLHttpRequest请求，以克服AJAX只能基于同源策略的使用限制，像以上请求分类就是基于CORS标准</p><pre class="language-none"><code class="language-none">对CORS每个块详解1)Access-Control-Allow-Origin该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。2)Access-Control-Allow-Credentials该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。3)Access-Control-Allow-Headers如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在&quot;预检&quot;中请求的字段。一般用来指定浏览器可额外发送的请求头。4)Access-Control-Allow-Methods它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次&quot;预检&quot;请求。5)X-Powered-By这个值的意义用于告知网站是用何种语言或框架编写的，可以不写。6)Content-Type避免返回的值是乱码</code></pre></li></ul></li><li><p><strong>开发中后端解决跨域问题</strong></p><ul><li><p>如果只是某几个接口需要接受跨域请求则直接使用Spring的@CrossOrigin注解</p></li><li><p>如果前后端分离，大多数请求都是跨域请求，则可以自定义跨域配置类<br>或者重写WebMvcConfigurer的默认方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span>，自定义配置跨域类<span class="token number">0</span><span class="token punctuation">)</span>application<span class="token punctuation">.</span>yaml配置文件#绑定跨域信息       cors<span class="token operator">:</span>         origin<span class="token operator">:</span> <span class="token string">'*'</span>         credentials<span class="token operator">:</span> <span class="token boolean">true</span>         headers<span class="token operator">:</span> <span class="token string">'*'</span>         methods<span class="token operator">:</span> <span class="token string">'*'</span>         maxAge<span class="token operator">:</span> <span class="token number">3600</span>         path<span class="token operator">:</span> <span class="token string">'/**'</span>         <span class="token number">1</span><span class="token punctuation">)</span>配置<span class="token class-name">CorsProperties</span>资源类<span class="token annotation punctuation">@Data</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"cors"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsProperties</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> origin<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> credentials<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> headers<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> methods<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Long</span> maxAge<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> path<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token number">2</span><span class="token punctuation">)</span>配置<span class="token class-name">GlobalCorsConfig</span>配置类<span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token class-name">CorsProperties</span> corsProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1,添加CORS配置信息</span>        <span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2,允许的域</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowedOriginPatterns</span><span class="token punctuation">(</span>corsProperties<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2,是否允许前端发送携带cookie信息的跨域请求</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span>corsProperties<span class="token punctuation">.</span><span class="token function">isCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*            2，允许的头信息            CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段，            如果想拿到其他字段就必须在Access-Control-Expose-Headers中指定        */</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowedHeaders</span><span class="token punctuation">(</span>corsProperties<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2，允许的请求方式</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowedMethods</span><span class="token punctuation">(</span>corsProperties<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2,允许的时间</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>corsProperties<span class="token punctuation">.</span><span class="token function">getMaxAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3,添加映射路径，拦截一切请求</span>        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span>corsProperties<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">2，自定义类实现WebMvcConfigurer接口，重写方法    &#x2F;*        设置跨域        addMapping，设置可以被跨域的路径        allowedOrigins，域名的白名单        allowedMethods，请求的方式，GET,POST,DELETE,PUT        allowedHeaders，允许所有请求header访问，可以自定义设置任意请求头信息        maxAge，这个是给复杂请求预检用的，设置预检多久失效    *&#x2F;    @Override    public void addCorsMappings(CorsRegistry registry) &#123;        registry.addMapping(&quot;&#x2F;**&quot;).allowedOrigins(&quot;*&quot;)                .allowedMethods(&quot;*&quot;).allowedHeaders(&quot;*&quot;).maxAge(3600);    &#125;</code></pre></li></ul></li></ul><blockquote><h4 id="自定义注解，异常类，Token的应用"><a href="#自定义注解，异常类，Token的应用" class="headerlink" title="自定义注解，异常类，Token的应用"></a>自定义注解，异常类，Token的应用</h4></blockquote><p>这三部分我放在一块讲，因为项目上使用这三个技术去实现了一个功能<br>功能是：当我使用自定义注解标注在控制器方法上，这个注解的作用是检查用户有没有登录，拦截器拦截所有方法，检查请求方法上有没有我定义的注解，如果有，则说明执行控制器方法前，用户需要先进行登录，<br>所以对用户的Token进行检查，需要获取到请求中携带的Token，对Token进行验证，<br>可以想象，这个自定义注解标注在所有需要登录后才能执行的控制器方法上。</p><ul><li><p>自定义异常类，TokenException<br>这个比较简单，就先讲了，这个类的作用是，如果用户请求的控制器方法上标注了需要验证登录的注解<br>而请求中没有携带Token，就表示用户没有登录，也就没有权利执行控制器方法，此时抛出Token异常，<br>或者经过检查，发现Token不合法，也抛出自定义的异常。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义token异常类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TokenException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>自定义注解，@LoginToken，@PassToken<br>这两个注解的作用是，当我在控制器方法上标注@LoginToken注解，则表示该控制器方法需要进行登录验证<br>当我在控制器方法上标注@PassToken注解，或者什么都没标注时，则表示该控制器方法不需要进行登录验证</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*    判断用户是否登录的注解 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">LoginToken</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    跳过验证的注解 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PassToken</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>自定义注解的使用肯定是要配合反射的，我们需要在拦截器中拦截所有请求，通过反射判断请求的控制器方法<br>上有没有@LoginToken或者@PassToken注解。拦截器的代码放在Token部分。</p></li><li><p>Token的使用<br>token的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。<br>当用户第一次登录后，服务器生成一个token并将此token返回给客户端，<br>以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。</p><p><strong>简单token的组成</strong>；uid(用户唯一的身份标识)、time(当前时间的时间戳)、<br>sign(签名，token的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止token泄露)。</p><p>客户端登陆传递信息给服务端，服务端收到后把用户信息加密（token）传给客户端，客户端将token存放于<br>localStroage等容器中。客户端每次访问都传递token，服务端解密token，就知道这个用户是谁了。<br>通过cpu加解密，服务端就不需要存储session占用存储空间，就很好的解决负载均衡多服务器的问题了。<br>这个方法叫做<strong>JWT(Json Web Token)</strong></p><p>更多关于Token细节，Token与session的区别等，请看大佬的文章，<a href="https://www.jianshu.com/p/576dbf44b2ae">Token详解</a></p><p>下面看看Token在开发中的应用</p><ul><li><p>导入JWT依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- jwt token处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>Token工具类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenUtil</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 过期时间，单位毫秒，正常30分钟</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_TIME <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment">//密钥</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> SECRET <span class="token operator">=</span> <span class="token string">"HH_CC_FFF"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAdminToken</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 生成过期时间</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRE_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> token<span class="token punctuation">;</span>        <span class="token comment">// 将user id保存到token里面</span>        token <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withAudience</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 以SECRET作为token的密钥;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">getAdminUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> adminUserId<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            adminUserId <span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>JWT<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAudience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> adminUserId<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTDecodeException</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TokenException</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token string">"token不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>LoginTokenInterception拦截器，在拦截器中，对请求的Token进行验证</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*    这个拦截器是拦截没有登录的用户，当用户每次请求时会带上token，    如果你没有这个token就说明你没登录，如果token格式不对也不能登录，    如果请求的控制器方法上标注了@PassToken则表明该请求无需验证登录，直接通过。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginTokenInterception</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//从请求头中取出token</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果不是请求的控制器方法，则直接通过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//转换成handlerMethod，控制器对象，我们写的控制器类都继承handlerMethod</span>        <span class="token comment">//获取被请求的控制器方法</span>        <span class="token class-name">HandlerMethod</span> handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果控制器方法上标注了@PassToken，则放行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">PassToken</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">PassToken</span> passToken <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PassToken</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>passToken<span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//检查有没有标注@LoginToken注解，有则进行验证</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">LoginToken</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">LoginToken</span> loginToken <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">LoginToken</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>loginToken<span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TokenException</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//验证token</span>                <span class="token class-name">JWTVerifier</span> jwtVerifier <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token class-name">TokenUtil</span><span class="token punctuation">.</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    jwtVerifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTVerificationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TokenException</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span><span class="token string">"token不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>总结<br>再次总结一下整个流程，因为浏览器的同源策略所产生的跨域问题，我配置了CorsConfig，CorsProperties<br>或者也可以重写WebMvcConfigurer接口的addCorsMappings方法，使得前后端能够跨域访问，<br>当用户第一次登陆的时候，后端生成一个Token，该Token存放着用户的Id值，并将该Token返回给客户端，<br>当用户访问其他需要登录后才能操作的请求时(这些控制器方法都会被标注我们的自定义注解，LoginToken)<br>拦截器拦截到所有请求，如果发现被请求的控制器方法标注了LoginToken注解，则进行Token验证登录，<br>如果发现请求中没有携带Token，或者Token不合法，则表明用户没有权利执行该请求，则抛出我们自定义的<br>异常，TokenException，这登录功能就把异常，注解，拦截器，Token验证，跨域问题全都用上了。</p></li></ul><blockquote><h4 id="统一数据格式Result"><a href="#统一数据格式Result" class="headerlink" title="统一数据格式Result"></a>统一数据格式Result</h4></blockquote><p>前后端交互的时候，一般都会设计一个统一的返回数据格式，统一的返回数据格式有很多种实现，<br>我看网上写的都很不一样，有用到状态码枚举类，有没有使用枚举类的，有的枚举类只有状态码<br>有的枚举类中将状态码和消息都设置在一起，下面我就记录一下，这个项目中的统一返回数据体设计。</p><ul><li><p>Result类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">// 响应业务状态</span>    <span class="token comment">/*     * 200成功     * 201错误     * 400参数错误     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token comment">// 响应消息</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token comment">// 响应中的数据</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> status<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>ResultGenerator</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 响应结果生成工具 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultGenerator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEFAULT_SUCCESS_MESSAGE <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEFAULT_FAIL_MESSAGE <span class="token operator">=</span> <span class="token string">"FAIL"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RESULT_CODE_SUCCESS <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RESULT_CODE_SERVER_ERROR <span class="token operator">=</span> <span class="token number">201</span><span class="token punctuation">;</span>    <span class="token comment">//成功，携带默认消息，不带数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">genSuccessResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>DEFAULT_SUCCESS_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>RESULT_CODE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//成功，携带自定义消息，不带数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">genSuccessResult</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>RESULT_CODE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//成功，携带默认消息，带数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">genSuccessResult</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>DEFAULT_SUCCESS_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>RESULT_CODE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//成功，携带自定义消息和数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">genSuccessResult</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>RESULT_CODE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//请求失败，携带自定义消息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">genFailResult</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>RESULT_CODE_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//请求错误，携带状态码及消息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">genErrorResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>实际使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//getUserInfo，获取信息</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUserInfo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">TokenUtil</span><span class="token punctuation">.</span><span class="token function">getAdminUserId</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ResultGenerator</span><span class="token punctuation">.</span><span class="token function">genFailResult</span><span class="token punctuation">(</span><span class="token string">"账号不存在,请检查账号是否正确或联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userInfo"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> <span class="token class-name">TokenUtil</span><span class="token punctuation">.</span><span class="token function">getAdminToken</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResultGenerator</span><span class="token punctuation">.</span><span class="token function">genSuccessResult</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这个项目的统一返回数据格式并不太好，我看其他博客使用注解方式，非常优雅<br>有关于更多统一返回体的设计，请看大佬博客，<a href="https://www.jianshu.com/p/90bac4eda34a">统一格式返回设计</a></p></li></ul><blockquote><h4 id="一些小工具类"><a href="#一些小工具类" class="headerlink" title="一些小工具类"></a>一些小工具类</h4></blockquote><p>遇到过很多不错的工具类，记录一下，以后肯定会有用得到的地方。</p><ul><li><a href="https://cdn.jsdelivr.net/gh/NicknamedCoco/Practice/Practice7/TokenUtil.java">TokenUtil</a></li><li><a href="https://cdn.jsdelivr.net/gh/NicknamedCoco/Practice/Practice7/MD5Util.java">MD5Util</a></li><li><a href="https://cdn.jsdelivr.net/gh/NicknamedCoco/Practice/Practice7/Result.java">Result</a></li><li><a href="https://cdn.jsdelivr.net/gh/NicknamedCoco/Practice/Practice7/ResultGenerator.java">ResultGenerator</a></li><li><a href="https://cdn.jsdelivr.net/gh/NicknamedCoco/Practice/Practice7/ResultCode.java">ResultCode</a></li><li><a href="https://cdn.jsdelivr.net/gh/NicknamedCoco/Practice/Practice7/PatternUtil.java">PatternUtil</a></li><li><a href="https://cdn.jsdelivr.net/gh/NicknamedCoco/Practice/Practice7/PageQueryUtil.java">PageQueryUtil</a></li><li><a href="https://cdn.jsdelivr.net/gh/NicknamedCoco/Practice/Practice7/PageResult.java">PageResult</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
            <tag> Token </tag>
            
            <tag> 注解 </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql索引基础知识</title>
      <link href="2021/06/15/Mysql%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/06/15/Mysql%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="索引相关知识点"><a href="#索引相关知识点" class="headerlink" title="索引相关知识点"></a>索引相关知识点</h5></blockquote><ul><li><p>什么是索引<br>索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: B 树， B+树和 Hash。</p></li><li><p>为什么mysql数据库没有使用哈希表作为索引的数据结构？</p><pre class="language-none"><code class="language-none">1)哈希表存在哈希冲突的问题2)哈希索引不支持顺序和范围查询，这是它最大的缺点，当我们要对表中的数据进行排序或者进行范围查询时，哈希索引就不行了。例如：SELECT * FROM tb1 WHERE id &lt; 500在这种范围查询中，优势非常大，直接遍历比500小的叶子节点就够了。而Hash索引是根据hash算法来定的，难不成还要把1 - 499的数据，每个都进行一次hash计算来定位吗?这就是Hash最大的缺点了。</code></pre></li><li><p>B树和B+树的异同</p><pre class="language-none"><code class="language-none">1)B树的所有节点既存放键(key)也存放数据(data),而B+树只有叶子节点存放key和data,其他内节点只存放key。2)B树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。3)B树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</code></pre></li><li><p>MyISAM引擎和InnoDB引擎都是使用B+树作为索引，但两者实现方式不一样<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/mysql/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%96%87%E4%BB%B6.png" loading="lazy"></p><pre class="language-none"><code class="language-none">MyISAM引擎中，B+Tree叶节点的data域存放的是数据记录的地址。在索引检索的时候，首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址读取相应的数据记录。这被称为“非聚簇索引”。InnoDB引擎中，其数据文件本身就是索引文件(相比MyISAM，索引文件和数据文件是分离的),其表数据文件本身就是按B+Tree组织的一个索引结构，树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。这被称为“聚簇索引(或聚集索引)”，而其余的索引都作为辅助索引，辅助索引的data域存储相应记录主键的值而不是地址，这也是和MyISAM不同的地方。在根据主索引搜索时，直接找到key所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，在走一遍主索引。因此,在设计表的时候,不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。</code></pre></li><li><p>MyISAM引擎与InnoDB引擎的区别</p><pre class="language-none"><code class="language-none">1)MyISAM只有表级锁(table-level locking)，而InnoDB支持行级锁(row-level locking)和表级锁,默认为行级锁。2)MyISAM不提供事务支持。InnoDB提供事务支持，具有提交(commit)和回滚(rollback)事务的能力。3)MyISAM不支持外键，而InnoDB支持外键。4)MyISAM不支持MVCC，而InnoDB支持MVCC。* MVCC中文名叫多版本并发控制，是现代数据库（如MySql）引擎实现中常用的处理读写冲突的手段，目的在于提高数据库高并发场景下的吞吐性能。* MySQL的InnoDB存储引擎默认事务隔离级别是RR(可重复读)，是通过&quot;行级锁+MVCC&quot;一起实现的，正常读的时候不加锁，写的时候加锁。而MVCC的实现依赖：隐藏字段、Read View、Undo log。* 另外MVCC只在 Read Committed 和 Repeatable Read两个隔离级别下工作，其他两个隔离级别和MVCC不兼容</code></pre></li><li><p>索引的类型</p><pre class="language-none"><code class="language-none">主键索引数据表的主键列使用的就是主键索引。一张数据表有只能有一个主键，并且主键不能为null，不能重复。在MySQL的InnoDB的表中，当没有显示的指定表的主键时，InnoDB会自动先检查表中是否有唯一索引的字段，如果有，则选择该字段为默认的主键，否则InnoDB将会自动创建一个6Byte的自增主键。</code></pre><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/mysql/%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95.png" loading="lazy"></p><pre class="language-none"><code class="language-none">二级索引(辅助索引)二级索引又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。唯一索引，普通索引，前缀索引等索引属于二级索引。1)唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。2)普通索引(Index)：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。3)前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小，因为只取前几个字符。4)全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6之前只有MYISAM引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。</code></pre></li></ul><ul><li><p>聚集索引与非聚集索引</p><pre class="language-none"><code class="language-none">聚集索引聚集索引即索引结构和数据一起存放的索引。主键索引属于聚集索引。在Mysql中，InnoDB引擎的表的.ibd文件就包含了该表的索引和数据，对于InnoDB引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。聚集索引的优点聚集索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。聚集索引的缺点1)依赖于有序的数据：因为B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好,否则类似于字符串或UUID这种又长又难比较的数据,插入或查找的速度肯定比较慢。2)更新代价大：如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且况聚集索引的叶子节点还存放着数据,修改代价肯定是较大的,所以对于主键索引来说,主键一般都是不可被修改的。非聚集索引非聚集索引即索引结构和数据分开存放的索引。二级索引属于非聚集索引。MYISAM引擎的表的.MYI文件包含了表的索引，该表的索引(B+树)的每个叶子非叶子节点存储索引，叶子节点存储索引和索引对应数据的指针，指向.MYD文件的数据。非聚集索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。非聚集索引的优点        更新代价比聚集索引要小,非聚集索引的更新代价就没有聚集索引那么大了,        非聚集索引的叶子节点是不存放数据的非聚集索引的缺点1)跟聚集索引一样，非聚集索引也依赖于有序的数据2)可能会二次查询(回表)：这应该是非聚集索引最大的缺点了。当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。</code></pre></li><li><p>非聚集索引一定回表查询吗(覆盖索引)?</p><pre class="language-none"><code class="language-none">非聚集索引不一定回表查询。试想一种情况，用户准备使用SQL查询用户名，而用户名字段正好建立了索引。SELECT name FROM table WHERE name&#x3D;&#39;guang19&#39;;那么这个索引的 key 本身就是 name，查到对应的 name 直接返回就行了，无需回表查询。覆盖索引如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为“覆盖索引”。我们知道在InnoDB存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次。这样就会比较慢覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。如主键索引，如果一条SQL需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条SQL需要查询name，name字段正好有索引，那么直接根据这个索引就可以查到数据，也无需回表。</code></pre></li><li><p>创建索引的注意事项</p><pre class="language-none"><code class="language-none">1)选择合适的字段创建索引* 不为NULL的字段* 被频繁查询的字段* 被作为条件查询的字段* 频繁需要排序的字段* 被经常频繁用于连接的字段2)被频繁更新的字段应该慎重建立索引。虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。3)尽可能的考虑建立联合索引而不是单列索引。因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗B+树。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。4)注意避免冗余索引。冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a)，那么索引(a)就是冗余索引。5)考虑在字符串类型的字段上使用前缀索引代替普通索引。前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引代替普通索引。</code></pre></li><li><p>使用索引的一些建议</p><pre class="language-none"><code class="language-none">1)对于中到大型表索引都是非常有效的，但是特大型表的话维护开销会很大，不适合建索引2)避免where子句中对字段施加函数，这会造成无法命中索引。3)在使用InnoDB时使用与业务无关的自增主键作为主键，即使用逻辑主键，而不要使用业务主键。4)删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗MySQL 5.7 可以通过查询sys 库的schema_unused_indexes视图来查询哪些索引从未被使用在使用limit offset查询缓慢时，可以借助索引来提高性能</code></pre></li><li><p>MySQL如何为表字段添加索引？</p><pre class="language-none"><code class="language-none">1)添加 PRIMARY KEY（主键索引）ALTER TABLE &#96;table_name&#96; ADD PRIMARY KEY ( &#96;column&#96; )2)添加 UNIQUE(唯一索引)ALTER TABLE &#96;table_name&#96; ADD UNIQUE ( &#96;column&#96; )3)添加 INDEX(普通索引)ALTER TABLE &#96;table_name&#96; ADD INDEX index_name ( &#96;column&#96; )4)添加 FULLTEXT(全文索引)ALTER TABLE &#96;table_name&#96; ADD FULLTEXT ( &#96;column&#96;)5)添加多列索引ALTER TABLE &#96;table_name&#96; ADD INDEX index_name ( &#96;column1&#96;, &#96;column2&#96;, &#96;column3&#96; )</code></pre></li><li><p>最左匹配原则<br>最左匹配原则建立在联合索引的基础之上，最左优先，以最左边的为起点任何连续的索引都能匹配上。<br>同时遇到范围查询(&gt;、&lt;、between、like)就会停止匹配。</p></li><li><p>索引下推</p><pre class="language-none"><code class="language-none">索引下推（index condition pushDown ）简称ICP，在Mysql5.6的版本上推出，用于优化查询。索引条件下推优化可以减少存储引擎查询基础表的次数，也可以减少MySQL服务器从存储引擎接收数据的次数。例如：假设有一张表，有id,name,age,gender四个字段，id是主键，name,age是联合索引当sql为：select * from table where name &#x3D;? and age &#x3D;?时在没有索引下推之前,先根据name从存储引擎中获取复合规则的数据，然后在mysql的server层对age进行过滤有索引下推之后，根据name,age两个的条件从存储引擎中获取对应的数据。索引下推在非主键索引上的优化，可以有效减少回表的次数，大大提升了查询的效率。mysql默认开启索引下推功能。</code></pre></li></ul><blockquote><h5 id="一条SQL语句的执行过程"><a href="#一条SQL语句的执行过程" class="headerlink" title="一条SQL语句的执行过程"></a>一条SQL语句的执行过程</h5></blockquote><ul><li><p>先看看mysql的基本组件</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/mysql/mysql组件.png" / loading="lazy"><pre class="language-none"><code class="language-none">* 连接器：身份认证和权限相关(登录 MySQL 的时候)。* 查询缓存：执行查询语句的时候，会先查询缓存（MySQL 8.0 版本后移除，因为这个功能不太实用）。* 分析器：没有命中缓存的话，SQL 语句就会经过分析器，分析器说白了就是要先看你的SQL语句要干嘛，再检查你的SQL语句语法是否正确。* 优化器：按照MySQL认为最优的方案去执行。* 执行器：执行语句，然后从存储引擎返回数据。简单来说MySQL主要分为Server层和存储引擎层：Server层:主要包括连接器、查询缓存、分析器、优化器、执行器等，所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图，函数等，还有一个通用的日志模块binLog 日志模块。存储引擎：主要负责数据的存储和读取，采用可以替换的插件式架构，支持InnoDB、MyISAM、Memory等多个存储引擎，其中InnoDB引擎有自有的日志模块redoLog模块。现在最常用的存储引擎是InnoDB，它从MySQL5.5.5版本开始就被当做默认存储引擎了。</code></pre></li><li><p>一条SQL语句是如何执行的呢？</p><pre class="language-none"><code class="language-none">我们的sql可以分为两种，一种是查询，一种是更新（增加，更新，删除）。查询语句select * from tb_student  A where A.age&#x3D;&#39;18&#39; and A.name&#x3D;&#39; 张三 &#39;;1)先检查该语句是否有权限，如果没有权限，直接返回错误信息，如果有权限，在MySQL8.0版本以前，会先查询缓存，以这条sql语句为key在内存中查询是否有结果，如果有直接缓存,如果没有,执行下一步。2)通过分析器进行词法分析，提取sql语句的关键元素，比如提取上面这个语句是查询select，提取需要查询的表名为tb_student,需要查询所有的列，查询条件是这个表的 id&#x3D;&#39;1&#39;。然后判断这个sql语句是否有语法错误，比如关键词是否正确等等，如果检查没问题就执行下一步。3)接下来就是优化器进行确定执行方案，上面的sql语句，可以有两种执行方案：a.先查询学生表中姓名为“张三”的学生，然后判断是否年龄是18。b.先找出学生中年龄18岁的学生，然后再查询姓名为“张三”的学生。那么优化器根据自己的优化算法进行选择执行效率最好的一个方案(优化器认为，有时候不一定最好)。那么确认了执行计划后就准备开始执行了。4)进行权限校验，如果没有权限就会返回错误信息，如果有权限就会调用数据库引擎接口，返回引擎的执行结果。更新语句update tb_student A set A.age&#x3D;&#39;19&#39; where A.name&#x3D;&#39; 张三 &#39;;其实这条语句也基本上会沿着上一个查询的流程走，只不过执行更新的时候肯定要记录日志啦，这就会引入日志模块了，MySQL自带的日志模块式binlog（归档日志），所有的存储引擎都可以使用，我们常用的InnoDB引擎还自带了一个日志模块redoLog（重做日志），我们就以InnoDB模式下来探讨这个语句的执行流程。流程如下：1)先查询到张三这一条数据，如果有缓存，也是会用到缓存。2)然后拿到查询的语句，把age改为19，然后调用引擎 API 接口，写入这一行数据，InnoDB引擎把数据保存在内存中，同时记录redoLog，此时redoLog进入prepare状态，然后告诉执行器，执行完成了，随时可以提交。3)执行器收到通知后记录binlog，然后调用引擎接口，提交redoLog为提交状态。4)更新完成。</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM中堆内存基础内容</title>
      <link href="2021/06/07/JVM%E4%B8%AD%E5%A0%86%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
      <url>2021/06/07/JVM%E4%B8%AD%E5%A0%86%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h5></blockquote><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/jvm/%E5%A0%86%E5%86%85%E5%AD%981.png" loading="lazy"></p><blockquote><h5 id="堆内存区域划分"><a href="#堆内存区域划分" class="headerlink" title="堆内存区域划分"></a>堆内存区域划分</h5></blockquote><p>Java中的堆是JVM所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p><p>在Java中，堆被划分成两个不同的区域：新生代 ( Young，年轻代 )、老年代 ( Old )。<br>新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p><p>从图中可以看出： 堆大小 = 新生代 + 老年代。其中，<strong>堆的大小可以通过参数 –Xms、-Xmx 来指定</strong>。</p><p>以下都是基于JDK1.6版本</p><p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，<br>即：新生代 ( Young ) = 1/3 的堆空间大小，老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p><p>默认的，Eden : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，<br>即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p><p>JVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。因此，新生代实际可用的内存空间为 9/10 ( 即90% )的新生代空间。</p><blockquote><h5 id="JVM堆内存解释一"><a href="#JVM堆内存解释一" class="headerlink" title="JVM堆内存解释一"></a>JVM堆内存解释一</h5></blockquote><ul><li><p>大部分对象创建都是在Eden的<br>（除了个别大对象外，<strong>大对象内存可以设置参数【-XX:PretenureSizeThreshold=字节数】配置，<br>超过配置内存的大对象直接进入老年代</strong>，from和to不是固定的（可以互换身份，Survivor区），<br>初始化的时候其中一个是空的。</p></li><li><p>新生代的 Minor GC 中，一个Survivor区中数据复制进去，另个是空的，下一次GC的时候，有数据的是from Survivor，没数据的to Survivor，GC的时候，from区和Eden区的数据都复制到to中。这样from和to就互换身<br>份，一直这么循环处理。</p></li><li><p>第2步中复制一次，所有对象年龄加1，当任意一个对象复制到一定次数（<strong>默认15次，<br>可以配置【-XX:MaxTenuringThreshold=数字】参数进行修改</strong>）的时候，就被复制到了老年代</p></li></ul><blockquote><h5 id="JVM堆内存解释二"><a href="#JVM堆内存解释二" class="headerlink" title="JVM堆内存解释二"></a>JVM堆内存解释二</h5></blockquote><p>大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 from或者 to，并且对象的年龄还会加 1(Eden 区-&gt;Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度<br>（默认为 15 岁），就会被晋升到老年代中。</p><p><strong>元空间，永久代，方法区之间的关系</strong></p><p><strong>个人理解</strong>：元空间和永久代只不过是方法区的实现，即方法区是规范的名字，元空间和永久代是hotspot虚拟机<br>独有的，元空间是新版本出现的，替代了永久代，永久代并不在堆内存中，而是在JVM内存中，受到JVM内存的限<br>制，而元空间是在本地内存中，只受到本机实际内存限制。</p><p>永久代是Hotspot虚拟机特有的概念，是方法区的一种实现，别的JVM都没有这个东西。在Java 8中，永久代被彻底移除，取而代之的是另一块与堆不相连的本地内存——元空间。<br>永久代或者“Perm Gen”包含了JVM需要的应用元数据，这些元数据描述了在应用里使用的类和方法。<br>注意：永久代不是Java堆内存的一部分。永久代存放JVM运行时使用的类。永久代同样包含了Java SE库的类和方<br>法。永久代的对象在full GC时进行垃圾收集。</p><ul><li>整个永久代有一个 JVM 本身设置固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内<br>存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。</li><li>你可以使用**-XX：MaxMetaspaceSize 标志设置最大元空间大小，默认值为 unlimited<strong>，这意味着它只受系<br>统内存的限制。</strong>-XX：MetaspaceSize 调整标志定义元空间的初始大小**，如果未指定此标志，<br>则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。</li><li>元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 MaxPermSize**(永久代最大大小)**控制了,<br>而由系统的实际可用空间来控制，这样能加载的类就更多了。</li></ul><blockquote><h5 id="垃圾收集器GC收集标准"><a href="#垃圾收集器GC收集标准" class="headerlink" title="垃圾收集器GC收集标准"></a>垃圾收集器GC收集标准</h5></blockquote><p>在java语言中，判断一块内存空间是否符合垃圾收集器收集标准的标准只有两个：</p><ul><li><p>给对象赋值为null，以下没有调用过。</p></li><li><p>给对象赋了新的值，重新分配了内存空间。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基础内容笔记</title>
      <link href="2021/06/02/Nginx%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/"/>
      <url>2021/06/02/Nginx%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>最近学习效率有点慢，学校方面太多事了，一到期末就有一堆结课作业。<br>Nginx笔记放在github，<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/nginx/nginx.txt">nginx</a><br>6月份处理学校结课作业，学习前端，看看spring，mybatis底层</p>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的负载均衡和动静分离案例</title>
      <link href="2021/06/02/Nginx%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%92%8C%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E6%A1%88%E4%BE%8B/"/>
      <url>2021/06/02/Nginx%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%92%8C%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h4></blockquote><ul><li><h5 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h5><p>浏览器地址栏输入地址<code>http://linux服务器地址/edu/a.html</code>，实现有负载均衡的效果，<br>即请求平均分摊到两个端口中，8080,8081.</p></li><li><h5 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h5><ul><li><p>准备两台tomcat服务器，一台8080，一台8081</p></li><li><p>在两台tomcat里面webapps目录中，创建名称是edu文件夹，在edu文件夹中创建页面a.html，用于测试</p></li><li><p>在nginx的配置文件中进行负载均衡的配置</p><pre class="language-none"><code class="language-none">http&#123;upstream myserver &#123;#ip_hash 这里千万不能使用ip_hash机制，ip_hash机制是让用户访问同一个后台tomcat。server 149.28.29.194:8080 weight&#x3D;1;server 149.28.29.194:8081 weight&#x3D;1;#fair&#125;server &#123;listen 80;server_name 149.28.29.194;location &#x2F; &#123;proxy_pass http:&#x2F;&#x2F;myserver;&#125;&#125;&#125;实现效果就是：当我以http:&#x2F;&#x2F;linux服务器地址&#x2F;edu&#x2F;a.html请求发送到反向代理服务器后，反向代理服务器将所有这种请求平均分摊到两个tomcat中去。</code></pre></li></ul></li><li><p>nginx中负载均衡的策略</p><ul><li><p>轮询(默认)<br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器宕机，能自动剔除，<br>就是如果其中有一台后端服务器宕机就不让这台后端服务器处理请求，听起来像是屁话。</p></li><li><p>weight(权重策略)<br>weight代表权重，默认为1，权重越高被分配的客户端请求越多指定轮询几率，<br>weight和访问比率成正比，用于后端服务器性能不均的情况</p></li><li><p>ip_hash<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题<br>简而言之，你每次访问的都是后端同一个服务器，因为你的访问ip不变，计算后hash结果自然一样的。</p></li><li><p>fair(第三方)<br>按后端服务器的响应时间来分配请求，响应时间短的优先分配</p></li></ul></li></ul><blockquote><h4 id="Nginx动静分离"><a href="#Nginx动静分离" class="headerlink" title="Nginx动静分离"></a>Nginx动静分离</h4></blockquote><ul><li><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>Nginx动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。<br>严格意义上说应该是动态请求跟静态请求分开，可以理解成使用nginx处理静态页面，tomcat处理动态请求。</p></li><li><h5 id="动静实现方式"><a href="#动静实现方式" class="headerlink" title="动静实现方式"></a>动静实现方式</h5><ul><li><p>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案</p></li><li><p>另外一种就是动态跟静态文件混合在一起发布，通过nginx来分开。</p><pre class="language-none"><code class="language-none">通过location指定不同的后缀名实现不同的请求转发，通过expires参数设置，可以使浏览器缓存过期时间，减少与服务器之间的请求和流量。具体expires定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量，此种方法非常适合不经常变动的资源(如果经常更新的文件，不建议使用expires来缓存)如果给一个资源设置过期时间为3天，表示在这三天之内访问这个url，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304，如果有修改，则直接从服务器重新下载，返回状态码200</code></pre></li></ul></li><li><h5 id="动静分离案例，使用第一种方式实现"><a href="#动静分离案例，使用第一种方式实现" class="headerlink" title="动静分离案例，使用第一种方式实现"></a>动静分离案例，使用第一种方式实现</h5><ul><li><p>实现效果</p><p>通过nginx将静态资源的请求转发到linux系统静态资源位置，动态请求则转发给tomcat</p></li><li><p>具体实现</p><pre class="language-none"><code class="language-none">1)在linux系统中准备静态资源，用于访问创建目录&#x2F;data&#x2F;image和www文件夹，在这两个目录下放一些静态资源，html页面和图片2)在nginx.conf中进行配置    server &#123;        listen 80;        server_name 149.28.29.194;        location &#x2F;www&#x2F; &#123;        root &#x2F;staticData&#x2F;;                #列出访问目录，即访问http:&#x2F;&#x2F;149.28.29.194&#x2F;www&#x2F;时，#显示&#x2F;staticData&#x2F;www目录下所有文件        autoindex on;        &#125;        location &#x2F;image&#x2F; &#123;        root &#x2F;staticData&#x2F;;        autoindex on;        &#125;    &#125;3)我们通过访问http:&#x2F;&#x2F;149.28.29.194&#x2F;image&#x2F;1.jpg时，反向代理服务器匹配到image路径后，然后找到该linux系统下&#x2F;staticData&#x2F;image&#x2F;1.jpg资源注意：location中的uri(&#x2F;www&#x2F;,&#x2F;image&#x2F;)，要求你在&#x2F;staticData&#x2F;目录下必须有这些目录，www,imagenginx先找到staticData目录，再根据你的uri(www，image)，在staticData目录下找这些目录。</code></pre></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理案例</title>
      <link href="2021/06/01/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%A1%88%E4%BE%8B/"/>
      <url>2021/06/01/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="反向代理概念"><a href="#反向代理概念" class="headerlink" title="反向代理概念"></a>反向代理概念</h4></blockquote><p>正向代理指的是：用户隐藏自己的ip地址，使用正向代理服务器去访问服务器，正向代理，代理的是客户端用户</p><p>反向代理指的是：真实服务器端隐藏自己的ip地址，使用反向代理服务器去接收用户请求，<br>反向代理，代理的是服务器端</p><blockquote><h4 id="反向代理案例一"><a href="#反向代理案例一" class="headerlink" title="反向代理案例一"></a>反向代理案例一</h4></blockquote><ul><li><h5 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h5><p>打开浏览器，在浏览器地址栏输入地址<code>www.123.com</code>，跳转到Linux系统的tomcat主页面中。</p></li><li><h5 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h5><ul><li><p>在linux系统上安装nginx,安装tomcat,使用默认端口8080，并启动起来</p><pre class="language-none"><code class="language-none">1)安装tomcat之前需要安装java环境:sudo apt install openjdk-8-jdk使用java -version检查安装java环境是否成功。2)下载tomcat8并且解压下载：sudo wget https:&#x2F;&#x2F;downloads.apache.org&#x2F;tomcat&#x2F;tomcat-8&#x2F;v8.5.66&#x2F;bin&#x2F;apache-tomcat-8.5.66.tar.gz解压：tar zxf apache-tomcat-8.5.66.tar.gz启动tomcat：来到tomcat&#x2F;bin目录下执行:.&#x2F;startup.sh关闭tomcat：来到tomcat&#x2F;bin目录下执行:.&#x2F;shutdown.sh3)设置防火墙查看当前防火墙已经开放的端口：firewall-cmd --list-all添加http服务端口：    firewall-cmd --add-service&#x3D;http --permanent    firewall-cmd --add-port&#x3D;80&#x2F;tcp --permanent    firewall-cmd --add-port&#x3D;8080&#x2F;tcp --permanent重新加载防火墙：firewall-cmd --reload还是不可以的话，可能是vps服务商的防火墙策略原因，去vps服务商官网配置防火墙本次实验，需要开放8080,8081,8082,9001端口，根据上面命令设置好这些端口4)测试在window浏览器中输入http:&#x2F;&#x2F;linux服务器ip:8080，如果设置成功，就会看到tomcat启动页但这种访问并没有使用nginx，继续往下看。</code></pre></li><li><p>在window中的hosts文件中配置域名-ip解析</p><pre class="language-none"><code class="language-none">hosts目录路径：C:\Windows\System32\drivers\etc添加：自己linux服务器ip地址  www.123.com配置好后，我们可以通过在window浏览器中输入：www.123.com:8080，就能访问到tomcat首页记住一定要刷新本机中的dns缓存，刷新缓存命令：ipconfig&#x2F;flushdns注意：我们已经实现通过在浏览器输入www.123.com:8080查看到tomcat首页，这个过程中并没有使用反向代理服务器，我们要实现的是，在浏览器输入www.123.com使用默认的80端口即可查看到tomcat首页，这个过程需要我们首先访问反向代理服务器的ip地址和80端口，由反向代理服务器去将请求转发到我们真正的服务器ip地址和8080端口</code></pre></li><li><p>在nginx进行请求转发的配置(反向代理)</p><pre class="language-none"><code class="language-none">server &#123;listen 80 default_server;   #反向代理服务器监听的端口server_name 149.28.29.194;  #反向代理服务器的ip地址location &#x2F; &#123;#当监听到有请求访问反向代理服务器的80端口，就转发到真实服务器。proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;   &#125;&#125;配置好后，重启nginx服务至此，配置nginx配置好后，通过访问在本电脑访问www.123.com，则首先根据我们hosts文件中配置，将www.123.com转换成反向代理服务器的ip地址，即访问反向代理服务器的80端口，此时nginx监听到有请求访问后，将请求转发到真实服务器的ip地址和端口本次实验nginx和tomcat都在一个linux系统上，所以是转发到本地的8080端口。</code></pre></li></ul></li></ul><blockquote><h4 id="反向代理案例二"><a href="#反向代理案例二" class="headerlink" title="反向代理案例二"></a>反向代理案例二</h4></blockquote><ul><li><h5 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h5><pre class="language-none"><code class="language-none">使用nginx反向代理，根据访问的路径跳转到不同端口的服务中，nginx监听端口为9001访问http:&#x2F;&#x2F;127.0.0.1:9001&#x2F;edu&#x2F;a.html     直接跳转到127.0.0.1：8080&#x2F;edu&#x2F;a.html访问http:&#x2F;&#x2F;127.0.0.1:9001&#x2F;vod&#x2F;b.html     直接跳转到127.0.0.1：8081&#x2F;vod&#x2F;b.html</code></pre></li><li><h5 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h5><ul><li><p>搭建两个tomcat服务，监听8080端口，8081端口</p><p>直接复制tomcat安装目录到另一个文件夹，修改<code>tomcat/conf/server.xml</code>文件将监听的端口<br>更改成8081端口，其他监听的端口也更改掉，防止和之前的tomcat监听的端口冲突。配置好后，<br>启动两个tomcat，最后在window浏览器测试两个tomcat是否成功。</p></li><li><p>在两个tomcat的webapps目录下分别创建一个项目edu，vod，并在项目下创建测试html</p><pre class="language-none"><code class="language-none">在tomcat8080的webapps目录下增加edu目录，并在该目录下新增a.html，在该文件中写&lt;h1&gt;this is port 8080&lt;&#x2F;h1&gt;，当我们访问http:&#x2F;&#x2F;linuxIp地址:8080&#x2F;edu&#x2F;a.html就可以访问到a.html内容。在tomcat8081的webapps目录下增加vod目录，并增加b.html，文件内容填8081端口，操作同上，当我们访问8081端口时，即可看到b.html内容注意：我们要实现的效果是访问服务器的9091端口，路径是&#x2F;edu&#x2F;a.html时，给我找到tomcat8080端口，显示edu&#x2F;a.html页面，路径是&#x2F;vod&#x2F;b.html时，给我找到tomcat8081端口，显示vod&#x2F;b.html页面</code></pre></li><li><p>配置反向代理服务器，<code>nginx.conf</code>，并重新加载配置文件启动nginx</p><pre class="language-none"><code class="language-none">server &#123;listen 9001 default_server;server_name 149.28.29.194;location ~ &#x2F;edu&#x2F; &#123;proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;&#125;location ~ &#x2F;vod&#x2F; &#123;proxy_pass http:&#x2F;&#x2F;127.0.0.1:8081;&#125;&#125;配置完毕后，实现的效果是：访问http:&#x2F;&#x2F;149.28.29.194:9001&#x2F;edu&#x2F;a.html后反向代理服务器监听到该请求，根据路径中edu，就去访问本地8080端口，即我们配置的tomcat8080服务的webapps下的edu项目下的a.html，相当于将请求替换成了：http:&#x2F;&#x2F;149.28.29.194:8080&#x2F;edu&#x2F;a.html</code></pre></li><li><p>location指令说明</p><pre class="language-none"><code class="language-none">该指令用于匹配URL，语法如下：location [ &#x3D; | ~ | ~* | ^~ ] uri &#123;&#125;1)&#x3D; :用于不含正则表达式的uri前，要求请求字符串与uri严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求2)~ :用于表示uri包含正则表达式，并且区分大小写，例如edu和EDU3)~* :用于表示uri包含正则表达式，并且不区分大小写4)^~ :用于不含正则表达式的uri前，要求nginx服务器找到标识uri和请求字符串匹配度最高的location|后立即使用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配注意：如果uri包含正则表达式，则必须要有~或者~*标识</code></pre></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础内容笔记</title>
      <link href="2021/05/30/Redis%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/30/Redis%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>Redis基础笔记</p></blockquote><p>Redis中大体的基本内容都比较了解，但却没有实际开发经验，实践方面还非常匮乏<br>Redis笔记上传到github上了，<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/redis%E7%AC%94%E8%AE%B0.txt">redis笔记</a></p><p>下个目标看nginx网课，6月份就主要学学前端内容了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Redis集群笔记</title>
      <link href="2021/05/29/%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/29/%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h5></blockquote><p>明天还剩最后一点redis视频了，看完就整理好笔记放在github上，然后就要准备学习nginx了<br>6月份的任务有很多，例如：</p><ul><li>spring，mybatis源码应该看看</li><li>老师弄的项目得跟着做，听说涉及到了zookeeper,dubbo,nginx等等</li><li>计算机网络需要学习</li><li>前端JS，vue，这部分是我6月份主要学习的内容</li><li>多线程，JVM更加底层的内容，一些数据结构算法，打算实习的时候可以再学习，这部分比较耗时间</li></ul><blockquote><h5 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h5><p>无中心化集群指的是，集群中的所有redis服务器都能作为请求的入口，当请求来到不合适的redis服务器时<br>该服务器会将请求转发给其他redis服务器，减少并发的压力。</p></blockquote><ul><li><p>什么是集群<br>redis集群实现了对redis的水平扩容，即启动n个redis节点，将整个数据库分布存储在这n个节点中，<br>每个结点存储总数据的1/n，redis集群通过分区来提供一定程度的可用性：即使集群中有一部分节点失效<br>或者无法进行通信，集群也可以继续处理命令请求。</p></li><li><p>在上一个例子，一主二从基础之上进行搭建</p><ul><li><p>删除三份rdb文件，该文件默认在<code>/var/lib/redis</code>目录下</p></li><li><p>修改自定义的redis6379.conf文件，上个例子中，该文件在<code>/redisFile</code>目录下</p><pre class="language-none"><code class="language-none">#原文件内容如下：include &#x2F;redisFile&#x2F;redis.confpidfile &quot;&#x2F;var&#x2F;run&#x2F;redis&#x2F;redis6379.pid&quot;port 6379dbfilename &quot;dump6379.rdb&quot;# Generated by CONFIG REWRITEdaemonize yesalways-show-logo yeslogfile &quot;&#x2F;var&#x2F;log&#x2F;redis&#x2F;redis-server.log&quot;save 900 1save 300 10save 60 10000user default on nopass ~* +@all#rdb file locationdir &quot;&#x2F;var&#x2F;lib&#x2F;redis&quot;replicaof 127.0.0.1 6381#修改成以下内容：include &#x2F;redisFile&#x2F;redis.confpidfile &quot;&#x2F;var&#x2F;run&#x2F;redis&#x2F;redis6379.pid&quot;port 6379dbfilename &quot;dump6379.rdb&quot;cluster-enabled yes #打开集群模式cluster-config-file nodes-6379.conf #设置节点配置文件名cluster-node-timeout 15000 #设定节点失联时间，超过该时间(毫秒)，集群自动进行主从切换</code></pre></li><li><p>修改好后，复制该文件到同一目录下/redisFile，命名为：redis6380.conf，redis6381.conf<br>redis6382.conf，redis6383.conf，redis6384.conf，一共6台redis进程配制文件。<br>因为搭建集群最少需要6台redis服务器，本次集群实验配置3主3从，端号是6379,6380,6381,6382,<br>6383,6384，其中6379-6381作为主机，6382-6384作为从机，复制后，将各个文件中的内容全部修改成<br>各自的端口号和文件名，修改各自端口号及文件名有快捷方式：例如编辑进入6380.conf</p><pre class="language-none"><code class="language-none">输入&quot;:%s&#x2F;6379&#x2F;6380&quot;,即可将6380.conf文件中6379字符替换成6380</code></pre></li><li><p>全部修改完毕之后，然后修改<code>/redisFile/redis.conf</code>文件，这个文件是拷贝自redis的配置文件<br>修改其中参数为：<code>protected-mode no</code>，即将redis保护模式关闭，另外如果有哨兵进程在运行<br>需要杀掉哨兵进程sentinel</p></li><li><p>一切准备完毕后，根据我们6个配置文件启动6台redis服务器</p><pre class="language-none"><code class="language-none">#如果使用apt命令安装redis，使用如下命令redis-server &#x2F;redisFile&#x2F;redis6379.confredis-server &#x2F;redisFile&#x2F;redis6380.confredis-server &#x2F;redisFile&#x2F;redis6381.conf...#如果使用下载解压编译方式安装redis，需要进入redis&#x2F;src目录下使用如下命令.&#x2F;redis-server &#x2F;redisFile&#x2F;redis6379.conf.&#x2F;redis-server &#x2F;redisFile&#x2F;redis6380.conf.&#x2F;redis-server &#x2F;redisFile&#x2F;redis6381.conf...成功启动6台服务后，会在&#x2F;var&#x2F;lib&#x2F;redis&#x2F;目录下会生成各自的nodes-63xx.conf没有配置集群之前，这个目录放着三台redis服务器的rdb文件。#查看6台redis服务器情况root@keyi:&#x2F;redisFile# ps -ef | grep redis</code></pre></li><li><p>接下来将6台redis服务器合成一个redis集群，使用如下命令</p><pre class="language-none"><code class="language-none">#使用apt方式，使用解压编译方式需要进入redis&#x2F;src目录下执行redis-cli --cluster create --cluster-replicas 1 45.32.124.62:6379 45.32.124.62:6380 45.32.124.62:6381 45.32.124.62:6382 45.32.124.62:6383 45.32.124.62:6384#合成时会问你是否采用redis设置的主从配置，即3组主从，每台主机一台从机，输入yes确定#注意：1)不要直接复制以上命令，直接复制有换行符，在linux系统上粘贴有问题2)--cluster create 表示创建集群的方式3)--cluster-replicas 1 表示使用最简单的集群方式，3台主机，每台主机1台从机，一共6台4)后面是6台redis服务器的ip地址和端口号，ip地址不能填本地地址127.0.0.1，而是真实linux的ip地址5)本次实验使用redis6，如果是redis低版本，则需要ruby环境，高版本redis已经集成了ruby环境</code></pre></li><li><p>测试集群</p><pre class="language-none"><code class="language-none">1)以前配置一主二从，使用测试客户端连接redis时，通过redis-cli -p 6379命令连接主机    现在集群方式就不一样了，通过redis-cli -c -p 6379命令连接集群中redis服务器，    -c 表示采用集群策略连接,连接后，在任意redis测试客户端上添加数据都会自动切换到相应的写主机。    即：当我连接到某个从机，进行add操作时，集群会自动将请求交给其他主机进行处理。2)连接到测试客户端后，通过cluster nodes命令查看集群信息    root@keyi:~# redis-cli -c -p 6379    127.0.0.1:6379&gt; cluster nodes</code></pre></li></ul></li><li><p>redis集群如何分配这6个节点<br>一个集群至少要有三个主节点，选项 –cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点<br>分配原则：尽量保证每个主数据库运行在不同的ip地址，每个从库和主库不在一个ip地址上。</p></li><li><p>什么是slots?</p><ul><li><p>定义</p><ol><li>slots指的是插槽的意思，一个redis集群包含16384个插槽(0-16383)，数据库中的每个键都属于这16384个插槽的其中一个</li><li>集群使用公式CRC16(key)%16384来计算键key属于哪个槽，其中CRC16(key)语句用于计算键key的CRC16校验和，这种方式很像使用hash函数计算</li><li>集群中的每个主节点负责处理一部分插槽，例如主机1负责0-5460，主机2负责5461-10922，<br>主机3负责10923-16383，当在主机1保存数据时，redis会计算key值，计算出该数据位于哪一个<br>插槽，如果该数据不属于本主机负责的插槽，就会将请求转交给负责该插槽的主机，<br>让其他处理进行保存处理。</li></ol></li><li><p>注意：使用集群后，不能再使用mset,mget命令进行多键操作，可以通过{}来定义组的概念，<br>从而使key中{}内相同的键值对放到同一个slot中去，其实就是根据组指定的数值进行计算属于哪一个插槽</p><pre class="language-none"><code class="language-none">127.0.0.1:6379&gt; mset name&#123;keyi&#125; wanyi age&#123;keyi&#125; 22-&gt; Redirected to slot [14360] located at 45.32.124.62:6381OK45.32.124.62:6381&gt; mget name&#123;keyi&#125; age&#123;keyi&#125;1) &quot;wanyi&quot;2) &quot;22&quot;</code></pre></li><li><p>计算集群中，key值属于哪一个插槽</p><pre class="language-none"><code class="language-none">45.32.124.62:6381&gt; cluster keyslot name(integer) 579845.32.124.62:6381&gt; cluster keyslot name(integer) 579845.32.124.62:6381&gt; cluster keyslot keyi(integer) 14360</code></pre></li><li><p>计算某个插槽中有几个key，有几个键，注意每个主机只能看到自己负责的插槽中的数据</p><pre class="language-none"><code class="language-none">45.32.124.62:6381&gt; cluster countkeysinslot 14360(integer) 2</code></pre></li><li><p>返回插槽中key值，14360是指定的插槽，10是指定返回的数量</p><pre class="language-none"><code class="language-none">45.32.124.62:6381&gt; cluster getkeysinslot 14360 101) &quot;age&#123;keyi&#125;&quot;2) &quot;name&#123;keyi&#125;&quot;</code></pre></li></ul></li><li><p>故障恢复</p><ul><li>如果主节点下线，从节点能否自动升为主节点？注意：15秒超时<br>答：可以，如果某个主机宕机后，则属于该主机的从机就会变成新主机，<br>当原主机恢复后，就变成新主机的从机</li><li>主节点恢复后，主从关系会如何？<br>  主节点回来后变成从机</li><li>如果所有某一段插槽的主从节点都宕机(某个主机和属于它的从机都宕机了)，redis服务是否还能继续？<br>不一定，如果某个主机和属于它的从机都宕机了，而且redis.conf中的参数cluster-require-full-coverage<br>为yes那么整个集群都挂掉，如果该参数值是no，那么属于该主机负责的插槽全都不能使用，<br>也无法存储。</li></ul></li><li><p>注意：即使连接的不是主机，集群会自动切换主机存储，主机写，从机读，无中心化主从集群，<br>无论从哪台主机写数据，其他主机都能读到数据，<br>例如尽管当前6379redis进程是从机，但还是可以接收请求，将请求转发给其他主机处理</p><pre class="language-none"><code class="language-none">127.0.0.1:6379&gt; set money 100-&gt; Redirected to slot [11921] located at 45.32.124.62:6381OK</code></pre></li><li><p>使用集群的好处与不足<br>好处：实现扩容，分摊压力，无中心化配置相对简单<br>不足：多键操作是不被支持的，多键的redis事务是不被支持的，lua脚本不被支持</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis配置主从复制及哨兵模式</title>
      <link href="2021/05/29/Redis%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8F%8A%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/05/29/Redis%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8F%8A%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h5></blockquote><p>最近一段时间在学redis，今天29号，redis学的快差不多了，再过几天把笔记放上来<br>先来了解一下Linux系统中是如何配置Redis主从复制和哨兵的吧</p><blockquote><h5 id="配置Redis主从复制，实现读写分离"><a href="#配置Redis主从复制，实现读写分离" class="headerlink" title="配置Redis主从复制，实现读写分离"></a>配置Redis主从复制，实现读写分离</h5></blockquote><ul><li><p>登录你的linux系统，推荐ubuntu，在ubuntu系统上直接输入以下命令</p><pre class="language-none"><code class="language-none">#apt是Debian系操作系统的包管理工具sudo apt update#安装redis-server，redis-sentinelsudo apt install redis-serversudo apt install redis-sentinel使用apt命令安装后，可以直接在命令行中输入redis-server或redis-sentinel启动服务</code></pre></li><li><p>如果你使用不了apt命令，则在安装redis之前需要配置其他环境</p><ul><li><p>安装gcc环境</p><pre class="language-none"><code class="language-none">#CentOS系统下安装gccyum -y install gcc#Ubuntu系统下安装gccapt install gcc#查看gcc版本gcc -vgcc环境是C语言的环境，redis底层是C语言编写的</code></pre></li><li><p>安装make环境</p><pre class="language-none"><code class="language-none">#CentOS系统下安装makeyum -y install make#Ubuntu系统下安装makeapt install make#查看make版本make -v注意：使用这些命令是需要linux联网的</code></pre></li><li><p>最后安装redis环境</p><pre class="language-none"><code class="language-none">#下载redis安装包，解压，进入redis目录使用make命令编译wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-6.0.8.tar.gztar xzf redis-6.0.8.tar.gzcd redis-6.0.8make使用apt安装redis与这种解压方式安装redis有一点区别1，使用apt安装比使用这种方式简单2，使用apt安装redis后，使用redis命令简单    直接使用redis-server 自定义redis.conf文件路径，启动redis服务    使用redis-cli -p 指定redis端口号 启动redis测试客户端        而使用解压编译方式安装redis，则需要进入redis&#x2F;src目录下使用    [.&#x2F;redis-server 自定义redis.conf文件路径]，启动redis服务    启动redis测试客户端也需要进入redis&#x2F;src目录下才能使用。</code></pre></li></ul></li><li><p>redis安装完毕后，下面开始搭建主从复制，本次实验是一主二从，一主多从也是类似</p><ul><li><p>在根目录/下创建一个自定义文件夹，存放redis配置信息，例如文件名：redisFile</p></li><li><p>修改redis.conf配置文件信息，如果是apt命令安装redis，则redis.conf文件在<code>/etc/redis/redis.conf</code></p><pre class="language-none"><code class="language-none">1)注释bind 127.0.0.1，不注释只能本机访问2)将protected-mode修改成no，将本机访问保护模式设置no#保护模式是如果你没有设置redis密码，则只能本机访问，改成no后表示就算没有设置密码，其他电脑也能访问</code></pre></li><li><p>拷贝redis.conf文件到自定义目录下，即/redisFile下</p></li><li><p>创建三个配置文件，配置文件名是：redis6379.conf，redis6380.conf，redis6381.conf<br>并在三个配置文件中输入以下内容</p><pre class="language-none"><code class="language-none">include &#x2F;redisFile&#x2F;redis.confpidfile &#x2F;var&#x2F;run&#x2F;redis6379.pid[redis6380.pid，redis6381.pid]port 6379[6380,6381]dbfilename dump6379.rdb[dump6380.rdb，dump6381.rdb]注意：[]中是可变内容，自行替换成相应端口号和文件名</code></pre></li><li><p>使用这三个配置文件来启动三台redis进程，在启动之前使用<code> ps -ef | grep redis</code>命令查看是否<br>有已经运行的redis服务，如果有则使用<code>kill -9 进程pid</code>命令杀掉该进程，如果使用kill命令杀不掉<br>则使用<code>/etc/init.d/redis-server stop</code>命令杀掉默认启动的redis进程</p></li><li><p>使用三个配置文件启动三台redis服务器，并使用测试客户端连接各个redis进程，查看具体信息</p><pre class="language-none"><code class="language-none">#如果使用的是apt安装的redisredis-server &#x2F;redisFile&#x2F;redis6379.confredis-server &#x2F;redisFile&#x2F;redis6380.confredis-server &#x2F;redisFile&#x2F;redis6381.conf#如果使用解压编译的方式安装redis，则需要进入redis&#x2F;src目录下执行.&#x2F;redis-server &#x2F;redisFileredis6379.conf.&#x2F;redis-server &#x2F;redisFileredis6380.conf.&#x2F;redis-server &#x2F;redisFileredis6381.conf#启动后可以通过ps -ef | grep redis命令查看redis进程信息root@redis:~# ps -ef | grep redisroot       11759    2083  0 02:05 pts&#x2F;0    00:00:00 .&#x2F;redis-server 127.0.0.1:6379root       11772   11671  0 02:06 pts&#x2F;1    00:00:00 .&#x2F;redis-server 127.0.0.1:6380root       11881   11846  0 02:09 pts&#x2F;2    00:00:00 .&#x2F;redis-server 127.0.0.1:6381root       11971   11955  0 02:10 pts&#x2F;3    00:00:00 grep --color&#x3D;auto redi#启动无误后，可以通过测试客户端查看各个redis#如果使用的是apt安装的redisredis-cli -p 6379redis-cli -p 6380redis-cli -p 6381#如果使用解压编译的方式安装redis，则需要进入redis&#x2F;src目录下执行.&#x2F;redis-cli -p 6379.&#x2F;redis-cli -p 6380.&#x2F;redis-cli -p 6381#使用测试客户端进入相应的redis进程中后，通过info replication命令可以查看该redis进程信息root@redis:&#x2F;redisFile&#x2F;redis-6.0.8&#x2F;src# .&#x2F;redis-cli -p 6379127.0.0.1:6379&gt; info replication# Replicationrole:masterconnected_slaves:0master_replid:df6a076596335950973293f1deb7c7b443357a48master_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0127.0.0.1:6379&gt; 通过info replicatio命令，我们可以看到当前三个redis服务都是主机，还需要配置一下才能将6380,6381的redis进程改成从机</code></pre></li><li><p>将6380,6381redis进程设置为从机</p><pre class="language-none"><code class="language-none">1)进入6380测试客户端    redis-cli -p 63802)执行以下命令，将6380redis进程设置为从机    127.0.0.1:6380&gt; slaveof 127.0.0.1 6379    这里我6380从机连接的是本地的6379的主机，实际开发中都是一个linux一台redis服务器    从机连接远程的主机ip和端口号3)再次使用命令查看6379redis进程的信息root@redis:&#x2F;redisFile&#x2F;redis-6.0.8&#x2F;src# .&#x2F;redis-cli -p 6379    127.0.0.1:6379&gt; info replication    # Replication    role:master    connected_slaves:1#这里可以看到，主机已经拥有了一个从机6380    slave0:ip&#x3D;127.0.0.1,port&#x3D;6380,state&#x3D;online,offset&#x3D;28,lag&#x3D;1    master_replid:2d032ee4c3f0951c9c5097bd38923b9d86e1f303    master_replid2:0000000000000000000000000000000000000000    master_repl_offset:28    second_repl_offset:-1    repl_backlog_active:1    repl_backlog_size:1048576    repl_backlog_first_byte_offset:1    repl_backlog_histlen:286381redis进程也是同样的设置</code></pre></li><li><p>测试，搭建好一主两从后，则我们只能在主机上进行增删改操作，从机只能进行查询操作</p><pre class="language-none"><code class="language-none">在从机上添加数据：    127.0.0.1:6381&gt; set age 22    (error) READONLY You can&#39;t write against a read only replica.在主机上添加数据：    127.0.0.1:6379&gt; set age 22    OK在从机上查看数据：    127.0.0.1:6381&gt; get age    &quot;22&quot;</code></pre></li></ul></li></ul><blockquote><h5 id="主从复制的三个经典问题"><a href="#主从复制的三个经典问题" class="headerlink" title="主从复制的三个经典问题"></a>主从复制的三个经典问题</h5></blockquote><ul><li><p>一主二仆</p><ul><li>特点1：当通过命令配置主从关系，这种关系只是临时的，如果从机关闭后，<br>重启后，该从机会变成主机，所以如果想当从机重启后还保持主从关系，<br>就需要把配置主从关系命令写到从机的配置文件中。</li><li>特点2：当从机挂掉，重新启动后，之前的被主机插入的数据仍然能查看到<br>(主服务器会将数据恢复到从服务器中)</li><li>特点3：当主机挂掉后，从机并不会上位，还是从服务器，并且能在从服务器中看到主服务器挂掉了。<br>主机重启后，仍然能看到两个从服务器。</li></ul><pre class="language-none"><code class="language-none">1)slave1,slave2是从头开始复制还是从切入点开始复制？答：是可以的，当从机重新启动时，k1,k2,k3仍然可以查看到。2)从机是否可以执行写操作？set可否答：否3)主机shutdown后情况如何?从机是上位还是原地待命？答：原地待命</code></pre></li><li><p>薪火相传</p><ul><li>指的是从机可以作为主机来用，上一个从机可以是下一个从机的主机，从机同样可以接收其他从机的连接<br>和同步请求，那么该从机作为了链条中下一个从机的主机，可以有效减轻master的写压力，<br>去中心化降低风险</li><li>如果链条中的从机中途变更转向，即某个主机的从机更改成其他主机的从机，则会清除之前的记录，<br>重新建立拷贝最新的</li><li>风险是一旦某个从机宕机，后面的从机都没法备份，主机挂了，从机还是从机，无法写数据了。</li></ul></li><li><p>反客为主<br>当一个主机宕机后，后面的从机可以立刻升为主机，其后面的从机不用做任何修改，在从机客户端中执行命令 <code>slaveof no one</code><br>即可将该从机升为主机，这种方式是手动将从机升为主机，可不可以当主机宕机后，从机自动升为主机呢？可以，哨兵模式！</p></li></ul><blockquote><h5 id="搭建哨兵"><a href="#搭建哨兵" class="headerlink" title="搭建哨兵"></a>搭建哨兵</h5></blockquote><ul><li><p>首先通过命令查看下是否有默认启动的哨兵进程</p><pre class="language-none"><code class="language-none">#一般通过apt安装的redis。都有默认启动的redis进程服务#关掉默认的redis-server进程服务&#x2F;etc&#x2F;init.d&#x2F;redis-server stop#关掉默认的redis-sentinel哨兵&#x2F;etc&#x2F;init.d&#x2F;redis-sentinel stop</code></pre></li><li><p>在自定义的目录中创建sentinel.conf文件，名字不能错，例如/redisFile/sentinel.conf</p><pre class="language-none"><code class="language-none">#创建sentinel.conf文件touch sentinel.conf#在该文件中编写如下内容sentinel monitor mymaster 127.0.0.1 6379 1其中mymaster是为监控对象(主机)起的服务器名称,1为至少有多少个哨兵同意迁移的数量</code></pre></li><li><p>启动哨兵进程，先启动哨兵进程再启动三台redis进程</p><pre class="language-none"><code class="language-none">#如果是apt命令安装则执行redis-sentinel 自定义sentinel.conf的路径#如果使用解压编译的方式安装redis，则需要进入redis&#x2F;src目录下执行.&#x2F;redis-sentinel  自定义sentinel.conf的路径</code></pre></li><li><p>当主机6379redis进程宕机后，大概十几秒后，哨兵服务器会自动根据一些规则选举某个从机作为新主机<br>选举后的从机作为新主机，而当原主机恢复后便自动成为新主机的从机。</p><pre class="language-none"><code class="language-none">#具体哪个从机会被选举为主机呢？即选举的策略1)首先选择优先级靠前的,redis服务器的优先级在配置文件中进行配置    slave-priority(redis6.0版本时，名字为replica-priority),默认是100，值越小优先级越高2)选择偏移量最大的，偏移量是指获取原主机数据最全的3)选择runid最小的从机，每一个redis实例启动后都会随机生成一个40位的runid</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的设计模式</title>
      <link href="2021/05/20/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/05/20/%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>常用的设计模式</p></blockquote><p>最近一段时间学习了设计模式方面的内容，总的来说，设计模式是为了解决不同场景下所面临问题的解决方案<br>使得我们的代码更加高效，高内聚，低耦合。</p><p>我学习了一些常用的设计模式：单例模式，工厂模式，代理模式，适配器模式，装饰器模式，<br>观察者模式，责任链模式，模板方法模式，并每一个设计模式都敲上代码实验。<br>个人觉得还是不够，有时候见山是山，见山不是山，见山还是山，真正学好设计模式就需要去看真实的应用场景<br>还是需要看优秀的代码，设计模式的学习还远远未止步，今后会不断学习。</p><p>学习设计模式的笔记已上传到github，<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.txt">笔记</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的加载顺序</title>
      <link href="2021/05/17/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
      <url>2021/05/17/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>类的加载顺序</p></blockquote><p>在牛客上看到一题，学习了一下，感觉非常有帮助，还是自己太菜了，<br>今后要多多学习牛客上的题目。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//问题：这个类在加载过程中的输出结果是什么？</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//t1是静态成员变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Test</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造代码块</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"blockA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//静态代码块，静态块</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"blockB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Test</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//运行main方法，输出结果是blockA blockB blockA</span></code></pre><p>该类的加载过程是：</p><ul><li>因为static修饰的变量或者代码块(静态代码块)，属于同一级别，所以谁在前就执行谁<br>所以此时执行第一句：<code>public static Test t1 = new Test();</code>，加载静态对象t1<br>此时等式右边是<code>new Test()</code>，创建实例对象，就会执行构造代码块中的内容，输出blockA<br>然后会执行Test对象的构造函数，执行了默认的无参构造函数，本例没有显示写出。</li><li>然后执行静态代码块，输出blockB，静态代码块只会执行一次</li><li>最后执行<code>Test t2 = new Test();</code>，创建新的对象便会再一次执行构造代码块，构造函数，<br>每创建一个对象时，就会执行构造代码块，构造函数，所以再次输出blockA</li></ul><p><strong>类的加载顺序</strong></p><ol><li>父类静态对象和静态代码块</li><li>子类静态对象和静态代码块</li><li>父类非静态对象(实例变量)和非静态代码块(构造代码块)</li><li>父类构造函数</li><li>子类非静态对象和非静态代码块</li><li>子类构造函数</li></ol><p>其中：类中静态块按照声明顺序执行，谁在前先执行谁，<br>并且1和2步骤不需要调用new类实例的时候就执行了(意思是就是在类加载到方法区的时候执行的)</p><p><strong>不会初始化子类的几种</strong></p><ul><li>调用的是父类的static方法或者字段</li><li>调用的是父类的final方法或者字段</li><li>通过数组来引用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 类加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO模型基础知识</title>
      <link href="2021/05/16/IO%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/05/16/IO%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h3 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h3></blockquote><h4 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h4><ul><li>从计算机结构的视角来看的话， I/O描述了计算机系统与外部设备之间通信的过程。    </li><li>我们在平常开发过程中接触最多的就是 磁盘 IO（读写文件） 和 网络 IO（网络请求和相应）。</li><li>从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），<br>操作系统负责的内核执行具体的 IO 操作。</li></ul><p><strong>也就是说，我们的应用程序实际上只是发起了IO操作的调用而已，具体IO的执行是由操作系统的内核来完成的。</strong></p><p>当应用程序发起 I/O 调用后，会经历两个步骤：    </p><ul><li>内核等待 I/O 设备准备好数据 (操作系统将外部数据加载到内核缓冲区)</li><li>内核将数据从内核空间拷贝到用户空间(操作系统将数据从内核缓冲区拷贝到进程缓冲区)</li></ul><h4 id="阻塞-非阻塞与同步-非同步"><a href="#阻塞-非阻塞与同步-非同步" class="headerlink" title="阻塞/非阻塞与同步/非同步"></a>阻塞/非阻塞与同步/非同步</h4><ul><li><p>阻塞/非阻塞：阻塞和非阻塞强调的是进程对于操作系统IO是否处于就绪状态的处理方式。<br>进程发起了读取数据的IO调用，操作系统需要将外部数据拷贝到进程缓冲区，<br>在有数据拷贝到进程缓冲区前，进程缓冲区处于不可读状态，我们称之为操作系统IO未就绪。</p><p>如果操作系统IO处于未就绪状态，当前进程或线程如果一直等待直到其就绪，该种IO方式为阻塞IO。<br>如果进程或线程并不一直等待其就绪，而是可以做其他事情，这种方式为非阻塞IO。<br>所以对于非阻塞IO，我们编程时需要经常去轮询就绪状态。</p></li><li><p>同步/非同步：同步和异步描述的是针对当前执行线程、或进程而言，发起IO调用后，<br>当前线程或进程是否挂起等待操作系统的IO执行完成。</p><p>在操作系统将外部数据写入进程缓冲区这个期间，进程或线程挂起等待操作系统IO执行完成的话，<br>这种IO执行策略就为同步，如果进程或线程并不挂起而是继续工作，这种IO执行策略便为异步。</p></li><li><p><strong>自己的理解</strong><br>如果进程发出IO请求后，等待操作系统将外部数据读取到内核空间，则被称为阻塞，否则被称为非阻塞</p><p>如果进程发出IO请求后，进程并不挂起等待而是直接执行其他，则为异步，这种方式跳过了<br>操作系统将外部数据读取到内核空间步骤，并且跳过了操作系统将内核空间数据拷贝到用户空间的步骤</p></li></ul><h4 id="IO模型-1"><a href="#IO模型-1" class="headerlink" title="IO模型"></a>IO模型</h4><blockquote><p>IO模型指的是应用进程对待操作系统IO状态的不同处理方式。<br>在IO调用时，对待操作系统IO就绪状态的不同方式，决定了其是阻塞或非阻塞模式。<br>在IO执行时，线程或进程是否挂起等待IO执行决定了其是否为同步或异步IO。</p></blockquote><blockquote><p>UNIX 系统下， IO 模型一共有 5 种：<br><strong>同步阻塞 I/O</strong>、<strong>同步非阻塞 I/O</strong>、<strong>I/O 多路复用</strong>、<strong>信号驱动 I/O</strong> 和<strong>异步 I/O</strong>，其中，前四个被称为同步IO。</p></blockquote><h4 id="Java中3种常见的IO模型"><a href="#Java中3种常见的IO模型" class="headerlink" title="Java中3种常见的IO模型"></a>Java中3种常见的IO模型</h4><ul><li><h5 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h5><blockquote><p><strong>BIO 属于同步阻塞 IO 模型</strong> 。<br>由上我们可知，这种IO模型应用进程发起IO调用(系统调用，read调用)后，应用进程便一直阻塞<br>直到系统内核IO处理完毕后，将数据拷贝到应用进程的用户空间为止。</p></blockquote><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/io/1.png" style="zoom:67%;" / loading="lazy"><p>在客户端连接数量不高的情况下，是没问题的。但是，当面对十万甚至百万级连接的时候，<br>传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</p></li></ul><ul><li><h5 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h5><blockquote><p>Java中的NIO于Java1.4中引入，对应 <code>java.nio</code> 包，提供了 <code>Channel</code> ,<code>Selector</code>，<code>Buffer</code>等抽象。<br>NIO中的N可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的I/O操作方法。<br>对于高负载、高并发的（网络）应用，应使用NIO。</p></blockquote><blockquote><p>Java中的<strong>NIO是I/O多路复用模型</strong>，并不是同步非阻塞 IO 模型。</p></blockquote><p>先看看同步非阻塞IO模型，由上我们知道：</p><ul><li><strong>非阻塞意味着，当应用程序发起IO请求后，如果操作系统IO处于未就绪状态，</strong><br><strong>则应用程序并不会等待操作系统IO就绪，</strong></li><li><strong>而同步则意味着，应用程序发起IO调用，当前线程或进程需要等待操作系统完成IO工作并告知进程</strong><br><strong>已经完成，线程或进程才能继续往下执行其他既定指令。</strong></li></ul><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/io/2.png" style="zoom:67%;" / loading="lazy"><p>同步非阻塞 IO 模型中，应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的<br>这段时间里，线程依然是阻塞的，直到在内核把数据拷贝到用户空间。</p><p>相比于同步阻塞 IO 模型，同步非阻塞 IO 模型确实有了很大改进。通过轮询操作，避免了一直阻塞。</p><p>但是，这种 IO 模型同样存在问题：<br><strong>应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的。</strong></p><p><strong>I/O 多路复用模型</strong> </p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/io/3.png" style="zoom:67%;" / loading="lazy"><p>IO 多路复用模型中，线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，<br>用户线程再发起 read 调用。read 调用的过程（数据从内核空间-&gt;用户空间）还是阻塞的。</p><p><strong>IO 多路复用模型，通过减少无效的系统调用，减少了对 CPU 资源的消耗。</strong></p><p>Java 中的NIO，有一个非常重要的<strong>选择器 ( Selector )</strong> 的概念，也可以被称为 <strong>多路复用器</strong>。<br>通过它，只需要一个线程便可以管理多个客户端连接。当客户端数据到了之后，才会为其服务。</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/io/6.png" style="zoom:67%;" / loading="lazy"></li><li><h5 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h5><blockquote><p>AIO也就是NIO2。Java7中引入了NIO的改进版NIO2，它是异步IO模型。<br>异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，<br>当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p></blockquote><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/io/4.png" style="zoom:67%;" / loading="lazy"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM运行时数据区</title>
      <link href="2021/05/14/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/"/>
      <url>2021/05/14/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="JVM架构图"><a href="#JVM架构图" class="headerlink" title="JVM架构图"></a>JVM架构图</h4></blockquote><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/jvm/3.png" style="zoom:67%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/jvm/1.png" style="zoom:67%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/jvm/2.png" style="zoom:67%;" / loading="lazy"><blockquote><h4 id="Java运行时数据区域"><a href="#Java运行时数据区域" class="headerlink" title="Java运行时数据区域"></a>Java运行时数据区域</h4></blockquote><p>Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。JDK. 1.8 和之前的版本略有不同</p><ul><li><p>线程共享</p><ul><li><h5 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h5><p>堆是进程中最大的一块内存，主要用于存放新创建的对象 (几乎所有对象都在这里分配内存)<br>JDK7版本及以前，堆内存通常被分为下面三部分</p><ul><li>新生代内存(Young Generation)</li><li>老生代(Old Generation)</li><li>永生代(Permanent Generation)</li></ul><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/jvm/5.png" style="zoom:67%;" / loading="lazy"><p>JDK 8 版本之后方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），<br>取而代之是元空间，元空间使用的是直接内存。</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/jvm/6.png" style="zoom:67%;" / loading="lazy"></li><li><h5 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h5><p>HotSpot虚拟机的永久代</p><p>方法区主要用于存放已被加载的类信息(构造方法，接口定义)、常量、静态变量、<br>即是编译器编译后的代码等数据。简而言之，static,final,Class类，运行时常量池都存在方法区中。<br>方法区还有一块区域叫：运行时常量池<br><strong>运行时常量池</strong></p><ul><li>JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区<br>的实现为永久代</li><li>JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池<br>被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代 。<br>字符串常量池和静态变量在1.7迁出了方法区</li><li>JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆,<br>运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)</li></ul></li><li><h5 id="直接内存（非运行时数据区的一部分）"><a href="#直接内存（非运行时数据区的一部分）" class="headerlink" title="直接内存（非运行时数据区的一部分）"></a>直接内存（非运行时数据区的一部分）</h5><p>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，<br>但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。</p><p>本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及<br>处理器寻址空间的限制。</p><p>个人理解：JVM进程向操作系统申请的一块内存，一部分作为JVM运行时的内存使用，另一部分就是<br>未被使用的内存，这就是直接内存。</p></li></ul></li><li><p>线程私有</p><ul><li><h5 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h5><p>每个线程都有各自的虚拟机栈，虚拟机栈被分为一个个大小相等的栈帧.</p><p><strong>栈帧组成部分</strong>如下：</p><ul><li>局部变量表<br>局部变量表最重要，局部变量表主要存放了编译期可知的各种基本数据类型<br>（boolean、byte、char、short、int、float、long、double）、<br>对象引用（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，<br>也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</li><li>操作数栈</li><li>动态链接</li><li>方法返回值信息</li></ul><p><strong>栈帧具体解释</strong>：Java 栈可用类比数据结构中栈，Java 栈中保存的主要内容是栈帧，<br>每一次函数调用都会有一个对应的栈帧被压入 Java 栈，每一个函数调用结束后，<br>都会有一个栈帧被弹出。</p><p><strong>对象的两种访问定位方式</strong>：</p><ul><li>直接指针，即栈帧中的一个指针直接指向堆中对象<img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/jvm/8.png" style="zoom:67%;" / loading="lazy"></li><li>句柄访问，即栈帧中的一个指针指向堆中句柄池中的一个句柄，该句柄再指向堆中的对象<img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/jvm/7.png" style="zoom:67%;" / loading="lazy"></li></ul></li><li><h5 id="程序计数器-PC寄存器"><a href="#程序计数器-PC寄存器" class="headerlink" title="程序计数器(PC寄存器)"></a>程序计数器(PC寄存器)</h5><p>程序计数器是记录下一条指令的地址，程序计数器私有主要是为了线程切换后能恢复到正确的执行位置。<br>程序计数器的作用</p><ul><li><p>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，<br>如：顺序执行、选择、循环、异常处理。</p></li><li><p>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</p><p>需要注意的是，如果执行的是 native 方法，那么程序计数器记录的是 undefined 地址，<br>  只有执行的是 Java 代码时程序计数器记录的才是下一条指令的地址。</p></li></ul></li><li><h5 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h5><p>  本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、<br>  操作数栈、动态链接、出口信息。方法执行完毕后相应的栈帧也会出栈并释放内存空间</p><p>  不同的虚拟机，栈空间不一样，hotspot虚拟机中(默认使用的虚拟机)，虚拟机栈和本地方法栈合而为一，<br>  统一都叫虚拟机栈。</p></li></ul></li></ul><p>每一个线程都有各自的虚拟机栈，程序计数器，本地方法栈，多个线程共享堆内存和方法区</p><blockquote><h4 id="了解一下类加载器"><a href="#了解一下类加载器" class="headerlink" title="了解一下类加载器"></a>了解一下类加载器</h4></blockquote><ul><li><h5 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h5><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/jvm/4.jpg" style="zoom:67%;" / loading="lazy"></li><li><h5 id="类加载器的种类"><a href="#类加载器的种类" class="headerlink" title="类加载器的种类"></a>类加载器的种类</h5><ul><li>虚拟机自带的加载器</li><li>启动类(根)加载器(BootStrapClassLoader)，rt.jar中</li><li>扩展类加载器，jdk/jre/lib/ext目录</li><li>应用程序(系统类，AppClassLoader)加载器</li></ul></li><li><h5 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h5><p>保证安全的机制，向上委派，向下加载<br>类字节码的加载顺序：将字节码文件交给最顶层的加载器优先加载<br>具体过程</p><ul><li>类加载器收到类加载的请求</li><li>将这个请求向上委托给父加载器去完成，一直向上委托，直到启动类加载器</li><li>启动类加载器检查是否能加载这个类，能加载就结束，使用当前的加载器，否则，抛出异常<br>通知子加载器进行加载</li><li>重复步骤3 </li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> car<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span>jdk<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token class-name">ClassLoaders</span>$<span class="token class-name">AppClassLoader</span><span class="token annotation punctuation">@2f0e140b</span>jdk<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token class-name">ClassLoaders</span>$<span class="token class-name">PlatformClassLoader</span><span class="token annotation punctuation">@16b98e56</span><span class="token keyword">null</span><span class="token comment">//扩展类加载器往上就是null，获取不到加载器，因为上面根加载器是用c++语言写的</span><span class="token comment">//注意，jdk1.9之前，扩展类加载器是EXTClassLoader,1.9版本之后改成了PlatformClassLoader</span></code></pre></li></ul><blockquote><h4 id="了解一下Native关键字"><a href="#了解一下Native关键字" class="headerlink" title="了解一下Native关键字"></a>了解一下Native关键字</h4></blockquote><ul><li>应用场景<br>在Thread类中start方法调用过被native修饰的start0方法。</li><li>底层原理<ul><li>被native修饰的方法会进入线程的本地方法栈，这个方法会去调用底层C语言的库。</li><li>首先这个方法会去调用JNI，java native interface，本地方法接口。<br>JNI就会去调用本地方法库，例如C语言库，Python库，可以达到扩展java类的使用。<br>融合不同的编程语言为java所用。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器及部分数据结构基础知识</title>
      <link href="2021/05/09/%E5%AE%B9%E5%99%A8%E5%8F%8A%E9%83%A8%E5%88%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/05/09/%E5%AE%B9%E5%99%A8%E5%8F%8A%E9%83%A8%E5%88%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="这篇博客概述"><a href="#这篇博客概述" class="headerlink" title="这篇博客概述"></a>这篇博客概述</h5></blockquote><p>前几天把Java容器部分和数据结构部分知识回顾了一下，通过再次学习对这些内容有了一些新的认识<br>以后这部分内容还需要更深入的挖掘，我把学习笔记放到了github，点击<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/JavaBasicNote/Java%E5%AE%B9%E5%99%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.txt">笔记</a></p><blockquote><h5 id="单链表的增删查"><a href="#单链表的增删查" class="headerlink" title="单链表的增删查"></a>单链表的增删查</h5></blockquote><ul><li><p>SingleLinkedNode类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">world<span class="token punctuation">.</span>keyi<span class="token punctuation">.</span>collection</span><span class="token punctuation">;</span><span class="token comment">/** * @author 万一 * @date 2021年05月06日23:17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleLinkedNode</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//单向链表</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SingleLinkedNode</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SingleLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">SingleLinkedNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">SingleLinkedNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">,</span> <span class="token class-name">SingleLinkedNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">SingleLinkedNode</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">SingleLinkedNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>SingleLinkedOperate类</p><pre class="language-none"><code class="language-none">&#x2F;** * @author 万一 * @date 2021年05月06日23:19 *&#x2F;public class SingleLinkedOperate &#123;    &#x2F;&#x2F;对单向链表的操作    &#x2F;&#x2F;增加结点,从最后结点处新增    public static void addData(SingleLinkedNode head, Object data)&#123;        SingleLinkedNode newNode &#x3D; new SingleLinkedNode(data);        SingleLinkedNode temp &#x3D; head;        while (temp.getNext()!&#x3D;null)&#123;            temp&#x3D;temp.getNext();        &#125;        temp.setNext(newNode);    &#125;    &#x2F;&#x2F;遍历结点    public static void traverse(SingleLinkedNode head)&#123;        SingleLinkedNode temp &#x3D; head;        while (temp.getNext()!&#x3D;null)&#123;            System.out.print(temp.getNext().getData()+&quot; &quot;);            temp&#x3D;temp.getNext();        &#125;    &#125;    &#x2F;&#x2F;统计链表长度    public static int length(SingleLinkedNode head)&#123;        SingleLinkedNode temp&#x3D;head;        int length &#x3D; 0;        while (temp.getNext()!&#x3D;null)&#123;            length++;            temp&#x3D;temp.getNext();        &#125;        return length;    &#125;    &#x2F;&#x2F;插入结点    public static void insertNode(SingleLinkedNode head, int index, Object data)&#123;        if(checkIndex(head, index))&#123;            SingleLinkedNode temp &#x3D;head;            int count&#x3D;0;            while (temp.getNext()!&#x3D;null)&#123;                if (++count&#x3D;&#x3D;index)&#123;                    SingleLinkedNode newNode &#x3D; new SingleLinkedNode(data);                    SingleLinkedNode temp2&#x3D;temp.getNext();                    temp.setNext(newNode);                    newNode.setNext(temp2);                    break;                &#125;                temp&#x3D;temp.getNext();            &#125;            System.out.println(&quot;插入结点成功&quot;);        &#125;else &#123;            System.out.println(&quot;index越界，插入结点失败&quot;);        &#125;    &#125;    &#x2F;&#x2F;检查index是否合法    public static boolean checkIndex(SingleLinkedNode head,int index)&#123;        boolean flag &#x3D;true;        SingleLinkedNode temp &#x3D;head;        if (index&gt;length(head)||index&lt;1)&#123;            flag&#x3D;false;        &#125;        return flag;    &#125;    &#x2F;&#x2F;查找结点    public static void queryNode(SingleLinkedNode head,int index)&#123;        String result;        if (checkIndex(head,index))&#123;            SingleLinkedNode temp&#x3D;head;            int count&#x3D;0;            while (temp.getNext()!&#x3D;null)&#123;                if (++count&#x3D;&#x3D;index)&#123;                    System.out.println(&quot;索引&quot;+index+&quot;位置的数据:&quot;+temp.getNext().getData());                    break;                &#125;                temp&#x3D;temp.getNext();            &#125;        &#125;else &#123;            System.out.println(&quot;index越界，查找结点失败&quot;);        &#125;    &#125;    &#x2F;&#x2F;删除结点    public static void deleteNode(SingleLinkedNode head,int index)&#123;        if (checkIndex(head, index)) &#123;            int count&#x3D;0;            SingleLinkedNode temp&#x3D;head;            while (temp.getNext()!&#x3D;null)&#123;                if (++count&#x3D;&#x3D;index)&#123;                    temp.setNext(temp.getNext().getNext());                    break;                &#125;                temp&#x3D;temp.getNext();            &#125;            System.out.println(&quot;删除结点成功&quot;);        &#125;else &#123;            System.out.println(&quot;index越界,删除结点失败&quot;);        &#125;    &#125;    &#x2F;&#x2F;链表排序    public static void sort(SingleLinkedNode head)&#123;        SingleLinkedNode temp &#x3D; head;        SingleLinkedNode temp2;        while (temp.getNext()!&#x3D;null)&#123;            temp2&#x3D;head;            while (temp2.getNext()!&#x3D;null)&#123;                if (temp2.getData()!&#x3D;null&amp;&amp;((int)temp2.getData()&gt;(int)temp2.getNext().getData()))&#123;                    int tempData&#x3D;(int)temp2.getData();                    temp2.setData(temp2.getNext().getData());                    temp2.getNext().setData(tempData);                &#125;                temp2&#x3D;temp2.getNext();            &#125;            temp&#x3D;temp.getNext();        &#125;    &#125;    &#x2F;&#x2F;删除链表重复数据，渣渣方法    public static SingleLinkedNode deleteRepeatData(SingleLinkedNode head)&#123;        &#x2F;&#x2F;创建一个数组，每放一个结点进数组，遍历一次，重复的结点就删除        SingleLinkedNode temp&#x3D;head;        ArrayList&lt;Object&gt; arr &#x3D; new ArrayList&lt;&gt;();        ArrayList&lt;SingleLinkedNode&gt; arr2 &#x3D; new ArrayList&lt;&gt;();        while (temp.getNext()!&#x3D;null)&#123;            if (!arr.contains(temp.getNext().getData()))&#123;                arr.add(temp.getNext().getData());                arr2.add(temp.getNext());            &#125;            temp&#x3D;temp.getNext();        &#125;        head.setNext(arr2.get(0));        for (int i &#x3D; 0; i &lt; arr2.size(); i++) &#123;            &#x2F;&#x2F;将每一个结点全部断开            arr2.get(i).setNext(null);            if ((i+1)&lt;arr2.size())&#123;                SingleLinkedNode node &#x3D; arr2.get(i);                SingleLinkedNode node2 &#x3D; arr2.get(i+1);                node.setNext(node2);            &#125;        &#125;        return head;    &#125;    public static void main(String[] args) &#123;        SingleLinkedNode head &#x3D; new SingleLinkedNode();        addData(head,7);        addData(head,7);        addData(head,7);        addData(head,7);        addData(head,7);        traverse(head);        System.out.println();        SingleLinkedNode newNode &#x3D; deleteRepeatData(head);        traverse(head);&#x2F;&#x2F;        sort(head);&#x2F;&#x2F;        System.out.println();&#x2F;&#x2F;        traverse(head);        &#x2F;&#x2F;插入结点&#x2F;&#x2F;        String result &#x3D; insertNode(head, 5, 6);&#x2F;&#x2F;        System.out.println(result);&#x2F;&#x2F;        traverse(head);&#x2F;&#x2F;        System.out.println();        &#x2F;&#x2F;查询结点&#x2F;&#x2F;        queryNode(head,5);&#x2F;&#x2F;        deleteNode(head,0);&#x2F;&#x2F;        traverse(head);    &#125;&#125;</code></pre></li></ul><blockquote><h5 id="近期目标"><a href="#近期目标" class="headerlink" title="近期目标"></a>近期目标</h5></blockquote><p>五月份主要学习内容是：Java基础内容回顾：<br>包括Java容器，多线程，注解，泛型，反射，动态代理，NIO，Stream流，常用设计模式，<br>JVM基础知识，日志处理。目的就是掌握基本概念，写点简单的demo，对这些知识点不至于一问三不知<br>我知道每一个任务中还有非常多的内容，以后还会不断重复学习。</p><p>六月份主要学习内容：SSM+SpringBoot，学习框架的底层原理，特别是Spring框架，<br>目前这些框架基本都会用，但要说底层原理，个人觉得稍微懂点的只有SpringMVC了，比如参数绑定，<br>视图解析，内容协商之类的，看网课这里讲的比较细致。</p><p>大概这些内容搞定后，就去尝试找个实习工作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Java容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedirectAttribute重定向传参</title>
      <link href="2021/05/03/RedirectAttribute%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%A0%E5%8F%82/"/>
      <url>2021/05/03/RedirectAttribute%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%A0%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>RedirectAttribute对象传参</p></blockquote><p>因为thymeleaf遵守MVC规范，请求如果需要重定向，则需要先重定向到controller方法中<br>再通过转发的方式，跳转到html页面上，在这种情况下，RedirectAttribute用于重定向传递参数。</p><p>在控制器方法参数中使用RedirectAttribute对象，这个对象传递参数有两个方法</p><ul><li><p>addAttribute方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">RedirectAttributes</span> redirectAttributes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        redirectAttributes<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"loginResult"</span><span class="token punctuation">,</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/toIndexHtml"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toIndexHtml"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果使用这种方式，则重定向后，页面url上会显示参数信息，并不安全，例如显示如下</p><pre class="language-markup" data-language="markup"><code class="language-markup">"http://localhost:8080/toIndexHtml?loginResult=登录失败"</code></pre><p>并且，这种方式前端thymeleaf使用<code>[[$&#123;loginResult&#125;]]</code>，或者jsp使用EL表达式都不能获取到值<br>如果想让前端获取到值，你需要在index方法参数中使用@ModelAttribute注解，即如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toIndexHtml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"loginResult"</span><span class="token punctuation">)</span><span class="token class-name">String</span> loginResult<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>其原理是：当重定向时，即第二次请求执行index方法时，该注解将携带的第一次请求所返回的loginResult<br>数据保存在隐含模型中，并最终放入request域中，最后转发，并被视图渲染出来</p></li><li><p>addFlashAttribute</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//主要部分，其他代码和上面一样</span>redirectAttributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"loginResult"</span><span class="token punctuation">,</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"redirect:/toIndexHtml"</span><span class="token punctuation">;</span></code></pre><p>使用这种方式，并不需要在toIndexHtml使用@ModelAttribute注解才能使得前端获取到传递的loginResult<br>数据，该方式的原理是重定向时，redirectAttributes对象会将数据保存在一个临时的session中<br>并返回一个JSESSIONID，在第二次请求访问index方法时，底层将该session数据取出放入request域<br>中，并删除该临时session，所以这种方式无需使用@ModelAttribute注解就可使得前端同样获取到数据。<br>当然，你还是可以在index方法参数中使用@ModelAttribute注解，从而在index方法中对数据进行处理</p></li><li><p>总结：RedirectAttribute用于重定向时传递参数，</p><ul><li>如果使用该对象的addAttribute方法传递数据，则需要在跳转页面的controller方法(index方法)<br>参数上使用@ModelAttribute注解，将第二次请求携带的loginResult数据保存至request域中，<br>即可使前端获取到数据</li><li>如果使用该对象的addFlashAttribute方法传递数据，则不需要使用ModelAttribute注解，也能使得前端<br>获取到数据，当然你也可以使用该注解，从而在index方法中使用传递的数据。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈数据加密</title>
      <link href="2021/05/02/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/"/>
      <url>2021/05/02/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="数据加密的几种方式"><a href="#数据加密的几种方式" class="headerlink" title="数据加密的几种方式"></a>数据加密的几种方式</h4></blockquote><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/security/images/2.png" alt="数据加密" style="zoom:80%;" / loading="lazy"><ul><li><h5 id="对称加密算法-AES，DES，3DES"><a href="#对称加密算法-AES，DES，3DES" class="headerlink" title="对称加密算法(AES，DES，3DES)"></a>对称加密算法(AES，DES，3DES)</h5><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/security/images/1.png" alt="对称加密" loading="lazy"></p><p>对称加密指的是加密和解密时，使用的是同一秘钥，其中最优秀的对称加密算法是AES。<br>不过对称加密也有不好的地方，即对秘钥的保存问题。</p></li><li><h5 id="非对称加密算法-RSA，ECC"><a href="#非对称加密算法-RSA，ECC" class="headerlink" title="非对称加密算法(RSA，ECC)"></a>非对称加密算法(RSA，ECC)</h5><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/security/images/3.png" alt="非对称加密" style="zoom:80%;" / loading="lazy"><p>非对称加密指的是加密和解密的双方使用不同的秘钥，通过非对称加密算法生成一对秘钥<br>一个公钥，一个私钥，公钥可对外暴露，私钥只对自己可见，任何想向我发信息的人，通过公钥对数据加密<br>我收到后，使用私钥对密文进行解密。最优秀的非对称加密算法是RSA。</p></li><li><h5 id="单向Hash算法"><a href="#单向Hash算法" class="headerlink" title="单向Hash算法"></a>单向Hash算法</h5><p>单向Hash算法也叫散列算法，单向指的是经过加密后的hash值并不能反向推算出明文，即不可逆<br>目前对数据库的敏感信息的加密大多数使用这种方式</p><ul><li><p>MD5/SHA-1加密<br>通过对明文密码字段进行MD5加密，将计算出的16字节hash值保存在数据库中，但这种方式并不安全，因为单向hash算法有两个特点，<br>1，从同一个密码进行单向哈希，得到的总是唯一确定的hash值<br>2，计算速度快。随着技术进步，一秒钟能够完成数十亿次单向哈希计算<br>攻击者可以将所有密码的常见组合进行单向哈希，使用hash值作为key，密码作为value，组成查询表<br>拿到你的数据库中的hash值在表中查询，就能找出对应的明文密码了。</p></li><li><p>SHA2(SHA256，SHA512)<br>也是和MD5差不多，只不过生成的hash字节长度更大而已，还是可以通过查询表，或者更高效的彩虹表<br>找到对应的明文密码</p></li><li><p>SHA2+盐<br>这是一种有效能避免查询表或彩虹表攻击的方式之一，盐指的是随机的字符串，在每一个用户的明文后<br>加上随机生成的盐，再对该字符串进行哈希计算，将计算后的hash值保存在数据库中，<br>这种方式也叫加盐，随机字符串盐也有要求</p><ol><li>使用CSPRNG算法生成盐，而不是普通的随机数算法。<br>CSPRNG是加密安全的，这意味着用它产生的随机数更加随机，且不可预测。</li><li>盐不能太短<br>如果盐很短，那意味着密码+盐组成的字符串的长度和取值空间都有限。<br>黑客完全可以为密码+盐的所有组合建立彩虹表。</li><li>盐不能重复使用<br>如果所有用户的密码都使用同一个盐进行加密。那么不管盐有多复杂、多大的长度，<br>黑客都可以很容易的使用这个固定盐重新建立彩虹表，破解你的所有用户的密码。</li></ol><p>但这种方式现在也不适用了，因为为了验证用户的明文是否正确，通常会在表中设置一个salt<br>的字段用于存放盐，这就会导致一个问题，如果数据库被脱库，意味着明文+盐的hash值，和盐<br>一起被泄露，攻击者还是可以以此建立彩虹表，依靠如今显卡恐怖的并行计算能力，依然能找出明文</p></li><li><p>Password Hash(PBKDF2、BCRYPT、SCRYPT，Argon2)<br>也叫密码哈希，专业加密密码的hash算法，这类加密算法有个共同的特点，算法中都有个因子，<br>用于指明计算密码摘要所需要的资源和时间，也就是计算强度。计算强度越大，<br>攻击者建立彩虹表越困难，以至于不可继续。<br>其中最优秀的当属Argon2算法，在2015年7月，Argon2算法被NIST认定为最好的密码hash算法。</p></li></ul></li></ul><blockquote><h4 id="PasswordEncoder接口的使用"><a href="#PasswordEncoder接口的使用" class="headerlink" title="PasswordEncoder接口的使用"></a>PasswordEncoder接口的使用</h4></blockquote><p>PasswordEncoder是Spring Security提供的密码加密方式的接口定义，其实现类如下图：<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/security/images/4.png" style="zoom:80%;" / loading="lazy"></p><ul><li><h5 id="使用BCryptPasswordEncoder加密"><a href="#使用BCryptPasswordEncoder加密" class="headerlink" title="使用BCryptPasswordEncoder加密"></a>使用BCryptPasswordEncoder加密</h5><ul><li><p>导入Spring Security依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>注册BCryptPasswordEncoder组件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>加密解密</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//对password字段加密保存在数据库中</span>user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userServiceImpl<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过前端传递过来的id获取数据库中对象</span><span class="token class-name">User</span> userDataBase <span class="token operator">=</span> userServiceImpl<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> matches <span class="token operator">=</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>userDataBase<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*PasswordEncoder接口的encode方法将明文通过哈希计算成密文，其中使用了加盐和慢哈希的方式增加攻击者破解难度PasswordEncoder接口的matches方法，第一个参数是用户传递的密码明文，第二个参数是数据库存储的hash值，两者进行比对，如果比对成功说明用户密码正确。*/</span></code></pre></li></ul></li><li><h5 id="使用Argon2PasswordEncoder加密"><a href="#使用Argon2PasswordEncoder加密" class="headerlink" title="使用Argon2PasswordEncoder加密"></a>使用Argon2PasswordEncoder加密</h5><ul><li><p>除了Security，导入Argon2所需的依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.bouncycastle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bcprov-jdk15on<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.64<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>注册Argon2PasswordEncoder组件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Argon2PasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>加密解密同BCryptPasswordEncoder</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据加密 </tag>
            
            <tag> BCrypt </tag>
            
            <tag> Argon2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础内容笔记</title>
      <link href="2021/04/28/Mysql%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/"/>
      <url>2021/04/28/Mysql%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>最近把mysql基础内容过了一遍</p><p>mysql笔记放在了github，整理起来搞成一篇博客非常耗费时间，我已经没有多少时间了<br><a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/mysql/mysql%E7%AC%94%E8%AE%B0.txt">mysql笔记</a></p><p>目前缺少练手的项目，目前后端方面学的差不多了，前端方面之前学到Jquery那里<br>JavaScript感觉已经忘了差不多了，害。</p><p>5月份打算学习英语，英语四级心病啊啊啊啊，基础太差了我，四级一致是我的执念<br>6月份回顾基础知识，看面试题了，也不知道能不能找的到实习，听天由命了。。。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的简单学习</title>
      <link href="2021/04/23/Git%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/04/23/Git%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="Git-分布式版本控制工具"><a href="#Git-分布式版本控制工具" class="headerlink" title="Git-分布式版本控制工具"></a>Git-分布式版本控制工具</h4></blockquote><blockquote><h5 id="git基础命令"><a href="#git基础命令" class="headerlink" title="git基础命令"></a>git基础命令</h5></blockquote><pre class="language-none"><code class="language-none">git init初始化，让git管理当前文件夹git status检测当前文件夹中的文件状态git add . 管理文件夹中的所有文件git add xxx.html管理文件夹中的指定文件，将文件添加到暂存区git config --global user.email &quot;你的邮箱&quot;配置邮箱git config --global user.name &quot;你的姓名&quot;配置姓名git commit -m &quot;描述信息&quot;生成一个版本，将文件提交到版本库git log查看版本日志git log --pretty&#x3D;oneline查看简化版的日志当版本较多时，git log 会进入编辑模式，按q退出编辑模式</code></pre><blockquote><h5 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h5></blockquote><pre class="language-none"><code class="language-none">1)git reset --hard 版本号&#x2F;&#x2F;回滚到指定的版本2)回滚到旧版本后再回去怎么办呢？git reflog &#x2F;&#x2F;查看版本详细变更，这里的版本号只有7位再使用git reset --hard 7位的版本号，即可回到最开始的版本。3)git reset --hard HEAD^回退到上一个版本git reset --hard HEAD~100回退到上100个版本</code></pre><blockquote><h5 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h5></blockquote><pre class="language-none"><code class="language-none">起到环境隔离的作用，用来解决线上bug&#x2F;&#x2F;查看分支git branch&#x2F;&#x2F;创建分支git branch 分支名&#x2F;&#x2F;切换到指定分支git checkout 分支名        &#x2F;&#x2F;创建并切换分支,相当于上面两条命令git checkout -b 分支名&#x2F;&#x2F;将指定分支与master合并切换到master分支，再git merge 分支名&#x2F;&#x2F;禁用Fast forward模式合并dev分支    git merge --no-ff -m &quot;merge with no-ff&quot; 分支名        &#x2F;&#x2F;删除指定分支名git branch -d 分支名&#x2F;&#x2F;分支合并可能会产生冲突，产生冲突的原因* master当前版本是C3,现在有两个分支，bug分支，dev分支，这两个分支都是从C3版本分出来的* bug分支用来解决bug，解决完毕后，与master的版本合并，产生C4版本，即master最新版本是C4* dev分支用来开发新功能，开发好后，产生的版本是C5，当与master合并时就会产生冲突，因为dev分支是在master的C3版本基础上开发的，而合并时master是C4，此时需要手动解决冲突只有当bug分支，dev分支修改的是同一个文件时，才会产生冲突。</code></pre><blockquote><h5 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h5></blockquote><pre class="language-none"><code class="language-none">1)在github上创建好仓库后，如果你没点击创建README.md文件，那么你本地仓库第一件事就是创建一个README.md文件，文件中写# 项目名，并生成一个本地版本使用下面命令推送到远程仓库。2)本地仓库与远程仓库建立联系git remote add origin 远程仓库的https地址相当于使用origin指代远程仓库的地址3)本地仓库推送到远程仓库git push -u origin master,将本地仓库的master分支推送到远程仓库的master分支git push -u origin dev,将本地仓库的dev分支推送到远程仓库4)本地分支与远程分支建立联系4.1)远程已有remote_branch分支并且已经关联本地分支local_branch且本地已经切换到local_branchgit push4.2)远程已有remote_branch分支但未关联本地分支local_branch且本地已经切换到local_branchgit push -u origin&#x2F;remote_branch4.3)远程没有remote_branch分支并，本地已经切换到local_branchgit push origin local_branch:remote_branch5)克隆远程仓库git clone 远程仓库的https地址6)本地分支与远程分支保持更新，拉取远程仓库的分支，直接拉取到工作区中   git pull origin 分支名这个命令相当于两个命令：git fetch origin dev表示从远程仓库拉取到本地仓库中git merge origin&#x2F;dev表示把版本库中的代码合并到工作区中7)查看本地仓库关联的远程仓库git remote -v，如果什么都不显示，表示本地仓库没有与远程仓库建立联系，使用2)步骤，即可建立联系</code></pre><blockquote><h5 id="变基rebase"><a href="#变基rebase" class="headerlink" title="变基rebase"></a>变基rebase</h5></blockquote><pre class="language-none"><code class="language-none">使得git提交记录简洁1)第一种使用场景使git log中的多个版本记录整合成一个记录git rebase -i 以往的版本号表示使以往的版本号与最新的版本号进行合并git rebase -i HEAD~3和上个命令一样，HEAD~3表示合并最近的三个版本注意：最好不要合并那些已经提交到远程仓库的版本号2)第二种使用场景将分支的上的版本拼接到master版本上，注意和合并不一样，合并的步骤是切换到master，使用git merge 分支名，使得分支上的代码与master一致，在master上使用git log --graph可以查看明显是两条版本线，而拼接是将分支上的版本插入到master版本线上，使用git log --graph可以看到是只有一条版本线&quot;拼接&quot;的步骤是：切换到分支上，git checkout 本地分支名，再执行git rebase master,将master的版本与分支&quot;拼接&quot;，最后再回到master主分支，执行git merge 本地分支名，合并分支简而言之，这种&quot;拼接&quot;的方式和合并类似，只不过在版本线上看上去不同，更加简洁了3)第三种使用场景假如我在公司开发一个版本C1放在本地仓库，没有提交到远程仓库，回到家后，在家中开发版本C2，并提交到远程仓库，回到公司后，执行git pull origin 远程分支名，把远程仓库中的C2拉到本地中，其中就会产生冲突，并且这里会产生合并，导致版本线是2条合并成一条，我们可以不使用pull命令执行git pull --rebase origin 远程分支名，即可使得远程仓库C1版本与本地C2版本拼接，使得只有一条版本线。git pull --rebase origin 远程分支名该命令等于git fetch origin 远程分支名，和，git rebase origin&#x2F;远程分支名注意：如果执行git rebase命令产生冲突了，解决方法是：先手动解决冲突，并将冲突的文件添加到暂存区最后再执行命令git rebase --continue</code></pre><blockquote><h5 id="协同开发"><a href="#协同开发" class="headerlink" title="协同开发"></a>协同开发</h5></blockquote><pre class="language-none"><code class="language-none">tag命令：用于给当前本地仓库的版本号打上一个标签，相当于版本号的简写，这个标签就代表这个版本的本地仓库&#x2F;&#x2F;给当前的本地仓库版本打上标签，标签名是v1，标签描述是&quot;第一版&quot;git tag -a v1 -m &quot;第一版&quot;&#x2F;&#x2F;然后再将该带有标签的本地仓库版本推送到远程仓库中去git push origin --tags好像现在协作开发是，创建一个组织，组织中除了ownner，其他成员默认只有read的权限邀请他人进组织后，再邀请该人去组织中的某一个项目，这个人只在该项目下有write的权限，在其他项目中只有read的权限。代码review，使用github上的pull request功能，具体步骤如下：代码review指的是，当程序员开发完一个功能后，需要与总分支(之前从这里分开，现在要合并回去)进行合并，在合并之前需要经过team leader经过检查(review)后才能review，所以我们需要在仓库的settings中的Branches中设置规则(rule),指定哪条分支需要进行review，这样当程序员开发完功能后，与总分支合并时，team leader会收到对该分支的合并请求，对程序员的代码进行检查判断是否同意合并分支。</code></pre><blockquote><h5 id="给开源项目贡献代码"><a href="#给开源项目贡献代码" class="headerlink" title="给开源项目贡献代码"></a>给开源项目贡献代码</h5></blockquote><pre class="language-none"><code class="language-none">1)将开源项目fork到自己的github上2)在自己的仓库中对该项目进行修改3)给源代码的作者提交pull request申请</code></pre><blockquote><h5 id="三个配置文件"><a href="#三个配置文件" class="headerlink" title="三个配置文件"></a>三个配置文件</h5></blockquote><pre class="language-none"><code class="language-none">1)项目配置文件,本地级别，是仓库中.git文件夹下的config文件，只在本项目中生效git config --local user.name &quot;万一&quot;git config --local user.email &quot;wanyi@gmail.com&quot;2)全局配置文件，用户级别，当前用户&#x2F;.gitconfig文件git config --global user.name &quot;万一&quot;git config --global user.email &quot;wanyi@gmail.com&quot;3)系统配置文件，系统级别，最高级别,需要有root权限，&#x2F;etc&#x2F;.gitconfig,一般不用git config --system user.name &quot;万一&quot;git config --system user.email &quot;wanyi@gmail.com&quot;</code></pre><blockquote><h5 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h5></blockquote><pre class="language-none"><code class="language-none">没有免密登录，每次push&#x2F;Pull时都需要登录github账号,免密登录有三种方式：1)url的方式原来的地址：https:&#x2F;&#x2F;github.com&#x2F;NicknamedCoco&#x2F;Git-Test.git免密登录的地址：https:&#x2F;&#x2F;用户名:密码@github.com&#x2F;NicknamedCoco&#x2F;Git-Test.git2)SSH的方式2.1)在生成公钥私钥(默认放在用户名&#x2F;.ssh目录下，id_rsa私钥，id_rsa.pub公钥)ssh-keygen -r rsa 2.2)拷贝公钥的内容，设置到github上2.3)在git本地仓库中配置ssh地址git remote add origin 远程仓库的ssh地址3)git自动管理凭证</code></pre><blockquote><h5 id="git忽略文件"><a href="#git忽略文件" class="headerlink" title="git忽略文件"></a>git忽略文件</h5></blockquote><pre class="language-none"><code class="language-none">在仓库中创建一个.gitignore文件，可以指定某些文件不受git的管理，也就不用把这些文件提交到远程仓库中去*.h，表示让git不管理*.h的文件!a.h，表示让git管理a.h文件files&#x2F;，表示不管理files&#x2F;下的文件.gitignore，表示不管理.gitignore文件我们可以在github上搜索.gitignore，找到java类型的.gitignore文件，覆盖我们的.gitignore即可</code></pre><blockquote><h5 id="github任务管理相关"><a href="#github任务管理相关" class="headerlink" title="github任务管理相关"></a>github任务管理相关</h5></blockquote><pre class="language-none"><code class="language-none">Issues，文档以及任务管理Wiki，项目文档</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot基础笔记</title>
      <link href="2021/04/21/SpringBoot%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
      <url>2021/04/21/SpringBoot%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="目前进度"><a href="#目前进度" class="headerlink" title="目前进度"></a>目前进度</h5></blockquote><p>终于把SpringBoot看完了，感觉自己效率还是比较慢的，没办法，专业课上还有计算机网络等等，<br>我看视频又想看完视频就去敲代码验证一下，写个博客总结一下，所以进度很慢，<br>目前个人熟悉使用Spring，SpringMVC，Mybatis，SpringBoot，MyBatisPlus这几个后端框架<br>其中对SpringMVC的原理比较熟悉，其他框架使用没问题，要说说底层的原理，还是不太行，得后期更加<br>细致的看哪些源码讲解，前端一块，很久之前学过，但技术就是这样，你不常用就容易忘掉，所以前端也比较薄弱</p><blockquote><h5 id="实习前要完成的任务"><a href="#实习前要完成的任务" class="headerlink" title="实习前要完成的任务"></a>实习前要完成的任务</h5></blockquote><ul><li>专业课的进度<br>还不知道能不能找的到实习工作，算法数据结构什么的没学过，专业课暂时只学了操作系统，数据库原理，<br>但仅限于了解的程度，操作系统学的还行吧，什么分页分段段页式存储等等还有个不错的认识，数据库原理<br>真的仅限于基础的Sql增删改查了，还有一门计算机网络正在学习，这门课挺复杂的，但是我正在看网课，也还行</li><li>开发中需要学习的<ul><li>Git，听说实际项目开发都要用，我现在只会基础的操作</li><li>mysql，只会基本的增删改查还是不太行，连三范式都不太懂，更何况事务，乐观悲观锁。</li><li>算法，数据结构，这一直是薄弱项。</li></ul></li></ul><p>SpringBoot笔记放在github上，写在博客上挺麻烦的，<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springboot/springboot%E7%AC%94%E8%AE%B0.txt">springboot</a></p>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之自定义starter</title>
      <link href="2021/04/20/SpringBoot%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89starter/"/>
      <url>2021/04/20/SpringBoot%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89starter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="自定义场景启动器："><a href="#自定义场景启动器：" class="headerlink" title="自定义场景启动器："></a>自定义场景启动器：</h4></blockquote><h5 id="大概步骤："><a href="#大概步骤：" class="headerlink" title="大概步骤："></a>大概步骤：</h5><p>我们引入的spring-boot-starter-xxx都是封装好的场景启动器，一般来说，引入一个xxx-starter场景，就是引入一个项目，这个项目的pom依赖中有各种其他的依赖，比如该项目的自动装配依赖，所有我们需要再创建一个xxxAutoConfigure项目在这个xxxAutoConfigure项目中创建自动装配类，并进行资源绑定等等，最后在resources/META-INF/创建spring.factories文件整个自定义starter就准备好了，后期只需要引入xxx-starter项目。就能使得自动装配类自动为我们注册组件，从而可以使用组件的各个方法。</p><h5 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h5><ul><li><p>创建一个starter项目，作为整体的，供外部引用的场景依赖包。<br>在该项目的pom文件中引入依赖包含着自动配置类的项目GAV<br>创建项目为:keyi-info-spring-boot-starter</p></li><li><p>创建一个自动配置项目，提供自动装配类，资源绑定，核心功能组件注册。<br>创建项目为：keyi-info-spring-boot-starter-autoconfigure</p><ul><li><p>创建资源配置文件：KeYiInfoProperties</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"keyi"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeYiInfoProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> tel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> information<span class="token punctuation">;</span>    <span class="token comment">//省略getter，setter方法</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>创建核心功能组件，该对象要提供核心功能，KeYiInfo</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeYiInfo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">KeYiInfoProperties</span> keYiInfoProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token operator">+</span>keYiInfoProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄："</span><span class="token operator">+</span>keYiInfoProperties<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"邮箱："</span><span class="token operator">+</span>keYiInfoProperties<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电话："</span><span class="token operator">+</span>keYiInfoProperties<span class="token punctuation">.</span><span class="token function">getTel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简介："</span><span class="token operator">+</span>keYiInfoProperties<span class="token punctuation">.</span><span class="token function">getInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>创建自动配置类，用来注册核心组件，KeYiInfoAutoConfigure</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">KeYiInfoProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeYiInfoAutoConfigure</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">KeYiInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">KeYiInfo</span> <span class="token function">keYiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KeYiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>在自动配置项目中的resources/META-INF下创建spring.factories文件，设置自动配置类为自动装配</p><pre class="language-markup" data-language="markup"><code class="language-markup">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\world.keyi.auto.KeYiInfoAutoConfigure</code></pre></li><li><p>完成自动配置类项目，记得在starter场景依赖项目中引入自动配置类项目的依赖<br>最后使用maven的build插件，将两个项目打包进本地仓库，当需要使用该starter场景时，<br>直接引入starter项目的GAV依赖，然后代码中即可使用自动配置类为我们注册的组件了</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token class-name">KeYiInfo</span> keYiInfo<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">starterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    keYiInfo<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之Actuator资源监控</title>
      <link href="2021/04/18/SpringBoot%E4%B9%8BActuator%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7/"/>
      <url>2021/04/18/SpringBoot%E4%B9%8BActuator%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="SpringBoot的资源监控，或者叫指标监控"><a href="#SpringBoot的资源监控，或者叫指标监控" class="headerlink" title="SpringBoot的资源监控，或者叫指标监控"></a>SpringBoot的资源监控，或者叫指标监控</h5></blockquote><ul><li><p>Actuator是Springboot提供的用来对应用系统进行自省和监控的功能模块，<br>借助于Actuator开发者可以很方便地对应用系统某些监控指标进行查看、统计等。</p></li><li><p>Springboot为我们提供数据有两种方式，web方式(通过http获取监控数据)和JMX(通过JDK工具查看监控数据)<br>主流使用Web方式获取监控数据。</p></li><li><p>配置Actuator资源监控的步骤如下：</p><ul><li><p>导入Actuator场景依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--指标监控功能场景依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在boot配置文件中，开启将监控数据以web形式暴露出来，<br>使得我们通过浏览器<code>http://localhost:8080/actuator</code>即可查看监控数据</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#指标监控的设置</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled-by-default</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#默认开启所有endpoint(端点,功能)</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span>  <span class="token comment">#以web形式暴露所有端点(开启所有功能)</span></code></pre></li></ul></li><li><p>在Actuator中有非常多的端点，即很多模块信息，有所有bean信息，组件的健康状态<br>各种配置信息，只需要使用<code>http://localhost:8080/actuator/端点名称</code>即可查看各端点数据，<br>数据以json格式返回给用户。</p></li><li><p>例如，查看health，访问<code>http://localhost:8080/actuator/health</code>即可查看项目的健康状态<br>不过”UP”表示健康，”Down”表示宕机不健康，只有项目中所有的组件都健康，整个项目才会显示UP<br>任意一个组件宕机，整个项目就会显示Down，我们可以通过配置查看整个项目下更细节的健康情况</p><pre class="language-markup" data-language="markup"><code class="language-markup">management:  endpoint:    health:      show-details: always   #开启健康详细报告</code></pre><p>所有端点的具体信息都可以在management.endpoint.xxx配置，配置端点是否打开监控信息等等</p></li></ul><blockquote><h5 id="自定义端点及其数据项"><a href="#自定义端点及其数据项" class="headerlink" title="自定义端点及其数据项"></a>自定义端点及其数据项</h5></blockquote><ul><li><h6 id="自定义health端点的健康信息"><a href="#自定义health端点的健康信息" class="headerlink" title="自定义health端点的健康信息"></a>自定义health端点的健康信息</h6><p>默认情况下，当我们配置了详细模式访问health端点时，可以看到有三个健康信息项，db，diskSpace，ping<br>当我们自定义新的健康信息项后，通过业务逻辑判断就能监控组件是否健康，我们还可以给自定义健康信息项<br>传递数据，当我们通过http访问我们自己的健康数据项时就可以查看到该组件是否健康。</p><ul><li><p>自定义类继承AbstractHealthIndicator，该抽象类实现了HealthIndicator接口，自定义类名后缀必须<br>是HealthIndicator，即xxxHealthIndicator，如此，我们的health端点下的健康数据项名就为xxx</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyiHealthIndicator</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHealthIndicator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doHealthCheck</span><span class="token punctuation">(</span><span class="token class-name">Health</span><span class="token punctuation">.</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*              这里进行逻辑判断后，将数据带给health，一起被展示         */</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"keyi"</span><span class="token punctuation">,</span><span class="token string">"健康强壮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//表示组件健康</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"keyi"</span><span class="token punctuation">,</span><span class="token string">"虚脱瘦弱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//表示组价不健康</span>        <span class="token punctuation">&#125;</span>        builder<span class="token punctuation">.</span><span class="token function">withDetail</span><span class="token punctuation">(</span><span class="token string">"xixi"</span><span class="token punctuation">,</span><span class="token string">"茜茜哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDetails</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>配置好后，我们就可以通过<code>http://localhost:8080/actuator/health/keyi</code>即可看到我们<br>自己配置的健康数据项，<code>keyi: &#123;status: &quot;UP&quot;, details: &#123;xixi: &quot;茜茜哈哈&quot;, keyi: &quot;健康强壮&quot;&#125;&#125;</code></p></li></ul></li><li><h6 id="自定义info端点信息"><a href="#自定义info端点信息" class="headerlink" title="自定义info端点信息"></a>自定义info端点信息</h6><p>info端点可以用来配置项目的基本信息，项目名，项目版本之类的，默认情况下，我们访问info时没有数据<br>配置info端点信息有两种方式：</p><ul><li><p>boot配置文件中配置info端点信息</p><pre class="language-markup" data-language="markup"><code class="language-markup">info:  information: 该项目隶属于太阳系->地球->中国->江西->九江->王科一  #自定义信息  mavenVersion: @project.version@  mavenArtifact: @project.artifactId@   #获取maven中的配置信息</code></pre></li><li><p>我们还可以使用自定义类实现InfoContributor接口，从而配置info端点的数据项<br>使用方式和配置health端点的健康数据项类似。</p></li></ul></li><li><h6 id="自定义metrics端点信息"><a href="#自定义metrics端点信息" class="headerlink" title="自定义metrics端点信息"></a>自定义metrics端点信息</h6><p>metrics端点，当我们需要为某个系统某个服务做监控、做统计，就需要用到 metrics<br>应用场景：</p><ul><li>每秒的请求数是多少？</li><li>平均每个请求处理的时间？</li><li>请求处理的最长耗时？</li><li>等待处理的请求队列长度？</li></ul><p>例如：统计一个service方法被调用多少次？</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserMapper</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token class-name">Counter</span> counter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">,</span> <span class="token class-name">MeterRegistry</span> meterRegistry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userMapper <span class="token operator">=</span> userMapper<span class="token punctuation">;</span>        counter <span class="token operator">=</span> meterRegistry<span class="token punctuation">.</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token string">"UserServiceImpl.getUserByEmail.count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"UserService:&#123;&#125;"</span><span class="token punctuation">,</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//自增+1</span>        counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserByEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*注入MeterRegistry对象，调用该对象的counter计数方法，传递的string参数就是metrics端点中的数据项的key，而计算的结果被作为value，每次调用getUserByEmail方法counter调用自增方法，我们通过http访问metrics端点下的key值，即可查看到value自增值*/</span></code></pre></li><li><h6 id="自定义端点"><a href="#自定义端点" class="headerlink" title="自定义端点"></a>自定义端点</h6><p>以上都是在原有的端点上添加数据源，下面我们来看看如何自定义端点及设置数据项信息<br>只需要自定义一个类，使用@EndPoind注解标注该类的端点名称，该端点名与health,metrics同级<br>访问<code>http://localhost:8080/actuator/端点名称</code>，即可查看自定义端点信息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Endpoint</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"keyi"</span><span class="token punctuation">)</span>    <span class="token comment">//指定端点名</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceEndPoint</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ReadOperation</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">getSomeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//访问actuator/keyi时，就会显示以下数据项</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"万一"</span><span class="token punctuation">,</span><span class="token string">"茜茜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@WriteOperation</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeSomeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一袋米要抗几楼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><blockquote><h5 id="SpringBootAdmin，微服务可视化资源监控项目"><a href="#SpringBootAdmin，微服务可视化资源监控项目" class="headerlink" title="SpringBootAdmin，微服务可视化资源监控项目"></a>SpringBootAdmin，微服务可视化资源监控项目</h5></blockquote><p>SpringBootAdmin是一个可视化的资源监控项目，我们之前使用http方式访问各个端点信息，<br>返回给我们的是json，这个项目就是用这些json数据做成前端页面展示出来，并使用微服务架构<br>使得多个微服务配置到运行该项目的服务器上后，就可以可视化管理监控我们的微服务项目。<br>下面来看看如何简单的配置运行该项目：</p><ul><li><p>创建一个新的SpringBoot项目，使得该项目作为服务器，导入admin-server依赖和web场景依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--web场景依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--微服务可视化监控服务器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在主程序类上标注@EnableAdminServer，并在boot配置文件中配置项目的端口号，<br>防止跟原有项目端口冲突</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAdminServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationAdminServer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationAdminServer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span></code></pre></li><li><p>配置好后，通过<code>http://localhost:8888/</code>即可查看到该项目首页<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springboot-admin/1.png" loading="lazy"></p></li><li><p>服务器端配置好后，接下来配置客户端，首先我们的项目需要导入指标监控依赖和client依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--添加springbootAdmin的client端场景依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--指标监控功能场景依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在boot配置文件中配置好本项目端口号，防止与服务器项目冲突，并且将端点使用web方式暴露出来，<br>默认使用的是JMX方式，最后配置服务器端的url地址，以便该项目部署到服务器端，能被监控到。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#修改tomcat端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token comment">#  springbootAdmin监视可视化配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">boot</span><span class="token punctuation">:</span>    <span class="token key atrule">admin</span><span class="token punctuation">:</span>      <span class="token key atrule">client</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8888</span><span class="token comment">#指标监控的设置</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled-by-default</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#默认开启所有endpoint(功能)</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span>  <span class="token comment">#以web形式暴露所有端点(开启所有功能)</span></code></pre></li><li><p>配置好客户端后，将服务器端和客户端项目都启动起来，再访问服务器端项目首页，即可监控原项目的信息<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springboot-admin/2.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springboot-admin/3.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springboot-admin/4.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springboot-admin/5.png" loading="lazy"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot Admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之Redis的使用</title>
      <link href="2021/04/17/SpringBoot%E4%B9%8BRedis%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/04/17/SpringBoot%E4%B9%8BRedis%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>SpringBoot配置阿里云Redis</p></blockquote><ul><li><p>购买阿里云上的Redis</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/1.png" loading="lazy"><br>设置的密码是tgy153RFVHU14863<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/2.png" loading="lazy"></p></li><li><p>购买后，申请公网地址，以便其他IP地址能访问<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/3.png" loading="lazy"></p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/4.png" style="zoom: 50%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/5.png" alt="公网地址" style="zoom:80%;" / loading="lazy"></li><li><p>设置白名单，将127.0.0.1改成0.0.0.0/0，以便该redis让其他IP也能访问，而不是只能本机访问<br>并创建一个账号，本例中账号为keyi，密码为tgy153RFVHU14863</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/6.png" loading="lazy"><br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/8.png" loading="lazy"></p></li><li><p>使用redis可视化客户端测试连接，host是申请的公网地址，Auth是密码，其值为账号:密码<br>本例中密码为：keyi:tgy153RFVHU14863，端口号默认，Name随便填。<br>可视化工具是Another Redis Desktop Manager</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/9.png" style="zoom: 67%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/10.png" style="zoom:67%;" / loading="lazy"></li><li><p>测试成功后，以下就是使用SpringBoot连接redis数据库并存储值。<br>首先，导入redis场景依赖，底层默认使用Lettuce客户端连接redis数据库</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    redis，Nosql数据库，也可以做数据库缓存，Key/Value存储    默认使用Lettuce，redis客户端连接数据库--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>你也可以使用jedis客户端，Springboot底层默认对这两个redis客户端都支持，当导入两个依赖时<br>需要额外指定底层使用哪一个客户端连接redis</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--jedis客户端--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>然后在boot配置文件中配置连接参数</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> r<span class="token punctuation">-</span>bp1i6comctc7k7lrd1pd.redis.rds.aliyuncs.com<span class="token comment">#redis公网地址</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> keyi<span class="token punctuation">:</span>tgy153RFVHU14863<span class="token comment">#密码，redis账号:redis密码</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">client-type</span><span class="token punctuation">:</span> jedis<span class="token comment">#指定使用jedis连接数据库</span></code></pre></li><li><p>测试</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">redisTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*        使用jedis客户端连接阿里云的redis数据库,从redis中读取数据    */</span>    <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ops<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"万一"</span><span class="token punctuation">,</span><span class="token string">"茜茜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> value <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"万一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果就为茜茜，使用可视化客户端可以查得到<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/redis/11.png" loading="lazy"></p></li><li><p>分析下引入redis场景依赖的自动配置类</p><pre class="language-markup" data-language="markup"><code class="language-markup">1)redis的核心自动配置类，RedisAutoConfiguration，资源配置类，RedisProperties，对应boot配置文件为:spring.redis2)连接工厂是准备好的，LettuceConnectionConfiguration，JedisConnectionConfiguration,redis客户端，用来访问云redis3)自动注入了RedisTemplate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Object,Object</span><span class="token punctuation">></span></span>，用来操作redis，操作的key/value都是Object类型的4)自动注入了StringRedisTemplate,同上，只不过，该对象用来操作key/value都是string类型的数据5)底层我们只需要使用StringRedisTemplate,RedisTemplate就可以操作redis</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之MybatisPlus的分页查询</title>
      <link href="2021/04/16/SpringBoot%E4%B9%8BMybatisPlus%E7%9A%84%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
      <url>2021/04/16/SpringBoot%E4%B9%8BMybatisPlus%E7%9A%84%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="SpringBoot整合原生Mybatis"><a href="#SpringBoot整合原生Mybatis" class="headerlink" title="SpringBoot整合原生Mybatis"></a>SpringBoot整合原生Mybatis</h5></blockquote><ul><li><p>导入mybatis的场景包</p><pre class="language-none"><code class="language-none">&lt;!--mybatis场景包--&gt;&lt;dependency&gt;&lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;&lt;version&gt;2.1.4&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre></li><li><p>分析场景包中的自动配置类</p><pre class="language-none"><code class="language-none">1)核心的自动配置类，MybatisAutoConfiguration2)绑定的资源文件类，MybatisProperties，该类与boot配置文件绑定通过，mybatis.xx3)自动配置类中已经配置了SqlSessionFactory，使用的数据源从容器中获取的，只要我们配置了自己的druid数据源，就可以被使用到。4)自动配置类中导入了AutoConfiguredMapperScannerRegistrar组件，用于自动搜索mapper接口@Import(&#123;MybatisAutoConfiguration.AutoConfiguredMapperScannerRegistrar.class&#125;)该类用于支持@MapperScan注解，@MapperScan注解标注在配置类上。5)如果不使用@MapperScan注解，你也可以在每一个Mapper接口上使用@Mapper注解标注，表示对该接口进行解析以上两种方式选其一6)通过mybatis.config-location&#x3D;classpath:mybatis&#x2F;mybatis-config.xml指定全局配置文件位置不过一般都不用写mybatis的核心配置文件，你同样可以在boot的配置文件中配置即可通过配置mybatis.configuration.*下面的所有值，就相当于配置mybatis核心配置文件中的组件7)通过mybatis.mapper-locations&#x3D;classpath:mybatis&#x2F;mapper&#x2F;*.xml指定mapper映射文件的位置</code></pre></li><li><p>使用mybatis框架步骤</p><pre class="language-none"><code class="language-none">1)导入mybatis场景包starter2)编写mapper接口，标注@Mapper注解3)编写Sql映射文件并绑定mapper接口4)在application.yaml中指定mapper配置文件的位置，以及指定全局配置文件的信息全局配置文件的位置可以不用指定，你可以直接配置mybatis.configuration下，默认开启状态。</code></pre></li><li><p>注解模式的mybatis</p><pre class="language-none"><code class="language-none">注解模式的mybatis就是在Mapper接口上使用@Select,@insert注解标注在接口方法上，使用@Options注解为其他注解添加属性项的，这种方式感觉一旦查询方法复杂起来，非常麻烦，注解不应该滥用</code></pre></li></ul><blockquote><h5 id="SpringBoot整合MybatisPlus"><a href="#SpringBoot整合MybatisPlus" class="headerlink" title="SpringBoot整合MybatisPlus"></a>SpringBoot整合MybatisPlus</h5></blockquote><ul><li><p>导入mybatisPlus场景包</p><pre class="language-none"><code class="language-none">&lt;!--mybatis-plus场景包mybaitsPlus相对于mybatis在原来的基础上提供了更多的扩展功能--&gt;&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;&lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;&lt;version&gt;3.4.1&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre></li><li><p>分析mybatisPlus自动配置类</p><pre class="language-none"><code class="language-none">1)核心自动配置类：MybatisPlusAutoConfiguration，参数绑定项，MybatisPlusPropertiesmybatis-plus: xxx，就是对mybatis-plus的定制2)SqlSessionFactory自动配置好，底层是容器中默认的数据源，如果配置了druid就为druid数据源3)mapperLocations自动配置好的，有默认值，classpath*:&#x2F;mapper&#x2F;**&#x2F;*.xml表示任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件，建议以后sql映射文件(xxxMapper.xml)，放在mapper目录下4)容器中也自动配置了sqlSessionTemplate,该类就是sqlSession类5)@Mapper标注的接口也会被自动扫描,或者在主类上使用@MapperScan指定mapper接口位置</code></pre></li><li><p>mybatisPlus为我们提供其他的扩展功能</p><pre class="language-none"><code class="language-none">1)mybatisPlus提供了BaseMapper类，提供给mapper接口很多增删改查的方法，我们的mapper接口只需要继承BaseMapper类就可拥有crud的基本功能。2)为我们service层同样提供了很多的增删改查的方法，我们的service接口可以继承myabtisPlus提供的IService接口，该接口有很多基本方法，我们的service实现类除了实现我们的service接口，还可继承mybatisPlus提供的ServiceImpl类，该类同样有很多基础方法用以操作数据库3)mybatisPlus同样对实体类进行了支持，使用@TableName注解标注在实体类上，用于指定当前的实体类对应数据库中哪一个表，还有更多注解，待以后继续学习！基本上导入了mybatisPlus的场景包，并不需要做任何事，mapper接口的位置配置已经被默认配置好了</code></pre></li></ul><blockquote><h5 id="MybatisPlus的分页查询案例"><a href="#MybatisPlus的分页查询案例" class="headerlink" title="MybatisPlus的分页查询案例"></a>MybatisPlus的分页查询案例</h5><p>mybatisPlus提供了很多功能，比如分页的功能</p></blockquote><ul><li><p>向容器中注册mybatisPlus的分页插件(拦截器)，用于对分页的支持</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*mybatis-plus分页插件*/</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PaginationInnerInterceptor</span> paginationInnerInterceptor <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>H2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置分页到最后一页，是否再次回到首页。</span>    paginationInnerInterceptor<span class="token punctuation">.</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span>paginationInnerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>前端页面</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--suppress ALL--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>用户分页查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">li</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>            <span class="token property">padding-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>生日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user:$&#123;page.records&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.email&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.birthday&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>当前页码:[[$&#123;page.current&#125;]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>总页码:[[$&#123;page.pages&#125;]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>总记录数:[[$&#123;page.total&#125;]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--将页码遍历，从1到总页码--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>  <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num:$&#123;#numbers.sequence(1,page.pages)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/getUsers(pageNum=$&#123;num&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[[$&#123;num&#125;]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--thymeleaf携带参数使用小括号()--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/getUsers&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/getUsers(pageNum=$&#123;page.current&#125;-1)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/getUsers(pageNum=$&#123;page.current&#125;+1)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>后端控制器方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByEmail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserByEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getUsers"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span>                  <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pageNum"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> pageNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//pageNum是前端传递过来的值，2表示每页查2条数据</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userPage <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span>userPage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"userInfo"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>Service接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>Service接口实现类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token comment">//泛型中，UserMapper表示mapper接口，User表示封装后的类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserMapper</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">></span></span>     <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"UserService:&#123;&#125;"</span><span class="token punctuation">,</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserByEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>Mappe接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> <span class="token function">getUserByEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>Mapper映射文件</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    namespace:接口的全类名。world.keyi.dao.UserDao    id：接口中要被实现的方法名    resultType：接口方法的返回值类型，全类名,增删改不用写返回值类型        mybatis自动判断，如果是数字，返回int类型，如果是boolean，影响0行返回false，否则返回true--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.boot.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过邮箱查询用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByEmail<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user where email=#&#123;email&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>此时实验调用的是/getUsers方法，使用的是mybatisPlus提供的ServiceImpl中的方法<br>所以Mapper接口和Mapper映射文件中没有写任何sql语句，仍然能查询出数据库中数据。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/mybatis/images/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.png" loading="lazy"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之配置Druid连接池</title>
      <link href="2021/04/14/SpringBoot%E4%B9%8B%E9%85%8D%E7%BD%AEDruid%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>2021/04/14/SpringBoot%E4%B9%8B%E9%85%8D%E7%BD%AEDruid%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>使用JDBC的默认配置</p></blockquote><ul><li><p>导数据库场景依赖和数据库驱动</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//导入数据库场景依赖</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token comment">//数据库驱动</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre></li><li><p>导入场景依赖后，分析自动配置类</p><pre class="language-none"><code class="language-none">1)数据源自动配置类是：DataSourceAutoConfiguration2)通过修改boot配置文件中的spring.datasource，可以配置数据库中的各个属性3)因为场景依赖中默认引入了Hikari的依赖，所以springboot底层默认支持HikariDataSource    前提是引入了Hikari依赖且容器中没有配置其他的数据源。4)因为场景依赖中默认引入了JdbcTemplate依赖，所以也有JdbcTemplate的自动配置类    叫JdbcTemplateAutoConfiguration,所以我们可以在dao层中直接自动引用JdbcTemplate    JdbcTemplate的属性设置可以通过修改boot的配置文件spring.jdbc进行设置</code></pre></li></ul><blockquote><p>配置Druid连接池</p></blockquote><ul><li><p>手动配置Druid的各个功能</p><ul><li><p>导入Druid依赖</p><pre class="language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.1.8&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre></li><li><p>配置自定义Druid数据源</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*配置druid数据源这会导致底层默认使用的HikariDataSource无效，因为@ConditionalOnMissingBean(DataSource.class)@ConfigurationProperties("spring.datasource")的意思是使得DruidDataSource中各个属性与配置文件中的spring.datasource进行绑定*/</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//以上方式，就可在容器中注册druid数据库连接池并使用</span></code></pre></li><li><p>配置druid的内置监控页面</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">)</span>配置druid监控功能，即向容器中加入<span class="token class-name">StatViewServlet</span><span class="token comment">/*配置druid的监控页功能*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StatViewServlet</span> statViewServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StatViewServlet</span><span class="token punctuation">></span></span> servletRegistrationBean <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>statViewServlet<span class="token punctuation">,</span><span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> servletRegistrationBean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">2</span><span class="token punctuation">)</span>在<span class="token class-name">DruidDataSource</span>中开启监控<span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启druid的监控功能</span>dataSource<span class="token punctuation">.</span><span class="token function">setFilters</span><span class="token punctuation">(</span><span class="token string">"stat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>配置监控页中的Web应用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*配置WebStatFilter用于采集web-jdbc关联监控的数据*/</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">WebStatFilter</span> webStatFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebStatFilter</span><span class="token punctuation">></span></span> webStatFilterFilterRegistrationBean <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>webStatFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>    webStatFilterFilterRegistrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//排除掉静态资源和监控页的访问监控</span>webStatFilterFilterRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.jpg,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> webStatFilterFilterRegistrationBean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>配置监控页中的防火墙</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//直接在DruidDataSource中设置</span><span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启druid的监控功能和防火墙功能</span>dataSource<span class="token punctuation">.</span><span class="token function">setFilters</span><span class="token punctuation">(</span><span class="token string">"stat,wall"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>配置监控页的账号和密码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*配置druid的监控页功能*/</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StatViewServlet</span> statViewServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StatViewServlet</span><span class="token punctuation">></span></span> servletRegistrationBean <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>statViewServlet<span class="token punctuation">,</span><span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//增加监控页的账号密码</span>    servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"万一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123765"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> servletRegistrationBean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//以上就是手动向容器中注册druid的各个功能组件</span></code></pre></li></ul></li><li><p>使用官方的starter场景依赖</p><ul><li><p>导入druid的starter场景依赖</p><pre class="language-none"><code class="language-none">&lt;!--druid_starter在该场景依赖中会导入druid的依赖以及各种自动配置类--&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.1.17&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre></li><li><p>导入场景依赖后，分析其中的自动配置类</p><pre class="language-none"><code class="language-none">1)核心自动配置类，DruidDataSourceAutoConfigure2)该类上依赖了两个属性文件，DruidStatProperties.class(spring.datasource.druid)DataSourceProperties.class(spring.datasource)3)该自动配置类上导入了以下几个配置类DruidSpringAopConfiguration.class其作用是作用是配置监控页中的spring监控(监控springBean的)其中属性的绑定是通过spring.datasource.druid.aop-patterns进行设置DruidStatViewServletConfiguration.class，监控页的配置通过修改spring.datasource.druid.stat-view-servlet属性进行设置DruidWebStatFilterConfiguration.class,配置监控页中的Web应用通过修改spring.datasource.druid.web-stat-filter属性进行设置DruidFilterConfiguration.class，所有druid自己filter的配置通过修改下面配置进行设置对应功能spring.datasource.druid.filter.statspring.datasource.druid.filter.configspring.datasource.druid.filter.encodingspring.datasource.druid.filter.slf4j&quot;;&quot;spring.datasource.druid.filter.log4j&quot;;&quot;spring.datasource.druid.filter.log4j2&quot;;&quot;spring.datasource.druid.filter.commons-log&quot;;&quot;spring.datasource.druid.filter.wall&quot;;&quot;spring.datasource.druid.filter.wall.config&quot;;</code></pre></li><li><p>使用druid场景依赖后，我们可以直接通过boot的配置从而配置监控页的各个功能</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/wechat<span class="token punctuation">?</span>          serverTimezone=GMT<span class="token important">&amp;useSSL=false&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123765</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">druid</span><span class="token punctuation">:</span><span class="token comment">#      开启监控和防火墙功能</span>      <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token comment">#      设置单个filter功能细节</span>      <span class="token key atrule">filter</span><span class="token punctuation">:</span>        <span class="token key atrule">wall</span><span class="token punctuation">:</span>          <span class="token key atrule">config</span><span class="token punctuation">:</span>            <span class="token key atrule">drop-table-allow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment">#      监控页的配置</span>      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">login-username</span><span class="token punctuation">:</span> 万一        <span class="token key atrule">login-password</span><span class="token punctuation">:</span> <span class="token number">8008208820</span><span class="token comment">#      配置监控页中的Web应用</span>      <span class="token key atrule">web-stat-filter</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> /*        <span class="token key atrule">exclusions</span><span class="token punctuation">:</span> <span class="token string">'*.js,*.jpg,*.css,/druid/*'</span><span class="token comment">#      开启监控页中的spring监控功能，监控spring这个包下的所有组件</span>      <span class="token key atrule">aop-patterns</span><span class="token punctuation">:</span> world.keyi.boot.*</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之异常处理</title>
      <link href="2021/04/09/SpringBoot%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>2021/04/09/SpringBoot%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>其实这些都应该是SpringMVC的内容，但想到是在学SpringBoot时学到的更深层次一点的内容<br>就当做是SpringBoot的内容吧，反正SpringBoot也是整合各个框架的一个框架。</p></blockquote><blockquote><p>先总结一下，SpringBoot或者是SpringMVC异常处理的几种方式</p></blockquote><ul><li><p>配合thymeleaf模板引擎的使用下，我们直接在thymeleaf/error/ 目录下放置4xx.html，5xx.html<br>就可以实现，当目标方法执行错误时，如果是状态码是4xx之类的错误就能跳转到4xx.html，5xx之类的错误<br>就能跳转5xx.html页面，我们在4xx.html和5xx.html可以通过thymeleaf表达式获取错误信息<br>${status},${message}等等，其中的原理接下来就讲！</p></li><li><p>我们还可以使用@ControllerAdvice+@ExceptionHandler注解来处理全局的异常，该注解底层是<br>ExceptionHandlerExceptionResolver处理器异常解析器在工作</p></li><li><p>@ResponseStatus+自定义异常类的方式处理目标方法异常，</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>reason <span class="token operator">=</span> <span class="token string">"用户登录被拒绝"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserNotFoundException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>@ResponseStatus注解，底层是由ResponseStatusExceptionResolver异常解析器来处理目标方法发生的<br>异常，在该异常解析器中，会把@ResponseStatus注解中的数据(reason,value)封装成ModelAndView对象<br>并且再次发送一个/error请求，response.sendError(statusCode,resolvedReason)(表示本请求立即结束，<br>并发送一个新的请求，/error)，该/error请求则会被底层的BasicErrorController进行处理。</p></li><li><p>Spring底层的异常，如参数类型转换异常，底层是DefaultHandlerExceptionResolver处理框架底层的异常</p></li><li><p>自定义实现HandleExceptionResolver接口处理异常，可以作为默认的全局异常处理规则    在接口方法中，<br>直接response.sendError(“500”,”错误消息”)，表示结束当前请求，重新发送/error请求，让底层默认的<br>BasicErrorController处理请求    然后BasicErrorController又调用defaultErrorViewResolver对状态码进行解析，并返回ModelAndView，其中视图名要么是/error下的状态码，要么是error，这取决于你有没有在<br>templates/error下放置状态码.html页面。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span>  <span class="token comment">//优先级，数字越小优先级越高</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandlerExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"错误信息：随便写"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>ErrorViewResolver实现自定义处理异常<br>通过之前的分析，我们已经知道，SpringBoot在底层已经默认注册了一个DefautErrorViewResolver,<br>这个错误视图解析器根据状态码找到ViewName，如果你在templates/error目录下设置了以状态码为html<br>名称的页面，即404.html,5xx.html等等，则viewname=error/404.html，如果你没有设置，则viewName<br>等于error，最终会找到底层的StaticView对象，也就是渲染白页，即没有设置任何异常处理，就使用这个对象<br>渲染视图。你可以自定义ErrorViewResolver，达到并不根据状态码设置viewName，或者并不从<br>templates/error目录下寻找页面。</p></li><li><p>以上就是针对异常的处理方法，可能看的有点懵逼，下面讲讲异常处理的流程</p></li></ul><blockquote><p>异常处理流程</p></blockquote><ul><li><p>请求一进来，进入doDispatcher方法，执行目标方法，如果目标方法报错，则返回的ModelAndView为null</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Actually invoke the handler.</span>mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如果目标方法发生异常，则此处返回为<span class="token keyword">null</span><span class="token punctuation">.</span></code></pre></li><li><p>因为有异常，mv返回为null，接下来就会被catch捕获到，将发生的异常赋值进dispatcherException对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dispatchException <span class="token operator">=</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>紧接着继续进行视图渲染步骤，也可以是异常处理环节</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//进入该方法进行异常处理(也是我们熟知的视图渲染方法)</span><span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processDispatchResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                                    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                   <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">HandlerExecutionChain</span> mappedHandler<span class="token punctuation">,</span>                                        <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> mv<span class="token punctuation">,</span>                                   <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">boolean</span> errorView <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"ModelAndViewDefiningException encountered"</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>mv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>                                           mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在此处方法中对异常进行解析</span>mv <span class="token operator">=</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>errorView <span class="token operator">=</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Did the handler return a view to render?</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mv<span class="token punctuation">.</span><span class="token function">wasCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//能指定render方法说明异常解析器对异常已经解析完毕，到了视图解析的环节。</span><span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>errorView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">clearErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No view rendering, null ModelAndView returned."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Concurrent handling started during a forward</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Exception (if any) is already handled..</span>mappedHandler<span class="token punctuation">.</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>进入<code>mv = processHandlerException(request, response, handler, exception);</code>方法，我们可以<br>看到，在该方法中，使用容器中所有的异常解析器对该异常进行解析。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                                              <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>          <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">// Success and error responses may use different content types</span>request<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">HandlerMapping</span><span class="token punctuation">.</span>PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Check registered HandlerExceptionResolvers...</span><span class="token class-name">ModelAndView</span> exMv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//遍历所有的异常解析器对发生的异常进行解析，返回ModelAndView对象</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerExceptionResolver</span> resolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>exMv <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>exMv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>exMv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>exMv<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>EXCEPTION_ATTRIBUTE<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// We might still need view name translation for a plain error model...</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exMv<span class="token punctuation">.</span><span class="token function">hasView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> defaultViewName <span class="token operator">=</span> <span class="token function">getDefaultViewName</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>defaultViewName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>exMv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span>defaultViewName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Using resolved error view: "</span> <span class="token operator">+</span> exMv<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Using resolved error view: "</span> <span class="token operator">+</span> exMv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">exposeErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> exMv<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>那么容器中默认有哪些异常解析器呢？</p><ul><li><p>DefaultErrorAttribute(它是ErrorMvcAutoConfiguration异常自动装配类中注册的)</p></li><li><p>HandleExceptionResolverComposite(异常的组合类，在该类中又有三个处理器异常解析器)</p><ul><li>ExceptionHandlerExceptionResolver(处理目标方法标注了@ExceptionHandle注解的异常)</li><li>ResponseStatusExceptionResolver(处理目标方法/自定义异常类标注了@ResponseStatus注解<br>的异常)</li><li> DefaultHandlerExceptionResolver(处理springMVC自带的异常，例如参数类型转换等异常)</li></ul></li></ul><p>回到异常流程中，我们的目标方法异常假设是算术异常，并且也没有为其配置异常处理，即没有使用<br>@ExceptionHandler，没有使用@ResponseStatus+自定义异常类，则容器中所有的异常解析器都处理<br>不了我们的异常，就会使得exMv(ModelAndView)还是为null，则异常继续往上抛出</p></li><li><p>异常继续往上抛，会经过一系列的方法，执行拦截器的AfterCompletion等等，最终底层会再次发送/error<br>请求，这个请求是tomcat发送的(response.sendError(statusCode,resolvedReason))，这个请求会被容器中<br>BasicErrorController控制器进行处理，这个控制器是容器初始化时ErrorMvcAutoConfiguration自动配置类<br>注册的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//在ErrorMvcAutoConfiguration注册BasicErrorController</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>    value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">ErrorController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    search <span class="token operator">=</span> <span class="token class-name">SearchStrategy</span><span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BasicErrorController</span> <span class="token function">basicErrorController</span><span class="token punctuation">(</span><span class="token class-name">ErrorAttributes</span> errorAttributes<span class="token punctuation">,</span>                     <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorViewResolver</span><span class="token punctuation">></span></span> errorViewResolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BasicErrorController</span><span class="token punctuation">(</span>errorAttributes<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverProperties<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span>errorViewResolvers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*tomcat发送的/error请求，如果是浏览器客户端，则进入下面这个方法，在该方法中，调用this.resolveErrorView(request,response,status,model);方法，对请求进行处理而之前我们自己发送的请求产生的异常在request对象中。*/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>produces <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"text/html"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">errorHtml</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                               <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpStatus</span> status <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model <span class="token operator">=</span>               <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isIncludeStackTrace</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_HTML<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveErrorView</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">,</span>status<span class="token punctuation">,</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                               <span class="token keyword">return</span> modelAndView <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> modelAndView <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>来到<code>this.resolveErrorView(request,response,status,model); </code>方法，我们可以看到，这里是通过<br>错误视图解析器的resolveErrorView对请求进行解析，默认情况下容器中只有一个错误视图解析器，<br>DefaultErrorViewResolver，就是异常自动配置类在容器初始化时注册的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ErrorViewResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token class-name">DefaultErrorViewResolver</span> <span class="token function">conventionErrorViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultErrorViewResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">,</span>                                         <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//可以看到，是调用了容器中的错误视图解析器对请求进行解析，返回一个ModelAndView对象</span><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveErrorView</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span> status<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Iterator</span> var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>errorViewResolvers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>var5<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ErrorViewResolver</span> resolver <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ErrorViewResolver</span><span class="token punctuation">)</span>var5<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolveErrorView</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> status<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>modelAndView <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>紧接着，来看看DefaultErrorViewResolver是如何对请求进行解析的吧</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveErrorView</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span> status<span class="token punctuation">,</span>                                      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span>                          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> SERIES_VIEWS<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        modelAndView <span class="token operator">=</span>               <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>SERIES_VIEWS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//此处的viewName就是状态码404/5xx等等，</span><span class="token keyword">private</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> errorViewName <span class="token operator">=</span> <span class="token string">"error/"</span> <span class="token operator">+</span> viewName<span class="token punctuation">;</span>    <span class="token class-name">TemplateAvailabilityProvider</span> provider <span class="token operator">=</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>templateAvailabilityProviders<span class="token punctuation">.</span><span class="token function">getProvider</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*        如果模板引擎在templates/error目录下找到对应的html(以状态码为名),则errorViewName        等于/error/500.html,如果没有找到(你没在该目录下配置对应的html页面),则errorViewName        等于error字符串。        DefaultErrorViewResolver解析器就是根据状态码来设置ModelAndView中的viewName    */</span>    <span class="token keyword">return</span> provider <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span> <span class="token operator">:</span>                               <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveResource</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>OK，至此BasicErrorController已经对/error请求进行处理，并返回了ModelAndView对象，从上面我们可以<br>知道，ModelAndView中的viewName，要么等于”error”(你没有在templates/error目录下配置状态码.html)<br>要么等于”/error/500.html”，接下来就是使用容器中的视图解析器根据ViewName解析出View对象，</p><ul><li><p>如果viewName等于”/error/500.html”，则thymeleafViewResolver会解析出thymeleafView，接下去就是调用thymeleafView的render方法，进行渲染数据，跳转页面，</p></li><li><p>如果viewName等于”error”，则会被BeanNameViewResolver解析器进行处理，这个解析器在异常自动<br>配置类中，也被配置了一个，这个解析器的作用是，以viewName作为Id在容器中找同id的组件，正好<br>自动配置类也已经在容器启动时配置了一个View，叫StaticView。这个view就是springmvc底层的白页<br>表示，你什么异常都没处理，目标方法报错后则由StaticView进行渲染产生白页。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//异常自动配置类ErrorMvcAutoConfiguration中配置了BeanNameViewResolver视图解析器</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> <span class="token class-name">BeanNameViewResolver</span> <span class="token function">beanNameViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BeanNameViewResolver</span> resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanNameViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolver<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">2147483637</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resolver<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticView</span> <span class="token keyword">implements</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">MediaType</span> TEXT_HTML_UTF8<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> logger<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">StaticView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> model<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                           <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>TEXT_HTML_UTF8<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Date</span> timestamp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"timestamp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> message <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> trace <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"trace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//添加白页</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;html>&lt;body>&lt;h1>Whitelabel Error Page&lt;/h1>"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>"<span class="token generics"><span class="token punctuation">&lt;</span>p<span class="token punctuation">></span></span><span class="token class-name">This</span> application has no explicit mapping <span class="token keyword">for</span>                            <span class="token operator">/</span>error<span class="token punctuation">,</span> so you are seeing <span class="token keyword">this</span> as a fallback<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p<span class="token operator">></span>"<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;div id='created'>"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/div>"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;div>There was an unexpected error (type="</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">htmlEscape</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", status="</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">htmlEscape</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">").&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;div>"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">htmlEscape</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>trace <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;div style='white-space:pre-wrap;'>"</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">htmlEscape</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/body>&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>好了，至此我已经讲完了一个没有被处理的异常是怎样被SpringMVC解析处理生成白页的。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之拦截器和文件上传</title>
      <link href="2021/04/07/SpringBoot%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>2021/04/07/SpringBoot%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h5></blockquote><blockquote><p>自定义拦截器</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                              <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截器方法：preHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                            <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截器方法：postHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                                 <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截器方法：afterCompletion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常："</span><span class="token operator">+</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>注册拦截器进容器</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*配置WebMvcConfigurer,定制化SpringMVC的功能*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*注册自定义拦截器*/</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">/*                    addPathPatterns("/**") 指定拦截的请求路径                    excludePathPatterns("/static/**") 指定放行的请求路径，                    当这些请求来到时，不经过拦截器                */</span>                registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyHandlerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/images/**"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5></blockquote><blockquote><p>前端页面</p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/sendFile&#125;<span class="token punctuation">"</span></span>   <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headerImg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.msg&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>photos<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span>  <span class="token attr-name">multiple</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.msg2&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><blockquote><p>控制器方法</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sendFile"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleFile</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">"headerImg"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> headerImg<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">"photos"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> photos<span class="token punctuation">,</span>                             <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>password<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>headerImg<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>photos<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headerImg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            headerImg<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span>                <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\OneForAll\\Desktop\\text\\"</span>                    <span class="token operator">+</span>headerImg<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"大头照上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"大头照上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>photos<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token operator">:</span>photos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\OneForAll\\Desktop\\text\\"</span>                                         <span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg2"</span><span class="token punctuation">,</span><span class="token string">"相册上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg2"</span><span class="token punctuation">,</span><span class="token string">"相册上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> attributeNames <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>attributeNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> attributeNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> attribute <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><blockquote><p>写文件上传的时候碰到了一些问题</p></blockquote><ul><li><p>之前一直用的JSP，不知道html页面不接收post应答包，也就是说，目标方法接收post请求后<br>该目标方法返回值不能再重定向到一个html页面。</p></li><li><p>Thymeleaf完全遵循了MVC规范，不能直接访问到，只能通过转发到Thymeleaf下的页面</p><p>转发到Thymeleaf下的html页面，控制器方法可以直接返回视图名字符串，或者返回ModelAndView<br>重定向是客户端行为，如果重定向了，相当于客户端直接请求thymeleaf的html页面，这样只能访问静态页面<br>只有先重定向到控制器，再让控制器帮我们转发到thymeleaf下的html页面</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 重定向到控制器的方法里</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/redirectMain"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">redirectMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"redirect:toMain"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 控制器帮我们转发到thymeleaf</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"toMain"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">forwardToMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>目标方法重定向后，在thymeleaf页面下获取不了session值<br>解决办法同上。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之视图解析器原理及其配置</title>
      <link href="2021/04/06/SpringBoot%E4%B9%8B%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE/"/>
      <url>2021/04/06/SpringBoot%E4%B9%8B%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>配置自定义视图解析器</p></blockquote><blockquote><p>自定义视图解析器类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*Order接口的作用是在springmvc内部遍历时，使自定义视图解析器第一个解析。*/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyViewResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ViewResolver</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>order <span class="token operator">=</span> order<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">resolveViewName</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>viewName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"keyi:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>自定义视图类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">implements</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"text/html"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> model<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                        <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>model<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> s<span class="token operator">:</span>entries<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> key <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> value <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/success.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>注册自定义视图解析器</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*配置WebMvcConfigurer,定制化SpringMVC的功能*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*配置自定义视图解析器*/</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span><span class="token class-name">ViewResolverRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                registry<span class="token punctuation">.</span><span class="token function">viewResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>目标方法</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*        自定义视图解析器原理    */</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"keyi:success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>流程</p></blockquote><pre class="language-none"><code class="language-none">请求以http:&#x2F;&#x2F;localhost:8080&#x2F;test2,get请求，目标返回&quot;keyi:success&quot;底层遍历容器中所有的视图解析器，找到自定义视图解析器，根据返回值字符串，创建自定义的视图对象调用视图对象的render方法渲染数据跳转视图。</code></pre><blockquote><p>视图解析器原理</p></blockquote><pre class="language-none"><code class="language-none">SpringBoot和SpringMVC不同在于，它有一个内容协商的功能，在SpringMVC中，你配置了自定义视图解析器，底层直接给你遍历，找到并使用自定义解析器来创建视图对象但在SpringBoot中，它配置了一个ContentNegotiatingViewResoulver,在这个解析器的resolveViewName方法中，再次遍历容器中其余的视图解析器，并且，在该方法中，最后是根据视图对象的getContentType()方法来匹配合适的媒体类型进行解析，所以，如果你的自定义视图对象没有重写该方法，则你的视图对象并不能被返回，而是返回thymeleafView或者InternalView，这样就会导致你的自定义视图解析没有效果，终于通过debug找出来了，舒服。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之BindingAwareModelMap</title>
      <link href="2021/04/04/SpringMVC%E4%B9%8BBindingAwareModelMap/"/>
      <url>2021/04/04/SpringMVC%E4%B9%8BBindingAwareModelMap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>随便聊聊</p></blockquote><p>我们都知道，控制器方法参数上，Model参数和Map参数，其实都是一个对象，即BindingAwareModelMap<br>被叫做隐含模型，向隐含模型中放的数据最终都会被放进request域中，隐含模型和@ModelAttribute注解<br>有着比较强的关联，我们来聊一聊。</p><p>@ModelAttribute注解，我不知道这个注解在开发中常不常用，但是，尚硅谷网课中提到，而且以大量篇幅，<br>所以就了解了一下。</p><ul><li>这个注解标在方法上，则该方法在控制器方法执行前被执行，并且如果该方法有返回值，则会将返回值类型的<br>首字母小写作为key，返回值作为value放进隐含模型中，如果@ModelAttribute注解指定了value，<br>则将指定的value，作为key，返回值作为value存放在隐含模型中。</li><li>控制器方法参数如果是自定义类型参数，则自定义类型参数会以自定义类型首字母小写作为key，从隐含模型中查找是否存在该类型的对象，如果存在则取出隐含模型中的对象赋值给自定义类型参数，然后再根据前端传递过来的参数进行赋值，<br>例如：隐含模型中有以user为key的对象，该对象的username=xixi，password=123456<br>控制器方法上自定义类型参数就是User类型，则会先从隐含模型中将user对象赋值给自定义类型User参<br>数，此时的user对象参数属性就是username=xixi,password=123456，如果前端此时又传递过来了user对<br>象参数，如果只传了username=万一，则user参数的属性变成了username=万一，password=123456</li><li>当控制器方法自定义类型参数经过从隐含模型中取出，前端传递参数，对参数进行更改后，又会将自定义类型<br>参数User，以类型首字母小写作为key，user对象作为value放进隐含模型中，<br>此时会覆盖掉原先的以user为key的对象。</li><li>如果控制器方法参数为自定义类型参数，且被@ModelAttribute注解标注，默认以自定义类型参数类型首字母<br>小写作为key在隐含模型中查找对应的对象，如果为注解指定了value，则会以注解value值作为key在隐含模型中查找对象，找到就赋值给参数上的自定义类型对象，当然了，你用不用@ModelAttribute注解，自定义类型参数都会去隐含模型中找对应类型的数据，使用了注解的意义在于，你可以根据注解的value，指定key去隐含模型中找数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之内容协商</title>
      <link href="2021/04/01/SpringBoot%E4%B9%8B%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86/"/>
      <url>2021/04/01/SpringBoot%E4%B9%8B%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="内容协商的概述"><a href="#内容协商的概述" class="headerlink" title="内容协商的概述"></a>内容协商的概述</h5></blockquote><p>内容协商指的是SpringMVC获取客户端可接收的媒体类型和服务器能生产的媒体类型，通过匹配，<br>找出最合适的媒体类型，再调用相应的HttpMessageConverter转换成匹配成功后的媒体类型数据写给客户端。</p><blockquote><h5 id="内容协商管理器"><a href="#内容协商管理器" class="headerlink" title="内容协商管理器"></a>内容协商管理器</h5></blockquote><p>SpringMVC就是通过内容协商管理器来获取前端所需要的媒体类型，内容协商管理器中有不同的内容协商策略，根据不同的内容协商策略类来获取前端需要的媒体类型。</p><p>在SpringBoot中，默认情况下内容管理器中只有，HeaderContentNegotiationStrategy，<br>即根据请求头中accept中的属性来获取前端需要的媒体类型。</p><p>我们也可以通过在SpringBoot的配置文件中设置<code>spring.mvc.contentnegotiation.favor-parameter=true</code>来开启基于参数的内容协商策略，即只需要在请求参数中携带format属性来指定客户端的媒体类型即可，例如<code>http://localhost:8080/test3?format=json</code>即可返回json类型数据</p><p>需要注意的是：通过在配置文件中开启的参数协商策略只支持xml数据和json数据，即format的取值只能为xml或json，要想设置自定义的媒体类型就需要创建自定义的参数协商策略，请继续往下看。</p><blockquote><h5 id="自定义HttpMessageConverter"><a href="#自定义HttpMessageConverter" class="headerlink" title="自定义HttpMessageConverter"></a>自定义HttpMessageConverter</h5></blockquote><p>当我们在accept属性中以<code>application/xml</code>方式发请求时，服务器器返回给我们xml数据，当我们以<code>application/json</code>方式发请求时，服务器返回给我们json数据，那么怎么定制我们自定义的媒体类型数据呢？<br>例如：当我们以<code>application/x-keyi</code>的方式发请求时，服务器返回给我们自定义的数据格式，如属性$属性$的方式返回数据给我们。</p><p>这个时候就需要自定义消息转换器了，通过消息转换器，客户端需要<code>application/x-keyi</code>的数据格式，而我自定义的消息转换器支持转换这种数据格式。接下来看看一个小案例吧</p><blockquote><h6 id="请求路径"><a href="#请求路径" class="headerlink" title="请求路径"></a>请求路径</h6></blockquote><p><code>http://localhost:8888/test3</code>，使用api工具设置请求的Accept属性为<code>application/x-keyi</code><br>这种方式的请求模拟的是ajax请求，但原生的浏览器请求并不能设置Accept属性，只能使用基于参数的内容协商策略，还是上面的问题，默认基于参数的内容协商策略只支持xml和json格式数据，所以我们需要自定义参数内容协商策略，这个之后再谈，先看看基于ajax，使用自定义媒体类型方式发出请求吧。</p><blockquote><h6 id="控制器方法"><a href="#控制器方法" class="headerlink" title="控制器方法"></a>控制器方法</h6></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*       当我们控制器方法使用@ResponseBody注解，则springmvc找到requestResponseBodyMethodProcessor     该返回值处理器经过匹配，调用到自定义messageConverter转换Student对象数据     */</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"万一"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"计信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> student<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><h6 id="自定义HttpMessageConverter-1"><a href="#自定义HttpMessageConverter-1" class="headerlink" title="自定义HttpMessageConverter"></a>自定义HttpMessageConverter</h6></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 万一 * @date 2021年04月01日9:42 */</span><span class="token comment">/*泛型为Student类型，表示只支持写出Student类型的数据*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMessageConverter</span> <span class="token keyword">implements</span> <span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*能不能支持读取*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canRead</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*能不能支持写入数据*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*自定义消息转换器支持哪些媒体类型*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">></span></span> <span class="token function">getSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">parseMediaTypes</span><span class="token punctuation">(</span><span class="token string">"application/x-keyi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">HttpInputMessage</span> inputMessage<span class="token punctuation">)</span>         <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotReadableException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*向response对象中写入数据*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> contentType<span class="token punctuation">,</span>                       <span class="token class-name">HttpOutputMessage</span> outputMessage<span class="token punctuation">)</span>         <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span><span class="token class-name">HttpMessageNotWritableException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"$"</span><span class="token operator">+</span>student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"$"</span><span class="token operator">+</span>student<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> body <span class="token operator">=</span> outputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><h6 id="向容器中添加自定义的HttpMessageConverter"><a href="#向容器中添加自定义的HttpMessageConverter" class="headerlink" title="向容器中添加自定义的HttpMessageConverter"></a>向容器中添加自定义的HttpMessageConverter</h6></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*配置WebMvcConfigurer,定制化SpringMVC的功能*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*配置自定义消息转换器*/</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converters<span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><blockquote><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6></blockquote><pre class="language-none"><code class="language-none">以上就是基于AJAX方式，使用自定义媒体类型(application&#x2F;x-keyi)的方式发出请求，然后服务器找到自定义的消息转换器来转换Student数据以属性值$属性值$属性值的方式发送给客户端但这里有个问题ajax请求可以自定义请求的Accept属性值，而普通浏览器请求的方式却不行，普通的浏览器请求要想使用自定义媒体类型可以创建自定义的参数内容协商策略</code></pre><blockquote><h5 id="自定义参数内容协商策略"><a href="#自定义参数内容协商策略" class="headerlink" title="自定义参数内容协商策略"></a>自定义参数内容协商策略</h5></blockquote><pre class="language-java" data-language="java"><code class="language-java">向容器中添加内容协商策略组件<span class="token comment">/*配置自定义参数协商策略*/</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token class-name">ContentNegotiationConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*创建自定义参数协商策略支持的媒体类型，如果是默认的参数协商策略则只支持xml和json*/</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">MediaType</span><span class="token punctuation">></span></span> mediaTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mediaTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">,</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    mediaTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"xml"</span><span class="token punctuation">,</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_XML<span class="token punctuation">)</span><span class="token punctuation">;</span>    mediaTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"keyi"</span><span class="token punctuation">,</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">parseMediaType</span><span class="token punctuation">(</span><span class="token string">"application/x-keyi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ParameterContentNegotiationStrategy</span> parameterStrategy <span class="token operator">=</span> <span class="token keyword">new</span>         <span class="token class-name">ParameterContentNegotiationStrategy</span><span class="token punctuation">(</span>mediaTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*增加请求头协商策略，因为自定义参数协商策略会把默认的请求头协商策略给覆盖掉，        所以在这里重新设置一个请求头协商策略    */</span>    <span class="token class-name">HeaderContentNegotiationStrategy</span> headerStrategy <span class="token operator">=</span> <span class="token keyword">new</span>         <span class="token class-name">HeaderContentNegotiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*向内容协商管理器中添加两个内容协商策略*/</span>    configurer<span class="token punctuation">.</span><span class="token function">strategies</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>parameterStrategy<span class="token punctuation">,</span>headerStrategy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>使用了自定义参数内容协商策略，就可以在请求中携带format=keyi的方式表示浏览器需要的媒体类型<br>是<code>application/x-keyi</code>，所以服务器就会调用自定义的消息转换器对数据转换并且输出给浏览器，<br>需要注意的是，我们也可以自定义参数名称，<code>parameterStrategy.setParameterName(&quot;strategyName&quot;);</code><br>的方式来改变请求时携带的参数名称。即format改成strategyName.</p>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC基础原理</title>
      <link href="2021/03/27/SpringMVC%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
      <url>2021/03/27/SpringMVC%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>记录一下SpringMVC部分基本原理，防止以后老年痴呆。。。。</p><p>我将介绍以下原理：</p><ul><li>请求映射原理</li><li>控制器方法参数绑定原理</li><li>HttpMessageConverter原理</li><li>内容协商原理</li><li>自定义类型转换器</li></ul></blockquote><blockquote><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> test1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentInfo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输入学生信息以,间隔<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>自定义类型转换器转换<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><blockquote><h4 id="控制器方法"><a href="#控制器方法" class="headerlink" title="控制器方法"></a>控制器方法</h4></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"studentInfo"</span><span class="token punctuation">)</span><span class="token class-name">Student</span> student<span class="token punctuation">,</span>                         <span class="token class-name">Model</span> model<span class="token punctuation">,</span><span class="token class-name">Map</span> map<span class="token punctuation">,</span>                        <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">)</span><span class="token class-name">String</span> accept<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*            请求映射原理            控制器方法参数绑定原理            自定义类型转换器原理            参数Model，Map原理         */</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><h4 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h4></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类型转换器中"</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><h4 id="配置WebMvcConfigurer，定制化SpringMVC"><a href="#配置WebMvcConfigurer，定制化SpringMVC" class="headerlink" title="配置WebMvcConfigurer，定制化SpringMVC"></a>配置WebMvcConfigurer，定制化SpringMVC</h4></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*配置WebMvcConfigurer,定制化SpringMVC的功能*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*配置自定义WebConversionService，做自定义类型转换器*/</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><h4 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h4></blockquote><ul><li><h5 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h5><ol><li><p>本案例中，当提交请求时，使用Post方式，在请求体中以studentInfo=数据,提交到后台<br>请求进入DispatcherServlet类中doDispatch方法中，在该方法中对请求进行处理</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/0.png" alt="0" loading="lazy"></p><p>第一个重要方法<br>就是getHandler方法，在该方法中根据请求找到能处理该请求的处理器，在其中就涉及到请求映射的原理</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/1.png" alt="1" loading="lazy"></p></li><li><p>进入getHandler方法，在该方法中，遍历容器启动时就已经自带的5个映射处理器，HandlerMapping<br>映射器中存储着请求路径与控制器方法之间的映射。<br>例如：我们使用的最常用的@RequestMapping注解，凡是使用这个注解，就由RequestMappingHandleMapping处理器映射器进行处理，@RequestMapping注解的value值<br>与控制器方法名就以Key和Value的形式存储在RequestMappingHandleMapping处理器映射器之中。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/2.png" alt="1" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/3.png" alt="1" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/4.png" alt="1" loading="lazy"></p></li><li><p>通过处理器映射器，找到能处理请求的处理器方法，将处理器方法和与请求匹配的拦截器封装成处理器执行链，HandlerExecutionChain，将封装的处理器执行链返回给DispatcherServlet<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/9.png" alt="1" loading="lazy"></p></li></ol></li><li><h5 id="控制器方法参数绑定和自定义类型转换器原理"><a href="#控制器方法参数绑定和自定义类型转换器原理" class="headerlink" title="控制器方法参数绑定和自定义类型转换器原理"></a>控制器方法参数绑定和自定义类型转换器原理</h5><ol><li><p>第二个比较重要的方法是getHandlerAdapter方法，在该方法中，通过遍历找到能支持执行该处理器方法的处理器适配器，HandlerAdapter，容器在启动时会有4个处理器适配器，最常用的处理器适配器是RequestMappingHandleAdapter，在该适配器中存储着非常多的组件对象，用于参数绑定，返回值处理等等。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/10.png" alt="1" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/11.png" alt="1" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/12.png" alt="1" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/9.png" alt="1" loading="lazy"></p><p>我们来看看RequestMappingHandlerAdapter中有多少个组件，以及这些组件的作用</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/13.png" alt="1" style="zoom:80%;" / loading="lazy"></li><li><p>找到处理器映射器之后，执行与请求匹配到的拦截器的preHandle方法，当然，拦截器不是我们讨论的内容，就略微提一下。<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/16.png" alt="1" loading="lazy"></p></li><li><p>执行完拦截器的preHandle方法后，处理器映射器执行控制器方法，返回给DispatcherServlet一个ModelAndView对象，在该对象中存储着模型数据和视图名，我们将进入该方法中，探究，如何进行参数解析，参数绑定以及返回值的处理<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/18.png" alt="1" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/19.png" alt="1" loading="lazy"></p><p>再次进入handleInternal方法，在handleInternal方法中执行invokeHandlerMethod方法</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/20.png" alt="1" loading="lazy"></p></li><li><p>来到invokeHandlerMethod方法，我们可以看到，在其中创建了一个ServletInvocableHandlerMethod对象，该对象是真正执行处理器方法的对象，并往该对象中设置了很多组件，例如数据绑定器工厂，参数解析器，返回值处理器等等。还创建了一个ModelAndViewContainer对象，该对象用于存储模型数据和视图名</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/21.png" alt="1" style="zoom:80%;" / loading="lazy"></li><li><p>我们从上图中看到invocableMethod调用了invokeAndHandle方法，来到该方法中，首先是调用invokeForRequest方法执行目标方法，得到方法返回值，所以我们可以确定，是在invokeForRequest方法中完成参数绑定，目标方法执行的，这正是我们要找的参数绑定的原理探究，得到返回值后，调用了returnValueHandles属性的HandleReturnValue方法，看名字就知道，使用返回值处理器处理目标方法返回值了，这个之后再谈。</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/23.png" alt="1" loading="lazy"></p></li><li><p>来到invokeForRequest方法中，果然如我们所料，先是调用getMethodArgumentValues方法确定每一个参数的值，再调用do Invoke方法执行目标方法。</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/24.png" alt="1" loading="lazy"></p></li><li><p>进入getMethodArgumentValues方法之中，我们可以看到，先是确定目标方法中的每一个参数，再遍历每一个参数对象MethodParameter，这个参数对象是对目标方法参数进行了封装，其中有关于参数的类型，参数有什么注解等等，然后在循环中，遍历容器中所有的参数解析器，看哪一个参数解析器支持解析该参数，找到参数解析器后，调用参数解析器的resolveArgument方法解析参数。</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/26.png" alt="1" style="zoom:80%;" / loading="lazy"><p>目标方法参数数组</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/27.png" alt="1" style="zoom:80%;" / loading="lazy"><p>容器启动时所拥有的参数解析器</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/32.png" alt="1" style="zoom:80%;" / loading="lazy"></li><li><p>由于本次案例第一个参数是Student且该参数使用@RequestParam注解，所以找到<br>RequestParamMethodArgumentResolver参数解析器，调用该解析器的resolveArgument<br>方法对目标方法参数进行绑定封装</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/34.png" alt="1" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/35.png" alt="1" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/68.png" alt="1" style="zoom:80%;" / loading="lazy"></li><li><p>我们已经知道当binder.convertIfNecessary方法调用后，参数就已经封装完毕了，在该方法底层其实是使用WebDataBinder对象的ConversionService对象中众多的类型转换器。下面是WebDataBinder对象底层进行转换操作</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/67.png" alt="1" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/64.png" alt="1" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/70.png" alt="1" style="zoom:80%;" / loading="lazy"><p>OK，以上就是各个参数被绑定封装的过程，实际上就是通过WebDataBinder中的转换器进行参数类型转换，因为本案例中，容器中并没有从string转到Student类型的转换器，所以我们自定义了类型转换器为目标方法的Student参数封装。</p></li></ol></li><li><h5 id="HttpMessageConverter和内容协商原理"><a href="#HttpMessageConverter和内容协商原理" class="headerlink" title="HttpMessageConverter和内容协商原理"></a>HttpMessageConverter和内容协商原理</h5><ol><li>我们还是跟着上述请求过程看看，什么是内容协商，什么是HttpMessageConverter，以及他们的作用<br>首先当我们根据参数解析器解析出所有的参数并封装成Object数组后，我们就开始真正执行目标方法了<br>我们回到了上面第6步，进入doInvoke方法看看</li></ol></li></ul>   <img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/44.png" alt="1" style="zoom:80%;" / loading="lazy"><ol start="2"><li><p>当我们执行完控制器方法后，我们回到了上面的第5步，得到了方法返回值，本次案例中方法返回值是Student对象，下面一个重要方法就是找到匹配的返回值处理器，然后对返回值进行解析处理。</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/46.png" alt="1" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/47.png" alt="1" style="zoom:80%;" / loading="lazy"><p>其实就是遍历容器中所有返回值处理器，看哪一个能解析返回值类型，即Student类型</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/48.png" alt="1" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/49.png" alt="1" style="zoom:80%;" / loading="lazy"></li><li><p>OK，当我们找到了匹配的返回值处理器，接下来就是调用返回值处理器来解析返回值了</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/50.png" alt="1" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/72.png" alt="1" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/73.png" alt="1" style="zoom:80%;" / loading="lazy"></li><li><p>内容协商的意思就是获取客户端可接收的媒体类型和服务端能够生产的媒体类型，进行匹配，匹配成功后就给客户端输出相应的媒体类型，看起来就像协商了一样，那么springmvc是如何知道客户端能够接收哪些媒体类型呢？实际上是根据内容协商策略管理器来获取的。<br>获取前端可接收的媒体类型方法是：getAcceptableMediaTypes方法</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/53.png" alt="1" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/54.png" alt="1" style="zoom:80%;" / loading="lazy"><p>看看默认的内容协商策略是如何获取客户端可接收的媒体类型吧</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/55.png" alt="1" style="zoom:80%;" / loading="lazy"></li><li><p>我们已经知道，获取客户端可接收的媒体类型靠的是内容协商策略，那怎么知道服务器能生产什么样的媒体类型呢？getProducibleMediaTypes方法就是获取服务器能生产什么样的媒体类型</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/56.png" alt="1" style="zoom:80%;" / loading="lazy"><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/57.png" alt="1" style="zoom:80%;" / loading="lazy"></li><li><p>找到客户端可接收媒体类型List，和服务器能提供的媒体类型List，通过双重for循环，找到<br>相同的媒体类型，再调用匹配的消息转换器的write方法向response对象中写数据</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/60.png" alt="1" style="zoom:80%;" / loading="lazy"></li><li><p>数据输出完毕后，回到讲参数绑定原理的第4步，通过调用getModelAndView方法向dispatcherServlet对象返回ModelAndView对象，该对象的模型数据和视图名都是从ModelAndViewContainer对象中获取的，模型数据就保存在该对象的defaultModel属性中，而视图或者视图名保存在view属性或者viewName属性中</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/images/61.png" alt="1" style="zoom:80%;" / loading="lazy"></li></ol><ul><li><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>至此，我们已经走过了整个请求响应的过程，需要注意的是，本案例的请求响应过程是不包括视图解析原理的<br>我将会在下一个案例中讲关于视图解析器的原理，经过分析我们知道，</p><ul><li>参数绑定的原理就是使用参数解析器调用各种类型转换器来对请求参数进行转换和绑定。</li><li>内容协商原理就是通过返回值处理器，找出满足客户端和服务器要求的媒体类型，再通过消息转换器写给<br>客户端响应的媒体类型。</li><li>其实还有很多细节原理，我还不甚了解，可能越往后学才能知道的更多吧。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之开启矩阵变量</title>
      <link href="2021/03/24/SpringBoot%E4%B9%8B%E5%BC%80%E5%90%AF%E7%9F%A9%E9%98%B5%E5%8F%98%E9%87%8F/"/>
      <url>2021/03/24/SpringBoot%E4%B9%8B%E5%BC%80%E5%90%AF%E7%9F%A9%E9%98%B5%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>矩阵变量指的是前端传递参数并不以问号？传递参数，<br>而是使用分号；传递参数</p></blockquote><blockquote><p>矩阵变量使用注意点</p></blockquote><pre class="language-none"><code class="language-none">1)矩阵变量需要在springboot中手动开启，默认被springboot禁用了2)根据规范，矩阵变量应该绑定在路径变量中,就是在路径中以;携带参数，&#x2F;car&#x2F;sell;xxx&#x3D;xxx;...3)若是有多个矩阵变量，应当使用;进行分割4)若是一个矩阵变量有多个值，应当使用,进行分割，或者命名多个相同的key即可5)想要使用矩阵变量，就得自己全权接收springmvc，无需springboot为我们注册springmvc各种组件，有三种方案    * 不用EnableWebMvc注解，使用@Configuration+WebMvcConfigurer        (是一个接口，接口方法有我们需要的各种组件)    * 声明WebMvcRegistrations改变默认底层组件    * 使用@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration全面接管SpringMVC</code></pre><blockquote><p>小案例</p></blockquote><blockquote><p>前端页面</p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car/sell;price=20;brand=bm,bc,ym<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试矩阵变量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><blockquote><p>后端控制器</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*        @MatrixVariable获取路径变量中携带的price参数的值，如果有多个        路径变量且都带有相同的price参数，则使用pathVar属性获取指定的路径变量中的参数        本例子中只有一个路径变量。    */</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/car/&#123;sell&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"price"</span><span class="token punctuation">,</span>pathVar <span class="token operator">=</span> <span class="token string">"sell"</span><span class="token punctuation">)</span><span class="token class-name">String</span> price<span class="token punctuation">,</span>                 <span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"brand"</span><span class="token punctuation">,</span>pathVar <span class="token operator">=</span> <span class="token string">"sell"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> brands<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"sell"</span><span class="token punctuation">)</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">,</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"brands"</span><span class="token punctuation">,</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>注册组件WebMvcConfigurer组件，配置自定义路径匹配，开启矩阵变量功能</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*配置WebMvcConfigurer,定制化SpringMVC的功能*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*配置路径匹配，开启矩阵变量功能*/</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">UrlPathHelper</span> urlPathHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//不移除;后面的内容，矩阵变量就可以生效</span>                urlPathHelper<span class="token punctuation">.</span><span class="token function">setRemoveSemicolonContent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                configurer<span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span>urlPathHelper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>以上就是SpringBoot开启矩阵变量的全部配置。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之自定义类型转换器</title>
      <link href="2021/03/24/SpringBoot%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
      <url>2021/03/24/SpringBoot%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>其实是SpringMVC的原理<br>正学到SpringBoot，就记录一下，使用SpringBoot怎么自定义类型转换器</p><p>SpringMVC给自定义类封装参数使用的是ServletModelAttributeMethodProcessor参数处理器，WebDateBinder：Web数据绑定器，作用是将请求参数的值绑定到javabean中</p><p>绑定器中的conversionService属性的类型是WebConversionService类，在这个类中有converters属性存放很多类型转换器，这些类型转换器指定将string类型转换成integer或者data或者其他类型数据，通过这些转换器，将前端传过来的各个数据转成自定义对象属性需要的类型从而进行封装数据，</p><p>在SpringBoot中要想使用自定义类型转换器就需要定制化SpringMVC，通过配置WebMvcConfigurer组件</p></blockquote><blockquote><p>自定义类型转换器</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Teacher</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            teacher<span class="token punctuation">.</span><span class="token function">setTeacherName</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            teacher<span class="token punctuation">.</span><span class="token function">setTeacherAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            teacher<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类型转换器中"</span><span class="token operator">+</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> teacher<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>注册WebMvcConfigurer，定制化SpringMVC</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*配置WebMvcConfigurer,定制化SpringMVC的功能*/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*配置自定义WebConversionService，做自定义类型转换器*/</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><blockquote><p>前端页面</p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacherInfo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输入老师信息以|间隔<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>转换<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><blockquote><p>前端表单teacherinfo值为：茜茜,18,123.456</p><p>即可完成从字符串到整个Teacher对象的封装</p></blockquote><blockquote><p>后端控制器</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*自定义类型封装，使用自定义类型转换器*/</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/teacher"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">testConverter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"teacherInfo"</span><span class="token punctuation">)</span> <span class="token class-name">Teacher</span> teacher<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"teacher"</span><span class="token punctuation">,</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>以上就是自定义类型转换器的配置，记下，防止自己老年痴呆。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合</title>
      <link href="2021/03/17/SSM%E6%95%B4%E5%90%88/"/>
      <url>2021/03/17/SSM%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h4></blockquote><ul><li><h5 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mybatis.xml-spring整合包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--mybatis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使@Resource注解生效--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.annotation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.annotation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--druid连接池依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--AspectJ依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--数据库jar包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    JdbcTemplate依赖    它本身已经依赖了spring-tx，    所以使用JdbcTemplate时，可以完全去除spring-tx依赖另外，本案例是SSM，jdbcTemplate依赖也就不需要了--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Spring事务管理jar包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--SpringMVC上传文件所需的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--jackson--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--springmvc项目依赖，会间接引入spring依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--JSP依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Servlet--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--standard标签库，与jstl依赖一起使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--JSTL表达式的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Hibernate-validator依赖，前端参数校验--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.1.5.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>还有日志包和测试包，我没弄，以后在专门弄下</code></pre></li><li><h5 id="创建Spring配置文件，applicationContext-xml"><a href="#创建Spring配置文件，applicationContext-xml" class="headerlink" title="创建Spring配置文件，applicationContext.xml"></a>创建Spring配置文件，applicationContext.xml</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>util</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                                               http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/util       http://www.springframework.org/schema/util/spring-util.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/aop       http://www.springframework.org/schema/aop/spring-aop.xsd       http://www.springframework.org/schema/tx       http://www.springframework.org/schema/tx/spring-tx.xsd       http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--注解扫描排除@Controller和@ControllerAdvice--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>         <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.bind.annotation.ControllerAdvice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>         <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        XML方式配置JDBCTemplate步骤如下:            1)配置引入外部资源文件            2)配置数据源,使用DruidDataSource类            3)JDBCTemplate，并引入数据源            4)在dao层自动装配即可使用    --></span>    <span class="token comment">&lt;!--引入外部资源文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:druid.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--SSM方式使用mybatis--></span>    <span class="token comment">&lt;!--mybatis.xml，创建sqlSessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定mybatis核心配置文件位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--指定要使用的数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--指定mapper映射文件的位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--将mybatis创建的dao接口实现类加入到spring容器中，路径为dao接口路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperScannerConfigurer<span class="token punctuation">"</span></span>           <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        配置注解AOP不需要在Spring容器中配置        实现步骤：            1)创建自定义类，类上标注                @Aspect，表示该类是切面类/增强类/代理类                @Component，将该类加入spring容器中                @EnableAspectJAutoProxy，自动生成代理对象，如果有配置类，则可以标注在配置类上                @Order(0)，当有多个代理类时，设置代理类的优先级            2)类中配置切入点和各个通知    --></span>    <span class="token comment">&lt;!--        XML和注解方式配置事务管理步骤:            1)配置事务管理器            2)开启事务注解驱动                使用完全注解开发时，配置类代替spring的xml文件时，                @EnableTransactionManagement注解用来开启事务管理驱动            3)在service层的类上或方法上加@Transactional                添加在类上表示对类中所有方法添加事务，添加到方法上表示对某个方法添加事务。    --></span>    <span class="token comment">&lt;!--创建事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--注入数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开启事务注解驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><h5 id="创建SpringMVC配置文件，springmvc-xml"><a href="#创建SpringMVC配置文件，springmvc-xml" class="headerlink" title="创建SpringMVC配置文件，springmvc.xml"></a>创建SpringMVC配置文件，springmvc.xml</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>util</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans.xsd            http://www.springframework.org/schema/util            http://www.springframework.org/schema/util/spring-util.xsd            http://www.springframework.org/schema/context            http://www.springframework.org/schema/context/spring-context.xsd            http://www.springframework.org/schema/aop            http://www.springframework.org/schema/aop/spring-aop.xsd            http://www.springframework.org/schema/tx            http://www.springframework.org/schema/tx/spring-tx.xsd            http://www.springframework.org/schema/mvc            http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--默认视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--只扫描包下@Controller和@ControllerAdvice--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>             <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>             <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.bind.annotation.ControllerAdvice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--注解驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--        spring定义了专门处理静态资源访问请求的处理器，ResourceHttpRequestHandler        静态资源处理,处理静态资源请求,mapping属性指的是请求路径中带static即可匹配静态资源        location属性指的是将请求映射到根目录下的static文件夹下    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--        springmvc容器还可以配置：        自定义视图解析器，自定义类型转换器，文件上传解析器，国际化资源管理配置，        自定义区域解析器，拦截器    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><h5 id="配置web-xml文件"><a href="#配置web-xml文件" class="headerlink" title="配置web.xml文件"></a>配置web.xml文件</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee             http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--前端控制器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>            org.springframework.web.servlet.DispatcherServlet        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定springmvc配置文件位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--该标签放最下面--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--字符编码过滤器，要配置在所有过滤器最前面--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>            org.springframework.web.filter.CharacterEncodingFilter        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceRequestEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--spring容器创建监听器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>            org.springframework.web.context.ContextLoaderListener        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--转换请求方式过滤器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>hiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>            org.springframework.web.filter.HiddenHttpMethodFilter        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>hiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></li><li><h5 id="创建数据库配置文件，druid-properties"><a href="#创建数据库配置文件，druid-properties" class="headerlink" title="创建数据库配置文件，druid.properties"></a>创建数据库配置文件，druid.properties</h5><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/wechat?</span><span class="token attr-name">        serverTimezone</span><span class="token punctuation">=</span><span class="token attr-value">GMT&amp;useSSL=false&amp;characterEncoding=utf-8</span><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">123765</span></code></pre></li><li><h5 id="创建Mybatis核心配置文件，mybatis-xml"><a href="#创建Mybatis核心配置文件，mybatis-xml" class="headerlink" title="创建Mybatis核心配置文件，mybatis.xml"></a>创建Mybatis核心配置文件，mybatis.xml</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--外部资源引用--></span>    <span class="token comment">&lt;!--&lt;properties resource="druid.properties"/>--></span>    <span class="token comment">&lt;!--开启二级缓存--></span>    <span class="token comment">&lt;!--&lt;settings>        &lt;setting name="cacheEnabled" value="true"/>    &lt;/settings>--></span>    <span class="token comment">&lt;!--        别名设置，为javaBean起别名        默认别名是类名(不区分大小写)，也可以使用alias属性指定别名        配置好后，在其他任意位置都可以写别名了            批量起别名，name属性指定包的路径，表示为包中所有类起别名        批量起别名时，默认别名是类名，如果批量时想起别名，可以在类上设置@Alias注解，        表示为该类起别名    --></span>    <span class="token comment">&lt;!--&lt;typeAliases>        &lt;typeAlias type="world.keyi.domain.User"/>                &lt;package name="world.keyi.domain"/>    &lt;/typeAliases>--></span>    <span class="token comment">&lt;!--配置环境变量--></span>    <span class="token comment">&lt;!--&lt;environments default="development">        &lt;environment id="development">            &lt;transactionManager type="JDBC"/>            &lt;dataSource type="POOLED">                &lt;property name="driver" value="$&#123;jdbc.driver&#125;"/>                &lt;property name="url" value="$&#123;jdbc.url&#125;"/>                &lt;property name="username" value="$&#123;jdbc.username&#125;"/>                &lt;property name="password" value="$&#123;jdbc.password&#125;"/>            &lt;/dataSource>        &lt;/environment>    &lt;/environments>--></span>    <span class="token comment">&lt;!--数据库厂商标识--></span>    <span class="token comment">&lt;!--        name:数据库厂商标识，value属性表示给这个标识取别名        使用时：在mapper映射文件中select或其他sql标签中设置databaseid属性，        指定在哪个数据库时执行该sql语句，没有该属性表示，任何数据库都能执行        &lt;select id="findAll" resultType="User">            select * from tb_user        &lt;/select>        &lt;select id="findAll" resultType="User" databaseId="oracle">            select * from tb_user        &lt;/select>        sql执行匹配规则：如果能精确匹配就精确匹配，不能就执行没有设置databaseid属性的sql    --></span>    <span class="token comment">&lt;!--&lt;databaseIdProvider type="DB_VENDOR">        &lt;property name="MYSQL" value="mysql"/>        &lt;property name="ORACLE" value="oracle"/>        &lt;property name="Sql Server" value="sqlServer"/>    &lt;/databaseIdProvider>--></span>    <span class="token comment">&lt;!--注册mapper映射文件--></span>    <span class="token comment">&lt;!--        &lt;mapper class=""/>        &lt;mapper url=""/>        resource属性：从类路径下引入映射文件        url属性：从磁盘中或者网络中引用映射文件        class属性：写dao层接口的全类名，不过使用这种方式，            需要将mapper映射文件放在和接口同包下，并且两个文件名字要相同            你也可以直接在接口相应的方法上使用@Select注解等等，这样mybatis也能执行            但是这种注解方式硬编码，不一定好        以上是单一文件注册，你也可以使用package标签批量注册        &lt;package name=""/>    --></span>    <span class="token comment">&lt;!--&lt;mappers>        &lt;mapper resource="mapper/UserDaoMapper.xml"/>        &lt;mapper resource="mapper/KeyDaoMapper"/>        &lt;mapper resource="mapper/LockDaoMapper"/>    &lt;/mappers>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>整合spring之后，mybatis核心配置文件不需要再配置其他东西了</code></pre></li><li><h5 id="Mapper映射文件，UserDaoMapper-xml"><a href="#Mapper映射文件，UserDaoMapper-xml" class="headerlink" title="Mapper映射文件，UserDaoMapper.xml"></a>Mapper映射文件，UserDaoMapper.xml</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    namespace:接口的全类名。world.keyi.dao.UserDao    id：接口中要被实现的方法名    resultType：接口方法的返回值类型，全类名,增删改不用写返回值类型    mybatis自动判断，如果是数字，返回int类型，如果是boolean，影响0行返回false，否则返回true--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开启二级缓存--></span>    <span class="token comment">&lt;!--&lt;cache>&lt;/cache>--></span>    <span class="token comment">&lt;!--查询所有用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findAllUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--&lt;select id="findAll" resultType="User" databaseId="oracle">        select * from tb_user    &lt;/select>--></span>    <span class="token comment">&lt;!--传递多个参数查询用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findUserByUsernameAndEmail<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user where username=#&#123;username&#125; and email=#&#123;email&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--查询一条数据，并将该条数据封装进map--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findUserByUsernameReturnMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user where username=#&#123;username&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--查询多条数据，并将多条数据封装进map返回--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findAllReturnMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--增加用户--></span>    <span class="token comment">&lt;!--&lt;insert id="addUser">        &lt;selectKey keyProperty="" order="BEFORE">            select max(id) from tb_user        &lt;/selectKey>        insert into tb_user values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;birthday&#125;)    &lt;/insert>--></span>    <span class="token comment">&lt;!--删除用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from tb_user where email = #&#123;email&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--更新用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update tb_user set username = #&#123;username&#125;,        password = #&#123;password&#125;,birthday=#&#123;birthday&#125;            where email=#&#123;email&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        自定义结果映射，封装结果集        type属性：指定查询出的数据要封装的类型        id属性：唯一标识    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--            id标签：对表中主键的映射            result标签:对表中非主键的映射            property属性：对应实体类中的属性            column属性：对应数据库表中的字段            表示：将数据库表中的指定的column字段，封装到实体类中的指定的property属性中        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        动态SQL        if标签判断传递的user对象中有无对应的属性，如果有则动态sql拼接，如果没有则pass掉        where标签能消除掉前面多余的and字符串(例如如果没带username值得话，就会多出一个and)    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username!=null and username!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                username = #&#123;username&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and password=#&#123;password&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and email=#&#123;email&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        使用foreach标签，遍历传递过来的list集合        collection：指定要遍历集合的key，在接口方法中已经指定使用"list"取出list集合:            List&lt;User> getUsersByCondition(@Param("list") List&lt;String> list);        close：以什么结束，作为sql语句拼接in语句的话，in (?,?,?),当然是以)结束        open:以什么开始，同上        item：指的是遍历集合中的每一个元素,如果list中元素是对象，            则取对象的属性就是，item的值.对象属性值        separator:每次遍历的元素的分隔符        index：            如果遍历的是一个list集合，index表示的是当前的索引            如果遍历的是一个map集合，index表示的是当前遍历的元素的key    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUsersByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user where username in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span>                  <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #&#123;userName&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><h5 id="前端异常处理，UserException"><a href="#前端异常处理，UserException" class="headerlink" title="前端异常处理，UserException"></a>前端异常处理，UserException</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserException</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token class-name">ArithmeticError</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mav<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mav<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><h5 id="配置AOP"><a href="#配置AOP" class="headerlink" title="配置AOP"></a>配置AOP</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">world<span class="token punctuation">.</span>keyi<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">JoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableAspectJAutoProxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyAspect已创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * world.keyi.service.UserService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"log()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"log()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after方法。。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"log()"</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*            throwing属性表示使用该参数接收业务逻辑方法抛出的异常对象         */</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"只有被增强方法发生异常时，我才会现身"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"log()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*            returning属性表示使用该参数接收业务逻辑方法的返回值         */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里是afterReturning方法。。。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"log()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*            注意当JoinPoint参数和获取返回值的参数或者其他参数一起使用时，                JoinPoint参数必须放在通知方法的参数列表前面            JoinPoint参数可以用来获取被代理方法的信息，                joinPoint.getSignature().getName()获取被代理方法的方法名            环绕通知            ProceedingJoinPoint是JoinPoint子接口，表示可以执行目标方法                1，必须返回Object类型值                2，必须接收一个参数，类型为ProceedingJoinPoint                3,必须throws Throwable         */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"around方法之前。。。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代表实际方法被执行</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"around方法之后。。。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><h5 id="Dao层，UserDao"><a href="#Dao层，UserDao" class="headerlink" title="Dao层，UserDao"></a>Dao层，UserDao</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> <span class="token function">findUserByUsernameAndEmail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></li><li><h5 id="Service层，UserService"><a href="#Service层，UserService" class="headerlink" title="Service层，UserService"></a>Service层，UserService</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserService创建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDaoImpl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userDaoImpl<span class="token punctuation">.</span><span class="token function">findAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserByUsernameAndEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userDaoImpl<span class="token punctuation">.</span><span class="token function">findUserByUsernameAndEmail</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><h5 id="Controller层，UserController"><a href="#Controller层，UserController" class="headerlink" title="Controller层，UserController"></a>Controller层，UserController</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserController已创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">findAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里是controller层，users为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        mav<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mav<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findUserByUsernameAndEmail"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">findUserByUsernameAndEmail</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findUserByUsernameAndEmail</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mav<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            mav<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"查询失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> mav<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><h5 id="项目结构图"><a href="#项目结构图" class="headerlink" title="项目结构图"></a>项目结构图</h5><p><img src="https://cdn.jsdelivr.net/gh/NicknamedCoco/Practice/Practice3/SSM.png" alt="ssm" loading="lazy"></p></li><li><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>​    这种基于大量配置的SSM整合并不是最好的整合方式，可以使用纯注解方式整合SSM<br>还有mybatis的分页插件也没弄上，下次整合SpringBoot+Mybatis时候，一定整上。<br>这个项目源代码放在了github上，有需要可以看下，<a href="https://github.com/NicknamedCoco/Practice/tree/main/Practice3">SSM整合</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis基础内容笔记</title>
      <link href="2021/03/17/Mybatis%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/17/Mybatis%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>Mybatis</p></blockquote><p>最近终于把雷神网课中的mybatis框架基础使用看完了，学习效率太慢了，学校这边很多事情，害</p><p>学习笔记放在了github上了，<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/mybatis/mybatis.txt">Mybatis</a></p><p>今天任务把SSM整合好放到github上</p><p>这个Mybatis视频有点老了，注解用的很少，而且基本没有什么太多源码，没有springmvc源码多<br>回头找其他视频看看</p><p>下一阶段主要是学习Springboot，还是老样子，看网课，做笔记，敲demo。。。</p>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bug之PointCut注解报错</title>
      <link href="2021/03/08/Bug%E4%B9%8BPointCut%E6%B3%A8%E8%A7%A3%E6%8A%A5%E9%94%99/"/>
      <url>2021/03/08/Bug%E4%B9%8BPointCut%E6%B3%A8%E8%A7%A3%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>@PointCut注解，Spring中AOP的注解，使用报错.</p></blockquote><p>这个bug找了好久，原来是引入的依赖版本太低，我吐了</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    AspectJ依赖    aspectjweaver依赖包含aspectjrt--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA配置tomcat细节</title>
      <link href="2021/03/05/IDEA%E9%85%8D%E7%BD%AEtomcat%E7%BB%86%E8%8A%82/"/>
      <url>2021/03/05/IDEA%E9%85%8D%E7%BD%AEtomcat%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>IDEA配置Tomcat时需要的设置</p></blockquote><ul><li><p>打开tomcat根目录中的server.xml文件</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>添加URIEncoding="UTF-8"属性</code></pre></li><li><p>IDEA运行tomcat时，控制台会出现乱码，打开tomcat根目录下的logging.properties</p><pre class="language-properties" data-language="properties"><code class="language-properties">将UTF-8编码改成GBK格式<span class="token attr-name">1catalina.org.apache.juli.AsyncFileHandler.encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">GBK</span><span class="token attr-name">2localhost.org.apache.juli.AsyncFileHandler.encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">GBK</span><span class="token attr-name">java.util.logging.ConsoleHandler.encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">GBK</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC基础内容笔记</title>
      <link href="2021/03/05/SpringMVC%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/05/SpringMVC%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>看了两个SpringMVC的视频，都是一些基础的内容<br>至此，学了Spring和SpringMVC的基础使用，底层很多东西还是不太懂<br>以后会持续学习这几个框架。以下是笔记，放在了github上，不然弄到markdown上<br>要花很多时间在格式样式上，很浪费时间。</p></blockquote><ul><li><p><a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/springmvc1.txt">springmvc笔记1</a></p></li><li><p><a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/springmvc/springmvc2.txt">springmvc笔记2</a></p></li></ul><blockquote><p>未来在实习之前需要完成的目标，继续努力吧！</p></blockquote><ul><li><p>mybatis</p></li><li><p>springboot</p></li><li><p>elementUI/easyUI</p></li><li><p>Linux</p></li><li><p>bootstrap</p></li><li><p>hibernate</p></li><li><p>了解redis，docker</p></li><li><p>英语四级(这是一块心病)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC的文件上传和下载</title>
      <link href="2021/03/03/SpringMVC%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/"/>
      <url>2021/03/03/SpringMVC%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>SpringMVC实现文件的下载</p></blockquote><ul><li><p>前端页面</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/downLoad/万一.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载照片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>后端控制器方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*    springmvc文件的下载*/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/downLoad/&#123;fileName&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">downLoadFile</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span>     <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//根据文件名，拼接路径，获取文件流，读取到字节数据中</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//方式一  FileInputStream inputStream = new </span>        <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\OneForAll\\Desktop\\"</span> <span class="token operator">+</span> fileName<span class="token operator">+</span><span class="token string">".png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\OneForAll\\Desktop\\"</span><span class="token operator">+</span>fileName<span class="token operator">+</span><span class="token string">".png"</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名："</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//自定义响应头，设置响应文件类型，告诉浏览器是二进制文件</span>    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//方式一  headers.add("Content-Disposition","attachment;filename="+fileName);</span>    <span class="token comment">//方式二，将文件名使用utf-8格式编码，解决下载时中文乱码问题</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span>         <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//响应状态</span>    <span class="token class-name">HttpStatus</span> httpStatus <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span>headers<span class="token punctuation">,</span>httpStatus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>SpringMVC实现单文件的上传</p><ul><li><p>导入依赖</p><pre class="language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.3.1&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;    &lt;version&gt;2.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre></li><li><p>在SpringMVC配置文件中，配置文件上传解析器</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--文件上传解析器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span>     <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--设置编码字符集--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--spring表达式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;1024*1024*20&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>文件上传解析器是springmvc的九大组件之一，其id值只能为multipartResolver</code></pre></li><li><p>前端代码</p><pre class="language-markup" data-language="markup"><code class="language-markup">$&#123;msg&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span>     <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li><li><p>后端控制器方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**   springmvc上传文件* */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"upFile"</span><span class="token punctuation">)</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span>        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token class-name">String</span> username<span class="token punctuation">,</span>        <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>        <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名："</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> realPath <span class="token operator">=</span>"<span class="token class-name">D</span><span class="token operator">:</span>\\idea\\<span class="token class-name">Project</span>\\<span class="token class-name">SpringMVCDemo2</span>\\            src\\main\\webapp\\img\\"<span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>username<span class="token operator">+</span><span class="token string">"的文件上传文件成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>username<span class="token operator">+</span><span class="token string">"的文件上传文件失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/index.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><p>SpringMVC实现多文件上传</p><ul><li><p>前端页面</p><pre class="language-markup" data-language="markup"><code class="language-markup">$&#123;msg2&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span>     <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/uploads<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li><li><p>后端控制器方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/uploads"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploads</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"upFile"</span><span class="token punctuation">)</span><span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">,</span>        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token class-name">String</span> username<span class="token punctuation">,</span>        <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token operator">:</span>files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名："</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> realPath <span class="token operator">=</span> "<span class="token class-name">D</span><span class="token operator">:</span>\\idea\\<span class="token class-name">Project</span>\\<span class="token class-name">SpringMVCDemo2</span>\\                src\\main\\webapp\\img\\"<span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg2"</span><span class="token punctuation">,</span>username<span class="token operator">+</span><span class="token string">"的文件上传文件成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg2"</span><span class="token punctuation">,</span>username<span class="token operator">+</span><span class="token string">"的文件上传文件失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/index.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC实现国际化</title>
      <link href="2021/03/03/SpringMVC%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96/"/>
      <url>2021/03/03/SpringMVC%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="使用SpringMVC实现国际化之根据浏览器默认语言切换语言环境"><a href="#使用SpringMVC实现国际化之根据浏览器默认语言切换语言环境" class="headerlink" title="使用SpringMVC实现国际化之根据浏览器默认语言切换语言环境"></a>使用SpringMVC实现国际化之根据浏览器默认语言切换语言环境</h5></blockquote><ul><li><p>编写国际化资源文件</p><ul><li><p>login_en_US.properties</p><pre class="language-none"><code class="language-none">welcomeinfo&#x3D;welcome to keyi.worldusername&#x3D;USERNAMEpassword&#x3D;PASSWORDloginbtn&#x3D;LOGIN</code></pre></li><li><p>login_zh_CN.properties</p><pre class="language-none"><code class="language-none">welcomeinfo&#x3D;欢迎来到keyi.worldusername&#x3D;用户名password&#x3D;密码loginbtn&#x3D;登陆</code></pre></li></ul></li><li><p>在SpringMVC配置文件中配置ResourceBundleMessageSource，管理国际化资源文件</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messageSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.context.support.ResourceBundleMessageSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>country/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>其中，basename属性的value值，写的是resources资源目录下的国际化资源文件的开头，login</code></pre></li><li><p>在页面中取资源文件的value值</p><pre class="language-markup" data-language="markup"><code class="language-markup">加入fmt标签：&lt;%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>使用时：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">fmt:</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>welcomeinfo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>key的值表示从资源文件中取value值&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %>&lt;%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>国际化登录页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">fmt:</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>welcomeinfo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">fmt:</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">fmt:</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;fmt:message key=<span class="token punctuation">"</span></span><span class="token attr-name">loginbtn"</span><span class="token punctuation">/></span></span>">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>实现的效果：根据浏览器的语言设置，访问login页面时，切换相应的语言。</p></li></ul><blockquote><h5 id="使用SpringMVC实现国际化之通过点击链接切换语言环境-自定义区域信息解析器实现"><a href="#使用SpringMVC实现国际化之通过点击链接切换语言环境-自定义区域信息解析器实现" class="headerlink" title="使用SpringMVC实现国际化之通过点击链接切换语言环境(自定义区域信息解析器实现)"></a>使用SpringMVC实现国际化之通过点击链接切换语言环境(自定义区域信息解析器实现)</h5></blockquote><ul><li><p>前端页面</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">fmt:</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>welcomeinfo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">fmt:</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">fmt:</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;fmt:message key=<span class="token punctuation">"</span></span><span class="token attr-name">loginbtn"</span><span class="token punctuation">/></span></span>"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>切换<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>goLogin?locale=zh_CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>goLogin?locale=en_US<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>英文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>自定义区域信息解析器，实现LocaleResolver</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*解析区域信息*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Locale</span> <span class="token function">resolveLocale</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Locale</span> locale<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> localeInfo <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"locale"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>localeInfo<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>localeInfo<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localeInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>localeInfo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                localeInfo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            locale<span class="token operator">=</span>httpServletRequest<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> locale<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*修改区域信息，设置为不修改*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpServletRequest<span class="token punctuation">,</span>         <span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span>            <span class="token punctuation">(</span>"<span class="token class-name">Cannot</span> change HTTP accept header <span class="token operator">-</span> use a different locale                 resolution strategy"<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>SpringMVC配置文件中，指定区域信息解析器为我们自定义的解析器，而不是SpringMVC默认的<br>AcceptHeaderLocaleResolver</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--自定义区域信息解析器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localeResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world.keyi.localeResolver.MyLocaleResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>实现的效果：通过点击链接中文/英文，切换页面的语言环境</p></li></ul><p>此外，还可以通过SpringMVC中自带的SessionLocaleResolver或者CookieLocaleResolver实现上述效果<br>通过SessionLocaleResolver或者CookieLocaleResolver实现时，需要配置LocaleChangeInterceptor拦截器</p>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bug之Tomcat的defaultServlet</title>
      <link href="2021/02/01/Bug%E4%B9%8BTomcat%E7%9A%84defaultServlet/"/>
      <url>2021/02/01/Bug%E4%B9%8BTomcat%E7%9A%84defaultServlet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>SpringMVC前端控制器映射路径问题笔记</p></blockquote><pre class="language-none"><code class="language-none">前端控制器url-pattern的问题    设置为&#x2F;：导致静态资源访问失败都是404，动态代理可以访问    第一种解决静态资源访问的方案，在springmvc的配置文件中：        1)开启注解驱动            &lt;mvc:annotation-driven&gt;        2)开启默认servlet处理器            &lt;mvc:default-servlet-handler&gt;        原理是：给springmvc容器中注册一个组件，DefaultServletHttpRequestHandler            让这个对象去处理静态资源的访问，在对象内部估计是转交给Tomcat的defaultServlet处理,                第二种方式：        spring定义了专门处理静态资源访问请求的处理器，ResourceHttpRequestHandler        通过在springmvc配置文件中使用&lt;mvc:resources&#x2F;&gt;标签        例如&lt;mvc:resources location:&quot;静态资源存放的位置&quot; mapping&#x3D;&quot;匹配访问静态请求的url&quot;&#x2F;&gt;            &lt;mvc:resources location:&quot;&#x2F;static&#x2F;&quot; mapping&#x3D;&quot;&#x2F;static&#x2F;**&quot;&#x2F;&gt;        上面例子中，mapping表示静态资源请求访问带有&#x2F;static及其子目录的所有url,        location表示静态资源位于根目录下的static文件夹,注意这个文件夹不能放到WEB-INF下        (网上说可以放任何位置)        和第一种情况一样，&lt;mvc:resources&#x2F;&gt;和@requestMapping有冲突，        需要添加&lt;mvc:annotation-driven&gt;到springmvc容器中</code></pre><pre class="language-none"><code class="language-none">前端控制器的映射问题，&#x2F;和&#x2F;*    之前的笔记中有，但感觉不够完整，现在再回顾一下    映射路径写&#x2F;，表示匹配静态资源请求和动态资源请求，它重写了Tomcat的web.xml中的defaultServlet的路径        defaultServlet是处理静态资源的servlet，所以静态资源请求交给前端控制器，springmvc没法处理，        *.html,*.css,*.js等等，springmvc都处理不了，但*.jsp能够正常访问，是因为tomcat的web.xml中        还有一个jspServlet,专门用来处理*.jsp页面的，所以前端控制器的映射路径写&#x2F;，        相当于静态动态资源请求全部交给前端控制器，而*.jsp则交给Tomcat去处理        映射路径写&#x2F;*，与&#x2F;相同的是，&#x2F;*也能匹配静态资源请求和动态资源请求，不同的是&#x2F;*还能匹配*.jsp页面，        也就是说&#x2F;*重写,tomcat的web.xml的jspServlet的工作，所有请求包括*.jsp都交给了前端控制器，        前端控制器只能处理静态请求,所以连访问*.jsp页面都直接404，而&#x2F;则将*.jsp的请求交给Tomcat完成，        所以可以访问*.jsp页面。</code></pre><blockquote><p>如果前端控制器映射配置为/时，表示前端控制器继承Tomcat的defaultServlet的映射路径</p><p>所以，如果你tomcat的defaultServlet的映射路径配置成下面这样：</p><pre class="language-none"><code class="language-none">&lt;servlet-mapping&gt;    &lt;servlet-name&gt;default&lt;&#x2F;servlet-name&gt;    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;    &lt;url-pattern&gt;*.js&lt;&#x2F;url-pattern&gt;    &lt;url-pattern&gt;*.html&lt;&#x2F;url-pattern&gt;    &lt;url-pattern&gt;*.css&lt;&#x2F;url-pattern&gt;&lt;&#x2F;servlet-mapping&gt;</code></pre><p>即使SpringMVC配置文件中不配置任何处理器，<br>SpringMVC也能处理静态资源请求，因为继承了tomcat的默认处理器</p><p>如果你的tomcat的defaultServlet映射路径仅仅是如下：</p><pre class="language-none"><code class="language-none">&lt;servlet-mapping&gt;    &lt;servlet-name&gt;default&lt;&#x2F;servlet-name&gt;    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;&lt;&#x2F;servlet-mapping&gt;</code></pre><p>则SpringMVC因为继承原因，需要在SpringMVC的配置文件中配置默认处理器来处理静态资源请求，<br>即笔记中的配置。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bug之jdbcTemplate</title>
      <link href="2021/01/31/Bug%E4%B9%8BjdbcTemplate/"/>
      <url>2021/01/31/Bug%E4%B9%8BjdbcTemplate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>使用jdbcTemplate时连接数据库获取数据封装到实体类中时</p><p>会因为数据库字段和实体类属性不一致，导致有些字段封装不上，</p><p>解决办法：jdbcTemplate使用sql查询数据时，使用别名</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用jdbcTemplate要求列名和实体类名一致，如果不一致需要使用别名</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span>"select username<span class="token punctuation">,</span>pwd as password<span class="token punctuation">,</span>email         from user_info where username <span class="token operator">=</span> <span class="token operator">?</span>"<span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>         <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bug之pom.xml依赖冲突</title>
      <link href="2021/01/31/Bug%E4%B9%8Bpom-xml%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/"/>
      <url>2021/01/31/Bug%E4%B9%8Bpom-xml%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h6 id="Tomcat启动时报错：java-lang-NoSuchMethodError"><a href="#Tomcat启动时报错：java-lang-NoSuchMethodError" class="headerlink" title="Tomcat启动时报错：java.lang.NoSuchMethodError:"></a>Tomcat启动时报错：java.lang.NoSuchMethodError:</h6><h6 id="org-springframework-core-type-AnnotationMetadata-introspect-Ljava-lang"><a href="#org-springframework-core-type-AnnotationMetadata-introspect-Ljava-lang" class="headerlink" title="org.springframework.core.type.AnnotationMetadata.introspect(Ljava/lang/)"></a>org.springframework.core.type.AnnotationMetadata.introspect(Ljava/lang/)</h6></blockquote><blockquote><p>pom.xml文件</p></blockquote><pre class="language-none"><code class="language-none">&lt;!--JdbcTemplate依赖--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;    &lt;version&gt;5.0.9.RELEASE&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;!--springmvc依赖--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;    &lt;version&gt;5.2.6.RELEASE&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;报错原因是spring-jdbc版本与spring-webmvc版本不一致，jdbcTemplate依赖会引入到spring的其他低版本依赖，而spring-webmvc依赖同样引入了相同的高版本依赖，导致依赖冲突。并且pom.xml依赖的先后顺序也有要求，低版本依赖配置在前，就会使用低版本依赖，不过最好还是版本相同。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanUtils</title>
      <link href="2021/01/17/BeanUtils/"/>
      <url>2021/01/17/BeanUtils/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>BeanUtils工具</p></blockquote><p>记录一下这个工具，虽然以后不一定能用到，但作为了解一下</p><p>BeanUtils工具是Apache Commons组件的成员之一，<br>主要用于简化JavaBean封装数据的操作。</p><p>比如在前端提交表单数据时后端接收要使用request.getParameter()<br>使用BeanUtils就可以直接使用如下方式，前提是表单的name属性要和<br>User属性名一致</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span>     <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> param <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>使用该工具需要导入的maven依赖</p><pre class="language-none"><code class="language-none">&lt;!--beanUtil--&gt;&lt;dependency&gt;    &lt;groupId&gt;commons-beanutils&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;commons-beanutils&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.9.3&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.2&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><p>该工具具体使用，请查看大佬们的博客</p><ul><li><a href="https://blog.csdn.net/sun8112133/article/details/90754359">博客1</a></li><li><a href="https://www.jianshu.com/p/77a01b8a8d37">博客2</a></li></ul><p>Apache Commons下更多组件工具，请点击<a href="https://www.cnblogs.com/crazylqy/p/4872236.html">跳转</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> BeanUtils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础内容笔记</title>
      <link href="2021/01/16/Spring%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/16/Spring%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>这里记录下spring的笔记</p><p>之前本来把spring笔记整理了一部分，但是放在网页上样式非常难看<br>所以直接把笔记放GitHub上算了</p><p>笔记分两部分</p><ul><li><a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/spring/Spring%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AC%94%E8%AE%B0.txt">spring的基础内容笔记</a></li><li><a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/spring/Spring%E6%B3%A8%E8%A7%A3%E7%AC%94%E8%AE%B0.txt">spring的注解笔记</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dbutils和JdbcTemplate的使用</title>
      <link href="2021/01/05/Dbutils%E5%92%8CJdbcTemplate%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/01/05/Dbutils%E5%92%8CJdbcTemplate%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>两个封装JDBC操作的工具，使用起来非常相似<br>简单记录下，防止以后又忘记。。。。</p></blockquote><blockquote><h5 id="Dbutils"><a href="#Dbutils" class="headerlink" title="Dbutils"></a>Dbutils</h5></blockquote><ul><li><p>导包</p><pre class="language-none"><code class="language-none">&lt;!--Dbutils工具--&gt;&lt;dependency&gt;    &lt;groupId&gt;commons-dbutils&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;commons-dbutils&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.7&lt;&#x2F;version&gt;    &lt;scope&gt;compile&lt;&#x2F;scope&gt;&lt;&#x2F;dependency&gt;</code></pre></li><li><p>插入，修改，删除数据</p><pre class="language-none"><code class="language-none">Connection conn;QueryRunner runner &#x3D; new QueryRunner();String sql &#x3D; &quot;insert into user values(?,?,?)&quot;;Object[] params &#x3D; &#123;user.getUsername(), user.getPassword(), user.getEmail()&#125;;result &#x3D; runner.update(conn, sql, params);&#x2F;*仅演示插入数据，修改，删除数据使用的方法都是一样的，因为事务控制需要在业务层上，所以该connection对象是业务层传过来的在使用update方法的时候需要提交conn对象。这种方式才能做到业务层管理事务如果不考虑事务，则创建QueryRunner对象的时候提供conn对象就行，这样做属于dbutils内部管理conn，在使用update方法时，也只需提供sql和参数即可因为写这个代码的时候还没学spring，所以在每个方法中直接创建了QunnerRunner对象用来spring之后注入QueryRunner属性就行*&#x2F;</code></pre></li><li><p>查询返回结果是一个对象</p><pre class="language-none"><code class="language-none">Connection conn;QueryRunner runner &#x3D; new QueryRunner();User user &#x3D; null;String sql &#x3D; &quot;select username,password,email from user where username&#x3D;?&quot;;try &#123;user &#x3D; queryRunner.query(conn, sql, new BeanHandler&lt;User&gt;(User.class), username);    &#125; catch (SQLException e) &#123;        e.printStackTrace();&#125;&#x2F;*这个beanHandler类实现了ResultSetHandler接口*&#x2F;</code></pre></li><li><p>查询返回结果是一个集合</p><pre class="language-none"><code class="language-none">Connection conn;QueryRunner runner &#x3D; new QueryRunner();List&lt;User&gt; users &#x3D; null;String sql &#x3D; &quot;select username,password,email from user where username&#x3D;?&quot;;try &#123;users &#x3D; runner.query(conn,sql,new BeanListHandler&lt;User&gt;(User.class));    &#125; catch (SQLException e) &#123;        e.printStackTrace();&#125;</code></pre></li></ul><blockquote><h5 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h5></blockquote><ul><li><p>导包</p><pre class="language-none"><code class="language-none">&lt;!--JdbcTemplate依赖--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;    &lt;version&gt;5.0.9.RELEASE&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre></li><li><p>插入，修改，删除一个数据</p><pre class="language-none"><code class="language-none">@Autowiredprivate JdbcTemplate jdbcTemplate;Object[] objects &#x3D; &#123;user.getUsername(),user.getPassword(),user.getEmail()&#125;;String sql &#x3D;&quot;insert into user values(?,?,?)&quot;int update &#x3D; jdbcTemplate.update(sql, objects);</code></pre></li><li><p>查询结果是一个值</p><pre class="language-java" data-language="java"><code class="language-java">jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"sql语句"</span><span class="token punctuation">,</span>返回值的<span class="token keyword">class</span>类型<span class="token punctuation">)</span><span class="token punctuation">;</span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"select count(*) from user"</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>查询结果是一个对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where username=?"</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//和查询一个值用的方法重载。</span></code></pre></li><li><p>查询结果是一个集合</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>批量执行添加，修改，删除操作</p><pre class="language-none"><code class="language-none">@Overridepublic void deleteSome(List&lt;Object[]&gt; list) &#123;        String sql &#x3D; &quot;delete from user where username &#x3D; ?&quot;;        int[] ints &#x3D; jdbcTemplate.batchUpdate(sql, list);        System.out.println(Arrays.toString(ints));&#125;&#x2F;*提供的参数好像只能是List&lt;Object[]&gt;类型，批量操作底层是遍历List集合中每一个元素执行每一次sql语句时，就使用一个集合中的元素参数，即Object[]。*&#x2F;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dbutils </tag>
            
            <tag> JdbcTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax实现省市级联</title>
      <link href="2020/12/26/Ajax%E5%AE%9E%E7%8E%B0%E7%9C%81%E5%B8%82%E7%BA%A7%E8%81%94/"/>
      <url>2020/12/26/Ajax%E5%AE%9E%E7%8E%B0%E7%9C%81%E5%B8%82%E7%BA%A7%E8%81%94/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h3 id="Ajax实现省市级联案例"><a href="#Ajax实现省市级联案例" class="headerlink" title="Ajax实现省市级联案例"></a>Ajax实现省市级联案例</h3></blockquote><blockquote><h4 id="原生JS使用Ajax实现级联"><a href="#原生JS使用Ajax实现级联" class="headerlink" title="原生JS使用Ajax实现级联"></a>原生JS使用Ajax实现级联</h4></blockquote><ul><li><h5 id="Maven的pom文件"><a href="#Maven的pom文件" class="headerlink" title="Maven的pom文件"></a>Maven的pom文件</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--jquery--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--jackson--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--Dbutils工具--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--数据库驱动--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--数据库连接池--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--servlet--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><h5 id="Druid连接池的配置文件"><a href="#Druid连接池的配置文件" class="headerlink" title="Druid连接池的配置文件"></a>Druid连接池的配置文件</h5><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/city?</span><span class="token attr-name">serverTimezone</span><span class="token punctuation">=</span><span class="token attr-value">GMT&amp;useSSL=false&amp;characterEncoding=utf-8</span><span class="token comment">#这个可以缺省的，会根据url自动识别</span><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">123765</span><span class="token comment">##初始连接数，默认0</span><span class="token attr-name">initialSize</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token comment">#最大连接数，默认8</span><span class="token attr-name">maxActive</span><span class="token punctuation">=</span><span class="token attr-value">30</span><span class="token comment">#最小闲置数</span><span class="token attr-name">minIdle</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token comment">#获取连接的最大等待时间，单位毫秒</span><span class="token attr-name">maxWait</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token comment">#缓存PreparedStatement，默认false</span><span class="token attr-name">poolPreparedStatements</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment">#缓存PreparedStatement的最大数量，默认-1（不缓存）。大于0时会自动开启缓存</span>PreparedStatement，所以可以省略上一句设置<span class="token attr-name">maxOpenPreparedStatements</span><span class="token punctuation">=</span><span class="token attr-value">20</span></code></pre></li><li><h5 id="Linkage"><a href="#Linkage" class="headerlink" title="Linkage"></a>Linkage</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Linkage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Linkage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>略略略<span class="token punctuation">&#125;</span></code></pre></li><li><h5 id="LinkageServlet"><a href="#LinkageServlet" class="headerlink" title="LinkageServlet"></a>LinkageServlet</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/linkage"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkageServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span>     <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> stream <span class="token operator">=</span> <span class="token class-name">LinkageServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span>             <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Druid工具</span>            <span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> pid <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql<span class="token punctuation">;</span>            <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sql<span class="token operator">=</span><span class="token string">"select id,name from province"</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Linkage</span><span class="token punctuation">></span></span> provincesList <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Linkage</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Linkage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>provincesList<span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> s <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                sql<span class="token operator">=</span><span class="token string">"select id,name from town where p_id="</span><span class="token operator">+</span>pid<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pid:"</span><span class="token operator">+</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Linkage</span><span class="token punctuation">></span></span> cityList <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Linkage</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Linkage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>cityList<span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><h5 id="index-jsp-与Jquery的不同处"><a href="#index-jsp-与Jquery的不同处" class="headerlink" title="index.jsp(与Jquery的不同处)"></a>index.jsp(与Jquery的不同处)</h5><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>省市联动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>province<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//js程序入口</span>        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//ajax请求省份信息</span>            ajax<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/AJAXDemo/linkage"</span><span class="token punctuation">,</span>findProvince<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> province <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            province<span class="token punctuation">.</span><span class="token function-variable function">onchange</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>province<span class="token punctuation">.</span>value<span class="token punctuation">)</span>                <span class="token comment">//当select被选中时，获取其值，并使用ajax请求获取城市信息</span>                ajax<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/AJAXDemo/linkage"</span> <span class="token operator">+</span>                    <span class="token string">"?_="</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&amp;pid="</span><span class="token operator">+</span>                         province<span class="token punctuation">.</span>value<span class="token punctuation">,</span>findCity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//自定义的ajax对象，封装了get请求</span>        <span class="token keyword">var</span> ajax<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> xmlHttpRequest                <span class="token comment">//如果是IE5,IE6则通过new ActiveXObject创建xmlHttpRequest对象</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    xmlHttpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    xmlHttpRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                xmlHttpRequest<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlHttpRequest<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span>                        <span class="token operator">&amp;&amp;</span>xmlHttpRequest<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xmlHttpRequest<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                xmlHttpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>                xmlHttpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//省份的回调函数</span>        <span class="token keyword">function</span> <span class="token function">findProvince</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> province <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> option <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            option<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">"请选择省份"</span>            province<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> s <span class="token keyword">of</span> object<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> option <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                option<span class="token punctuation">.</span>value<span class="token operator">=</span>s<span class="token punctuation">.</span>id<span class="token punctuation">;</span>                option<span class="token punctuation">.</span>innerText<span class="token operator">=</span>s<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                province<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//城市的回调函数</span>        <span class="token keyword">function</span> <span class="token function">findCity</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> select <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> option <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            option<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">"请选择地级市"</span>            select<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> s <span class="token keyword">of</span> object<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> option <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                option<span class="token punctuation">.</span>value<span class="token operator">=</span>s<span class="token punctuation">.</span>id<span class="token punctuation">;</span>                option<span class="token punctuation">.</span>innerText<span class="token operator">=</span>s<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                select<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            city<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><blockquote><h4 id="Jquery使用Ajax实现级联"><a href="#Jquery使用Ajax实现级联" class="headerlink" title="Jquery使用Ajax实现级联"></a>Jquery使用Ajax实现级联</h4></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>jquery的ajax技术实现省市联动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webjars/jquery/3.1.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/AJAXDemo/linkage"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> arr <span class="token operator">=</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;option>请选择省份&lt;/option>"</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> o <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;option>&lt;/option>"</span><span class="token punctuation">)</span>                    option<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                    option<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//查找select中被选中项的id</span>                <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"option:selected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>                $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/AJAXDemo/linkage"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"pid"</span><span class="token operator">:</span>id<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">let</span> select <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;select>&lt;/select>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">let</span> arr <span class="token operator">=</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                    select<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;option>请选择城市&lt;/option>"</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> o <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;option>&lt;/option>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        option<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span>                        option<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                        select<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>注意：在Maven中使用Jquery需要配置一下，<a href="https://blog.csdn.net/weixin_39641494/article/details/82015495">大神文章</a><ul><li>设置仓库</li><li>在resource目录下创建webjars，不存放任何东西</li><li><code>在html中插入:&lt;script src=&quot;webjars/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery笔记</title>
      <link href="2020/12/25/Jquery%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/25/Jquery%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h3 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h3></blockquote><blockquote><h4 id="DOM对象和Jquery对象的区别及转换"><a href="#DOM对象和Jquery对象的区别及转换" class="headerlink" title="DOM对象和Jquery对象的区别及转换"></a>DOM对象和Jquery对象的区别及转换</h4></blockquote><ul><li><p>通过JS代码获取的对象都是DOM对象，而通过JQuery获取的对象是Jquery包装集对象，简称Jquery对象,    只有Jquery对象才能获取Jquery提供的方法。</p>  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//dom对象</span><span class="token keyword">var</span> domDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Jquery对象</span><span class="token keyword">var</span> jqueryDiv <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mydiv"</span><span class="token punctuation">)</span></code></pre></li><li><p>在Jquery对象中，无论是一个还是一组，都封装成一个Jquery包装集</p>  <pre class="language-none"><code class="language-none">当获取不存在的dom对象的时候，会返回null当获取不存在的jquery对象的时候，会返回一个jquery包装集对象，w.fn.init[div#mydiv]</code></pre></li><li><p>dom对象和jquery对象之间的转换</p>  <pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;&#x2F;dom对象转换为jquery对象var newJqueryDiv &#x3D; $(mydiv)console.log(newJqueryDiv)&#x2F;&#x2F;Jquery对象转换为dom对象&#x2F;&#x2F;通过下标获取,或者叫遍历jquery包装集数组，包装集就像数组var newDomDiv &#x3D; newJqueryDiv[0]console.log(newDomDiv)&#x2F;&#x2F;遍历Jquery对象数组得到的对象是Dom对象，可以通过$()转换为Jquery对象</code></pre></li></ul><blockquote><h4 id="Jquery选择器"><a href="#Jquery选择器" class="headerlink" title="Jquery选择器"></a>Jquery选择器</h4></blockquote><ul><li><h5 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h5><ul><li>id选择器<br>  $(“#testDiv”)，选择id为testDiv的元素，如果有多个同名ID，则以第一个为准</li><li>元素名称选择器<br>  $(“div”)，选择所有div元素</li><li>类选择器<br>  $(“.blue”)，选择所有class=bule的元素</li><li>选择所有元素<br>  $(“*”)，选择页面所有元素</li><li>组合选择器<br>  $(“#testDiv，span，.blue”)，同时选中多个选择器匹配的元素</li></ul></li><li><h5 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h5><ul><li>后代选择器<br>  $(“#parent  div”)，选择id为parent元素的所有div元素</li><li>子代选择器<br>$(“#parent &gt;div”)，选择id为parent的直接div子元素，第一代</li><li>相邻选择器<br>$(“.blue+img”)，选择class=blue元素的下一个img元素，只找一个。<br>如果下一个元素不是img元素，则找不到。必须要相邻紧挨着的。</li><li>同辈选择器<br>$(“.blue~img”)，选择class=blue元素的之后的所有同辈元素</li></ul></li><li><h5 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h5>  <pre class="language-none"><code class="language-none">表单选择器:input查找所有的input元素,$(&quot;:input&quot;),与标签选择器有区别注意：会匹配所有的input,textarea,select,button元素文本框选择器:text查找所有文本框，$(&quot;:text&quot;)密码框选择器:password查找所有密码框$(&quot;:password&quot;)单选按钮选择器:radio查找所有单选按钮$(&quot;:radio&quot;)...</code></pre></li></ul><blockquote><h4 id="Jquery-Dom操作"><a href="#Jquery-Dom操作" class="headerlink" title="Jquery Dom操作"></a>Jquery Dom操作</h4></blockquote><p>Dom操作即是对HTML节点元素的操作，对标签的操作</p><ul><li><h5 id="操作元素的属性"><a href="#操作元素的属性" class="headerlink" title="操作元素的属性"></a>操作元素的属性</h5><ul><li><p>属性的分类<br>  固有属性：元素本身就有的属性<br>  返回值是boolean的属性，checked，selected，disabled<br>  自定义属性：用户自己定义的属性</p></li><li><p>获取属性</p>  <pre class="language-none"><code class="language-none">attr(&quot;属性名称&quot;)获取指定的属性值，操作checkbox时，attr(&quot;checked&quot;)选中返回checked,没有选中返回undefinedprop(&quot;属性名称&quot;)获取具有true和false两个属性的属性值prop(&quot;checked&quot;)对于固有属性来说，这两个方法都能获取到属性对应的属性值对于返回值是boolean的属性来说:元素中存在对应的属性，attr方法返回的是属性值,prop方法返回true元素中不存在对应的属性，attr方法返回的是undefined，prop返回的是false对于自定义属性，attr方法可以获取对应的属性值，prop方法不可以</code></pre></li><li><p>设置属性</p>  <pre class="language-none"><code class="language-none">设置属性和获取属性差不多，方法的第二个参数是要设置的属性值如果设置的属性是固有属性：attr(&quot;属性名&quot;，&quot;属性值&quot;)prop(&quot;属性名&quot;,&quot;属性值&quot;)如果设置的属性是返回值为boolean类型的attr(&quot;checked&quot;,&quot;checked&quot;)prop(&quot;属性名&quot;,true)&#x2F;&#x2F;选中如果设置的属性是自定义属性，只能使用attr方法</code></pre></li><li><p>移除属性<br>  使用方法removeAttr(“属性名”)</p><p>总结：如果属性的类型是boolean，则使用prop方法，其他都用attr方法。</p></li></ul></li><li><h5 id="操作元素的样式"><a href="#操作元素的样式" class="headerlink" title="操作元素的样式"></a>操作元素的样式</h5><p>  元素的样式也是一种属性，因为样式特别多，所以除了当做属性处理外，<br>还有专门的方法进行处理</p>  <pre class="language-none"><code class="language-none">1.attr(&quot;class&quot;)获取class属性的值，即样式名称2.attr(&quot;class&quot;,&quot;样式名&quot;)修改class属性的值，修改样式，原本的样式会被覆盖3.addClass(&quot;样式名&quot;)添加样式,在原来的基础上添加样式，原本的样式会保留如果出现相同样式，则以样式中，后定义的为准。举例：&lt;style type&#x3D;&quot;text&#x2F;css&quot; &gt;.bbb&#123;color: brown; font-size: 30px;&#125;.aaa&#123;color: blue; font-size: 20px;&#125;&lt;&#x2F;style&gt;&lt;body&gt;&lt;span class&#x3D;&quot;aaa&quot;&gt;what fuck&lt;&#x2F;span&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;let class1 &#x3D; $(&quot;span&quot;).addClass(&quot;bbb&quot;);&#x2F;&#x2F;最终显示蓝色，因为覆盖了之前的样式console.log(class1.attr(&quot;class&quot;))&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;    4.css()添加具体的样式(添加行内样式),其格式为：设置多个样式：css(&#123;&quot;backgrand-color&quot;:&quot;red&quot;,&quot;color&quot;:&quot;#fff&quot;&#125;);设置单个样式：css(&quot;color&quot;:&quot;white&quot;)5.removeClass(class)移除样式名称​&#96;&#96;&#96;</code></pre></li><li><h5 id="操作元素的内容"><a href="#操作元素的内容" class="headerlink" title="操作元素的内容"></a>操作元素的内容</h5><p>对于元素还可以操作其中的内容，就像Dom对象的innerText，innerHTML方法一样</p><pre class="language-none"><code class="language-none">1，html()获取元素的html内容2，html(&quot;内容&quot;)设置元素的html内容，html(&quot;&lt;h1&gt;上海&lt;h1&gt;&quot;)3，text()获取元素的文本内容，不包含html4，text(&quot;text内容&quot;)设置元素的文本内容，不包含html5，val()获取元素的value值6，val(&quot;值&quot;)设定元素的value值表单元素：文本框text,密码框password，单选框radio，复选框checkbox，隐藏域hidden，文本域textarea，下拉框select非表单元素div，span，h1-h6，table，tr，td，li，p</code></pre></li></ul><ul><li><h5 id="创建，添加，删除，遍历元素"><a href="#创建，添加，删除，遍历元素" class="headerlink" title="创建，添加，删除，遍历元素"></a>创建，添加，删除，遍历元素</h5><ul><li><p>创建元素</p><pre class="language-none"><code class="language-none">$(&quot;元素内容&quot;)例如$(&quot;&lt;p&gt;jquery&lt;&#x2F;p&gt;&quot;)</code></pre></li><li><p>添加元素</p><pre class="language-none"><code class="language-none"> &lt;select id&#x3D;&quot;sel&quot;&gt;&lt;&#x2F;select&gt;1，prepend(content)在被选元素内部的开头插入元素或内容，被追加的content参数可以是字符，HTML元素标记&#x2F;&#x2F;从头开始插入元素    let option &#x3D; $(&quot;&lt;option&gt;上海&lt;&#x2F;option&gt;&quot;);    let option2 &#x3D; $(&quot;&lt;option&gt;北京&lt;&#x2F;option&gt;&quot;);    $(&quot;#sel&quot;).prepend(option)    $(&quot;#sel&quot;).prepend(option2)    结果是北京-&gt;上海    2，$(content).prependTo(selector)把content元素或内容加入selector元素开头&#x2F;&#x2F;和上面一样，只不过形式不同罢了    $(&quot;&lt;option&gt;上海&lt;&#x2F;option&gt;&quot;).prependTo($(&quot;#sel&quot;)) $(&quot;&lt;option&gt;台湾&lt;&#x2F;option&gt;&quot;).prependTo($(&quot;#sel&quot;))3，append(content)在被选元素内部的结尾插入元素或内容，被追加的content参数可以是字符，HTML元素标记&#x2F;&#x2F;从尾部插入元素$(&quot;#sel&quot;).append(option)$(&quot;#sel&quot;).append(option2)结果是上海-&gt;北京4，$(content).appendTo(selector)把content元素或内容插入selector元素内部，默认是结尾&#x2F;&#x2F;和上面一样，就不贴代码了5，before()在元素前插入指定的元素或内容：$(selector).before(content)&#x2F;&#x2F;在选中元素前插入content元素，不是在内部6，after()在元素后插入指定的元素或内容：$(selector).after(content)</code></pre></li><li><p>删除元素</p><pre class="language-none"><code class="language-none">remove()删除所选元素及其对应的子元素，包括整个标签和内容一起删empty()清空所选元素的内容，保留标签和样式</code></pre></li><li><p>遍历元素</p><pre class="language-none"><code class="language-none">each()$(selector).each(function(index,element)&#123;&#x2F;&#x2F;遍历体&#125;)参数function为遍历时的回调函数，index为遍历元素的序列号，从0开始，即下标element是当前元素，此时是dom元素function(index,element)&#123;&#125;，可以使用lambda表达式$(selector).each((index,element)&#x3D;&gt;&#123;&#125;)举例：&lt;body&gt;        &lt;span&gt;王科一&lt;&#x2F;span&gt;&lt;br&gt;        &lt;span&gt;王科一&lt;&#x2F;span&gt;&lt;br&gt;        &lt;span&gt;王科一&lt;&#x2F;span&gt;&lt;br&gt;        &lt;span&gt;王科一&lt;&#x2F;span&gt;        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;           $(&quot;span&quot;).each(function (index, element) &#123;               &#x2F;&#x2F;this关键字和element表示的都是数组中的元素，都是dom元素               &#x2F;&#x2F;要想使用jquery方法，就要转为jquery对象，$(this)即可               var lsp &#x3D; $(this).html(&quot;王科&quot;+(index+1))               console.log(lsp.html())           &#125;)        &lt;&#x2F;script&gt;    &lt;&#x2F;body&gt;</code></pre></li></ul></li></ul><blockquote><h4 id="jquery操作下拉框select"><a href="#jquery操作下拉框select" class="headerlink" title="jquery操作下拉框select"></a><a href="https://blog.csdn.net/m_Tenderness/article/details/91898841">jquery操作下拉框select</a></h4></blockquote><blockquote><h4 id="Jquery事件"><a href="#Jquery事件" class="headerlink" title="Jquery事件"></a>Jquery事件</h4></blockquote><ul><li><h5 id="ready加载事件"><a href="#ready加载事件" class="headerlink" title="ready加载事件"></a>ready加载事件</h5><pre class="language-none"><code class="language-none">ready()预加载事件，当页面的dom结构加载完毕执行，JS中类似于load事件ready()可以写多个，按顺序执行$(document).ready(function()&#123; &#125;)等价于$(function()&#123; &#125;)</code></pre></li><li><h5 id="bind-绑定事件"><a href="#bind-绑定事件" class="headerlink" title="bind()绑定事件"></a>bind()绑定事件</h5><p>为被选中的元素添加一个或多个事件处理程序，并规定事件发生时运行的函数<br>就是为元素绑定事件</p><pre class="language-none"><code class="language-none">$(selector).bind(eventType[,eventData],handler(eventObject));eventType:是一个字符串类型的事件类型，就是你需要绑定的事件，比如click，focus,keydown[,eventData]:传递的参数，格式：&#123;名:值，名:值&#125;handler(eventObject):该事件触发执行的函数&#x2F;&#x2F;绑定单个事件&#x2F;&#x2F;bind绑定$(&quot;元素&quot;).bind(&quot;事件类型&quot;，function()&#123;&#125;)&#x2F;&#x2F;直接绑定$(&quot;元素&quot;).事件名(function()&#123;&#125;)&#x2F;&#x2F;绑定多个事件&#x2F;&#x2F;bind绑定&#x2F;&#x2F;1,同时为多个事件绑定同一个函数指定元素.bind(&quot;事件类型1 事件类型2 事件类型3,,,&quot;,function()&#123;&#125;)&#x2F;&#x2F;2,为元素绑定多个事件，并设置对应的函数指定元素.bind(&quot;事件类型1&quot;,function()&#123;&#125;).bind(&quot;事件类型2&quot;,function()&#123;&#125;).bind(&quot;事件类型3&quot;,function()&#123;&#125;)...&#x2F;&#x2F;3,为元素绑定多个事件，并设置对应的函数指定元素.bind(&#123;&quot;事件类型1&quot;:function()&#123;&#125;,&quot;事件类型2&quot;:function()&#123;&#125;,&quot;事件类型3&quot;:function()&#123;&#125;&#125;);&#x2F;&#x2F;直接绑定指定元素.事件名(function()&#123;&#125;).事件名(function()&#123;&#125;).事件名(function()&#123;&#125;);&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;请输入用户名&quot; id&#x3D;&quot;username&quot;&gt;&lt;br&gt;    &lt;button&gt;点一下&lt;&#x2F;button&gt;$(&quot;button&quot;).click(function () &#123;    $(&quot;#username&quot;).val(&quot;请输入密码&quot;)    &#125;).dblclick(function () &#123;    alert(&quot;kao&quot;)    &#125;)&#x2F;&#x2F;直接绑定最常用</code></pre></li></ul><blockquote><h4 id="Jquery-Ajax"><a href="#Jquery-Ajax" class="headerlink" title="Jquery Ajax"></a>Jquery Ajax</h4></blockquote><ul><li><p>$.ajax</p><pre class="language-none"><code class="language-none">jquery调用ajax方法：格式：$.ajax(&#123;            type:请求方式&quot;GET&#x2F;POST&quot;            url:请求地址            async:是否异步，默认是true表示异步            data:发送到服务器的数据,如果没有参数，则不需要设置           data:&#123;           username: &quot;张三&quot;           password: &quot;123456&quot;           &#125;           dataType:预期服务器返回的数据类型           dataType:&quot;json&quot;           &#x2F;&#x2F;如果是json格式，在接收到返回值时会自动封装成json对象           &#x2F;&#x2F;就不需要使用JSON.parse()方法转换字符串了            contentType:设置请求头            success:请求成功时，调用此函数            success:function(data)&#123;            &#x2F;&#x2F;这里的data是形参，代表的是返回的数据            &#125;            error:请求失败时调用此函数    &#125;);</code></pre></li></ul><ul><li><p>$.get</p><pre class="language-none"><code class="language-none">这是一个简单的get请求功能以取代复杂的$.ajax。请求成功时可调用回调函数，如果需要在出错时执行函数，请使用$.ajax&#x2F;&#x2F;1,请求json文件，忽略返回值$.get(&quot;url&quot;);&#x2F;&#x2F;2,请求json文件，传递参数，忽略返回值$.get(&quot;url&quot;,&#123;username:&quot;tom&quot;,password:123456&#125;)&#x2F;&#x2F;3,请求json文件，拿到返回值，请求成功拿到返回值$.get(&quot;url&quot;,function(data)&#123;console.log(data)&#125;);&#x2F;&#x2F;4,请求json文件，传递参数，拿到返回值$.get(&quot;url&quot;,&#123;username:&quot;tom&quot;,password:123456&#125;,function()&#123;console.log(data)&#125;)</code></pre></li><li><p>$.post<br>和$.get写法没有任何区别，只是请求方式的不同</p></li><li><p>$.getJSON<br>这种ajax请求要求返回的数据格式是json格式(json字符串)<br>如果返回的数据不是json格式，则无法获取</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jackson的使用</title>
      <link href="2020/12/23/Jackson%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/12/23/Jackson%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>记录一下Jackson，为以后学习这个技术打前站~~<br>        Jackson也是一个操作json的工具</p></blockquote><blockquote><p>要引入的依赖</p></blockquote><pre class="language-none"><code class="language-none">&lt;!--jackson，使用自动仲裁版本号即可，只需导入databind便可自动引入其它依赖--&gt;&lt;dependency&gt;    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;</code></pre><blockquote><p>简单的例子</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">后端从数据库查询出数据，封装成一个list集合，转成如下格式：<span class="token punctuation">&#123;</span><span class="token string">"result"</span><span class="token operator">:</span><span class="token string">"成功"</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"江西"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"成都"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"湖北"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>provincesList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//provincesList是数据list集合</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>最后后端把该数据直接返回给前端就OK了</code></pre><p>更多详细操作请访问</p><ul><li><a href="https://www.jianshu.com/p/7f8e1c817958">Jackson文章1</a></li><li><a href="https://www.jianshu.com/p/68fce8b23341">Jackson文章2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jackson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX笔记</title>
      <link href="2020/12/22/AJAX%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/22/AJAX%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="原生AJAX"><a href="#原生AJAX" class="headerlink" title="原生AJAX"></a>原生AJAX</h5></blockquote><blockquote><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5></blockquote><ul><li>什么是ajax?<br>Asynchronous javascript and xml，异步的javascript和xml<br>ajax不是一个技术，是多个技术联合的产物。</li><li>异步和同步有什么区别？<br>A线程和B线程，并发执行，谁也不等谁，这就是异步<br>A线程和B线程，在A线程执行的时候B线程需要等待，或者B线程执行的时候<br>A线程需要等待，这就是同步。</li><li>传统的请求和ajax请求有什么区别?<br>传统的请求都是同步的，Ajax请求可以做到异步</li><li>AJAX的经典案例<br>Google的auto_complete(输入框的自动补全)<br>Google的map(谷歌地图)</li><li>ajax解决的主要问题<br>页面的局部刷新问题，使用ajax可以在同一个页面当中并发的发送多个请求，<br>请求与请求之间互不等待，互不干扰，这样可以提高用户的体验。</li></ul><p>总结：浏览器本身这个软件也是支持多线程并发的，其中ajax请求就是一个线程，<br>一个页面可以发送多个ajax请求多个ajax请求对应浏览器多个线程，当整个浏览器采用传统请求的时候，<br>请求只要一发送，整个浏览器窗口锁定无法点击其他按钮，并且浏览器会将窗口当中的数据全部清除，<br>迎接新的页面。</p><blockquote><h5 id="发送ajax步骤"><a href="#发送ajax步骤" class="headerlink" title="发送ajax步骤"></a>发送ajax步骤</h5></blockquote><ul><li><p>1，创建ajax核心对象XMLHttpRequest(浏览器内置的，可以直接使用)<br>ajax发送请求全靠这个对象，使用XMLHttpRequest对象可以在浏览器中单独启动一个新的<br>浏览器线程，通过浏览器线程发送该请求，达到异步效果。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>xhr<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//不支持XMLHttpRequest对象，IE5和IE6是不支持的，它只支持ActiveXObject对象</span><span class="token comment">//IE5和6版本使用的是ActiveXObject这个内置对象发送ajax请求</span>xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>2，注册回调函数<br>程序执行到这里的时候，后面的回调函数并不会执行，只是将回调函数注册给XMLHttpRequest对象<br>等该对象的readyState属性发生变化时，后面的回调函数才会执行。<br>XMLHttpRequest对象在请求和响应的过程中，该对象的readyState状态从0-4：<br>0：请求未初始化<br>1：服务器连接已建立<br>2：请求已接收<br>3：请求处理中<br>4：请求已完成，且响应已就绪<br>xhr.readyState==4</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//xhr对象的readyState的值发生改变的时候，回调一次</span><span class="token comment">//xhr.status属性可以获取到HTTP的响应状态码</span><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span>xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//responseText属性存放服务端响应的数据</span>        <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>3，开启浏览器和服务器之间的通道<br>method：指定请求方式为get还是post<br>url：请求路径<br>async：true/false（true表示支持异步，false表示支持同步）<br>什么时候使用false，当一个页面有多个ajax请求时，例如注册页面<br>必须等待所有表单项验证完毕之后，才允许用户点击注册，此时必须使用同步ajax机制</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//这里只开启通道，不发送请求</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"请求路径?username="</span><span class="token operator">+</span>username<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre></li><li><p>4，发送ajax请求</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里才会发送请求</span></code></pre></li></ul><blockquote><h5 id="发送ajax的get请求和post请求的区别"><a href="#发送ajax的get请求和post请求的区别" class="headerlink" title="发送ajax的get请求和post请求的区别"></a>发送ajax的get请求和post请求的区别</h5></blockquote><ul><li><p>使用ajax向服务端发送数据的时候，如果是get请求则不用设置请求头</p></li><li><p>如果是post请求模拟表单方式提交，则需要设置请求头</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span>"application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded<span class="token punctuation">;</span>charset<span class="token operator">=</span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>如果前端发送的是json字符串给服务器，则设置的请求头应该是：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span></code></pre></li><li><p>post请求提交的数据在send方法中提交，xhr.send(param);<br>get请求提交的数据在url中添加<br><code>http://localhost:8080/os/loginServlet?username=&quot;+username</code><br>但是GET请求在有些浏览器中会缓存，再次请求时，浏览器不会发送请求，<br>而是使用上次请求获取到的结果。解决办法是在url中加入时间戳</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> timeStamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> "http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>os<span class="token operator">/</span>loginServlet<span class="token operator">?</span>_<span class="token operator">=</span><span class="token string">"+timeStamp+"</span><span class="token operator">&amp;</span>username<span class="token operator">=</span>"<span class="token operator">+</span>username<span class="token punctuation">;</span></code></pre></li></ul><blockquote><h5 id="数据格式转换"><a href="#数据格式转换" class="headerlink" title="数据格式转换"></a>数据格式转换</h5></blockquote><ul><li><p>通过JSON传输数据，前端接收后端传过来的字符串，可以使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//将后端传过来的字符串转换成json对象</span><span class="token keyword">var</span> data<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></code></pre></li><li><p>前端发送后端json字符串数据，发送前要将数据转成json字符串</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//将param数据对象转成字符串</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">,</span><span class="token function">stringify</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记</title>
      <link href="2020/12/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h5 id="操作系统笔记"><a href="#操作系统笔记" class="headerlink" title="操作系统笔记"></a>操作系统笔记</h5></blockquote><p>最近马上要期末考试了，操作系统这门课很重要，我个人学的不认真，不太好，<br>但总归学了一点点，记录一下，防止老年痴呆。。。</p><p>所有截图全部来自<a href="https://www.bilibili.com/video/BV1YE411D7nH">B站王道考研</a></p><blockquote><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4></blockquote><ul><li>操作系统概述</li><li>处理器管理</li><li>同步，通信与死锁</li><li>存储管理</li><li>设备管理</li></ul><blockquote><h4 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h4></blockquote><ul><li><h5 id="操作系统的定义"><a href="#操作系统的定义" class="headerlink" title="操作系统的定义"></a>操作系统的定义</h5><p>管理系统资源，控制程序执行，改善人机界面，提供各种服务，并合理组织计算机工作流程<br>和为用户方便有效地使用计算机提供良好运行环境的一种系统软件</p></li><li><h5 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h5><p>并发性，共享性，异步性<br>并发性是指两个或两个以上的活动或事件在同一时间间隔内发生。<br>并行性是指两个或两个以上的活动或事件在同一时刻发生。<br>并行活动一定是并发的，并发活动不一定是并行的，<br>并行性是并发性的特例，而并发性是并行性的扩展</p></li><li><h5 id="操作系统的资源管理技术"><a href="#操作系统的资源管理技术" class="headerlink" title="操作系统的资源管理技术"></a>操作系统的资源管理技术</h5><p>复用，虚拟，抽象</p><ul><li><p>复用又可分为：空分复用，时分复用<br>空分复用，指的是空间上，各进程共享存储空间，例如内存和外存<br>时分复用，指的是时间上，各进程按时间片使用资源，例如CPU</p></li><li><p>复用和虚拟的主要目标是解决物理资源不足的问题，抽象则用于处理系统复杂性<br>重点解决资源易用性，资源抽象软件对内封装实现细节，对外提供应用接口</p></li></ul></li><li><h5 id="多道程序设计的CPU利用率计算公式"><a href="#多道程序设计的CPU利用率计算公式" class="headerlink" title="多道程序设计的CPU利用率计算公式"></a>多道程序设计的CPU利用率计算公式</h5><ul><li><p>CPU利用率=1-p^n</p><p>p是程序平均等待IO操作的时间占其运行时间的比例为p(若80%的时间用于等待IO操作，则p=0.8)<br>n是多道程序设计的道数（CPU利用率与道数及程序等待IO时间之间的关系）</p></li><li><p>CPU利用率=CPU有效时间/CPU总的运行时间<br>CPU总的运行时间=CPU有效时间+CPU空闲等待时间</p></li></ul></li><li><h5 id="多道程序设计的优缺点"><a href="#多道程序设计的优缺点" class="headerlink" title="多道程序设计的优缺点"></a>多道程序设计的优缺点</h5><p>优点：提高CPU，内存和设备的利用率，提高系统的吞吐率，<br>使单位时间内完成的作业数量增加，充分发挥系统的并行性，使设备与设备之间<br>CPU与设备之间均可并行工作</p><p>缺点：延长了作业的周转时间</p></li><li><h5 id="系统调用的定义及作用"><a href="#系统调用的定义及作用" class="headerlink" title="系统调用的定义及作用"></a>系统调用的定义及作用</h5><ul><li>系统调用是操作系统提供给用户的特殊接口，应用程序只有通过系统调用才能<br>请求系统服务并使用系统资源</li><li>系统调用的作用<ul><li>内核可以基于权限和规则对资源访问进行裁决，保证系统的安全性</li><li>系统调用对资源进行抽象，提供一致性接口，避免用户在使用资源时发生错误<br>且使编程效率大大提高</li></ul></li><li>系统调用由访管指令实现，当CPU执行程序中编写的由访管指令实现的系统调用时会<br>产生异常信号，通过陷阱机制，处理器状态由用户态变为内核态，进入操作系统并<br>执行相应的服务例程，以获得操作系统服务，当系统调用执行完毕时，处理器再次<br>切换状态，控制返回至发出系统调用的程序，系统调用是应用程序获得操作系统服务的<br>唯一途径</li></ul></li></ul><blockquote><h4 id="处理器管理"><a href="#处理器管理" class="headerlink" title="处理器管理"></a>处理器管理</h4></blockquote><ul><li><h5 id="特权指令和非特权指令"><a href="#特权指令和非特权指令" class="headerlink" title="特权指令和非特权指令"></a>特权指令和非特权指令</h5><p>特权指令是指仅在内核态下才能使用的指令<br>非特权指令在目态和管态下都能工作，操作系统程序能够执行全部机器指令，<br>应用程序只能使用非特权指令。</p></li><li><h5 id="处理器状态及其转换"><a href="#处理器状态及其转换" class="headerlink" title="处理器状态及其转换"></a>处理器状态及其转换</h5><ul><li>处理器的状态指的是，根据执行程序对资源和机器指令的使用权限将处理器<br>设置成不同状态，至少需划分为两种状态，内核态(管态)和用户态(目态)</li><li>处理器由用户态向内核态转换<ul><li>程序请求操作系统服务，执行系统调用</li><li>程序运行时产生中断事件(如IO操作完成)，运行程序被中断，转向中断处理程序处理</li><li>程序在运行时产生异常事件(如发生程序性中断或目态执行特权指令)，运行程序被打断<br>转向异常处理程序工作</li></ul></li><li>处理器由内核态到用户态<br>计算机通常提供一条称作加载程序状态字的特权指令（Intel x86为iret指令）<br>用来实现从内核态返回用户态，操作系统将控制权转交给应用程序</li></ul></li><li><h5 id="程序状态字的定义和作用"><a href="#程序状态字的定义和作用" class="headerlink" title="程序状态字的定义和作用"></a>程序状态字的定义和作用</h5><ul><li>定义：程序运行时，其状态不断动态地变化，如当前处于目态还是管态，下一条要执行的<br>指令位置是什么等等。操作系统将程序运行时的一组动态信息汇聚在一起，称为程序状态字<br>并存放在处理器的一组特殊寄存器里，以方便系统的控制和管理</li><li>作用：主要作用是实现程序状态的保护和恢复。</li></ul></li><li><h5 id="进程状态和转换"><a href="#进程状态和转换" class="headerlink" title="进程状态和转换"></a>进程状态和转换</h5><ul><li>进程状态有不同的模型<ul><li>三态模型<br>就绪态：进程具备运行条件，等待系统分配处理器以便运行的状态<br>等待态：又称阻塞态，睡眠态，指进程不具备运行条件，正在等待某个事件完成的状态<br>运行态：进程占有处理器正在运行的状态</li><li>五态模型<br>新建态：新建态对应于进程被创建时的状态，尚未进入就绪队列<br>终止态：指进程完成任务到达正常结束点，或出现无法克服的错误而异常终止<br>或被操作系统及有终止权的进程所终止时所处的状态</li><li>七态模型<br>挂起指的是内存资源已经不能满足进程运行的要求时，必须把某些进程挂起，<br>对换到磁盘对换区中，释放它所占有的某些资源，暂时不参与低级调度。<br>挂起分为：挂起等待态，挂起就绪态</li></ul></li></ul></li><li><h5 id="进程控制块PCB的定义"><a href="#进程控制块PCB的定义" class="headerlink" title="进程控制块PCB的定义"></a>进程控制块PCB的定义</h5><p>每个进程有且仅有一个进程控制块，或称进程描述符，它是进程存在的唯一表示，<br>是操作系统用来记录和刻画进程状态及环境信息的数据结构，是进程动态特征的汇集<br>也是操作系统掌握进程的唯一资料结构和管理进程的主要依据。</p><p>进程控制块包括进程执行时的情况，以及进程让出处理器之后所处的状态，断点等信息。</p></li><li><h5 id="处理器调用层次"><a href="#处理器调用层次" class="headerlink" title="处理器调用层次"></a>处理器调用层次</h5><ul><li>处理器调度按照层次可分为三级，高级调度(作业调度)，中级调度和低级调度(进程调度)<br>用户作业从进入系统成为后备作业开始，直到运行结束退出系统为止，均需经历不同<br>级别的调度</li><li>高级调度，按照预定的调度策略挑选若干作业进入内存，即高级调度控制多道程序设计<br>的道数。</li><li>中级调度，根据内存资源情况决定内存中所能容纳的进程数目，并完成外存和内存中<br>的进程对换工作</li><li>低级调度，根据某种原则决定就绪队列中哪个进程/线程获得处理器，并将处理器出让给<br>它使用，低级调度是操作系统最为核心的部分，执行十分频繁，其调度策略的优劣将<br>直接影响系统性能，因为这部分代码要求精心设计并常驻内存。</li></ul></li><li><h5 id="选择调度算法原则"><a href="#选择调度算法原则" class="headerlink" title="选择调度算法原则"></a>选择调度算法原则</h5><ul><li>资源利用率<br>CPU利用率=CPU有效时间/CPU总的运行时间<br>CPU总的运行时间=CPU有效时间+CPU空闲等待时间</li><li>吞吐率<br>单位时间内CPU处理作业的个数</li><li>周转时间<br>用户从向系统提交作业开始到作业完成为止的时间间隔<br>周转时间=作业完成时间-作业到达时间</li><li>带权周转时间<br>带权周转时间=周转时间/进程所需CPU时间</li></ul></li><li><h5 id="作业调度和低级调度算法"><a href="#作业调度和低级调度算法" class="headerlink" title="作业调度和低级调度算法"></a>作业调度和低级调度算法</h5><ul><li>先来先服务算法，FCFS，非剥夺式调度算法<br>不利于短作业而优待了长作业，不利于IO繁忙型作业而有利于CPU繁忙型作业<br>作业调度和进程调度都适合</li><li>最短作业优先算法，SJF，非剥夺式调度算法<br>会导致饥饿现象，长作业长时间得不到服务<br>作业调度和进程调度都适合</li><li>最短剩余时间优先算法，SRTF，剥夺式调度算法<br>只适用于进程调度</li><li>最高响应比优先算法，HRRF，非剥夺式调度算法<br>响应比=1+作业等待时间/作业处理时间<br>作业调度和进程调度都适合</li><li>优先级调度算法<br>进程/线程优先级的确定可采用静态和动态两种方式<br>静态优先级指的是进程在运行过程中优先级不改变，会出现饥饿现象<br>动态优先级指的是进程在运行过程中随占有CPU时间增加，逐渐降低其优先级<br>随进程等待时间增加，逐渐提高其优先级。不会出现饥饿现象</li><li>轮转调度算法(时间片调度)，RR，剥夺式调度算法</li><li>多级反馈队列调度算法，MLFQ</li></ul></li></ul><blockquote><h4 id="同步，通信与死锁"><a href="#同步，通信与死锁" class="headerlink" title="同步，通信与死锁"></a>同步，通信与死锁</h4></blockquote><ul><li><h5 id="Bernstein条件，并发进程的无关性"><a href="#Bernstein条件，并发进程的无关性" class="headerlink" title="Bernstein条件，并发进程的无关性"></a>Bernstein条件，并发进程的无关性</h5><p>无关的并发进程：一个进程不会改变另一个与其并发执行的进程的变量<br>交互的并发进程：一个进程的执行可能会影响其他进程的执行结果</p><p>Bernstein条件就是判断两个并发进程的无关性的，若满足条件，结果为空集，则<br>两个并发进程无关<br>（R(P1)∩W(P2)）∪（R(P2)∩W(P1)）∪（W(P1)∩W(P2)）=∅</p></li><li><h5 id="与时间有关的错误"><a href="#与时间有关的错误" class="headerlink" title="与时间有关的错误"></a>与时间有关的错误</h5><p>如果对两个交互的并发进程不加以控制，则会产生与时间相关的错误：<br>结果不唯一，永远等待</p></li><li><h5 id="进程的交互：竞争与协作"><a href="#进程的交互：竞争与协作" class="headerlink" title="进程的交互：竞争与协作"></a>进程的交互：竞争与协作</h5><p>在多道程序设计系统中，并发进程存在两种基本关系：竞争和协作</p><ul><li><p>竞争关系</p><p>竞争关系又称互斥关系，资源竞争会引发两个控制问题，死锁和饥饿<br>进程互斥是指若干进程因相互争夺独占型资源而产生的竞争制约关系</p></li><li><p>协作关系</p><p>进程同步是指为完成共同任务的并发进程基于某个条件来协调其活动<br>因为需要在某些位置上排定执行的先后次序而等待，传递信号或消息<br>所产生的协作制约关系</p></li></ul></li><li><h5 id="临界区管理"><a href="#临界区管理" class="headerlink" title="临界区管理"></a>临界区管理</h5><p>并发进程中与共享变量有关的程序段称为临界区<br>共享变量所代表的资源称为临界资源，即一次仅能供一个进程使用的资源</p><p>临界区的调度原则：互斥使用，有空让进，忙则等待，有限等待</p></li><li><h5 id="信号量与PV操作"><a href="#信号量与PV操作" class="headerlink" title="信号量与PV操作"></a>信号量与PV操作</h5><p>在操作系统中用信号量表示物理资源的实体<br>PV操作则是一组原语操作，此操作不可分割，若完成则都完成，若失败则都失败<br>PV操作的不可分割性确保执行时的原子性及信号量值的完整性</p><p>信号量按其取值可分为两种：</p><ul><li>二值信号量，仅允许取值为0或1，主要解决进程互斥问题</li><li>一般信号量，又称计数信号量，允许取大于1的整型值，主要解决进程同步问题</li></ul></li><li><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><ul><li><p>死锁的定义</p><p>如果一个进程集合中的每个进程都在等待只能由此集合中的其他进程才能引发的<br>事件，而无期限陷入僵持的局面称为死锁</p></li><li><p>死锁的解决方法</p><ul><li><p>死锁的防止</p><p>死锁产生的条件</p><ol><li>互斥条件：临界资源是独占资源，进程应互斥且排他地使用这些资源</li><li>占有和等待条件：进程在请求资源得不到满足而等待时，不释放<br>已占有的其他资源</li><li>不剥夺条件：又称不可抢占，已获资源只能由进程自愿释放，<br>不允许被其他进程剥夺</li><li>循环等待条件：又称环路条件，存在循环等待链，其中，每个进程<br>都在等待链中等待下一个进程所持有的资源，造成这组进程处于<br>永远等待状态。</li></ol><p>死锁防止的策略：</p><ol><li>破坏互斥条件，使得资源可同时访问而非互斥使用，但很多资源由于其<br>特殊性质决定只能互斥地占有，所以这种做法不可行。</li><li>破坏占有和等待条件：静态分配是指进程必须在执行之前就申请需要的<br>全部资源，且直到所要的资源都得到满足后才开始执行，采用这种策略<br>会严重地降低资源的利用率</li><li>破坏不剥夺条件：剥夺调度能够防止死锁，但只适用于内存和处理器资源</li><li>破坏循环等待条件：采用层次分配策略，将系统中所有的资源排列到不同<br>层次中。<br>一个进程得到某层的一个资源后，只能再申请较高层的资源，<br>当进程释放某层的一个资源时，必须先释放所占有的较高层资源，<br>当进程获得某层的一个资源后，如果想申请同层的另一个资源，必须先<br>释放此层中的已占有资源。</li></ol></li><li><p>死锁的避免</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system.jpg" alt="死锁" loading="lazy"></p></li><li><p>死锁的检测与恢复</p><p>死锁的检测和恢复往往配套使用，当死锁被检测到后，采用各种方法解除系统<br>死锁以恢复到可运行状态的常用方法有资源剥夺法，进程回退法，进程撤销法<br>和系统重启法。</p></li></ul></li></ul></li></ul><blockquote><h4 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h4></blockquote><ul><li><h5 id="地址转换"><a href="#地址转换" class="headerlink" title="地址转换"></a>地址转换</h5><p>程序员编写的代码称为源程序，源程序要被执行需要经过，编译，链接，装入三个过程</p><ul><li>编译，指的是把将源程序编译为计算机可执行的目标程序</li><li>链接，指的是将由多个目标程序转换成一个整体的可重定位代码，此时该程序处在<br>逻辑地址空间。</li><li>装入，指的是把逻辑地址空间中的进程调用到内存中执行，在装入的时候，涉及到</li><li>地址转换的问题，也就是将抽象地址，转换成进程在内存中的实际地址，物理地址。<br>地址转换又称地址重定位，分为三种方式，静态重定位，动态重定位，运行时链接地址重定位</li></ul></li><li><h5 id="连续存储管理"><a href="#连续存储管理" class="headerlink" title="连续存储管理"></a>连续存储管理</h5><ul><li><h6 id="固定分区存储管理"><a href="#固定分区存储管理" class="headerlink" title="固定分区存储管理"></a>固定分区存储管理</h6><p>固定分区存储管理又称静态分区模式，就是将内存分为固定数目的小内存块，每个内存块<br>只装入一个作业，固定分区会出现内部碎片。</p></li><li><h6 id="可变分区存储管理"><a href="#可变分区存储管理" class="headerlink" title="可变分区存储管理"></a>可变分区存储管理</h6><p>可变分区存储管理又称动态分区模式，按照作业的大小分配内存，可变分区会产生外部碎片<br>通过对内存空闲区的管理及分配，则有几种常见的可变分区分配算法：</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system2.jpg" alt="可变分区分配算法" loading="lazy"></p></li></ul></li><li><h5 id="内存不足的存储管理技术-内存空间的扩充"><a href="#内存不足的存储管理技术-内存空间的扩充" class="headerlink" title="内存不足的存储管理技术(内存空间的扩充)"></a>内存不足的存储管理技术(内存空间的扩充)</h5><ul><li>覆盖技术：程序执行过程中程序的不同模块在内存中相互替代，以达到<br>小内存执行大程序的目的。</li><li>移动技术：将内存中空闲区进行合并为一个大的空闲区</li><li>交换技术：将内存中阻塞态的进程对换到外存中的对换区中，以解决内存容量不足的问题</li></ul></li><li><h5 id="非连续存储管理"><a href="#非连续存储管理" class="headerlink" title="非连续存储管理"></a>非连续存储管理</h5><ul><li><h6 id="基本分页存储管理"><a href="#基本分页存储管理" class="headerlink" title="基本分页存储管理"></a>基本分页存储管理</h6><ol><li><p>分页的基本概念</p><ul><li>页面：进程逻辑地址空间分成大小相等的区，每个区称为页面或页，页号从0开始编号</li><li>页框：把内存物理地址空间分成大小相等的区，其大小与页面大小相等，<br>每一个区是一个页框，块号从0开始编号</li><li>逻辑地址：分页存储器的逻辑地址由页号和页内偏移量组成，前者表示地址所在<br>页面的编号，后者表示页内位移，页号的位数决定页面的个数，页内偏移量决定<br>页面的大小。<br>如果有K位表示页内偏移量，则说明该系统中一个页面的大小是2^k个内存单元<br>如果有M位表示页号，则说明在该系统中，一个进程最多允许有2^m个页面</li><li>页表：为了能知道进程的每一个页面在内存中存放的位置，操作系统要为每一个<br>进程建立一张页表，进程的每一页对应一个页表项，每个页表项由页号和块号组成<br>页表记录进程页面和实际存放的内存块之间的对应关系。页表存储在内存中。</li><li>页表项：页表项由页号和块号组成，每个页表项的大小是相等的，所以页表项的<br>页号是不占存储空间的，只要知道要访问的页号，则该页表项的地址为：<br>页表首地址+页号*页表项长度(大小)，而页表项的块号是占存储空间的，块号所占空间<br>大小等于页表项长度，不知道怎么描述，举个例子：如果某个系统内存为4GB，页面大小<br>为4KB，则一个页表项长度：2^32/2^12=2^20个内存块，2^20个内存块可用20位二进制<br>数表示，一个字节可表示8位二进制数，则需要3字节可表示2^20个内存块，所以该系统<br>中一个页表项占3个字节。</li></ul></li><li><p>分页存储管理中逻辑地址转物理地址</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system3.jpg" alt="基本地址变换机构" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system4.jpg" alt="逻辑地址转物理地址" loading="lazy"></p></li><li><p>局部性原理引出的快表机制</p><ul><li>局部性原理分为空间局部性，时间局部性，<br>时间局部性：如果执行了程序中的某条指令，那么不久后这条指令很可能再次<br>执行，如果某个数据被访问过，不久之后该数据很可能再次被访问，其原理是<br>(程序中存在大量的循环)<br>空间局部性：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元<br>也很可能被访问(因为很多数据在内存中都是连续存放的)</li><li>通过设置一个比内存更快的寄存器，将被访问过的页表项集合也就是快表，存放<br>在寄存器中，就能提高访问物理地址速度，如果快表命中，则只需要一次访存。</li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system5.jpg" alt="快表的地址转换" loading="lazy"></p></li><li><p>二级页表</p><ul><li>单级页表的缺点是，页表是存放在内存中的，如果页表过长，则需要分配<br>很多个连续的页框给该页表存放，所以二级页表产生了。</li><li>二级页表就是将原来的单个页表分成两个页表，页目录表和二级页表<br>页目录表的块号指向二级页表首地址，二级页表的块号指向实际物理块号首地址</li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system6.jpg" alt="二级页表地址转换" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system7.jpg" alt="多级页表注意细节" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system8.jpg" alt="二级页表总结" loading="lazy"></p></li></ol></li></ul></li></ul><ul><li><h6 id="基本分段存储管理"><a href="#基本分段存储管理" class="headerlink" title="基本分段存储管理"></a>基本分段存储管理</h6><ol><li>分段式存储管理与分页式存储管理的区别不止在于页面大小，段长，<br>分段式按照程序的模块分段，从而实现信息之间的共享。</li><li>段号的位数决定了每个进程最多可以分为几个段<br>段内地址位数决定了每个段的最大长度是多少</li><li>分段式的地址转换<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system9.jpg" alt="分段式地址转换" loading="lazy"></li></ol><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system10.jpg" alt="分段,分页的对比" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system11.jpg" alt="分段式总结" loading="lazy"></p></li><li><h6 id="基本段页式存储管理"><a href="#基本段页式存储管理" class="headerlink" title="基本段页式存储管理"></a>基本段页式存储管理</h6><ol><li><p>段式存储和页式存储的优缺点</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system12.jpg" alt="分页,分段的优缺点" loading="lazy"></p></li><li><p>段页式管理的逻辑地址结构</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system13.jpg" alt="段页式逻辑地址结构" loading="lazy"></p></li><li><p>段页式的地址转换</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system14.jpg" alt="段页式地址转换" loading="lazy"></p></li></ol><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system15.jpg" alt="段页式总结" loading="lazy"></p></li></ul><ul><li><h5 id="虚拟内存的实现"><a href="#虚拟内存的实现" class="headerlink" title="虚拟内存的实现"></a>虚拟内存的实现</h5><ul><li><h6 id="虚拟内存的定义和特征"><a href="#虚拟内存的定义和特征" class="headerlink" title="虚拟内存的定义和特征"></a>虚拟内存的定义和特征</h6></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system16.jpg" alt="虚拟内存的定义和特征" loading="lazy"></p><ul><li><h6 id="如何实现虚拟内存技术"><a href="#如何实现虚拟内存技术" class="headerlink" title="如何实现虚拟内存技术"></a>如何实现虚拟内存技术</h6></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system17.jpg" alt="如何实现虚拟内存技术" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system18.jpg" alt="虚拟内存总结" loading="lazy"></p></li><li><h5 id="请求分页存储管理"><a href="#请求分页存储管理" class="headerlink" title="请求分页存储管理"></a>请求分页存储管理</h5><ul><li><h6 id="请求分页存储管理的页表机制"><a href="#请求分页存储管理的页表机制" class="headerlink" title="请求分页存储管理的页表机制"></a>请求分页存储管理的页表机制</h6></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system19.jpg" alt="请求分页存储管理的页表机制" loading="lazy"></p><ul><li><h6 id="缺页中断机构"><a href="#缺页中断机构" class="headerlink" title="缺页中断机构"></a>缺页中断机构</h6></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system20.jpg" alt="缺页中断机构" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system21.jpg" alt="缺页中断机构2" loading="lazy"></p><ul><li><h6 id="请求分页和基本分页存储的主要区别"><a href="#请求分页和基本分页存储的主要区别" class="headerlink" title="请求分页和基本分页存储的主要区别"></a>请求分页和基本分页存储的主要区别</h6></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system22.jpg" alt="请求分页和基本分页存储的主要区别" loading="lazy"></p><ul><li><h6 id="请求分页的地址转换"><a href="#请求分页的地址转换" class="headerlink" title="请求分页的地址转换"></a>请求分页的地址转换</h6></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system23.jpg" alt="请求分页的地址转换" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system24.jpg" alt="请求分页的地址转换" loading="lazy"></p><ul><li><h6 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h6><ul><li>概念：在程序执行的过程中，当所访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存，然后继续执行程序，若内存空间不够，由操作系统负责将内存<br>中暂时用不到的信息换出到外存，页面置换算法就是决定应该换出哪个页面。</li></ul></li></ul></li><li><p>算法优劣标准</p><p>使用缺页率来衡量页面置换算法的优劣，缺页率等于缺页中断次数/页面访问的总次数</p><pre><code>注意：缺页会发生中断，但未必发生页面置换，若还有可用的空闲内存块，就不用进行页面置换。</code></pre></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system25.jpg" loading="lazy"></p><ul><li><h5 id="页面分配策略"><a href="#页面分配策略" class="headerlink" title="页面分配策略"></a>页面分配策略</h5><ul><li><h6 id="页面分配，置换策略"><a href="#页面分配，置换策略" class="headerlink" title="页面分配，置换策略"></a>页面分配，置换策略</h6></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system26.jpg" alt="页面分配策略" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system27.jpg" alt="页面分配策略2" loading="lazy"></p><ul><li><h6 id="何时调入页面"><a href="#何时调入页面" class="headerlink" title="何时调入页面"></a>何时调入页面</h6></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system28.jpg" alt="何时调入页面" loading="lazy"></p><ul><li><h6 id="抖动现象"><a href="#抖动现象" class="headerlink" title="抖动现象"></a>抖动现象</h6></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system29.jpg" alt="抖动现象" loading="lazy"></p><ul><li><h6 id="工作集"><a href="#工作集" class="headerlink" title="工作集"></a>工作集</h6></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system30.jpg" alt="工作集" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system31.jpg" alt="页面策略总结" loading="lazy"></p></li></ul><blockquote><h4 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h4></blockquote><ul><li><h5 id="磁盘的结构"><a href="#磁盘的结构" class="headerlink" title="磁盘的结构"></a>磁盘的结构</h5><ul><li><p>磁盘，磁道，扇区的概念</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system32.jpg" alt="磁盘的概念" loading="lazy"></p></li><li><p>磁盘的物理地址</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system33.jpg" alt="磁盘的物理地址" loading="lazy"></p></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system34.jpg" alt="磁盘结构总结" loading="lazy"></p></li><li><h5 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h5><ul><li><p>一次磁盘读写操作需要的时间</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system35.jpg" alt="磁盘的概念" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system36.jpg" alt="磁盘的概念" loading="lazy"></p></li><li><p>磁盘调度算法</p><p>磁盘调度算法减少的是寻道时间。</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system37.jpg" alt="磁盘的概念" loading="lazy"></p></li></ul></li><li><h5 id="磁盘地址结构的设计"><a href="#磁盘地址结构的设计" class="headerlink" title="磁盘地址结构的设计"></a>磁盘地址结构的设计</h5><p>为什么磁盘的物理地址是(柱面号，盘面号，扇区号)，而不是(盘面号，柱面号，扇区号)？</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system38.jpg" alt="磁盘地址结构设计1" loading="lazy"></p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system39.jpg" alt="磁盘地址结构设计2" loading="lazy"></p></li><li><h5 id="减少延迟时间的方法"><a href="#减少延迟时间的方法" class="headerlink" title="减少延迟时间的方法"></a>减少延迟时间的方法</h5><ul><li>交替编号<br>交替编号指的是让逻辑上相邻的扇区在物理上有一定的间隔<br>可以使读取连续的逻辑扇区所需要的延迟时间更小<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system40.jpg" alt="交替编号" loading="lazy"></li><li>错位命名<br>错位命名指的是，两个盘片中的扇区并不一一对应，通过错位的<br>方式可以减少延迟时间<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system41.jpg" alt="错位命名" loading="lazy"></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system42.jpg" alt="减少延迟的方法总结" loading="lazy"></p></li><li><h5 id="磁盘的管理"><a href="#磁盘的管理" class="headerlink" title="磁盘的管理"></a>磁盘的管理</h5><ul><li><p>磁盘初始化<br><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system43.jpg" alt="磁盘初始化" loading="lazy"></p></li><li><p>引导块</p><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system44.jpg" alt="引导块" loading="lazy"></p></li></ul><p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/os/system45.jpg" alt="磁盘管理总结" loading="lazy"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HappyCaptcha快速生成站点验证码</title>
      <link href="2020/12/17/HappyCaptcha%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%AB%99%E7%82%B9%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>2020/12/17/HappyCaptcha%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%AB%99%E7%82%B9%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>HappyCaptcha工具</p><p>Happy Captcha是一款易于使用的Java验证码软件包，旨在花最短的时间，最少的代码量，实现Web站点的验证码功能<br><a href="https://www.ramostear.com/blog/2020/05/17/3yxqwse4.html">点击进入官网</a></p></blockquote><blockquote><p>常规网站验证码实现<br><a href="https://www.php.cn/java/guide/459620.html">进入教程</a></p></blockquote><blockquote><h4 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h4><p>1，导入maven依赖包</p></blockquote><pre class="language-text" data-language="text"><code class="language-text">&lt;dependency&gt;  &lt;groupId&gt;com.ramostear&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;Happy-Captcha&lt;&#x2F;artifactId&gt;  &lt;version&gt;1.0.1&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><blockquote><p>2，生成验证码图片</p></blockquote><pre class="language-text" data-language="text"><code class="language-text">HappyCaptcha.require(request,response).build().finish();</code></pre><blockquote><p>3，HappyCaptcha内置了对用户输入的验证码校验功能</p></blockquote><pre class="language-none"><code class="language-none">boolean flag &#x3D; HappyCaptcha.verification(request,code,true);if(flag)&#123;   &#x2F;&#x2F;Other operations...&#125;如果在校验过程中需要忽略字母大小写，第三个参数设置为true，如果需要强校验，则设置为false。</code></pre><blockquote><p>实例</p></blockquote><p>HTML</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/OneForAll/image<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>看不清点击刷新<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkCode<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>ImageServlet</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/image"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HappyCaptcha</span><span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>UserServlet校验用户输入的验证码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doLogin</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> code <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//验证码校验</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token class-name">HappyCaptcha</span><span class="token punctuation">.</span><span class="token function">verification</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">&amp;&amp;</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginSuccess"</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"用户登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/OneForAll/home.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//删除session中的验证码</span>        <span class="token class-name">HappyCaptcha</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginError"</span><span class="token punctuation">,</span><span class="token string">"登陆失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HappyCaptcha </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP笔记</title>
      <link href="2020/12/07/JSP%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/07/JSP%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="记录下JSP学习内容，以免老年痴呆"><a href="#记录下JSP学习内容，以免老年痴呆" class="headerlink" title="记录下JSP学习内容，以免老年痴呆"></a>记录下JSP学习内容，以免老年痴呆</h4></blockquote><blockquote><h4 id="JSP的执行原理"><a href="#JSP的执行原理" class="headerlink" title="JSP的执行原理"></a>JSP的执行原理</h4></blockquote><ul><li>浏览器访问的路径虽然是以.jsp结尾，访问的是某个jsp文件，其实底层执行的是jsp对应的java程序<br>  Tomcat服务器负责将.jsp文件翻译生成.java源程序，并将这个源程序编译生成.class字节码文件，访问.jsp,其实底层还是执行了.class文件中的程序</li><li>Tomcat内置了一个jsp翻译引擎，专门负责jsp翻译文件，编译java源文件</li><li>index.jsp文件被翻译成index_jsp.java文件，编译生成index_jsp.class源文件<br>  index_jsp这个类继承HttpJspBase,而HttpJspBase继承了HttpServlet</li><li>Tomcat目录下的work文件就是存放jsp转化成的.java文件</li><li>JSP文件后缀，默认是.jsp，JSP后缀可以通过修改CATALINA_HOME/conf/web.xml中修改</li><li>jsp就是servlet，只不过职责不同，jsp的强项是做页面展示</li><li>在jsp文件中编写的所有html，css,JavaScript，对jsp来说，只不过是普通的字符串<br>  翻译成out.write(“翻译成这里”);</li></ul><blockquote><h4 id="jsp文件第一次访问的时候为什么这么慢？"><a href="#jsp文件第一次访问的时候为什么这么慢？" class="headerlink" title="jsp文件第一次访问的时候为什么这么慢？"></a>jsp文件第一次访问的时候为什么这么慢？</h4></blockquote><ul><li>启动jsp引擎，需要一个翻译的过程，需要一个编译的过程，需要servlet对象的创建过程<br>init方法调用，service方法调用</li><li>修改jsp文件不需要部署重启Tomcat文件<br>第二次访问jsp文件，底层直接调用service方法</li><li>jsp也是单实例多线程环境下运行的一个servlet对象</li></ul><blockquote><h4 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h4><p>1，jsp注释<br>2，jsp的小脚本<br>3，jsp的声明语法格式<br>4，jsp的九大内置对象<br>5，jsp表达式<br>6，jsp的指令<br>7，jsp的动作</p></blockquote><p>1，jsp注释</p><pre class="language-none"><code class="language-none">&lt;%-- jsp专业注释，使用这种注释方式，不会被翻译到java源文件中 --%&gt;</code></pre><p>2，jsp的小脚本<br>&lt;% 在这里编写jsp脚本语句 %&gt;</p><ul><li>小脚本中的java语句被翻译到servlet的“service方法”中，所以小脚本内必须编写java语句，java语句以分号结尾</li><li>&lt;%%&gt;中的Java代码是在service方法中，service方法中不能定义实例变量，方法，静态语句块</li></ul><p>所谓的jsp规范，就是sun制定好的一些翻译规则，按照翻译规则进行翻译，生成对应的java源程序，不同的web服务器翻译的结果是完全相同的，因为这些服务器翻译的时候，都遵守了jsp翻译规范</p><p>3，jsp的声明语法格式<br>&lt;%! 这里的Java语句是写在service方法之外的，可以写实例变量，静态变量，方法，静态语句块，构造函数，不能写Java语句，除非是变量声明 %&gt;<br>4，jsp的九大内置对象</p><ul><li><p>什么是内置对象啊<br>可以直接在jsp文件中拿来使用的对象引用</p></li><li><p>九大内置对象有哪些？</p><pre class="language-none"><code class="language-none">内置对象名称对应servlet类名PageContext         javax.servlet.jsp.PageContex        页面范围request             javax.servlet.http.HttpServletRequest   请求范围session             javax.servlet.http.HttpSession          会话范围application         javax.servlet.ServletContext            应用范围out                 javax.servlet.jsp.JspWriter(与PrintWriter类似)response            javax.servlet.http.HttpServletResponseconfig              javax.servlet.ServletConfigexception           java.lang.Throwablepage                java.lang.Object(page&#x3D;this,就是指向本身)</code></pre></li><li><p>以上内置对象只能在service方法中“直接”使用，在其他方法中无法“直接”使用，可以间接使用</p></li><li><p>四个作用域对象/范围对象<br>pageContext:在同一个jsp页面中共享数据，不能跨jsp页面<br>request:在同一个请求中共享数据<br>session:在同一个会话中共享数据<br>application:所有用户共享的数据可以放到应用范围</p></li></ul><p>5，jsp表达式<br>登录成功，欢迎&lt;%=username%&gt;回来，这种格式就是jsp表达式<br>6，jsp的指令</p><ul><li><p>指令的作用是指导jsp的翻译引擎如何翻译jsp代码</p></li><li><p>jsp中共三个指令：<br>page          页面指令<br>include       包含指令<br>taglib        标签库指令</p></li><li><p>指令的语法格式：&lt;%@指令名 属性名=属性值 属性名=属性值%&gt;</p></li><li><p>关于jsp中page指令，page指令中常用的属性</p><ul><li><p>contentType         设置JSP的响应内容类型，同时在响应的内容类型后面也可以指定响应的字符编码方式<br>&lt;%@page contentType=”text/html;charset=utf-8”%&gt;<br>和&lt;%@page contentType=”text/html” pageEncoding=”UTF-8”%&gt;一样</p></li><li><p>pageEncoding        设置jsp响应时的字符编码方式</p></li><li><p>import              组织导入，导java类</p></li><li><p>session             设置当前jsp页面中是否可以直接使用session内置对象</p><ul><li>session=”true”，表示在当前jsp中可以直接使用内置对象session，程序在执行的时候获取当前session会话对象，若获取不到则新建session对象</li><li>session=“false”,表示在当前jsp中不可以直接使用内置对象session,有时候并不想新建session,只是想获取当前session,就可以使用session=”false”，若想用session，可以自己创建一个<br>HttpSession session = request.getSession(false),获取当前session,获取不到返回null<br>若session属性不写，则默认session=”true”</li></ul></li><li><p>errorPage          错误页面，当程序出错时，跳转到指定的错误页面，跳转使用转发技术，</p></li></ul><pre class="language-none"><code class="language-none">errorPage&#x3D;&quot;&#x2F;index4.jsp&quot;,路径不包括项目名</code></pre><ul><li><p>isErrorPage         是否是错误页面，如果为true，表示当前页面为错误页面，可以使用exception对象，exception引用指向了抛出的异常</p></li><li><p>isELIgnored         是否忽略EL表达式</p></li></ul></li><li><p>include指令<br>&lt;%@include file=””%&gt;， 导入其他jsp文件内容，include指令只有一个file属性，一个jsp文件可以使用多个include指令，include指令是静态联编，即两个文件组成一份java源代码</p></li></ul><p>7，jsp的动作</p><ul><li><p>语法格式：</p><pre class="language-none"><code class="language-none">&lt;jsp:动作名 属性名&#x3D;属性值 属性名&#x3D;属性值&gt;&lt;&#x2F;jsp:动作名&gt;</code></pre></li><li><p>转发动作，达到页面转发技术效果</p><pre class="language-none"><code class="language-none">&lt;jsp:forward page&#x3D;&quot;index2.jsp&quot;&gt;&lt;&#x2F;jsp:forward&gt;</code></pre></li><li><p>include动作,动态联编</p><pre class="language-none"><code class="language-none">&lt;jsp:include page&#x3D;&quot;&#x2F;index2.jsp&quot;&gt;&lt;&#x2F;jsp:include&gt;</code></pre><p>与静态联编不同的是，动态联编是生成两个java文件，两个servlet对象，所以两个文件可以存在同名变量</p></li></ul><blockquote><h4 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h4></blockquote><ul><li><p>在EL表达式中，jsp四大域对象都有相应的别名<br>application         applicationScope<br>session             sessionScope<br>request             requestScope<br>pageContext         pageScope</p></li><li><p>EL表达式的作用：将作用域中的数据写到响应体中，即输出用的</p></li><li><p>使用EL表达式的语法格式：${作用域.关键字}</p></li><li><p>输出高级对象中的数据：<br>${作用域.user.name}，前提，user类中一定要提供get，set方法</p></li><li><p>简化版EL表达式：<br>${作用域.关键字}中的作用域可以省略，EL表达式会自己去域对象中挨个找数据<br>查找顺序是从小到大的范围，先从pageScope中找，最后到applicationContext中查找</p></li><li><p>EL表达式中除了以上四种内置对象，还有以下内置对象</p><ul><li><p>param<br>使用：${param.请求参数名}<br>作用：读取请求协议包参数内容，即读取表单数据<br>代替：String value = request.getParameter(“请求参数名”);<br>out.write(value);</p></li><li><p>paramValues<br>使用：${paramValues.请求参数名}<br>作用：读取请求协议包中关联多个值的请求参数，将参数内容保存到数组<br>代替：String[] array = request.getParameterValues(“hobby”);</p><p>表单提交的数据会被自动封装到request对象中，request对象中有map集合存储这些数据<br>map集合的key是name，字符串类型，value是一个字符串类型的一维数组<br>通过map集合的key获取value，适合取复选框数据<br>例如：${paramValues.hobby[0]}  //取爱好数组中第一个值</p></li><li><p>initParam<br>使用：${initParam.共享数据名}<br>代替：String value = application.getInitParameter(“driver”);<br>out.write(value);</p></li></ul></li></ul><blockquote><h4 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h4><p>标签的使用</p></blockquote><ul><li><p>&lt;c:set&gt;:<br>作用：在jsp文件上设置域对象中共享的数据<br>使用：&lt;c:set scope=”session” var=”key” value=”10”/&gt;<br>代替：&lt;% session.setAttribute(“key”,”10”); %&gt;</p><ul><li>属性：scope:指定操作的域对象别名</li><li>var :指定域对象中的key</li><li>value:设置value值</li></ul></li><li><p>&lt;c:if&gt;:<br>作用：在jsp文件中控制哪些内容可以写到响应体中<br>使用：</p><pre class="language-none"><code class="language-none">&lt;%&lt;c:if test&#x3D;&quot;通过EL表达式进行判断&quot;&gt;内容&lt;&#x2F;c:if&gt;%&gt;</code></pre></li><li><p>&lt;c:choose&gt;:<br>作用：在jsp文件上实现多分支选择判断，决定哪一个内容能写到响应体<br>使用：</p><pre class="language-none"><code class="language-none">&lt;c:choose&gt;&lt;c:when test&#x3D;&quot;EL表达式进行判断&quot;&gt;内容1&lt;&#x2F;c:when&gt;&lt;c:when test&#x3D;&quot;EL表达式进行判断&quot;&gt;内容2&lt;&#x2F;c:when&gt;&lt;c:otherwise&gt;内容3&lt;&#x2F;c:otherwise&gt;&lt;&#x2F;c:choose&gt;</code></pre></li><li><p>&lt;c:foreach&gt;<br>作用：循环遍历</p><ul><li><p>第一种使用方式：</p><pre class="language-none"><code class="language-none">&lt;c:foreach var&#x3D;&quot;声明循环变量名称&quot; begin&#x3D;&quot;初始化循环变量&quot; end&#x3D;&quot;循环变量可以接收的最大值&quot; step&#x3D;&quot;循环变量的递增值或递减值&quot;&gt;在jstl标签中，var变量被自动写入到pageContext中，所以可以直接用EL表达式取值，$&#123;pageScope.i&#125;或者$&#123;i&#125;&lt;&#x2F;c:foreach&gt;</code></pre></li><li><p>第二种使用方式List集合：</p><pre class="language-none"><code class="language-none">&lt;c:foreach items&#x3D;&quot;通过EL表达式获得的域对象集合&quot; var&#x3D;&quot;声明循环变量&quot;&gt;取值：$&#123;循环变量.对象属性名&#125;&lt;&#x2F;c:foreach&gt;</code></pre></li><li><p>第三种使用方式Map集合：</p><pre class="language-none"><code class="language-none">&lt;c:foreach items&#x3D;&quot;通过EL表达式获得的域对象集合&quot; var&#x3D;&quot;声明循环变量&quot;&gt;var变量代表Map集合的键值对，EntrySet$&#123;var.key&#125;,代表map集合一个键值对的key值$&#123;var.value.属性名&#125;   代表map集合一个键值对的value值的属性值&lt;&#x2F;c:foreach&gt;</code></pre></li></ul></li></ul><blockquote><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4></blockquote><ul><li><p>作用：<br>一般用于完成通用的操作，如：登录验证，统一编码获取，敏感字符过滤</p></li><li><p>执行流程，<br>请求在访问服务器上的资源时，会先执行过滤器的dofilter方法，在请求返回时也要经过过滤器</p><pre class="language-none"><code class="language-none">  public void doFilter(ServletRequest servletRequest,  ServletResponse servletResponse, FilterChain filterChain)  &#123;  System.out.println(&quot;过滤器在此执行&quot;);  servletResponse.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);  &#x2F;&#x2F;doFilter方法之前，对request进行操作  filterChain.doFilter(servletRequest,servletResponse);  &#x2F;&#x2F;doFilter方法之后，对response进行操作  &#x2F;&#x2F;也就是说，一个访问的请求和访问都会经过doFilter方法，doFilter方法执行完，  &#x2F;&#x2F;代表一次访问结束&#125;</code></pre></li><li><p>生命周期：</p><ul><li>init方法:服务器启动时，tomcat会创建filter对象，并调用init方法，init方法里一般会加载资源</li><li>doFilter方法:每次请求都会被调用</li><li>destroy方法：服务器关闭时，filter对象被销毁，如果服务器是正常关闭，则会执行destroy方法，destroy方法一般会释放资源</li></ul></li><li><p>过滤器配置：</p><ul><li>拦截路径配置<br>1，具体资源路径：/index.jsp     只有访问index.jsp资源时，过滤器才会被执行<br>2，拦截目录：/user/*            访问/user下所有资源时，过滤器都会被执行<br>3，后缀名拦截：<code>*.jsp</code>         访问所有后缀名为jsp资源时，过滤器都会被执行<br>4，<code>/*</code>                         访问项目所有资源都会执行拦截器</li><li>拦截方式配置：资源被访问的方式：普通的请求或者服务器内部servlet之间的转发<ul><li>注解配置：<br>@WebFiler中设置dispatcherTypes属性<br>REQUEST，默认值，浏览器直接请求资源<br>FORWARD，转发访问资源<br>INCLUDE，包含访问资源<br>ERROR，错误跳转资源<br>ASYNC，异步访问资源</li><li>web.xml:<br>filter-mapping标签中有dispatcher标签</li></ul></li></ul></li><li><p>过滤器链(配置多个过滤器)</p><ul><li>执行顺序：如果有两个过滤器，过滤器1，过滤器2<ul><li>1，请求时，执行过滤器1，再执行过滤器2</li><li>2，执行资源文件</li><li>3，响应时，执行过滤器2，再执行过滤器1</li></ul></li><li>过滤器先后顺序问题：什么时候让过滤器1先执行，什么时候让过滤器2先执行呢？<ul><li>1，注解配置：按照字符串比较规则比较，值小的先执行<br>如：AFilter和BFilter两个过滤器类名，则AFilter先执行</li><li>2，web.xml配置：<filter-mapping>谁先定义，谁先执行</li></ul></li></ul></li></ul><blockquote><h4 id="监听器Listener"><a href="#监听器Listener" class="headerlink" title="监听器Listener"></a>监听器Listener</h4></blockquote><p>概念：web三大组件之一<br>事件监听机制：</p><ul><li>事件：一件事情</li><li>事件源：事件发生的地方</li><li>监听器：一个对象</li><li>注册监听：将事件源，事件，监听器绑定在一起，当事件源上发生某个事件后，执行监听器代码</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet笔记</title>
      <link href="2020/11/29/Servlet%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/29/Servlet%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h4></blockquote><ul><li>Servlet是JavaEE13个规范中的一个,servlet接口是servlet规范中的核心接口。</li><li>Tomcat是负责管理和调用我们编写的servlet实现类，即是Servlet容器。</li><li>Tomcat或其他容器和我们编写的项目同时遵循Servlet规范，使得Servlet容器和我们项目能解耦合。<br>今天在Tomcat运行的项目，明天也可以在jboss上运行，我们编写的项目遵循的servlet规范，<br>也就是实现了servlet接口。</li></ul><blockquote><h4 id="Servlet对象的生命周期"><a href="#Servlet对象的生命周期" class="headerlink" title="Servlet对象的生命周期"></a>Servlet对象的生命周期</h4></blockquote><ul><li><p>Tomcat启动时会读取webapps下的各个项目中的web.xml文件，将url-pattern的映射路径和对应的Servlet<br>完整路径名存储到Map集合中，Map&lt;String url-pattern映射路径，String Servlet完整路径名&gt;</p></li><li><p>Servlet对象被创建成功后，这个Servlet对象和对应的url-pattern被web容器存储到Map集合中<br>Map&lt;String url-pattern,Servlet servlet对象&gt;</p></li><li><p>用户在地址栏输入url:<code>http://localhost:8080/JavaWeb/jdbc</code></p></li><li><p>web容器截取请求路径：/JavaWeb/jdbc，根据请求路径在Map集合中查找Servlet对象</p><ul><li>若找到直接调用Servlet对象的service方法提供服务。</li><li>若没找到，根据路径在Map集合中找到servlet完整路径名，通过反射机制调用Servlet类的无参构造方法<br>完成Servlet对象的实例化，创建Servlet对象成功后，这个Servlet对象被存储到Map集合中</li></ul></li><li><p>创建Servlet对象成功后，web容器调用servlet对象的init方法完成初始化操作，<br>紧接着调用service方法提供服务</p></li><li><p>web容器关闭时/webapp重新部署时/该Servlet对象长时间没有用户再次访问时，web容器会将该Servlet对象销毁，在销毁该对象之前，web容器会调用servlet对象的destroy方法，完成销毁的准备。</p></li></ul><p>总结：</p><ul><li><p>Servlet对象的构造方法，init,destroy方法只执行一次，service方法是，用户每请求一次，就执行一次。</p></li><li><p>Init方法调用时，Servlet对象已经被创建，destroy方法调用时，Servlet对象还没有被销毁，即将被销毁</p></li><li><p>Servlet对象是在单实例多线程的环境下运行的，那么Servlet对象中若有实例变量，<br>并且实例变量涉及到修改操作，那么这个Servlet对象一定存在线程安全问题，<br>不建议在Servlet对象中使用实例变量，最好用局部变量</p></li><li><p>默认情况下，Servlet对象在web服务器启动阶段不会被实例化，若想在服务器启动阶段就创建Servlet对象，需要在web.xml的该servlet对象标签中配置load-on-startup标签    标签中值是加载顺序，<br>最小为0,0代表最先被创建，配置好web.xml后，服务器启动阶段会直接调用无参构造和init方法</p></li><li><p>Servlet是伪单例模式，单实例多线程，真单例模式构造方法私有化</p></li></ul><blockquote><h4 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h4></blockquote><ul><li><p>ServletConfig是一个servlet规范中的一个接口</p></li><li><p>tomcat服务器实现了servlet规范，tomcat服务器专门写了一个servletConfig接口的实现类,类名是：StandardWrapperFacade</p></li><li><p>servletConfig是一个servlet对象的配置信息对象，servletConfig对象中封装了一个servlet对象的配置信息，servlet配置信息就是web.xml，一个servlet对象对应一个servletConfig对象</p></li><li><p>如何在service方法中拿到init方法中的config参数对象？定义一个私密的全局变量即可，<br>如果子类也想访问config对象，将config全局变量设置给servlet中的getServletConfig方法中返回</p></li><li><p>servletConfig的常用方法</p><ul><li><p>getInitParameter(“userName”)方法可以获取web.xml中servlet中配置的<br>init-param标签内数据，init-param标签中的配置被封装到了servletConfig对象中</p></li><li><p>servletConfig.getInitParameterNames();<br>获取所有name的值，返回一个集合，通过遍历获取值</p><pre class="language-none"><code class="language-none">Enumeration&lt;String&gt; names &#x3D; servletConfig.getInitParameterNames();while (names.hasMoreElements())&#123;String name &#x3D; names.nextElement();String value &#x3D; servletConfig.getInitParameter(name);System.out.println(name+&quot;&#x3D;&quot;+value);&#125;</code></pre></li><li><p>getServletName(),获取xml文件中sevlet-name的值</p></li><li><p> getServletContext(),获取servletContext对象</p></li></ul></li></ul><blockquote><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4></blockquote><ul><li>该接口也是servlet规范中的一个接口，tomcat实现该接口的实现类名是：ApplicationContextFacade<br>程序员只需要面向接口调用就行，因为多态自动调用tomcat为我们实现的方法.</li><li>servlet，servletConfig,servletContext之间的关系<br>一个servlet对象对应一个servletConfig对象，多个对象对应多个servletConfig对象<br>多个servlet对象共享一个servletContext对象</li><li>servletContext到底是什么，什么时候被创建？<br>servletContext被翻译为：Servlet上下文，是所有servlet对象的环境，<br>多个servlet对象之间如果想共享数据，可以使用servletContext，一般放到servletContext对象中的数据不建议涉及修改操作，因为servletContext是多线程共享的变量，修改的时候会存在线程安全问题<br>一个webapp只有一个web.xml文件，web.xml文件在服务器启动阶段被解析<br>一个webapp只有一个ServletContext对象，servletContext在服务器启动阶段被实例化<br>servletContext在服务器关闭时被销毁，servletContext对应的是web.xml文件，是web.xml文件的代表</li><li>servletContext中的常用方法：<ul><li>getRealPath(),获取文件绝对路径，以/开头表示文件根目录，context.getRealPath(“/index.html”);</li><li>getInitParameter(“name”),getInitParameterNames(),获取web.xml中配置的Context-param信息</li><li>setAttrobute(),getAttribute(),removeAttribute()方法，设置数据，用于多个servlet对象间共享数据</li></ul></li></ul><blockquote><h4 id="设置欢迎页面和error页面"><a href="#设置欢迎页面和error页面" class="headerlink" title="设置欢迎页面和error页面"></a>设置欢迎页面和error页面</h4></blockquote><pre class="language-none"><code class="language-none">&lt;welcome-file-list&gt;        &lt;welcome-file&gt;index.html&lt;&#x2F;welcome-file&gt;&lt;&#x2F;welcome-file-list&gt;</code></pre><ul><li>欢迎页面可以在浏览器中直接访问项目名，而不需要指定文件名，欢迎页面可以有多个</li><li>欢迎页面的路径不需要以/开头，可以是静态资源.html，也可以是servlet，路径就是url-pattern去掉/</li><li>上面的例子中，index.html必须在webapp的根目录下，如果在根目录下的html文件夹中，路径应该为：html/index.html</li><li>欢迎页面有全局配置和局部配置，全局配置在tomcat根目录下的conf配置文件中的web.xml，这是全局的配置文件，局部配置就是我们项目中的web.xml文件，<br>局部配置优先级高于全局配置的优先级，先执行局部，没有就执行全局</li></ul><pre class="language-none"><code class="language-none">&lt;error-page&gt;        &lt;error-code&gt;404&lt;&#x2F;error-code&gt;        &lt;location&gt;&#x2F;error.html&lt;&#x2F;location&gt;&lt;&#x2F;error-page&gt;</code></pre><ul><li>404，not found,资源未找到，请求路径写错了</li><li>500，server inner error，服务器内部错误，一般是java程序出现异常</li><li>404和500是http协议状态码，以上都是w3c制定的，正常响应的http协议状态码：200<br>在web.xml中设置错误页面，如果出错会跳转到错误页面</li></ul><blockquote><h4 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h4></blockquote><ul><li>什么是http协议？<br>超文本传输协议，浏览器和服务器之间的一种通讯协议，由W3c负责制定<br>本质上就是数据传输格式提前制定好了，浏览器和服务器都必须按照这种数据格式进行接收和发送</li><li>http协议包括几部分？<br>请求协议：从浏览器发送到服务器时采用的数据传送格式<br>响应协议：从服务器发送到浏览器时采用的数据传送格式</li><li>请求协议<ul><li>请求行，请求行包括：请求方式，URL，协议版本号</li><li>请求头</li><li>空白行：专门用来分离请求头和请求体</li><li>请求体</li></ul></li><li>响应协议<ul><li>响应行：响应行包括：协议版本号，状态码，状态描述信息</li><li>响应头</li><li>空白行：专门用来分离响应头和响应体的</li><li>响应体</li></ul></li><li>get和post请求方式的区别<ul><li>post请求只应用于表单提交，并且method方法为post时，提交方式才是post,其余方式都是get请求</li><li>post请求提交的数据存放在请求体中，地址栏中不会显示数据，get请求提交的数据存放在请求行中，地址栏上会显示数据，不安全</li><li>post请求方式不缓存数据，get请求方式的结果会被浏览器放进缓存中<br>有时候使用get请求方式的时候，不需要缓存，可以在请求后加上毫秒值，Window.location=xxx+’?’+new Date().getTime();</li></ul></li><li>怎么知道前端请求的方式是get还是post？<br>HTTP的请求协议全部信息被自动封装到HttpServletRequest对象中，在该类中有一个getMethod()方法，可以返回请求行中的请求方式，HttpServletRequest接口继承了ServletRequest接口</li><li>为什么需要知道前端发过来的请求是get和post呢？<br>因为后端要根据前端的请求方式的不同去处理数据，有些我们实现servlet的程序必须要求请求方式是post,不是我们就要抛异常，从而保证前端的请求方式和后端需要的请求方式一致</li></ul><blockquote><h4 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h4></blockquote><ul><li><p>HttpServletRequest是一个接口，继承于ServletRequest</p></li><li><p>HttpServletRequest接口的实现类由Web容器负责实现，我们只需要面向接口编程，直接调用接口中的方法即可</p></li><li><p>HttpServletRequest封装了http请求协议的全部数据</p></li><li><p>HttpServletRequest对象表示一次请求，一次请求对应一个request对象</p></li><li><p>HttpServletRequest常用的方法</p><ul><li><p>表单提交的数据会被自动封装到request对象中，request对象中有map集合存储这些数据<br>map集合的key是name，字符串类型，value是一个字符串类型的一维数组</p></li><li><p>表单的数据获取方法：</p><ul><li> String getParameter(String name)  //通过key获取value这个一维数组中的首元素，通常情况下这个一维数组中只有一个元素，所以这个方法使用的最多</li><li> Map getParameterMap()             //获取整个map集合</li><li> Enumeration getParameterNames()   //获取map集合的所有的key值</li><li> String[] getParameterValues(String name)  //通过map集合的key获取value，适合取复选框数据</li><li>void setAttribute(String name,Object o)   //向request范围中存储数据</li><li>Object getAttribute(String name)          //向request范围中获得数据</li><li>void removeAttribute(String name)         //向request范围中删除数据</li><li>void setCharacterEncoding(String env)</li><li>String getContextPath()       //获取上下文路径[webapp的根路径]，/项目名</li><li>String getMethod()            //获取浏览器请求方式</li><li>String getRequestURI()        //获取URI，URI和URL的区别是，URI不包括请求协议，地址，端口号</li><li>StringBuffer getRequestURL()  //获取请求路径</li><li>String getServletPath()       //web.xml中配置的url-pattern</li><li>String getRemoteAddr()        //获取客户端的请求Ip地址</li><li>Cookie[] getCookies()         //获取所有cookie</li><li>HttpSession getSession()<br>HttpSession session = request.getSession(); //获取session,找不到session,则新建一个session<br>HttpSession session = request.getSession(true); //获取session,找不到session,则新建一个session<br>HttpSession session1 = request.getSession(false);//获取session,找不到session,则返回null</li></ul></li></ul></li><li><p>HttpServletRequest的范围：一次请求代表一个request对象，request只能在同一次请求中传递数据，即只能在一个servlet中访问数据。</p></li><li><p>如何在其他servlet中也能获取到request对象中的数据呢？<br>我们需要将另一个Servlet执行和本次servlet执行放在同一个请求中，必须使用转发技术：forward(转发)，即，AServlet中request对象设置数据，Bservlet要想访问到数据要通过转发技术。<br>转发步骤：1，获取请求转发器对象，2，调用请求转发器的forward方法即可完成转发。<br>RequestDispatcher getRequestDispatcher(String path)   //路径填其他servlet的url–pattern<br>request.getRequestDispatcher(“/request2”).forward(request,response);</p></li></ul><blockquote><h4 id="关于项目中出现的乱码问题"><a href="#关于项目中出现的乱码问题" class="headerlink" title="关于项目中出现的乱码问题"></a>关于项目中出现的乱码问题</h4></blockquote><ul><li><p>乱码经常出现在什么位置<br>数据”传递”过程中的乱码<br>数据”展示”过程中的乱码<br>数据”保存”过程中的乱码</p></li><li><p>数据保存过程中的乱码？<br>最终保存到数据库表中的时候，数据出现乱码，导致数据保存过程中的乱码包括以下两个情况<br>第一种情况，在保存之前，数据本身就是乱码，保存到数据库表的时候一定是乱码<br>第二种情况，在保存之前，数据不是乱码，但是由于本身数据库不支持简体中文，保存之后出现乱码</p></li><li><p>数据展示过程中的乱码？<br>最终显示到网页上的数据出现乱码</p><ul><li><p>经过执行java程序之后，java程序负责向浏览器响应的时候，中文出现乱码，怎么解决？<br>设置响应的内容类型，以及对应的字符编码方式：<br>response。setContentType(“text/html;charset=UTF-8”);</p></li><li><p>没有经过执行java程序，直接访问html页面，出现中文乱码，怎么解决？<br>设置html页面中标签<meta content="text/html;charset=UTF-8"></p></li></ul></li><li><p>数据传递过程中的乱码？<br>将数据从浏览器发送给服务器的时候，服务器收到的数据是乱码，因为浏览器会将用户填写的数据使用ISO-8859-1的编码，服务端接收到数据是ISO-8859-1格式的字符串，解码后才能使用。<br>直接看<a href="https://www.cnblogs.com/xdouby/p/8308915.html">https://www.cnblogs.com/xdouby/p/8308915.html</a><br>解决数据传递过程中的乱码：</p></li><li><p>第一种解决方案：万能公式，既能够解决POST请求乱码，又能解决GET请求乱码<br>先将服务器接收到的数据采用ISO-8859-1的方式解码，回归原始状态<br>再给定一种支持简体中文的编码方式重新编码组装[组装的时候编码方式需要和浏览器的编码方式相同]</p></li><li><p>第二种解决方案：只支持POST请求，因为这种方式只对请求体编码<br>request.setChatacterEncoding(“UTF-8”)，以上代码必须在从request中获取任何数据之前设置有效果</p></li></ul><blockquote><h4 id="Servlet线程安全问题"><a href="#Servlet线程安全问题" class="headerlink" title="Servlet线程安全问题"></a>Servlet线程安全问题</h4></blockquote><ul><li>servlet是单实例，多线程环境下运行的</li><li>什么时候程序存在线程安全问题<br>多线程并发，有共享的数据，共享数据有修改操作</li><li>JVM中哪些数据存在线程安全问题<ul><li>局部变量存在栈中，一个线程一个栈，100个线程100个栈空间，栈空间不共享，所以没有线程安全问题</li><li> 常量不会被修改，所以也不会有线程安全问题</li><li> 所有线程共享一个堆，堆中存放对象，所以实例变量是存在线程安全问题</li><li> 所有线程共享一个方法区，方法区存放静态变量，所以静态变量也存在线程安全问题</li></ul></li><li>线程安全问题，不仅发生在jvm中，也发生在数据库中，例如，多个线程共享同一张表，并且同时去修改表中的数据，那么这些记录就存在安全问题，怎么解决数据库表中数据的线程安全问题？<ul><li>在java程序中使用synchronized关键字，线程排队执行，自然不会在数据库中并发，解决线程安全问题</li><li>行级锁(悲观锁)</li><li>事务隔离级别(串行化)</li><li>乐观锁</li></ul></li><li>怎么解决线程安全问题<ul><li>不使用实例变量，尽量使用局部变量</li><li>若必须使用实例变量，那么我们可以考虑将该对象变成多例对象，一个线程一个java对象，实例变量的内存也不会共享</li><li>若必须使用单例，那只能使用synchronized关键字，线程一旦排队执行，则吞吐量降低，降低用户体验</li></ul></li><li>servlet怎么解决线程安全问题<ul><li>不使用实例变量，尽量使用局部变量</li><li>servlet必须是单例的，所以剩下的方式只能考虑synchronized，线程同步机制</li></ul></li></ul><blockquote><h4 id="关于web系统中资源跳转"><a href="#关于web系统中资源跳转" class="headerlink" title="关于web系统中资源跳转"></a>关于web系统中资源跳转</h4></blockquote><ul><li>跳转包括两种方式<br>转发：forward<br>重定向：redirect</li><li>转发和重定向代码怎么完成？<br>转发：request.getRequestDispatcher(“/request2”).forward(request,response);<br>重定向：response.sendRedirect(request.getContextPath()+”/b”);<br>request.getContextPath()获取上下文路径，/JavaWeb</li><li>转发和重定向的区别<ul><li>相同点，都可以完成资源跳转</li><li>不同点：<ul><li>转发是request对象触发的，重定向是response对象触发的</li><li>转发是一次请求，浏览器地址栏上地址不会发生变化，重定向是两次请求，地址栏上的地址会发生变化，重定向的路径需要加webapp根路径</li><li>转发是项目内部完成资源跳转，重定向可以完成跨app跳转资源</li></ul></li></ul></li><li>跳转的资源可以是，servlet,html,jsp</li><li>重定向原理，response.sendRedirect(“/JavaWeb/b”);<br>程序执行到这，服务器将路径/JavaWeb/b反馈给浏览器，浏览器又自动向服务器发送了一次全新的请求</li><li>什么时候采用转发，什么时候采用重定向(大部分情况下都是用重定向)<ul><li>若想完成跨app跳转，必须采用重定向</li><li>若在上一个资源中(servlet)向request范围中存储了数据，希望在下一个资源中从request范围将数据取出来，必须使用转发</li><li>重定向可以解决浏览器刷新问题，浏览器点刷新，会执行上一次的请求</li></ul></li></ul><blockquote><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4></blockquote><ul><li>Cookie是什么，有什么作用？<br>Cookie可以保存会话状态，但是这个会话状态是保存在客户端上的<br>只要cookie清除，或者cookie失效，这个会话状态就没有了<br>Cookie可以保存在浏览器的缓存中，浏览器关闭Cookie消失<br>Cookie也可以保存在客户端的硬盘文件中，浏览器关闭，cookie还在，除非cookie失效</li><li>cookie实现的功能，常见的有哪些？<br>保留购物车商品的状态在客户端上<br>十天内免登陆</li><li>在java中cookie被当做类来处理，使用new运算符可以创建cookie对象，而且cookie由两部分组成，分别是cookie的name，value，name和value都是字符串类型</li><li>在java程序中怎么创发送Cookie?<br>Cookie cookie = new Cookie(“username”,”zahngsan”);<br>response.addCookie(cookie);</li><li>服务器可以一次向浏览器发送多个cookie，默认情况下，服务器发送cookie给浏览器后，浏览器将cookie保存在浏览器缓存中，只要不关闭浏览器，cookie永远存在，并且有效，当浏览器关闭后，缓存中的cookie被清除</li><li>在浏览器客户端无论是硬盘文件还是缓存中保存的cookie，什么时候会再次发送给服务器？<br>浏览器会不会提交发送这些cookie给服务器，和请求路径有关，请求路径和cookie紧密相连<ul><li>如果请求路径是<code>http://localhost:8080/JavaWeb/request</code>,并且是在这个servlet中保存的cookie，那么只要你访问/JavaWeb/下任何资源，浏览器都会发送cookie，</li><li>如果你请求路径是<code>http://localhost:8080/JavaWeb/text/request</code>,那么cookie默认路径是/JavaWeb/text/，只要访问/text/下任何资源，浏览器都会发cookie,<br>cookie也可以自定义路径，cookie.setPath();cookie.setPath(“/JavaWeb/king”);</li></ul></li><li>cookie默认不能设置中文，要存储中文需要设置编码</li><li>设置cookie的有效期<br>cookie.setMaxAge(60);单位是秒，只要设置了cookie的有效期，cookie则存储在客户端硬盘上，浏览器关闭后，cookie还存在，直到cookie有效期失效，<br>有效期大于0则储存cookie,等于0则cookie立即被删除，小于0cookie不存储</li><li>服务器获取浏览器发送的cookie,request对象的Cookie[] getCookies()方法，如果浏览器没有发cookie，我们得到的cookie数组为空，所以在遍历的时候要先判断一下是否为空<br>Cookie[] cookies = request.getCookies();</li></ul><blockquote><h4 id="servlet路径的总结"><a href="#servlet路径的总结" class="headerlink" title="servlet路径的总结"></a>servlet路径的总结</h4></blockquote><p>路径填写有三种情况：</p><ul><li>加/，并且加项目名的，例如：/JavaWeb/xxx<ul><li>a标签，form表单中的路径</li><li>重定向的路径，response.sendRedirect(request.getContextPath()+”/b”);</li><li> cookie的路径，cookie.setPath(“/JavaWeb/king”)</li></ul></li><li>加/，不加项目名的，例如：/xxx<ul><li>web.xml中的url-pattern映射路径</li><li>ServletContext.getRealPath(“/index.html”)获取资源绝对路径</li><li>请求转发的路径request.getRequestDispatcher(“/request2”).forward(request,response);</li><li>web.xml中配置error页面，<location>/error.html</location></li></ul></li><li>不加/，也不加项目名的，只有web.xml中的欢迎页面的路径是这种情况</li></ul><p>获取各种路径：</p><ul><li>request.getContextPath()                      //获取上下文路径[webapp的根路径]，/项目名</li><li>request.getRequestURI()                       //获取URI，URI和URL的区别是，URI不包括请求协议，地址，端口号</li><li>request.getRequestURL()                       //获取请求路径</li><li>request.getServletPath()                      //web.xml中配置的url-pattern</li><li>ServletContext.getRealPath(“/index.html”)     //获取资源绝对路径</li></ul><blockquote><h4 id="url-pattern的编写方式"><a href="#url-pattern的编写方式" class="headerlink" title="url-pattern的编写方式"></a>url-pattern的编写方式</h4></blockquote><p>url-pattern可以编写多个</p><ul><li><p>精确匹配</p><pre class="language-none"><code class="language-none">&lt;url-pattern&gt;&#x2F;checkCookie&lt;&#x2F;url-pattern&gt;&lt;url-pattern&gt;&#x2F;check&#x2F;checkCookie&lt;&#x2F;url-pattern&gt;</code></pre></li><li><p>扩展匹配</p><pre class="language-none"><code class="language-none">&lt;url-pattern&gt;&#x2F;check&#x2F;*&lt;&#x2F;url-pattern&gt;</code></pre></li><li><p>后缀匹配</p><pre class="language-none"><code class="language-none">&lt;url-pattern&gt;*.do&lt;&#x2F;url-pattern&gt;&lt;url-pattern&gt;*.action&lt;&#x2F;url-pattern&gt;</code></pre></li><li><p>全局匹配</p><pre class="language-none"><code class="language-none">&lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</code></pre></li></ul><blockquote><h4 id="HttpSession"><a href="#HttpSession" class="headerlink" title="HttpSession"></a>HttpSession</h4><p>HttpSession表示会话，是一个会话级别的对象，一次会话对应一个HttpSession对象<br>一次会话包括多个请求，在会话过程中，web服务器一直为当前用户维护着一个会话对象<br>Cookie可以将会话状态保存在客户端，HttpSession可以将会话状态保存在服务器端</p></blockquote><ul><li>session实现原理<br>在浏览器第一次访问服务器的时候，服务创建一个session对象，并且创建一个cookie对象<br>这个cookie对象的name是jsessionid,值是具有唯一性的随机值，将Cookie的值作为key,Session对象作为value,保存在服务器的session列表中，最后将cookie发给浏览器客户端，<br>当浏览器再次访问服务器时，会把该cookie发送给服务器，服务器接收到cookie通过cookie的值<br>找到对应的session对象。所以服务器知道，用户访问一个网站时该用户的每一次请求都属于同一个用户，所以，cookie和session是紧密相连的，当浏览器关闭时，cookie失效，session也会失效</li><li>当浏览器禁用cookie时，则浏览器缓存中不再保存cookie,导致在同一个会话中，无法获取到对应的session对象，所以每一次获取会话对象都是新创建的<br>如果浏览器禁用cookie之后，还想拿到对应的session对象，必须使用URL重写机制，即在地址中以;为间隔加上cookie的name和value</li><li>浏览器关闭后，保存在服务器上的session不会被销毁，因为BS架构基于http协议，http协议是一种无状态协议<br>什么是无状态？请求的瞬间，浏览器和服务器是连接状态，请求和响应之后，连接状态关闭，这样做的目的是降低服务器的压力</li><li>什么时候session对象被销毁？<br>web系统中引入了session超时概念，<br>当很长时间(这个时间可以设置)，没有用户再次访问这个session,此时session对象超时，web服务器自动回收session对象<br>不配置超时时间默认session时间30分钟，web.xml中可以配置超时时间<session-config><session-timeout>120</session-timeout>      //2小时之内，没有访问session对象，session被销毁</session-config></li><li>什么是一次会话？<br>一般而言，用户打开浏览器，进行操作后，关闭浏览器，表示一个会话结束<br>本质上说，从session对象的创建，到最终session对象因超时而销毁，才是一个完整的会话结束</li><li>HttpSession接口的常用方法<ul><li>session.setAttribute();</li><li>session.getAttribute();</li><li>session.removeAttribute();      //会话间共享数据</li><li>session.invalidate();           //销毁session</li></ul></li><li>ServletContext(所有用户共享数据)，HttpServletRequest(一次请求一个)，HttpSession(一个用户一个)接口之间的对比<ul><li>以上都是范围对象</li><li>ServletContext是应用范围，HttpServletRequest是请求范围，HttpSession是会话范围</li><li>ServletContext跨会话共享数据<br>HttpSession完成跨请求共享数据，但是这些请求必须在同一个会话中<br>HttpServletRequest完成跨servlet共享数据，但是这些servlet必须在同一个请求中[转发]</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式和适配器模式</title>
      <link href="2020/11/26/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/11/26/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4></blockquote><p>设计模式就是前人将自己编写代码的经验总结出来，通过代码的逻辑编写符合大多数场景的业务开发的硬编码。就是一个通用的解决方案。是一种问题解决的思路，不是固定的写法。</p><blockquote><h4 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h4></blockquote><pre class="language-none"><code class="language-none">创建型：解决对象的创建问题行为型:该模式是与方法，行为，算法有关的设计模式结构型：更多类，更多的对象组合成更大的结构解决某个特定的问题</code></pre><blockquote><h4 id="适配器设计模式"><a href="#适配器设计模式" class="headerlink" title="适配器设计模式"></a>适配器设计模式</h4></blockquote><pre class="language-none"><code class="language-none">当接口有多个方法，而其实现类只需要其中几个方法的时候，实现类如果直接实现该接口，需要重写接口中全部的方法，此时，只要创建一个抽象类，实现该接口全部方法，实现类并不直接实现接口，而是继承这个抽象类，就只需要重写自己需要的方法就行，这个抽象类也叫适配器类，通过这种间接实现的方法，整体代码更加高效，整洁Sun公司为了程序员方便实现servlet接口，已经写好了适配器类，GenericServlet类，并提供了无参init方法，用于提供给子类重写，这个无参的init方法将在有参的init方法中被调用，避免直接重写有参init方法造成config赋值为null问题</code></pre><blockquote><h4 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h4></blockquote><pre class="language-none"><code class="language-none">个人理解是，抽取子类中的执行逻辑，控制子类的执行流程，统一交给父类管理，具体实现仍然交给子类实现，这个父类就叫做模板类，统一控制子类执行流程的方法就叫做模板方法。Servlet规范中，HttpServlet就是典型的模板类，其中的service方法就是模板方法。HttpServlet类中doGet,doPost方法执行流程被service方法控制，子类重写doGet,doPost方法，若重写doPost方法，用户提交方式为Get，会在父类中报错405，用户提交方式为Post，则执行子类重写的doPost方法，达到控制用户提交方式的效果。</code></pre><blockquote><h4 id="模板方法设计模式示例"><a href="#模板方法设计模式示例" class="headerlink" title="模板方法设计模式示例"></a>模板方法设计模式示例</h4></blockquote><pre class="language-none"><code class="language-none">不使用模板类public class NoUseTemplateStudent &#123;    public void day()&#123;        System.out.println(&quot;学生-起床&quot;);        System.out.println(&quot;学生-上课&quot;);        System.out.println(&quot;学生-下课&quot;);        System.out.println(&quot;学生-睡觉&quot;);    &#125;&#125;public class NoUseTemplateWorker &#123;    public void day()&#123;        System.out.println(&quot;工人-起床&quot;);        System.out.println(&quot;工人-上班&quot;);        System.out.println(&quot;工人-下班&quot;);        System.out.println(&quot;工人-睡觉&quot;);    &#125;&#125;public class Test &#123;    public static void main(String[] args) &#123;        NoUseTemplateStudent student &#x3D; new NoUseTemplateStudent();        student.day();        NoUseTemplateWorker worker &#x3D; new NoUseTemplateWorker();        worker.day();    &#125;&#125;使用模板方法设计模式public class UseTemplateSuper &#123;    &#x2F;&#x2F;父类中的day是模板方法，定义核心算法骨架，具体实现步骤延迟到子类中完成    &#x2F;&#x2F;算法为了受到保护，所以模板方法一般被final修饰    &#x2F;&#x2F;核心算法骨架不需要在子类中都写一遍，只在模板方法中写一次就行    public final void day()&#123;        getUp();        goWork();        backWork();        sleep();    &#125;    &#x2F;&#x2F;具体的实现步骤之一，具体实现可以在子类中完成    public void sleep() &#123;&#125;    public void backWork() &#123;&#125;    public void goWork() &#123;&#125;    public void getUp() &#123;&#125;&#125;public class UseTemplateWorker extends UseTemplateSuper &#123;    @Override    public void sleep() &#123;System.out.println(&quot;工人-睡觉&quot;);&#125;    @Override    public void backWork() &#123;System.out.println(&quot;工人-下班&quot;);&#125;    @Override    public void goWork() &#123;System.out.println(&quot;工人-上班&quot;);&#125;    @Override    public void getUp() &#123;System.out.println(&quot;工人-起床&quot;);&#125;&#125;public class UseTemplateStudent extends UseTemplateSuper &#123;    @Override    public void sleep() &#123;System.out.println(&quot;学生-睡觉&quot;);&#125;    @Override    public void backWork() &#123;System.out.println(&quot;学生-下课&quot;);&#125;    @Override    public void goWork() &#123;System.out.println(&quot;学生-上课&quot;);&#125;    @Override    public void getUp() &#123;System.out.println(&quot;学生-起床&quot;);&#125;&#125;public class Test &#123;    public static void main(String[] args) &#123;        UseTemplateSuper student &#x3D; new UseTemplateStudent();        student.day();        UseTemplateSuper worker &#x3D; new UseTemplateWorker();        worker.day();    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置环境变量的理解</title>
      <link href="2020/11/23/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>2020/11/23/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="不会吧，不会有人认为我懂环境变量吧hhhhh"><a href="#不会吧，不会有人认为我懂环境变量吧hhhhh" class="headerlink" title="不会吧，不会有人认为我懂环境变量吧hhhhh"></a>不会吧，不会有人认为我懂环境变量吧hhhhh</h4><p>昨天看了动力节点老杜的servlet视频，讲到了tomcat的环境变量的配置，非常牛皮。</p><p>重要的不是配置环境变量，重要的是，为什么要配环境变量</p><p>环境变量中的path永远要配到根目录中的bin目录中，bin中都是可执行文件，配置好后cmd中就可以直接执行bin中的文件，这是第一步</p><p>第二步，拿tomcat这个例子来说，把tomcat的bin目录配置到path中后<br>cmd直接启动tomcat，<code>startup</code>，会报错，提示你要配置CATALINA_HOME<br>每个项目肯定是要配置不同的xxx_HOME的，Tomcat要配置的就是CATALINA_HOME<br>卡特琳娜的家，有没有一种爱情的感觉hhhhh</p><p>第三步，配置一个CATALINA_HOME，用户变量还是系统变量随意，推荐用户变量<br>变量名：CATALINA_HOME，值就是tomcat的根目录</p><p>最后，配置好后，直接在cmd中输入<code>startup</code>就可以直接运行tomcat服务。<br>关闭的话，要改一下bin中shutdown.bat的文件名，因为会和window的关机命令有冲突</p>]]></content>
      
      
      <categories>
          
          <category> 环境变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程及注解简述</title>
      <link href="2020/11/17/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8F%8A%E6%B3%A8%E8%A7%A3%E7%AE%80%E8%BF%B0/"/>
      <url>2020/11/17/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8F%8A%E6%B3%A8%E8%A7%A3%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h4><p>害，人和人和差别比人和猪的差别还大，我算是见识到了，大佬太多了，自己真菜狗哭了</p></blockquote><blockquote><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4></blockquote><pre class="language-none"><code class="language-none">TCP&#x2F;IP四层概念模型    应用层，http,ftp,smtp,dns    传输层，tcp,udp     网络层，ip    数据链路层网络编程中有两个主要问题    1，如何准确定位到网络上的一台电脑，ip和端口    2，找到主机后如何进行通信，网络通信协议tcp&#x2F;udp IP,InetAddress类使用静态方法创建对象，工具类    方法：        InetAddress address &#x3D; InetAddress.getByName(&quot;keyi.world&quot;),返回一个指定IP对象        address.getHostAddress(),返回主机ip地址字符串        address.getHostName,返回域名，或者自己电脑名称字符串端口:区分计算机不同的软件，0-65535tcp协议和udp协议分别都有0-65535端口号，同一协议下，端口号不同相同端口分类：    公有端口：操作系统自身使用，0-1023    程序注册端口：用户端口，1024-49151        tomcat:8080        mysql:3306    动态，私有端口，49152-65535    查看电脑所有端口命令：netstat -ano    查看指定的端口命令：netstat -ano|findstr &quot;8080&quot;udp    udp是一种不可靠的网络协议，它在通信两端各建立一个socket对象，    但这两个socket只是发送和接收的对象，udp不存在客户端和服务器的概念    java提供了DatagramSocket类作为基于udp协议的socket    udp发送端步骤：        1，创建DatagramSocket对象            DatagramSocket socket &#x3D; new DatagramSocket();        2，创建数据，并把数据打包，DatagramPacket,数据报包            DatagramPacket packet &#x3D; new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),10086);        3，调用socket对象send方法发送数据            socket.send(packet);        4，关闭socket对象            socket.close();    udp接收端：        1，创建DatagramSocket对象，绑定端口            DatagramSocket socket &#x3D; new DatagramSocket(10086);        2，创建数据报包DatagramPacket,指定字节数组保存数据            byte[] bytes &#x3D; new byte[1024];            DatagramPacket packet &#x3D; new DatagramPacket(bytes, bytes.length);        3，调用socket对象的receive方法接收数据            socket.receive(packet);        4，展示数据并关闭socket            byte[] data &#x3D; packet.getData();            System.out.println(new String(data));            socket.close();tcp    tcp是可靠的网络协议，需要经过三次握手四次挥手才会建立连接    三次握手，四次挥手：        三次握手        1.客户端向服务端发送请求，一次，表明自己发送能力没问题，        2.但客户端不知道服务端有没有收到消息，所以服务端发送消息给客户端，二次，表明自己已收到消息，         3.客户端接收后，就知道，服务端接收能力没问题，发送能力没问题，             但服务端还不知道客户端有没有接收到消息，所以，客户端再次发送消息给服务端，三次，             表示自己已收到，证明自己接收能力没有问题    四次挥手    1.客户端发送请求给服务端，表示自己要断开连接，自己已经不会再发送数据了，    但如果还有数据没接收完，服务端可以继续发给我，挥手一次，    2.服务端收到第一次挥手后，就会发送消息给客户端，表示服务端已经知道了，    等我数据发送完再通知你，挥手二次，     3.服务端发送完全部数据后，再次发送消息给客户端，我数据处理完了，    此时服务端进入等待，等待客户端发消息，挥手三次，    4.客户端接收到消息，就知道，服务端已经把数据全部发给我了，此时可以断开了，    客户端再次发消息给服务端，彻底断开连接，挥手四次    tcp客户端：        1，创建socket对象，指定服务器的地址和端口号            Socket socket &#x3D; new Socket(&quot;localhost&quot;,10086);        2，通过socke获取字节输入流&#x2F;字节输出流，从而向socket中读取&#x2F;写入数据            BufferReader read &#x3D; new BufferedReader(new             FileReader(&quot;C:\\Users\\OneForAll\\Desktop\\IDEA快捷键.txt&quot;));            BufferReader reader &#x3D; new BufferedReader(new             InputStreamReader(socket.getInputStream()));            BufferedWriter writer &#x3D; new BufferedWriter(new             OutputStreamWriter(socket.getOutputStream()));            String data;            while ((data&#x3D; read.readLine())!&#x3D;null)&#123;                writer.write(data);                writer.newLine();                writer.flush();            &#125;        3，关闭socket    tcp服务端：        1，创建服务端套接字对象，绑定端口            ServerSocket serverSocket &#x3D; new ServerSocket(10086);        2，serverSocket对象等待接收客户端的请求从而获得socket对象，是个阻塞方法            Socket socket &#x3D; serverSocket.accept();        3，通过socket对象获取输入输出流来传输数据        4，关闭socket注解    注解Annotation是一种引用类型，编译之后也是生成xxx.class文件    创建语法格式：        修饰符列表 @interface 注解类型名&#123;        &#125;    使用格式：@注解类型名    使用地方：类上，属性上，方法上，变量上，注解还可以出现在注释上    jdk内置了哪些注解？        java.lang包下有三个注解：        @Deprecated,表示过时的，废弃的        @override,表示重写的方法,标识性注解，给编译器做检查，只在编译时期起作用，跟运行期无关        @SuppressWarnings    元注解：修饰注解的注解就是元注解        常见的元注解：        Target,用来标注注解的使用范围，例如Target(ElementType.METHOD),只能出现在方法上        Retention，用来标注注解最终保存在哪里，例如            @Retention(RetentionPolicy.SOURCE),该注解只被保留在源文件中            @Retention(RetentionPolicy.CLASS)，该注解被保存在class文件中            @Retention(RetentionPolicy.RUNTIME)，该注解被保存在class文件中，并可以被反射机制所读取    注解定义属性：        public @interface MyAnnotation &#123;            &#x2F;&#x2F;这是注解的name属性，如果注解有属性则使用时必须给属性赋值,除非该属性使用default指定了默认值            String name() default &quot;&quot;;        &#125;        如果注解中只有一个属性，且属性名为value,则使用注解时，属性名可以省略        public @interface MyAnnotation &#123;            &#x2F;&#x2F;这是注解的name属性            String name();            int[] age();    &#x2F;&#x2F;属性的类型可以是八大类型加上String,Class和枚举，以及他们的数组都可以        &#125;        public class Test &#123;            &#x2F;&#x2F;@MyAnnotation(name&#x3D;&quot;Coco&quot;,age &#x3D;&#123;20,25&#125;)            @MyAnnotation(name&#x3D;&quot;Coco&quot;,age &#x3D; 20)     &#x2F;&#x2F;数组只有一个值的话，大括号可以省略            public void show()&#123;                System.out.println(&quot;show time&quot;);            &#125;        &#125;        注意：如果注解中属性是数组类型，且数组中只有一个值，则大括号可以省略    通过反射得到注解中属性值：        1，获取被注解类的字节码对象            Class&lt;?&gt; aClass &#x3D; Class.forName(&quot;keyi.world.annotation.Test&quot;);        2，如果注解在方法上，则通过反射获取该方法对象            Method show &#x3D; aClass.getMethod(&quot;show&quot;);        3，if判断是否有定义的注解            if(aClass.isAnnotationPresent(MyAnnotation.class))&#123;&#125;    &#x2F;&#x2F;注解在类上            if(show.isAnnotationPresent(MyAnnotation.class))&#123;&#125;      &#x2F;&#x2F;注解在方法上        4，得到注解对象            MyAnnotation annotation &#x3D; aClass.getAnnotation(MyAnnotation.class);            MyAnnotation annotation &#x3D; show.getAnnotation(MyAnnotation.class);        5，像调用方法一样，获取注解属性            System.out.println(annotation.name());</code></pre><blockquote><h4 id="网络编程代码"><a href="#网络编程代码" class="headerlink" title="网络编程代码"></a>网络编程代码</h4></blockquote><ul><li><p>UDP</p><pre class="language-none"><code class="language-none">发送端：public class SendUDP &#123;    public static void main(String[] args) &#123;        DatagramSocket socket&#x3D;null;        BufferedReader reader&#x3D;null;        try &#123;            socket &#x3D; new DatagramSocket();            reader &#x3D; new BufferedReader(new InputStreamReader(System.in));            InetAddress address &#x3D; InetAddress.getByName(&quot;localhost&quot;);            String data &#x3D;null;            while((data&#x3D;reader.readLine())!&#x3D;null)&#123;                if(data.equals(&quot;886&quot;))&#123;                    break;                &#125;                DatagramPacket packet &#x3D; new                   DatagramPacket(data.getBytes(),data.getBytes().length,                  address,3800);                socket.send(packet);            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally &#123;            try &#123;                if (reader !&#x3D; null) &#123;                    reader.close();                &#125;            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;            if (socket !&#x3D; null) &#123;                socket.close();            &#125;        &#125;    &#125;&#125;接收端：public class ReceiveUDP &#123;    public static void main(String[] args) &#123;        DatagramSocket socket&#x3D;null;        try &#123;            socket &#x3D; new DatagramSocket(3800);            while (true)&#123;                byte[] bytes &#x3D; new byte[1024];                DatagramPacket packet &#x3D; new DatagramPacket(bytes, bytes.length);                socket.receive(packet);                byte[] data &#x3D; packet.getData();                System.out.println(new String(data));            &#125;        &#125; catch (SocketException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally &#123;            if (socket !&#x3D; null) &#123;                socket.close();            &#125;        &#125;    &#125;&#125;</code></pre></li><li><p>TCP</p><pre class="language-none"><code class="language-none">客户端：public class FileClientTCP &#123;    public static void main(String[] args) &#123;        &#x2F;*        *   功能：客户端发送文件给服务端，服务端接收后保存下来，并给客户端反馈        *   服务端使用多线程，可以同时接受多个客户端的请求        * *&#x2F;        Socket socket&#x3D;null;        BufferedReader read&#x3D;null;        BufferedReader reader;        BufferedWriter writer;        try &#123;            socket &#x3D; new Socket(&quot;localhost&quot;,10086);            read &#x3D; new BufferedReader(new             FileReader(&quot;C:\\Users\\OneForAll\\Desktop\\IDEA快捷键.txt&quot;));            reader &#x3D; new BufferedReader(new            InputStreamReader(socket.getInputStream()));            writer &#x3D; new BufferedWriter(new             OutputStreamWriter(socket.getOutputStream()));            String data;            while ((data&#x3D; read.readLine())!&#x3D;null)&#123;                writer.write(data);                writer.newLine();                writer.flush();            &#125;            socket.shutdownOutput();            while ((data&#x3D; reader.readLine())!&#x3D;null)&#123;                System.out.println(&quot;服务端发来消息：&quot;+data);            &#125;        &#125;catch (IOException e) &#123;            e.printStackTrace();        &#125;finally &#123;            if (read!&#x3D;null)&#123;                try &#123;                    read.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            if (socket !&#x3D; null) &#123;                try &#123;                    socket.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;&#125;服务端public class FileServerThreadTCP implements Runnable &#123;    private Socket socket;    public FileServerThreadTCP(Socket socket) &#123;        this.socket &#x3D; socket;    &#125;    @Override    public void run() &#123;        BufferedWriter writer &#x3D; null;        BufferedReader reader &#x3D; null;        PrintStream printStream &#x3D; null;        try &#123;            &#x2F;&#x2F;服务端多线程解决写入文件时重复名问题            int count &#x3D; 0;            File file &#x3D; new File(&quot;C:\\Users\\OneForAll\\Desktop\\IDEA快捷键            [&quot; + count + &quot;].txt&quot;);            while (file.exists()) &#123;                count++;                file &#x3D; new File(&quot;C:\\Users\\OneForAll\\Desktop\\IDEA快捷键                [&quot; + count + &quot;].txt&quot;);            &#125;            writer &#x3D; new BufferedWriter(new FileWriter(file));            reader &#x3D; new BufferedReader(new             InputStreamReader(socket.getInputStream()));            printStream &#x3D; new PrintStream(socket.getOutputStream(), true);            String data;            while ((data &#x3D; reader.readLine()) !&#x3D; null) &#123;                writer.write(data);                writer.newLine();                writer.flush();            &#125;            printStream.println(&quot;文件上传成功&quot;);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; finally &#123;            if (printStream !&#x3D; null) &#123;                printStream.close();            &#125;            if (writer !&#x3D; null) &#123;                try &#123;                    writer.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            try &#123;                socket.close();            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;服务端启动public class ThreadTCP &#123;    public static void main(String[] args) &#123;        try &#123;            ServerSocket serverSocket &#x3D; new ServerSocket(10086);            while (true)&#123;                Socket socket &#x3D; serverSocket.accept();                new Thread(new FileServerThreadTCP(socket)).start();            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态代理及lambda表达式</title>
      <link href="2020/11/14/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E5%8F%8Alambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/11/14/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E5%8F%8Alambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>lambda是java8的新特性，现在都已经15了，再不学下真的要被骂了hhh</p></blockquote><blockquote><h4 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h4></blockquote><p>介绍lambda表达式之前说说函数式接口，函数式接口和普通接口没有什么区别，唯一的区别就是函数式接口只有一个抽象方法，只要一个接口中只有一个方法，那么该接口就可以被称为函数式接口。</p><blockquote><h4 id="lambda与其他形式的对比"><a href="#lambda与其他形式的对比" class="headerlink" title="lambda与其他形式的对比"></a>lambda与其他形式的对比</h4></blockquote><p>最普通方式，某一个类实现一个接口，就称为该类是这个接口的实现类，通过创建实现类对象可以调用实现方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> USB<span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">usbSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Vivo</span> <span class="token keyword">implements</span> USB<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">usbSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"vivo手机的USB尺寸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">USB</span> vivo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vivo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vivo<span class="token punctuation">.</span><span class="token function">usbSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>匿名内部类方式，匿名内部类的形式没有类的名称，通过抽象类名和接口来实现抽象方法</p><pre class="language-none"><code class="language-none">interface USB&#123;void usbSize();&#125;public class Test&#123;    public static void mian(String[] args)&#123;        USB xiaoMi &#x3D; new USB()&#123;        public void usbSize() &#123;                System.out.println(&quot;小米手机的USB尺寸&quot;);            &#125;        &#125;;    &#125;&#125;</code></pre><p>lambda表达式的形式</p><pre class="language-none"><code class="language-none">interface USB&#123;void usbSize();&#125;public class Test&#123;    public static void mian(String[] args)&#123;        USB huaWei &#x3D; ()-&gt;&#123;        System.out.println(&quot;华为手机的USB尺寸&quot;);        &#125;;    &#125;&#125;</code></pre><p>其中，(形参列表)-&gt;{</p><p>​    抽象方法usbSize的具体实现</p><p>}</p><ul><li>当形参列表没有时，直接写()-&gt;{}的形式，即上面的例子</li><li>当形参列表有多个参数时，参数类型可以不写，直接写(a,b)-&gt;{}的形式，如果不写参数类型则所有参数类型都不能写</li><li>当形参列表只有一个参数时，可以省掉小括号，直接写a-&gt;{}的形式</li><li>当实现方法中只有一条语句时，大括号可以省略掉，直接写a-&gt;System.out.println(“华为手机的USB尺寸”);</li></ul><p>通过对比，可以发现lambda表达式是匿名内部类的精简版，但其自身也有很多限制，其一，lambda表达式虽然简化代码但可读性变差了，其二，lambda表达式只适用于函数式接口，即只能重写接口一个方法</p><blockquote><h4 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h4></blockquote><p>静态代理是，接口的实现类并不直接创建对象调用实现方法，而是将实现类对象交给另一个实现类，即交给代理类，由代理类去执行实现类中的实现方法，代理类还可以在执行实现方法前后加入自己的方法，使得程序更加健壮。<br>Thread就是典型的代理类，Thread类也是实现了Runnable接口，当我们自定义类实现Runnable接口后，将自定义类对象通过Thread构造方法交给Thread后，由Thread类代替我们去执行我们的实现方法，即调用start方法。<br>下面以一个例子说明</p><p>Marry接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Marry</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>You自定义实现类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">You</span> <span class="token keyword">implements</span> <span class="token class-name">Marry</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"俺要结婚啦，，，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>Wedding代理类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wedding</span> <span class="token keyword">implements</span> <span class="token class-name">Marry</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Marry</span> marry<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Wedding</span><span class="token punctuation">(</span><span class="token class-name">Marry</span> marry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>marry <span class="token operator">=</span> marry<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理类中的实现方法可以不写任何东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">beforeMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        marry<span class="token punctuation">.</span><span class="token function">happyMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">afterMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结婚后，找新郎新娘结账"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">beforeMarry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结婚前，布置婚礼现场"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>StaticProxy测试类</p><pre class="language-none"><code class="language-none">public class StaticProxy&#123;    public static void main(String[] args) &#123;        &#x2F;*        * You类和Wedding代理类都继承Marry接口，将You类对象交给代理类去执行        * *&#x2F;        &#x2F;*You you &#x3D; new You();        new Wedding(you).start();*&#x2F;        &#x2F;&#x2F;匿名内部类        &#x2F;*new Wedding(new Marry() &#123;            @Override            public void happyMarry() &#123;                System.out.println(&quot;洞房花烛夜&quot;);            &#125;        &#125;).start();*&#x2F;        &#x2F;&#x2F;lambda,因为Marry接口只有一个抽象方法，所以也可以用lambda方式        new Wedding(()-&gt; System.out.println(&quot;送入洞房&quot;)).start();        &#x2F;&#x2F;Thread的lambda方式&#x2F;&#x2F;new Thread(()-&gt; System.out.println(&quot;自定义类中的实现方法&quot;)).start();    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程初探</title>
      <link href="2020/11/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9D%E6%8E%A2/"/>
      <url>2020/11/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h3 id="多线程初探"><a href="#多线程初探" class="headerlink" title="多线程初探"></a>多线程初探</h3></blockquote><blockquote><h4 id="线程创建的三种方式"><a href="#线程创建的三种方式" class="headerlink" title="线程创建的三种方式"></a>线程创建的三种方式</h4></blockquote><p>1，自定义类继承Thread类,即声明为Thread的子类，实现run方法<br>2，自定义类实现Runnable接口,创建自定义类对象，将此对象作为参数传递给Thread构造函数创建线程对象，好处，避免了java单继承的局限性，方便同一个对象被多个线程使用，Thread类就实现了Runnable接口<br>3，自定义类实现callable接口，实现接口中的call方法,相比于run方法，可以有返回值,可以抛出异常 </p><blockquote><h4 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h4></blockquote><p>​    新建，Thread t1= new Thread(),创建线程对象时，就是新建状态<br>​    就绪  t1.start()  线程调用start方法时，线程处于就绪状态，等待处理器调度<br>​    运行  处理器调用线程执行时，线程处于运行状态，进入运行状态，线程才真正执行线程体代码块中的内容，run方法<br>​    阻塞  当调用sleep,wait或同步锁定时，线程进入阻塞状态，阻塞事件解除后，重新进入就绪状态<br>​    死亡  线程中断或结束，一旦进入死亡状态，不能再次启动线程</p><blockquote><h4 id="线程中的方法"><a href="#线程中的方法" class="headerlink" title="线程中的方法"></a>线程中的方法</h4></blockquote><p>​    1，getName，setName，设置线程名，也可以通过构造方法设置线程名<br>​    2，getId，获取线程Id，JVM会为每个线程分配一个Id,线程执行完后收回<br>​    3，getPriority(),setPriority，线程优先级，一般线程优先级是5，最小1，最大10，优先级高的线程被处理器调度的几率大<br>​    4，sleep，线程休眠，模拟网络延迟和倒计时等，Thread.sleep(毫秒数)<br>​    5，join，某个线程调用join方法时表示，其他线程需要等待该线程执行完毕后才能开始执行<br>​    6，setDaemon(boolean值)，设置守护线程，当线程设置为守护线程时，其他线程执行完后，本线程将马上关闭/死亡/退出，JVM中的gc线程就是守护线程<br>​    7，yield，线程让步，暂停当前正在执行的线程，使其回到就绪状态，把执行机会让给优先级相同或更高的线程，可能会礼让失败    因为线程回到就绪状态后，处理器可能还会调用它<br>​    8，wait，线程等待，当线程调用wait方法时，线程会进入阻塞状态，直到另一个线程调用该对象的notify唤醒方法或者notifyAll方法<br>​    9，notify，线程唤醒，唤醒正在等待的线程<br>​    10，notifyAll，唤醒全体等待的线程<br>​    11，isAlive，检测线程是否是活动状态，线程启动到线程死亡之前都是活动状态，方法返回值是Boolean值<br>​    12，interrupt，中断方法，当线程调用该方法并不表示该线程中断，只是给线程设置了一个标志，通过调用isInterrupted方法判断线程是否被中断，如果是，则可以通过代码逻辑手动停止线程</p><p>注意：8，9，10方法实现了线程间的通信，方法必须在同步方法，同步代码块中使用，即synchronized关键字中使用</p><blockquote><h4 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h4></blockquote><p>非线程安全主要是指，多个线程对同一个对象的实例变量进行操作时，会出现值被更改，值不同步的情况。<br>线程安全问题表现为三个方面，原子性，可见性和有序性</p><ul><li><p>原子性<br>Java有两种方式实现原子性，一种是使用锁，另一种利用处理器的CAS(Compare and Swap)指令。<br>锁具有排他性，保证共享变量在同一时刻只能被一个线程访问，CAS指令直接在硬件(处理器和内存)层次上实现，看作硬件锁 </p></li><li><p>可见性<br>在多线程环境中，一个线程对某个共享变量更新后，后续其他线程可能无法立即读到这个更新后的结果，这就是线程安全问题的另一种形式：可见性。<br>如果一个线程对共享变量更新后，后续访问该变量的其他线程可以读到更新后的数据，称这个线程对共享变量的更新对其他线程可见。<br>多线程程序因为可见性问题可能会导致其他线程读到旧数据(脏数据),说明线程对共享变量的修改不可见</p></li><li><p>有序性<br>有序性是指程序编译顺序和执行顺序并不一致，处理器在执行的时候，考虑到自身效率会对线程调度做出调整，这种现象被称为重排序，重排序可以分为两种，一种是指令重排序，一种是存储子系统重排序，指令重排序真实发生，存储子系统重排序是一种现象。</p></li></ul><blockquote><h4 id="自身的问题"><a href="#自身的问题" class="headerlink" title="自身的问题"></a>自身的问题</h4></blockquote><p>这里没继续看视频了，多线程中涵盖了非常多的知识点，准备在以后重新学习，没有太多时间，接下去的网络编程，servlet及EL表达式等等，我觉得很多很重要的东西，学校老师都没讲，匆匆就过去了，我也想打好基础，但时间不等我，总有一天我要掌握多线程，加油！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript笔记</title>
      <link href="2020/11/10/JavaScript%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/10/JavaScript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="JS笔记"><a href="#JS笔记" class="headerlink" title="JS笔记"></a>JS笔记</h4><p>最近看完了JS的网课，感觉讲的特别好，记下笔记，防止老年痴呆。。。</p></blockquote><blockquote><p>想了一下，还是直接丢粗糙的笔记吧，整理好放博客上格式弄得太麻烦了<br>直接放github上还是感觉挺方便的，<a href="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/javascript/JS%E7%AC%94%E8%AE%B0.txt">点击传送</a></p></blockquote><blockquote><p>下面是看完网课后写的两个小demo</p><p>1，<a href="http://htmlpreview.github.com/?https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/javascript/Demo2/index.html">表单验证</a><br>2，<a href="http://htmlpreview.github.com/?https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/javascript/Demo/html/homeWork.html">订单增删改查html页面</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库工具类</title>
      <link href="2020/11/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>2020/11/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>写一个数据库工具类，不过感觉不太像工具类，更像一个数据库操作类hhh</p><p>写完后记起来，读取配置文件除了使用之前提到的Properties类，还有这个ResourceBundle类</p></blockquote><blockquote><p>普普通通User类</p></blockquote><pre class="language-none"><code class="language-none">public class User &#123;    private String username;    private String password;    private String realname;    private String salary;    public User(String username, String password, String realname, String salary) &#123;           this.username &#x3D; username;        this.password &#x3D; password;        this.realname &#x3D; realname;        this.salary &#x3D; salary;    &#125;    public User()&#123;&#125;&#x2F;&#x2F;get,set,toString方法省略&#125;</code></pre><blockquote><p>SqlUtil类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">world<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span></span><span class="token class-name">Demo1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ResourceBundle</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> connection<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">PreparedStatement</span> preparedStatement<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ResourceBundle</span> bundle<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SqlUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            bundle <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driver <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"mysql_driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>            url <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"teacher_url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection<span class="token operator">=</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登陆失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************************************数据库工具类API********************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********--1，插入用户需要给4个参数，分别是username,password,realname,salary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********--2，删除用户需要给用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********--3，查询用户可以查指定用户和全部用户，查指定用户给username，查全部用户给字符串*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********--4，修改用户要给5个参数，第一个参数是指定修改的用户名，其余四个参数是修改后的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**************************************************************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> insert <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"insert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>insert<span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getRealname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"信息成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"信息失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"尚未登录，请登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> delete <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">"信息成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">"信息失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"尚未登录，请登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> query<span class="token punctuation">;</span>                <span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    query<span class="token operator">=</span>bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"queryAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    query<span class="token operator">=</span>bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>                    preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    user<span class="token punctuation">.</span><span class="token function">setRealname</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"realname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    user<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"尚未登录，请登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> update <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getRealname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">"信息成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">"信息失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"尚未登录，请登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preparedStatement<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>jdbc.properties资源文件</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">mysql_driver<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span><span class="token class-name">Driver</span>my_url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>oneforall<span class="token operator">?</span>serverTimezone<span class="token operator">=</span>GMT<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>my_user<span class="token operator">=</span>rootmy_password<span class="token operator">=</span><span class="token number">123456</span>teacher_url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.8</span><span class="token number">.121</span><span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>hbnu<span class="token operator">?</span> serverTimezone<span class="token operator">=</span>GMT<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>teacher_user<span class="token operator">=</span>hbnujixinteacher_password<span class="token operator">=</span><span class="token number">123456</span>insert<span class="token operator">=</span>insert into <span class="token function">userinfo</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>realname<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span>delete<span class="token operator">=</span>delete from userinfo where username<span class="token operator">=</span><span class="token operator">?</span>query<span class="token operator">=</span>select username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>realname<span class="token punctuation">,</span>salary from userinfo where username <span class="token operator">=</span><span class="token operator">?</span>queryAll<span class="token operator">=</span>select username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>realname<span class="token punctuation">,</span>salary from userinfoupdate<span class="token operator">=</span> update userinfo set username<span class="token operator">=</span><span class="token operator">?</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token operator">?</span><span class="token punctuation">,</span>realname<span class="token operator">=</span><span class="token operator">?</span><span class="token punctuation">,</span>salary<span class="token operator">=</span><span class="token operator">?</span> where username<span class="token operator">=</span><span class="token operator">?</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装系统</title>
      <link href="2020/11/02/Win10%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/11/02/Win10%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>前几天win10系统更新后开机，电脑炸了<br>开机黑屏，任务栏不停地闪，查了很多但没效果，无奈只有重装系统了</p></blockquote><blockquote><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4></blockquote><p>1，将U盘做成启动盘，IT天空的优启通挺不错的<br>2，在MSDN I tell you网站上下载win10的镜像文件，选择customer版本就行</p><blockquote><h4 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h4></blockquote><p>1，先要去电脑中的bios中设置首选为U盘启动，不同电脑进入bios在重启时要按不同的快捷键，我的联想笔记本进入bios就是按F2<br>2，使用DG分区助手将硬盘中系统盘分区全部删除，再新建分区，需要注意的是，如果是UEFI模式启动，硬盘需要为GPT格式的，并且系统盘新建分区的时候ESP和MSR分区都要勾选，如果是Legacy格式启动，硬盘格式要为MBR格式，此时的系统盘还需要设置为活动盘，GPT格式的硬盘不需要。另外，只有系统盘才需要ESP或者MSR分区，非系统盘不需要。</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/window/window2.png" alt="DG分区图" style="zoom:67%;" / loading="lazy"><p>3，硬盘分好区后，使用优启通自带的安装软件为硬盘安装系统，见下图，之后在BIOS中设置系统盘优先启动即可</p><img src="https://github.com/NicknamedCoco/cdn/raw/cfb952173e08c606cbf63ceb83f56bfee690512c/blog/window/window1.png" alt="重装系统" style="zoom:67%;" / loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重装系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流概述</title>
      <link href="2020/10/23/IO%E6%B5%81%E6%A6%82%E8%BF%B0/"/>
      <url>2020/10/23/IO%E6%B5%81%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h3 id="IO流的概述"><a href="#IO流的概述" class="headerlink" title="IO流的概述"></a>IO流的概述</h3></blockquote><p>本篇文章记录下所学的IO流</p><blockquote><h4 id="File对象"><a href="#File对象" class="headerlink" title="File对象"></a>File对象</h4></blockquote><p>基本方法：createNewFile(创建文件)，mkdir(创建目录)，mkdirs(如父目录不存在，则全部创建,创建多级目录)<br>delete(删除目录或文件)，删除目录时，如果目录中有文件就不能直接删除，需要先删除内容。 </p><p>进阶方法：isDirectory，isFile，exists，getAbsolutePath，getPath(将抽象路径名转化为路径名字字符串)<br>getName，list(返回抽象路径名表示的目录下的文件和目录字符串数组)，<br>listFiles(返回抽象路径名表示的目录下的文件和目录File对象数组)。</p><blockquote><h4 id="编码解码问题"><a href="#编码解码问题" class="headerlink" title="编码解码问题"></a>编码解码问题</h4></blockquote><p>​        一个汉字存储，如果是GBK编码，占用2个字节，如果是UTF-8编码，占用3个字节<br>按照某种规则，将字符存储到计算机中，称为编码，反之，将存储在计算机中的二进制数按某种规则解析显示出来，称为解码按照A编码存储，必须按照A编码解析，这样才能显示正确的文本，否则会导致乱码<br>​        字符编码：就是一套自然语言的字符与二进制数之间的对应规则(A 65)字符集，是一个系统支持的所有字符的集合，计算机要准确的存储和识别各种字符集符号，就需要进行字符编码<br>常见的字符集：<br>Ascll(基于拉丁字母的一套电脑编码系统，7位表示一个字符，共128个字符),<br>​        Ascll的扩展字符集使用8位表示一个字符，共256字符<br>GBXXX字符集，简体中文码表，大于127的字符就是全角字符，小于等于127就是半角字符<br>​        GBK，最常用的中文码表<br>Unicode字符集，也叫统一码，万国码，有三种编码方案，UTF-8,UTF-16,UTF-32<br>​        UTF-8最常用，使用1-4字节为每个字符编码<br>以上就是全部描述，我的理解是：<br>​        计算机上的数据文件都是以二进制存放的，但二进制数据却是根据不同的字符编码排列的，同一个字符串，我们使用GBK的方式编码得到二进制文件和使用UTF-8的方式编码得到的二进制文件是完全不同的，如果我们编码使用GBK的方式，解码使用UTF-8的方式，就会导致乱码，因为两者编码解码规则不同</p><blockquote><h4 id="IO流结构"><a href="#IO流结构" class="headerlink" title="IO流结构"></a>IO流结构</h4></blockquote><p>字节流基类：InputStream，OutputStream<br>        它的常用子类有，FileInputStream，FileOutputStream(追加，在FileOutputStream的构造方法中使用true)<br>                                       BufferedInputStream，BufferedOutputStream</p><p>字符流基类：Reader，Writer<br>        它的常用子类有， BufferedReader，BufferedWriter(缓冲流都需要flush)<br>                                        InputStreamReader，OutputStreamWriter(转换流)<br>                                                转换流的子类：FileReader，FileWriter(继承转换流，除不能设置编码，其他一样)</p><p>除了以上各种流，还有以下几种：<br>打印流<br>        字节打印流PrintStream，字符打印流PrintWriter</p><p>对象序列化流<br>        序列化流ObjectOutputStream，构造方法要字节流，给文件输入输出流即可<br>                序列化方法：writeObject(Object obj)<br>        反序列化流ObjectInputStream<br>                反序列化方法，readObject(),返回自定义类对象<br>        注：1）对于要被序列化的自定义类，需要自定义类实现Serializable接口，并设置SerialVersionID字段<br>                              以保证在反序列化时不会出现版本不一致。<br>                2）对于自定义类中不想被序列化的属性，可以加transient关键字</p><p>Properties类<br>        底层是一个HashTable集合<br>        特殊方法，setProperty,getProperty,stringPropertyNames(返回键的集合，其中键和对应的值都是字符串)<br>        与IO相结合的方法，load(把文件中的数据加载到集合中),store(把集合中的数据保存到文件)</p><blockquote><h4 id="开发中常用的输出输出方法"><a href="#开发中常用的输出输出方法" class="headerlink" title="开发中常用的输出输出方法"></a>开发中常用的输出输出方法</h4><p>这里我们分两类讨论，字节流的输入输出，字符流的输入输出</p></blockquote><p>字节流的输入输出</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedInputStream</span> bufferedInput<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token class-name">BufferedOutputStream</span> bufferedOutput<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             bufferedInput<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span>                      <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\DELL\\Desktop\\wky.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             bufferedOutput<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span>                      <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\DELL\\Desktop\\wky2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>             <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>bufferedInput<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 bufferedOutput<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                 bufferedOutput<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedOutput<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                     bufferedOutput<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedInput<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                     bufferedInput<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span></code></pre><p>字符流的输入输出</p><pre class="language-none"><code class="language-none">BufferedReader bufferedReader&#x3D;null;        BufferedWriter bufferedWriter&#x3D;null;        try &#123;            &#x2F;*            不需要编码转换就给字符缓冲流FileReader,FileWriter                bufferedReader &#x3D; new BufferedReader(new                 FileReader(&quot;C:\\Users\\DELL\\Desktop\\wky.txt&quot;));                    bufferedWriter &#x3D; new BufferedWriter(new                     FileWriter(&quot;C:\\Users\\DELL\\Desktop\\wky3.txt&quot;));            *&#x2F;            bufferedReader &#x3D; new BufferedReader(new InputStreamReader(new             FileInputStream(&quot;C:\\Users\\DELL\\Desktop\\wky.txt&quot;),&quot;GBK&quot;));            bufferedWriter &#x3D; new BufferedWriter(new OutputStreamWriter(new             FileOutputStream(&quot;C:\\Users\\DELL\\Desktop\\wky3.txt&quot;),&quot;GBK&quot;));            String line;            while ((line&#x3D;bufferedReader.readLine())!&#x3D;null)&#123;   &#x2F;&#x2F;读到文件末尾返回null                bufferedWriter.write(line);                bufferedWriter.newLine();   &#x2F;&#x2F;字符缓冲输入流不读取换行符，需要手动写入换行符                bufferedWriter.flush();            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally &#123;            if(bufferedWriter!&#x3D;null)&#123;                try &#123;                    bufferedWriter.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            if(bufferedReader!&#x3D;null)&#123;                try &#123;                    bufferedReader.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合概述及泛型</title>
      <link href="2020/10/19/Java%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0%E5%8F%8A%E6%B3%9B%E5%9E%8B/"/>
      <url>2020/10/19/Java%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0%E5%8F%8A%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h4 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h4></blockquote><pre class="language-none"><code class="language-none">Collection接口  1,List接口    特点：有序(存储和取出的顺序)，可重复，有索引    1)ArrayList        ArrayList，底层是动态数组，擅长随机访问，线程不安全，适合查询，增删慢    2)LinkedList     LinkedList，底层是一个双向链表，线程不安全，适合增删，查询慢 2,Set接口  特点：无序且不可重复，元素必须不同，没有索引，不可使用简单for循环遍历  Set集合通过HashCode方法和equals方法来保证集合元素的唯一性  1)HashSet  HashSet，底层是一个HashMap实例，允许集合内只能有一个null值,虽然是存取顺序无序的， 但其内部根据HashCode(哈希值 ，不是对象地址值，是jvm算出来的int值)存储排序元素， 非线程同步HashCode()是Object中的方法，默认情况下，不同类对象哈希值不同， 但子类通过重写HashCode()可以使同类中不同实例的哈希值相同从而保证HashSet集合的唯一性2)TreeSet TreeSet，非线程安全，间接实现Set接口，不包含重复元素 支持两种排序方式，自然排序(comparable接口)和比较器排序(comparator比较器排序接口) 1.treeSet():根据其元素的自然排序进行排序, 自然排序指，从小到大，从a-z的方式排序，自定义类实现了comparable接口并重写compareTo方法就可以使用自然排序 compareTo返回值如果是0，则本元素和上一个元素相同，不插入 如果返回值是正数，则输出顺序和插入顺序一致，如果返回值是负数，则输出顺序和插入顺序相反.    compareTo方法中，举例：int i &#x3D;this.ags-o.age是按年龄升序排序，    int i &#x3D; o.age-this.age是按年龄降序排序    2.TreeSet(Comparator corparator):根据指定的比较器进行排序    在TreeSet带参构造器中创建一个匿名内部类对象，是comparator比较器的对象，然后重写compare方法,    不需要自定义类实现comparable接口。    TreeSet&lt;Student&gt; treeSet &#x3D; new TreeSet&lt;&gt;(new Comparator&lt;Student&gt;() &#123;    @Override             public int compare(Student o1, Student o2) &#123;             int i &#x3D; o1.getAge() - o2.getAge();             int i2 &#x3D; i &#x3D;&#x3D; 0 ? o1.getName().compareTo(o2.getName()) : i;                 return i2;                 &#125;             &#125;);  3，LinkedHashSet 继承TreeSet,由哈希表和链表实现的Set接口,由链表保证存取顺序有序,哈希表保证元素唯一性,线程不安全。    Map接口 基本方法，put,remove,clear,containsKey,containsValue,isEmpty,size 获取功能，get,KsySet,values(获取所有值的集合)，entrySet(获取所有键值对对象的集合) map集合通过get方法查不到数据会返回null map集合遍历方式     1)遍历Map中Key的集合，根据Key找对应的值，map.keySet,map.get(key) 2)获取所有键值对对象的集合，遍历集合得到每个键值对对象，通过getKey,getValue得到键值 1.HashMap 以哈希表数据结构实现，线程不安全，HashMap添加元素，第二次添加同名键时，会覆盖之前的同名键中的值。 2.TreeMap 和TreeSet一样可以排序，使用无参构造函数时，对键进行排序 </code></pre><blockquote><h4 id="集合的遍历方式"><a href="#集合的遍历方式" class="headerlink" title="集合的遍历方式"></a>集合的遍历方式</h4></blockquote><pre class="language-none"><code class="language-none">集合的三种遍历方式迭代器，所有集合都可以使用简单for循环，带有索引的集合才可以使用，比如List集合，增强for循环，最方便的遍历方式，foreach循环内部是一个iterator迭代器，在foreach中集合添加元素会抛出并发修改异常</code></pre><blockquote><h4 id="集合的工具类"><a href="#集合的工具类" class="headerlink" title="集合的工具类"></a>集合的工具类</h4></blockquote><pre class="language-none"><code class="language-none">集合的工具类，Collections类，sort,reverse(反转列表),shuffle(随机排列集合)            其中sort方法的使用需要自定义类实现自然排序或者给定比较器排序数组的工具类，Arrays类集合中元素都是引用类型</code></pre><blockquote><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4></blockquote><pre class="language-none"><code class="language-none">jdk1.8之前，哈希表底层采用数组+链表实现，可以说是一个元素为链表的数组jdk1.8之后，在长度较长的时候，底层实现了优化存储过程：取元素的哈希值，与16取余，如果哈希值相同，则对比该位置元素的内容，通过调用equals方法，如果相同则认为是同个元素，不存储凡是使用到哈希表的集合，自定义子类需要重写equals和hashcode方法</code></pre><blockquote><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4></blockquote><pre class="language-none"><code class="language-none">本质是参数化类型，就是将类型由原来具体的类型参数化，然后在使用&#x2F;调用时传入具体的类型可以使用在类，方法，接口上，就是泛型类，泛型方法，泛型接口好处，把运行时期的问题提到了编译时期，类型转换异常     避免了强制类型转换泛型定义方式泛型类，public class FanXing&lt;T&gt; &#123;&#125;泛型方法，public &lt;T&gt; void show(T s)&#123;&#125;泛型接口，public class FanXing&lt;T&gt; implements generic&lt;T&gt; &#123;&#125;，public interface generic&lt;T&gt; &#123;&#125;    接口使用了泛型，其实现类也必须实现泛型类型通配符&lt;?&gt;List&lt;?&gt;表示元素类型未知的List,它的元素可以匹配任何类型这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中如果说我们不希望List&lt;?&gt;是任何泛型List的父类，只希望它代表某一类泛型List的父类，可以使用泛型通配符的上下限上限，List&lt;? extends Number&gt;,它表示的类型是Number或者其子类型下限，List&lt;? super Number&gt;,它表示的类型是Number或者其父类型可变参数    可变参数又称参数个数可变，用作方法的形参出现，那么方法的参数个数就是可变的了    public static void sum(int... a)&#123;&#125;,此形参a其实是数组    注意，一个方法有多个参数，可变参数应该放在最后面可变参数的使用    Arrays中的asList静态方法    List和Set接口的of方法都使用了可变参数</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合之发扑克案例</title>
      <link href="2020/10/16/Java%E9%9B%86%E5%90%88%E4%B9%8B%E5%8F%91%E6%89%91%E5%85%8B%E6%A1%88%E4%BE%8B/"/>
      <url>2020/10/16/Java%E9%9B%86%E5%90%88%E4%B9%8B%E5%8F%91%E6%89%91%E5%85%8B%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>记录一下Java基础中集合的小案例 —–发扑克</p><p>三人斗地主，使用集合实现发牌洗牌</p></blockquote><hr><blockquote><p>Poker类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poker</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"♦"</span><span class="token punctuation">,</span> <span class="token string">"♥"</span><span class="token punctuation">,</span> <span class="token string">"♣"</span><span class="token punctuation">,</span> <span class="token string">"♠"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numberPoker <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> bottom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">></span></span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Poker</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">></span></span> player<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> player<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">washPoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendPoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> color<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numberPoker<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numberPoker<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"King"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Queen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">washPoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendPoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                bottom<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                player<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPoker</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watchPoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"底牌:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> player<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>Player类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> poker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPoker</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        poker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Player&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", arrayList="</span> <span class="token operator">+</span> poker <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>测试类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Player</span> player1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">"科一"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Player</span> player2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">"周星驰"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Player</span> player3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">"周润发"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">></span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>player3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Poker</span> poker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Poker</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        poker<span class="token punctuation">.</span><span class="token function">watchPoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>输出结果</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">底牌<span class="token operator">:</span><span class="token punctuation">[</span>♣<span class="token number">8</span><span class="token punctuation">,</span> ♣<span class="token class-name">J</span><span class="token punctuation">,</span> ♠<span class="token number">8</span><span class="token punctuation">]</span><span class="token class-name">Player</span><span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'科一'</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">,</span> arrayList<span class="token operator">=</span><span class="token punctuation">[</span>♣<span class="token number">10</span><span class="token punctuation">,</span> ♥<span class="token number">9</span><span class="token punctuation">,</span> ♦<span class="token class-name">Q</span><span class="token punctuation">,</span> ♥<span class="token number">2</span><span class="token punctuation">,</span> ♣<span class="token class-name">Q</span><span class="token punctuation">,</span> ♦<span class="token number">5</span><span class="token punctuation">,</span> ♣<span class="token number">4</span><span class="token punctuation">,</span> ♥<span class="token number">3</span><span class="token punctuation">,</span> ♦<span class="token class-name">J</span><span class="token punctuation">,</span> ♣<span class="token number">5</span><span class="token punctuation">,</span> ♦<span class="token number">8</span><span class="token punctuation">,</span> ♠<span class="token number">9</span><span class="token punctuation">,</span> ♥<span class="token number">10</span><span class="token punctuation">,</span> ♠<span class="token number">6</span><span class="token punctuation">,</span> ♠<span class="token class-name">J</span><span class="token punctuation">,</span> ♦<span class="token number">4</span><span class="token punctuation">,</span> ♥<span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">Player</span><span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'周星驰'</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">,</span> arrayList<span class="token operator">=</span><span class="token punctuation">[</span>♥<span class="token number">4</span><span class="token punctuation">,</span> ♠<span class="token class-name">A</span><span class="token punctuation">,</span> ♠<span class="token number">7</span><span class="token punctuation">,</span> ♠<span class="token class-name">K</span><span class="token punctuation">,</span> ♣<span class="token class-name">K</span><span class="token punctuation">,</span> ♣<span class="token number">9</span><span class="token punctuation">,</span> ♦<span class="token number">3</span><span class="token punctuation">,</span> ♥<span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">King</span><span class="token punctuation">,</span> ♣<span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Queen</span><span class="token punctuation">,</span> ♦<span class="token class-name">A</span><span class="token punctuation">,</span> ♣<span class="token class-name">A</span><span class="token punctuation">,</span> ♦<span class="token number">9</span><span class="token punctuation">,</span> ♣<span class="token number">6</span><span class="token punctuation">,</span> ♠<span class="token number">4</span><span class="token punctuation">,</span> ♥<span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">Player</span><span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'周润发'</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">,</span> arrayList<span class="token operator">=</span><span class="token punctuation">[</span>♠<span class="token number">2</span><span class="token punctuation">,</span> ♥<span class="token class-name">J</span><span class="token punctuation">,</span> ♠<span class="token number">10</span><span class="token punctuation">,</span> ♥<span class="token number">7</span><span class="token punctuation">,</span> ♥<span class="token class-name">Q</span><span class="token punctuation">,</span> ♣<span class="token number">7</span><span class="token punctuation">,</span> ♦<span class="token class-name">K</span><span class="token punctuation">,</span> ♦<span class="token number">10</span><span class="token punctuation">,</span> ♥<span class="token class-name">A</span><span class="token punctuation">,</span> ♣<span class="token number">2</span><span class="token punctuation">,</span> ♥<span class="token number">5</span><span class="token punctuation">,</span> ♠<span class="token number">5</span><span class="token punctuation">,</span> ♦<span class="token number">6</span><span class="token punctuation">,</span> ♠<span class="token number">3</span><span class="token punctuation">,</span> ♠<span class="token class-name">Q</span><span class="token punctuation">,</span> ♦<span class="token number">7</span><span class="token punctuation">,</span> ♦<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java">底牌<span class="token operator">:</span><span class="token punctuation">[</span>♠<span class="token number">9</span><span class="token punctuation">,</span> ♥<span class="token number">8</span><span class="token punctuation">,</span> ♠<span class="token number">4</span><span class="token punctuation">]</span><span class="token class-name">Player</span><span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'科一'</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">,</span> arrayList<span class="token operator">=</span><span class="token punctuation">[</span>♠<span class="token class-name">J</span><span class="token punctuation">,</span> ♣<span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">Queen</span><span class="token punctuation">,</span> ♠<span class="token number">6</span><span class="token punctuation">,</span> ♥<span class="token class-name">Q</span><span class="token punctuation">,</span> ♠<span class="token number">3</span><span class="token punctuation">,</span> ♥<span class="token number">7</span><span class="token punctuation">,</span> ♦<span class="token class-name">A</span><span class="token punctuation">,</span> ♥<span class="token class-name">K</span><span class="token punctuation">,</span> ♠<span class="token class-name">K</span><span class="token punctuation">,</span> ♥<span class="token number">3</span><span class="token punctuation">,</span> ♥<span class="token number">6</span><span class="token punctuation">,</span> ♥<span class="token number">9</span><span class="token punctuation">,</span> ♠<span class="token number">7</span><span class="token punctuation">,</span> ♦<span class="token class-name">J</span><span class="token punctuation">,</span> ♦<span class="token number">3</span><span class="token punctuation">,</span> ♠<span class="token class-name">Q</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">Player</span><span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'周星驰'</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">,</span> arrayList<span class="token operator">=</span><span class="token punctuation">[</span>♦<span class="token number">10</span><span class="token punctuation">,</span> ♣<span class="token number">10</span><span class="token punctuation">,</span> ♥<span class="token number">5</span><span class="token punctuation">,</span> ♦<span class="token number">8</span><span class="token punctuation">,</span> ♣<span class="token number">6</span><span class="token punctuation">,</span> ♥<span class="token class-name">J</span><span class="token punctuation">,</span> ♣<span class="token class-name">Q</span><span class="token punctuation">,</span> ♦<span class="token class-name">K</span><span class="token punctuation">,</span> ♥<span class="token number">4</span><span class="token punctuation">,</span> ♣<span class="token number">7</span><span class="token punctuation">,</span> ♦<span class="token class-name">Q</span><span class="token punctuation">,</span> ♠<span class="token number">10</span><span class="token punctuation">,</span> ♣<span class="token class-name">J</span><span class="token punctuation">,</span> ♣<span class="token number">2</span><span class="token punctuation">,</span> ♠<span class="token class-name">A</span><span class="token punctuation">,</span> ♣<span class="token number">8</span><span class="token punctuation">,</span> ♣<span class="token class-name">A</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">Player</span><span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'周润发'</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">,</span> arrayList<span class="token operator">=</span><span class="token punctuation">[</span>♦<span class="token number">6</span><span class="token punctuation">,</span> ♦<span class="token number">4</span><span class="token punctuation">,</span> ♠<span class="token number">5</span><span class="token punctuation">,</span> ♦<span class="token number">9</span><span class="token punctuation">,</span> ♦<span class="token number">5</span><span class="token punctuation">,</span> ♥<span class="token class-name">A</span><span class="token punctuation">,</span> ♦<span class="token number">2</span><span class="token punctuation">,</span> ♣<span class="token number">4</span><span class="token punctuation">,</span> ♥<span class="token number">10</span><span class="token punctuation">,</span> ♣<span class="token number">9</span><span class="token punctuation">,</span> ♥<span class="token number">2</span><span class="token punctuation">,</span> ♦<span class="token number">7</span><span class="token punctuation">,</span> ♣<span class="token number">3</span><span class="token punctuation">,</span> ♠<span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">King</span><span class="token punctuation">,</span> ♠<span class="token number">8</span><span class="token punctuation">,</span> ♣<span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo安装及主题配置</title>
      <link href="2020/09/21/Hexo%E5%AE%89%E8%A3%85%E5%8F%8A%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
      <url>2020/09/21/Hexo%E5%AE%89%E8%A3%85%E5%8F%8A%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>Hexo安装及主题配置</center>---<blockquote><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3></blockquote><p>Hexo+GithubPages的方式配置静态站点还是挺简单的，适合我这种懒人，在本页面记录下，方便以后查看及修改。</p><p>hexo官网：<code>https://hexo.io/zh-cn/</code></p><ol><li><p>安装hexo需要先安装Node.js和Git</p><p>Node.js官网：<code>https://nodejs.org/zh-cn/</code></p><p>Node.js安装教程：<code>https://blog.csdn.net/antma/article/details/86104068</code></p><p>Git官网：<code>https://git-scm.com/</code></p><p>Git安装教程：<code>https://www.jianshu.com/p/414ccd423efc</code></p></li><li><p>此时安装hexo命令：<code> npm install -g hexo-cli</code></p><p>但执行之前最好先切换成淘宝源，以防卡住<code>npm config set registry https://registry.npm.taobao.org</code></p></li></ol><p>更多的信息直接查看Hexo文档就行，这里不过多阐述。</p><p>Git的配置及githubPages的配置等可以查看下面的Hexo配置链接</p><p><code>https://zhuanlan.zhihu.com/p/60578464</code></p><p><code>https://www.jianshu.com/p/51cc016a1933</code></p><p><code>https://blog.csdn.net/sihai12345/article/details/79306483</code></p><p>Hexo主题更换： <code>https://www.jianshu.com/p/9f794db64f42</code></p><blockquote><h3 id="Hexo基础命令"><a href="#Hexo基础命令" class="headerlink" title="Hexo基础命令"></a>Hexo基础命令</h3></blockquote><p>​    hexo  clean         —清除站点缓存</p><p>​    hexo  g                —生成站点信息</p><p>​    hexo  s                —hexo的测试页面</p><p>​    hexo  d                —同步githubPage,上传数据 </p><p>​    hexo  new  “文章名”        —_posts下创建一篇markdown文章</p><p>​    hexo new page  目录名        —在source下创建文件夹</p><blockquote><h3 id="Yun主题"><a href="#Yun主题" class="headerlink" title="Yun主题"></a>Yun主题</h3></blockquote><p>本博客就是采用Yun主题，云游君大佬开发的，膜拜~~</p><p>Yun主题配置页面：<code>https://yun.yunyoujun.cn/</code></p><p>Markdown官网：<code>https://markdown.com.cn/</code></p><ol><li><p>关于Yun主题评论，可以查看这两篇文章</p><p><code>https://developer.aliyun.com/article/659025</code></p><p><code>https://zhuanlan.zhihu.com/p/158120667</code></p></li><li><p>Markdown插入音乐</p><p><code>https://yuanlichenai.cn/2019/03/03/music/</code></p></li><li><p>文章里的图片可以使用免费的CDN预加载</p><p>将图片专门放在github上的库中，通过下面方式引用</p><p><code>https://cdn.jsdelivr.net/gh/你的github用户名/库名/图片.jpg</code></p><p>例如：<code>https://cdn.jsdelivr.net/gh/NicknamedCoco/cdn/img/alipay.jpg</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 静态博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA下载及破解</title>
      <link href="2020/09/21/IDEA%E4%B8%8B%E8%BD%BD%E5%8F%8A%E7%A0%B4%E8%A7%A3/"/>
      <url>2020/09/21/IDEA%E4%B8%8B%E8%BD%BD%E5%8F%8A%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>IDEA下载及破解</center>1. IDEA安装包下载页面<p>   <code>https://www.jetbrains.com/idea/download</code></p><ol start="2"><li><p>搜云库网站有破解IDEA详细操作</p><p><code>https://tech.souyunku.com/?p=16189</code></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安装及配置环境变量</title>
      <link href="2020/09/21/Java%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>2020/09/21/Java%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>Java安装及配置环境变量</center>1. 在`https://www.oracle.com/java/technologies/javase-downloads.html`下载java安装包。2. 因为12版本以后的Jdk没有jre,可以通过命令生成jre文件。打开命令窗口，切换到jdk安装目录   输入命令：`bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre`3. 配置环境变量   创建系统变量，JAVA_HOME，值为jdk的安装路径D:\java   在path中配置%JAVA_HOME%\bin，%JAVA_HOME%\jre\bin]]></content>
      
      
      <categories>
          
          <category> 环境变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
